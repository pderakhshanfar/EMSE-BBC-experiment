/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 15:14:27 GMT 2021
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.math.BigInteger;
import java.sql.Connection;
import java.sql.Statement;
import java.text.DateFormatSymbols;
import java.text.ParsePosition;
import java.time.Clock;
import java.time.Instant;
import java.time.OffsetDateTime;
import java.time.chrono.MinguoEra;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;
import javax.swing.JComboBox;
import javax.swing.JDesktopPane;
import javax.swing.JInternalFrame;
import javax.swing.JLayeredPane;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockOffsetDateTime;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.DefaultKeyedValues;
import org.jfree.data.DomainOrder;
import org.jfree.data.KeyToGroupMap;
import org.jfree.data.KeyedValues;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.event.DatasetChangeListener;
import org.jfree.data.function.Function2D;
import org.jfree.data.function.LineFunction2D;
import org.jfree.data.function.NormalDistributionFunction2D;
import org.jfree.data.function.PolynomialFunction2D;
import org.jfree.data.function.PowerFunction2D;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DatasetUtilities;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.SeriesChangeType;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.pie.DefaultPieDataset;
import org.jfree.data.pie.PieDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.IntervalXYDelegate;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYDatasetTableModel;
import org.jfree.data.xy.XYIntervalSeries;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DatasetUtilities_ESTest extends DatasetUtilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Minute minute0 = new Minute();
      assertNotNull(minute0);
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      timeTableXYDataset0.add((TimePeriod) minute0, (Number) 59, "{k%", false);
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      Stack<Byte> stack0 = new Stack<Byte>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Stack<Byte> stack1 = new Stack<Byte>();
      assertNotNull(stack1);
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertTrue(stack1.equals((Object)stack0));
      
      Stack stack2 = (Stack)stack1.clone();
      assertNotNull(stack2);
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertTrue(stack2.empty());
      assertEquals("[]", stack2.toString());
      assertTrue(stack2.isEmpty());
      assertEquals(0, stack2.capacity());
      assertEquals(0, stack2.size());
      assertTrue(stack1.equals((Object)stack0));
      assertNotSame(stack1, stack0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.validateObject();
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (double) 0);
      assertNotNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(29.5, range0.getCentralValue(), 0.01);
      assertEquals(59.0, range0.getLength(), 0.01);
      assertEquals(59.0, range0.getUpperBound(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, (double) 59);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[][] doubleArray0 = new double[9][4];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-782.9479);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray1[4] = 1708.7577938;
      doubleArray1[5] = (-509.4057290591147);
      doubleArray1[6] = 253.9154510498047;
      doubleArray1[7] = (-656.3782669468);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 1708.7577938;
      doubleArray2[3] = Double.POSITIVE_INFINITY;
      doubleArray2[4] = 253.9154510498047;
      doubleArray2[5] = (-509.4057290591147);
      doubleArray2[6] = (-1.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 253.9154510498047;
      doubleArray3[1] = (-656.3782669468);
      doubleArray3[2] = (-656.3782669468);
      doubleArray3[3] = 0.0;
      doubleArray3[4] = (-509.4057290591147);
      doubleArray3[5] = 466.9502895927077;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (-1.0);
      doubleArray4[1] = Double.POSITIVE_INFINITY;
      doubleArray4[2] = 253.9154510498047;
      doubleArray4[3] = 253.9154510498047;
      doubleArray4[4] = (-1.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = 253.9154510498047;
      doubleArray5[1] = (-2392.104966426507);
      doubleArray5[2] = 1708.7577938;
      doubleArray5[3] = Double.POSITIVE_INFINITY;
      doubleArray5[4] = 253.9154510498047;
      doubleArray5[5] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = (-1.0);
      doubleArray6[1] = (-2392.104966426507);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      
      doubleArray7[0] = 0.0;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = (-3316.284868550567);
      doubleArray7[3] = (-2392.104966426507);
      doubleArray7[4] = 0.0;
      doubleArray7[5] = 1708.7577938;
      doubleArray7[6] = (-656.3782669468);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[0];
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[8];
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      
      doubleArray9[0] = (-656.3782669468);
      doubleArray9[1] = (-2392.104966426507);
      doubleArray9[2] = 0.0;
      doubleArray9[3] = (-656.3782669468);
      doubleArray9[4] = 1708.7577938;
      doubleArray9[5] = (-2392.104966426507);
      doubleArray9[6] = (-2392.104966426507);
      doubleArray9[7] = 253.9154510498047;
      doubleArray0[8] = doubleArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte byte0 = (byte)74;
      Byte byte1 = new Byte((byte)74);
      assertEquals((byte)74, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(byte0));
      
      boolean boolean0 = arrayList0.add(byte1);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(byte0));
      assertTrue(byte1.equals((Object)byte0));
      
      boolean boolean1 = arrayList0.add(byte1);
      assertTrue(boolean1);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(byte0));
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(boolean1 == boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(arrayList0, byte1, byte1);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(byte0));
      assertTrue(byte1.equals((Object)byte0));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      assertNotNull(range0);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(74.0, range0.getUpperBound(), 0.01);
      assertEquals(74.0, range0.getCentralValue(), 0.01);
      assertEquals(74.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(arrayList0.contains(byte0));
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      String string0 = "Series";
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset(connection0, "Series");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Byte byte0 = new Byte((byte)74);
      assertEquals((byte)74, (byte)byte0);
      assertNotNull(byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains((byte)74));
      
      boolean boolean0 = arrayList0.add(byte0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains((byte)74));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(arrayList0, byte0, byte0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains((byte)74));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      assertNotNull(range0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(74.0, range0.getUpperBound(), 0.01);
      assertEquals(74.0, range0.getLowerBound(), 0.01);
      assertEquals(74.0, range0.getCentralValue(), 0.01);
      assertTrue(arrayList0.contains((byte)74));
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertEquals(74.0, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      Stack<Byte> stack0 = new Stack<Byte>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Byte byte0 = new Byte((byte)39);
      assertEquals((byte)39, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = stack0.add(byte0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[39]", stack0.toString());
      assertTrue(stack0.contains(byte0));
      
      double[] doubleArray0 = new double[20];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(byte0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(20, doubleArray0.length);
      
      Range range0 = new Range((byte)39, (byte)39);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(39.0, range0.getLowerBound(), 0.01);
      assertEquals(39.0, range0.getUpperBound(), 0.01);
      assertEquals(39.0, range0.getCentralValue(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, Double.NEGATIVE_INFINITY);
      assertNull(range1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultHighLowDataset0, (byte)39);
      assertNotNull(xYBarDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(39.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(20, doubleArray0.length);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYBarDataset0, (List) stack0, range0, true);
      assertNull(range2);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[39]", stack0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(39.0, range0.getLowerBound(), 0.01);
      assertEquals(39.0, range0.getUpperBound(), 0.01);
      assertEquals(39.0, range0.getCentralValue(), 0.01);
      assertEquals(39.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(20, doubleArray0.length);
      assertTrue(stack0.contains((byte)39));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(week0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(simpleHistogramDataset0);
      assertNull(number0);
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 53, 53);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(53, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(53, slidingCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      Stack<Byte> stack0 = new Stack<Byte>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      Byte byte0 = new Byte((byte)39);
      assertEquals((byte)39, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = stack0.add(byte0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[39]", stack0.toString());
      assertTrue(stack0.contains(byte0));
      
      double[] doubleArray0 = new double[20];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(byte0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(20, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, (List) stack0, true);
      assertNotNull(range0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[39]", stack0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(20, doubleArray0.length);
      assertTrue(stack0.contains(byte0));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, Double.NEGATIVE_INFINITY);
      assertNull(range1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultHighLowDataset0, (byte)39);
      assertNotNull(xYBarDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(39.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(20, doubleArray0.length);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYBarDataset0, (List) stack0, range0, true);
      assertNotNull(range2);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[39]", stack0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(39.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(20, doubleArray0.length);
      assertTrue(stack0.contains(byte0));
      assertFalse(range2.equals((Object)range0));
      assertNotSame(range0, range2);
      assertNotSame(range2, range0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      Stack<Byte> stack0 = new Stack<Byte>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      boolean boolean0 = stack0.removeElement(mockDate0);
      assertFalse(boolean0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Byte byte0 = new Byte((byte)39);
      assertEquals((byte)39, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean1 = stack0.add(byte0);
      assertTrue(boolean1);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[39]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains((byte)39));
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[11];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(byte0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(11, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range0, false);
      assertNotNull(range1);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[39]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(11, doubleArray0.length);
      assertTrue(stack0.contains((byte)39));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range1, true);
      assertNull(range2);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[39]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(11, doubleArray0.length);
      assertTrue(stack0.contains((byte)39));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Stack<Byte> stack0 = new Stack<Byte>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      Byte byte0 = new Byte((byte) (-88));
      assertEquals((byte) (-88), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = stack0.add((Byte) null);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.contains(byte0));
      
      XYDataItem xYDataItem0 = new XYDataItem((-1595.31768), 26.0);
      assertNotNull(xYDataItem0);
      assertEquals(26.0, xYDataItem0.getYValue(), 0.01);
      assertEquals((-1595.31768), xYDataItem0.getXValue(), 0.01);
      
      Date[] dateArray0 = new Date[6];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      dateArray0[5] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)26;
      doubleArray0[1] = 26.0;
      doubleArray0[2] = (double) (byte)26;
      doubleArray0[3] = (double) (byte) (-88);
      doubleArray0[4] = (double) (byte) (-88);
      doubleArray0[5] = 300.0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(xYDataItem0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(26.0, xYDataItem0.getYValue(), 0.01);
      assertEquals((-1595.31768), xYDataItem0.getXValue(), 0.01);
      assertArrayEquals(new double[] {26.0, 26.0, 26.0, (-88.0), (-88.0), 300.0}, doubleArray0, 0.01);
      assertEquals(6, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      
      Object object0 = mockDate0.clone();
      assertNotNull(object0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
      assertTrue(object0.equals((Object)mockDate0));
      assertNotSame(mockDate0, object0);
      assertNotSame(object0, mockDate0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(26.0, xYDataItem0.getYValue(), 0.01);
      assertEquals((-1595.31768), xYDataItem0.getXValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertArrayEquals(new double[] {26.0, 26.0, 26.0, (-88.0), (-88.0), 300.0}, doubleArray0, 0.01);
      assertEquals(6, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range0, true);
      assertNotNull(range1);
      assertEquals(10, stack0.capacity());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(26.0, xYDataItem0.getYValue(), 0.01);
      assertEquals((-1595.31768), xYDataItem0.getXValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals((-88.0), range1.getLowerBound(), 0.01);
      assertEquals(300.0, range1.getUpperBound(), 0.01);
      assertEquals(106.0, range1.getCentralValue(), 0.01);
      assertEquals(388.0, range1.getLength(), 0.01);
      assertArrayEquals(new double[] {26.0, 26.0, 26.0, (-88.0), (-88.0), 300.0}, doubleArray0, 0.01);
      assertEquals(6, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(stack0.contains((byte) (-88)));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      Stack<IntervalXYDelegate> stack0 = new Stack<IntervalXYDelegate>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      boolean boolean0 = stack0.add((IntervalXYDelegate) null);
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(715, (-7));
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-8), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, stack0, true);
      assertNull(range0);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-8), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Byte byte0 = new Byte((byte) (-99));
      assertEquals((byte) (-99), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      boolean boolean0 = arrayList0.add(byte1);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.contains((byte) (-99)));
      assertTrue(arrayList0.contains(byte1));
      assertFalse(byte1.equals((Object)byte0));
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, (-3171));
      assertNotNull(categoryToPieDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-3171), categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) byte1, (KeyedValues) categoryToPieDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Number[][] numberArray0 = new Number[3][6];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = (Number) null;
      numberArray1[1] = (Number) null;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[1];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) null;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[1];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) null;
      numberArray0[2] = numberArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[][] doubleArray0 = new double[13][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(13, doubleArray0.length);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("", 1050, 1);
      assertNotNull(matrixSeries0);
      assertEquals(1050, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1050, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(1050, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1050, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(1050, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1050, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertEquals(1050, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1050, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[][] doubleArray0 = new double[12][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(12, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(12, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(12, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(12, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(12, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(12, doubleArray0.length);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-820.8111375), 1.0);
      assertNotNull(lineFunction2D0);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-820.8111375), lineFunction2D0.getIntercept(), 0.01);
      
      Quarter quarter0 = new Quarter();
      assertNotNull(quarter0);
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      
      Quarter quarter1 = (Quarter)quarter0.previous();
      assertNotNull(quarter1);
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(8056L, quarter1.getSerialIndex());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(2013, quarter1.getYearValue());
      assertEquals(4, quarter1.getQuarter());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertFalse(quarter1.equals((Object)quarter0));
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, (-820.8111375), 1.0, 1085, quarter1);
      assertNotNull(xYSeriesCollection0);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-820.8111375), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(8056L, quarter1.getSerialIndex());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(2013, quarter1.getYearValue());
      assertEquals(4, quarter1.getQuarter());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range1);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-820.8111375), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(8056L, quarter1.getSerialIndex());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(2013, quarter1.getYearValue());
      assertEquals(4, quarter1.getQuarter());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals((-819.8111375), range1.getUpperBound(), 0.01);
      assertEquals((-1230.71670625), range1.getCentralValue(), 0.01);
      assertEquals(821.8111375, range1.getLength(), 0.01);
      assertEquals((-1641.622275), range1.getLowerBound(), 0.01);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertFalse(range1.equals((Object)range0));
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      String string0 = "Wp(ob82Q.o";
      categoryTableXYDataset0.add((-1907.435763), (-1907.435763), "Wp(ob82Q.o");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals((-1907.435763), double0, 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-953.7178815), range0.getCentralValue(), 0.01);
      assertEquals((-1907.435763), range0.getLowerBound(), 0.01);
      assertEquals(1907.435763, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      Number[][] numberArray0 = new Number[3][3];
      Number[] numberArray1 = new Number[5];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte) (-74);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertEquals((byte) (-74), bigInteger0.byteValue());
      assertEquals((short) (-31818), bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte)106, (byte) (-23), (byte) (-127), (byte) (-98), (byte) (-125), (byte) (-74)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      numberArray1[0] = (Number) bigInteger0;
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        yIntervalSeriesCollection0.getY((byte) (-23), (byte)106);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1050.3);
      doubleArray1[1] = (-1433.6637772);
      doubleArray1[2] = (-2123.6232678);
      doubleArray1[3] = (-1797.0065366337);
      doubleArray1[4] = 282.1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1050.3);
      doubleArray2[1] = 282.1;
      doubleArray2[2] = (-1433.6637772);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'rowKey' argument.", "}Lij*5dfT+", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 100);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(100, categoryToPieDataset0.getExtractIndex());
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) 282.1, (KeyedValues) categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 100, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(2375.2056527408295, 2375.2056527408295, "Wp(ob82Q.o");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Object object0 = mockDate0.clone();
      assertNotNull(object0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
      assertTrue(object0.equals((Object)mockDate0));
      assertNotSame(mockDate0, object0);
      assertNotSame(object0, mockDate0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(2375.7056527408295, range0.getUpperBound(), 0.01);
      assertEquals(2375.2056527408295, range0.getCentralValue(), 0.01);
      assertEquals(2374.7056527408295, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) vector0, range0, false);
      assertNull(range1);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(2375.7056527408295, range0.getUpperBound(), 0.01);
      assertEquals(2375.2056527408295, range0.getCentralValue(), 0.01);
      assertEquals(2374.7056527408295, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      
      double[][] doubleArray0 = new double[7][6];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 2375.2056527408295;
      doubleArray1[1] = 2375.2056527408295;
      doubleArray1[2] = 2375.2056527408295;
      doubleArray1[3] = 2375.2056527408295;
      doubleArray1[4] = 2375.2056527408295;
      doubleArray1[5] = 2375.2056527408295;
      doubleArray1[6] = 2375.2056527408295;
      doubleArray1[7] = 2375.2056527408295;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 2375.2056527408295;
      doubleArray3[1] = 2375.2056527408295;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 2375.2056527408295;
      doubleArray4[1] = 2375.2056527408295;
      doubleArray4[2] = 2375.2056527408295;
      doubleArray4[3] = 2375.2056527408295;
      doubleArray4[4] = 2375.2056527408295;
      doubleArray4[5] = 2375.2056527408295;
      doubleArray4[6] = 2375.2056527408295;
      doubleArray4[7] = 2375.2056527408295;
      doubleArray4[8] = 2375.2056527408295;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = 1536.310072;
      doubleArray5[1] = 2375.2056527408295;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      
      doubleArray6[0] = 1021.871;
      doubleArray6[1] = 2375.2056527408295;
      doubleArray6[2] = 2375.2056527408295;
      doubleArray6[3] = 1536.310072;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      
      doubleArray7[0] = 1536.310072;
      doubleArray7[1] = 2375.2056527408295;
      doubleArray7[2] = 1536.310072;
      doubleArray7[3] = 1536.310072;
      doubleArray7[4] = 1536.310072;
      doubleArray0[6] = doubleArray7;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(718.792, (-1671.73262), "Wp(ob82Q.o");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals((-1671.73262), double0, 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 12:44:00 GMT 2990", mockDate0.toString());
      assertEquals(32204781840000L, hour0.getLastMillisecond());
      assertEquals(12, hour0.getHour());
      assertEquals(32204781840000L, hour0.getFirstMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add((double) 23, (double) 23, "");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals(23.0, double0, 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      boolean boolean0 = defaultKeyedValues2DDataset0.equals((Object) null);
      assertFalse(boolean0);
      
      List list0 = defaultKeyedValues2DDataset0.getColumnKeys();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.addValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) list0, true);
      assertNotNull(range0);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(400.0, range0.getUpperBound(), 0.01);
      assertEquals(400.0, range0.getCentralValue(), 0.01);
      assertEquals(400.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultKeyedValues2DDataset0, tableOrder0, (-2548));
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-2548), categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockDate mockDate0 = new MockDate(987, 987, 987, 987, 987);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour();
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Byte byte0 = new Byte((byte) (-89));
      assertEquals((byte) (-89), (byte)byte0);
      assertNotNull(byte0);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(byte0));
      
      boolean boolean0 = vector0.add(byte0);
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals("[-89]", vector0.toString());
      assertTrue(vector0.contains(byte0));
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      Number[][] numberArray0 = new Number[1][6];
      Number[] numberArray1 = new Number[8];
      numberArray1[0] = (Number) byte0;
      numberArray1[1] = (Number) 0;
      numberArray1[2] = (Number) byte0;
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      numberArray1[3] = (Number) integer0;
      numberArray1[4] = (Number) 23;
      numberArray1[5] = (Number) 23;
      numberArray1[6] = (Number) byte0;
      numberArray1[7] = (Number) byte0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Duplicate items in 'rowKeys'.", "Duplicate items in 'rowKeys'.", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 23);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(23, categoryToPieDataset0.getExtractIndex());
      assertEquals(1, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 23, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      Stack<Byte> stack0 = new Stack<Byte>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Stack<Long> stack1 = new Stack<Long>();
      assertNotNull(stack1);
      assertEquals(0, stack1.size());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      
      boolean boolean0 = stack0.retainAll(stack1);
      assertFalse(boolean0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack1.size());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      
      Byte byte0 = new Byte((byte)20);
      assertEquals((byte)20, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean1 = stack0.add(byte0);
      assertTrue(boolean1);
      assertEquals("[20]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(byte0));
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[11];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[2] = (double) (byte)20;
      doubleArray1[5] = (double) (byte)20;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(byte0, dateArray0, doubleArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0, 20.0, 0.0, 0.0, 20.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(11, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 20.0, 0.0, 0.0, 20.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(11, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Stack<Integer> stack2 = new Stack<Integer>();
      assertNotNull(stack2);
      assertEquals("[]", stack2.toString());
      assertEquals(10, stack2.capacity());
      assertEquals(0, stack2.size());
      assertTrue(stack2.isEmpty());
      assertTrue(stack2.empty());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range0, false);
      assertNotNull(range1);
      assertEquals("[20]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 20.0, 0.0, 0.0, 20.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(11, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertTrue(stack0.contains((byte)20));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      boolean boolean2 = DatasetUtilities.isEmptyOrNull((CategoryDataset) jDBCCategoryDataset0);
      assertTrue(boolean2);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range2);
      assertEquals(1.39240928132E12, range2.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range2.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0, 20.0, 0.0, 0.0, 20.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(11, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range2, true);
      assertNotNull(range3);
      assertEquals(1.39240928132E12, range2.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range2.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals("[20]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0, 20.0, 0.0, 0.0, 20.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(11, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertTrue(stack0.contains((byte)20));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Number[][] numberArray0 = new Number[5][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNull(number0);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, numberArray0.length);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("java.lang.Class", 2, 2795);
      assertNotNull(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(5590, matrixSeries0.getItemCount());
      assertEquals(2795, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(5590, matrixSeries0.getItemCount());
      assertEquals(2795, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, true);
      assertNotNull(range0);
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(5590, matrixSeries0.getItemCount());
      assertEquals(2795, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      
      // Undeclared exception!
      DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = 987;
      MockDate mockDate0 = new MockDate(987, 987, 987, 987, 987, 987);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour();
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[][] doubleArray0 = new double[9][9];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1571.704476034863;
      doubleArray1[1] = 1741.0;
      doubleArray1[2] = (-945.539818013896);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1741.0;
      doubleArray2[1] = (-781.471598368);
      doubleArray2[2] = Double.NaN;
      doubleArray2[3] = 1741.0;
      doubleArray2[4] = 1571.704476034863;
      doubleArray2[5] = 1741.0;
      doubleArray2[6] = (-945.539818013896);
      doubleArray2[7] = 3.22011072E13;
      doubleArray2[8] = 1741.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 3.22011072E13;
      doubleArray3[1] = 1571.704476034863;
      doubleArray3[2] = 1571.704476034863;
      doubleArray3[3] = 1741.0;
      doubleArray3[4] = 3.22011072E13;
      doubleArray3[5] = 1571.704476034863;
      doubleArray3[6] = 3.22011072E13;
      doubleArray3[7] = 1741.0;
      doubleArray3[8] = 1571.704476034863;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 1741.0;
      doubleArray4[1] = 3.22011072E13;
      doubleArray4[2] = (-781.471598368);
      doubleArray4[3] = Double.NaN;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = (-781.471598368);
      doubleArray5[1] = (-945.539818013896);
      doubleArray5[2] = 1741.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray6[0] = (-945.539818013896);
      doubleArray6[1] = (-781.471598368);
      doubleArray6[2] = Double.NaN;
      doubleArray6[3] = 3.22011072E13;
      doubleArray6[4] = 1571.704476034863;
      doubleArray6[5] = 3.22011072E13;
      doubleArray6[6] = (-945.539818013896);
      doubleArray6[7] = (-945.539818013896);
      doubleArray6[8] = (-781.471598368);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[0];
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[8];
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      
      doubleArray8[0] = (-945.539818013896);
      doubleArray8[1] = Double.NaN;
      doubleArray8[2] = (-781.471598368);
      doubleArray8[3] = Double.NaN;
      doubleArray8[4] = 1571.704476034863;
      doubleArray8[5] = 1741.0;
      doubleArray8[6] = 1571.704476034863;
      doubleArray8[7] = 3.22011072E13;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[8];
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      
      doubleArray9[0] = (-945.539818013896);
      doubleArray9[1] = 728.0;
      doubleArray9[2] = (-781.471598368);
      doubleArray9[3] = Double.NaN;
      doubleArray9[4] = 3.22011072E13;
      doubleArray9[5] = 3.22011072E13;
      doubleArray9[6] = Double.NaN;
      doubleArray9[7] = (-1275.3511349372318);
      doubleArray0[8] = doubleArray9;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("]}", "]}", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(9, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertNotNull(range0);
      assertEquals((-1275.3511349372318), range0.getLowerBound(), 0.01);
      assertEquals(3.220110720127535E13, range0.getLength(), 0.01);
      assertEquals(1.6100553599362324E13, range0.getCentralValue(), 0.01);
      assertEquals(3.22011072E13, range0.getUpperBound(), 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(2, 728);
      assertNotNull(simpleHistogramBin0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(2.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(728.0, simpleHistogramBin0.getUpperBound(), 0.01);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(simpleHistogramBin0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(2.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(728.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(2.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(728.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(simpleHistogramDataset0);
      assertEquals(728.0, number0);
      assertNotNull(number0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(2.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(728.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      double[] doubleArray0 = new double[2];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Number[][] numberArray0 = new Number[2][5];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[3];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte) (-28);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertEquals((short) (-10524), bigInteger0.shortValue());
      assertEquals((byte) (-28), bigInteger0.byteValue());
      assertArrayEquals(new byte[] {(byte) (-42), (byte) (-28)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      numberArray2[0] = (Number) bigInteger0;
      numberArray2[1] = number0;
      numberArray2[2] = number0;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, numberArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertTrue(boolean0);
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, numberArray0.length);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0, (double) (byte) (-28));
      assertNotNull(range0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals((-28.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-28.0), range0.getUpperBound(), 0.01);
      assertEquals((-28.0), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(2, 728);
      assertNotNull(simpleHistogramBin0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(2.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(728.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(simpleHistogramBin0);
      assertNotNull(simpleHistogramDataset0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(2.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(728.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(2.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(728.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(simpleHistogramDataset0);
      assertEquals(728.0, number0);
      assertNotNull(number0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(2.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(728.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      double[] doubleArray0 = new double[2];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Number[][] numberArray0 = new Number[2][5];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[3];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte) (-28);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertEquals((short) (-10524), bigInteger0.shortValue());
      assertEquals((byte) (-28), bigInteger0.byteValue());
      assertArrayEquals(new byte[] {(byte) (-42), (byte) (-28)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      numberArray2[0] = (Number) bigInteger0;
      numberArray2[1] = number0;
      numberArray2[2] = number0;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, numberArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertTrue(boolean0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, numberArray0.length);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(defaultKeyedValuesDataset0);
      assertNotNull(defaultPieDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Number[][] numberArray0 = new Number[5][2];
      Byte byte0 = new Byte((byte)68);
      assertEquals((byte)68, (byte)byte0);
      assertNotNull(byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains((byte)68));
      
      boolean boolean0 = arrayList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains((byte)68));
      
      LinkedHashSet<YIntervalSeriesCollection> linkedHashSet0 = new LinkedHashSet<YIntervalSeriesCollection>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean1 = arrayList0.containsAll(linkedHashSet0);
      assertTrue(boolean1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(arrayList0.contains((byte)68));
      assertTrue(boolean1 == boolean0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, numberArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNull(range0);
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-2550.7022698744636);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-2550.7022698744636);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2550.7022698744636);
      doubleArray2[1] = 0.0;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      double double0 = new Integer(304);
      assertEquals(304, double0, 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1637), (-1637), (-1637), 509, (-1637));
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour();
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Byte byte0 = new Byte((byte) (-32));
      assertEquals((byte) (-32), (byte)byte0);
      assertNotNull(byte0);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains((byte) (-32)));
      
      boolean boolean0 = vector0.add(byte0);
      assertTrue(boolean0);
      assertEquals("[-32]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.contains((byte) (-32)));
      
      Date[] dateArray0 = new Date[6];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate((-1637), (byte) (-32), 509, 23, 509, 23);
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      dateArray0[2] = (Date) mockDate1;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      MockDate mockDate2 = new MockDate(703, 703, (byte) (-89), 1, (-5311));
      assertNotNull(mockDate2);
      assertFalse(mockDate2.equals((Object)mockDate0));
      assertFalse(mockDate2.equals((Object)mockDate1));
      
      dateArray0[5] = (Date) mockDate2;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (-5311);
      doubleArray0[2] = (double) (-5311);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(hour0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {1.0, (-5311.0), (-5311.0)}, doubleArray0, 0.01);
      assertEquals(6, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, (List) vector0, true);
      assertNotNull(range0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-5.831256342E13), range0.getLowerBound(), 0.01);
      assertEquals((-1.824822324E13), range0.getCentralValue(), 0.01);
      assertEquals(2.181611694E13, range0.getUpperBound(), 0.01);
      assertEquals(8.012868036E13, range0.getLength(), 0.01);
      assertEquals("[-32]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertArrayEquals(new double[] {1.0, (-5311.0), (-5311.0)}, doubleArray0, 0.01);
      assertEquals(6, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertTrue(vector0.contains((byte) (-32)));
      assertFalse(vector0.contains((byte) (-89)));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Number[][] numberArray0 = new Number[5][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(5, numberArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertTrue(boolean0);
      assertEquals(5, numberArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 2);
      assertNotNull(pieDataset0);
      assertEquals(5, numberArray0.length);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(5, numberArray0.length);
      
      System.setCurrentTimeMillis(2);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Number[][] numberArray0 = new Number[5][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNull(number0);
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, numberArray0.length);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNull(number1);
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, numberArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNull(range0);
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NaN, Double.NaN);
      assertNotNull(simpleHistogramBin0);
      assertEquals(Double.NaN, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(simpleHistogramBin0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals(Double.NaN, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertEquals(Double.NaN, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(simpleHistogramDataset0);
      assertNull(number0);
      assertEquals(Double.NaN, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      double[] doubleArray0 = new double[1];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-2549.5783280160117), Double.NaN, 1885, simpleHistogramBin0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 3.2204782844E13;
      doubleArray1[1] = (-1706.970116);
      doubleArray1[2] = (-3381.0);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 1843);
      assertNotNull(categoryToPieDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(1843, categoryToPieDataset0.getExtractIndex());
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Mon May 31 00:00:00 GMT 2990", mockDate0.toString());
      assertEquals(0, hour0.getHour());
      assertEquals(32201107200000L, hour0.getFirstMillisecond());
      assertEquals(32201107200000L, hour0.getLastMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[1];
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = (double) 1004;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(hour0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Mon May 31 00:00:00 GMT 2990", mockDate0.toString());
      assertEquals(0, hour0.getHour());
      assertEquals(32201107200000L, hour0.getFirstMillisecond());
      assertEquals(32201107200000L, hour0.getLastMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(17, doubleArray0.length);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      assertEquals(1004.0, number0);
      assertNotNull(number0);
      assertEquals("Mon May 31 00:00:00 GMT 2990", mockDate0.toString());
      assertEquals(0, hour0.getHour());
      assertEquals(32201107200000L, hour0.getFirstMillisecond());
      assertEquals(32201107200000L, hour0.getLastMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(17, doubleArray0.length);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Number[][] numberArray0 = new Number[0][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      Byte byte0 = new Byte((byte)20);
      assertEquals((byte)20, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = vector0.add(byte0);
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals("[20]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertTrue(vector0.contains(byte0));
      
      double[] doubleArray0 = new double[11];
      doubleArray0[0] = (double) 23;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray0[10] = (double) 23;
      doubleArray1[1] = (double) 1004;
      doubleArray1[2] = (double) (byte)20;
      doubleArray1[3] = (double) (byte)20;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) (byte)20;
      doubleArray1[4] = (double) 23;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(byte0, dateArray0, doubleArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 1004.0, 20.0, 20.0, 23.0, 20.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(11, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertArrayEquals(new double[] {0.0, 1004.0, 20.0, 20.0, 23.0, 20.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(11, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(23));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) vector0, range0, false);
      assertNotNull(range1);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(10, vector0.capacity());
      assertEquals("[20]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertArrayEquals(new double[] {0.0, 1004.0, 20.0, 20.0, 23.0, 20.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(11, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertTrue(vector0.contains(byte0));
      assertFalse(range1.equals((Object)range0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) vector0, range0, true);
      assertNotNull(range2);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(10, vector0.capacity());
      assertEquals("[20]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(23.0, range2.getUpperBound(), 0.01);
      assertEquals(11.5, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(23.0, range2.getLength(), 0.01);
      assertArrayEquals(new double[] {0.0, 1004.0, 20.0, 20.0, 23.0, 20.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(11, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertTrue(vector0.contains(byte0));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      short short0 = (short) (-16297);
      Short short1 = Short.valueOf((short) (-16297));
      assertEquals((short) (-16297), (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(short1);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(short1.equals((Object)short0));
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertTrue(boolean0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(short1.equals((Object)short0));
      
      Vector<TimeSeriesCollection> vector0 = new Vector<TimeSeriesCollection>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      int int0 = defaultMultiValueCategoryDataset0.getRowIndex(short1);
      assertEquals((-1), int0);
      assertTrue(short1.equals((Object)short0));
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      String string0 = "bd\"Ak\\";
      TimeZone timeZone0 = TimeZone.getTimeZone("bd\"Ak");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      boolean boolean1 = vector0.add(timeSeriesCollection0);
      assertTrue(boolean1);
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertTrue(vector0.contains(timeSeriesCollection0));
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) vector0, range0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.TimeSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Mon May 31 00:00:00 GMT 2990", mockDate0.toString());
      assertEquals(0, hour0.getHour());
      assertEquals(32201107200000L, hour0.getFirstMillisecond());
      assertEquals(32201107200000L, hour0.getLastMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[1];
      double[] doubleArray0 = new double[17];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(hour0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Mon May 31 00:00:00 GMT 2990", mockDate0.toString());
      assertEquals(0, hour0.getHour());
      assertEquals(32201107200000L, hour0.getFirstMillisecond());
      assertEquals(32201107200000L, hour0.getLastMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(17, doubleArray0.length);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      defaultCategoryDataset0.addValue((Number) integer1, (Comparable) integer0, (Comparable) integer1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertFalse(boolean0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, 606);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(606, categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) integer1, 0.0, 606);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 606, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      boolean boolean0 = vector0.add((Byte) null);
      assertTrue(boolean0);
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[null]", vector0.toString());
      assertFalse(vector0.isEmpty());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      MatrixSeries matrixSeries0 = new MatrixSeries("", 82, 59);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(82, matrixSeries0.getRowCount());
      assertEquals(4838, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(82, matrixSeries0.getRowCount());
      assertEquals(4838, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(82, matrixSeries0.getRowCount());
      assertEquals(4838, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = vector0.add(byte0);
      assertTrue(boolean0);
      assertEquals("[1]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertTrue(vector0.contains((byte)1));
      
      double[] doubleArray0 = new double[11];
      doubleArray0[0] = (double) 23;
      doubleArray0[1] = (double) 23;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray0[10] = (double) 23;
      doubleArray1[1] = (double) 1004;
      doubleArray1[2] = (double) (byte)1;
      doubleArray1[3] = (double) (byte)1;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) (byte)1;
      doubleArray1[6] = (double) 23;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(byte0, dateArray0, doubleArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 1004.0, 1.0, 1.0, 0.0, 1.0, 23.0}, doubleArray1, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(11, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Range range0 = new Range(23.0, 23.0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(23.0, range0.getUpperBound(), 0.01);
      assertEquals(23.0, range0.getCentralValue(), 0.01);
      assertEquals(23.0, range0.getLowerBound(), 0.01);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(23));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) vector0, range0, false);
      assertNull(range1);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(23.0, range0.getUpperBound(), 0.01);
      assertEquals(23.0, range0.getCentralValue(), 0.01);
      assertEquals(23.0, range0.getLowerBound(), 0.01);
      assertEquals("[1]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertArrayEquals(new double[] {0.0, 1004.0, 1.0, 1.0, 0.0, 1.0, 23.0}, doubleArray1, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(11, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertTrue(vector0.contains((byte)1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Random.setNextRandom(0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of row keys does no match thenumber mf rows in the data array.", "The number of row keys does no match thenumber mf rows in the data array.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, Integer.MAX_VALUE);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(Integer.MAX_VALUE, categoryToPieDataset0.getExtractIndex());
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "The number of row keys does no match thenumber mf rows in the data array.", (double) Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Size: 4
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-2559.9113188402584), 0.0);
      assertNotNull(simpleHistogramBin0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(0.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-2559.9113188402584), simpleHistogramBin0.getLowerBound(), 0.01);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(simpleHistogramBin0);
      assertNotNull(simpleHistogramDataset0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(0.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-2559.9113188402584), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(0.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-2559.9113188402584), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) simpleHistogramDataset0, false);
      assertNotNull(range0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(0.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-2559.9113188402584), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      int int0 = simpleHistogramDataset0.indexOf(simpleHistogramBin0);
      assertEquals(0, int0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(0.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-2559.9113188402584), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Range range1 = Range.combine(range0, range0);
      assertNotNull(range1);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(0.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-2559.9113188402584), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      Range range2 = Range.shift(range0, (-2559.9113188402584));
      assertNotNull(range2);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(0.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-2559.9113188402584), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals((-2559.9113188402584), range2.getLowerBound(), 0.01);
      assertEquals((-2559.9113188402584), range2.getUpperBound(), 0.01);
      assertEquals((-2559.9113188402584), range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertTrue(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) simpleHistogramDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(0.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-2559.9113188402584), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Range range3 = DatasetUtilities.iterateRangeBounds((XYDataset) simpleHistogramDataset0);
      assertNotNull(range3);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(0.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-2559.9113188402584), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      
      Range range4 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, false);
      assertNotNull(range4);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(0.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-2559.9113188402584), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals((-1279.9556594201292), range4.getCentralValue(), 0.01);
      assertEquals((-1279.9556594201292), range4.getLowerBound(), 0.01);
      assertEquals((-1279.9556594201292), range4.getUpperBound(), 0.01);
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range0));
      assertNotSame(range4, range3);
      assertNotSame(range4, range2);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.addValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      defaultKeyedValues2DDataset0.incrementValue((-228.2), integer0, integer0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) integer0);
      assertNotNull(pieDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) integer0, Double.NEGATIVE_INFINITY, 13);
      assertNotNull(pieDataset1);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-2559.9113188402584), 0.0);
      assertNotNull(simpleHistogramBin0);
      assertEquals(0.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-2559.9113188402584), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(simpleHistogramBin0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals(0.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-2559.9113188402584), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertEquals(0.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-2559.9113188402584), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      simpleHistogramBin0.setItemCount(2126221433);
      assertEquals(0.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-2559.9113188402584), simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(2126221433, simpleHistogramBin0.getItemCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) simpleHistogramDataset0, false);
      assertNotNull(range0);
      assertEquals(0.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-2559.9113188402584), simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(2126221433, simpleHistogramBin0.getItemCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(830584.0195914531, range0.getUpperBound(), 0.01);
      assertEquals(830584.0195914531, range0.getLowerBound(), 0.01);
      assertEquals(830584.0195914531, range0.getCentralValue(), 0.01);
      
      Range range1 = Range.combine(range0, range0);
      assertNotNull(range1);
      assertEquals(0.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-2559.9113188402584), simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(2126221433, simpleHistogramBin0.getItemCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(830584.0195914531, range0.getUpperBound(), 0.01);
      assertEquals(830584.0195914531, range0.getLowerBound(), 0.01);
      assertEquals(830584.0195914531, range0.getCentralValue(), 0.01);
      assertEquals(830584.0195914531, range1.getUpperBound(), 0.01);
      assertEquals(830584.0195914531, range1.getCentralValue(), 0.01);
      assertEquals(830584.0195914531, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) simpleHistogramDataset0);
      assertNotNull(range2);
      assertEquals(0.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-2559.9113188402584), simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(2126221433, simpleHistogramBin0.getItemCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(830584.0195914531, range2.getUpperBound(), 0.01);
      assertEquals(830584.0195914531, range2.getCentralValue(), 0.01);
      assertEquals(830584.0195914531, range2.getLowerBound(), 0.01);
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) simpleHistogramDataset0);
      assertEquals(830584.0195914531, number0);
      assertNotNull(number0);
      assertEquals(0.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-2559.9113188402584), simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(2126221433, simpleHistogramBin0.getItemCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Range range3 = DatasetUtilities.iterateRangeBounds((XYDataset) simpleHistogramDataset0);
      assertNotNull(range3);
      assertEquals(0.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-2559.9113188402584), simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(2126221433, simpleHistogramBin0.getItemCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(830584.0195914531, range3.getCentralValue(), 0.01);
      assertEquals(830584.0195914531, range3.getLowerBound(), 0.01);
      assertEquals(830584.0195914531, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range0));
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 2126221433, 1088);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(2126221433, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1088, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Range range4 = DatasetUtilities.iterateRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, false);
      assertNull(range4);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(2126221433, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1088, slidingGanttCategoryDataset0.getMaximumCategoryCount());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(2.0, (double) 1004, "The 'month' argument must be in the range 1 to 12.");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1004.0, range0.getUpperBound(), 0.01);
      assertEquals(502.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1004.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = arrayList0.add(float0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(0.0F));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer0);
      assertNotNull(integer0);
      
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer0, (Comparable) float0, (Comparable) float0);
      Float float1 = new Float((-906.117F));
      assertEquals((-906.117F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      int int0 = 2126221433;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, 2126221433, 2126221433);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(2126221433, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2126221433, slidingCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds(slidingCategoryDataset0, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2126221433, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[9];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      dateArray0[5] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate((-288), 1004, 2, (-288), 191, (-288));
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      dateArray0[6] = (Date) mockDate1;
      dateArray0[7] = (Date) mockDate0;
      dateArray0[8] = (Date) mockDate0;
      double[] doubleArray0 = new double[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(9, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      assertFalse(mockDate0.equals((Object)mockDate1));
      
      Date date0 = defaultHighLowDataset0.getXDate(191, 2);
      assertNotNull(date0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", date0.toString());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(9, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(date0.equals((Object)mockDate1));
      assertSame(mockDate0, date0);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(date0, mockDate1);
      assertSame(date0, mockDate0);
      
      boolean boolean0 = mockDate0.before(date0);
      assertFalse(boolean0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", date0.toString());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(9, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(date0.equals((Object)mockDate1));
      assertSame(mockDate0, date0);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(date0, mockDate1);
      assertSame(date0, mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1004;
      MatrixSeries matrixSeries0 = new MatrixSeries("r$,c\") Fz", 1004, (byte)1);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1004, matrixSeries0.getRowCount());
      assertEquals(1004, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1004, matrixSeries0.getRowCount());
      assertEquals(1004, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(1003.0, number0);
      assertNotNull(number0);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1004, matrixSeries0.getRowCount());
      assertEquals(1004, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1004, matrixSeries0.getRowCount());
      assertEquals(1004, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1003.0, range0.getLength(), 0.01);
      assertEquals(1003.0, range0.getUpperBound(), 0.01);
      assertEquals(501.5, range0.getCentralValue(), 0.01);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(defaultKeyedValues2DDataset0, false);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = vector0.add(byte0);
      assertTrue(boolean0);
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals("[1]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.contains(byte0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 23;
      doubleArray0[1] = (double) 23;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 23;
      doubleArray1[1] = (double) 1004;
      doubleArray1[2] = (double) (byte)1;
      doubleArray1[3] = (double) (byte)1;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) (byte)1;
      doubleArray1[6] = (double) 23;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(byte0, dateArray0, doubleArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {23.0, 23.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {23.0, 1004.0, 1.0, 1.0, 0.0, 1.0, 23.0}, doubleArray1, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(3.2204782844E13, range0.getUpperBound(), 0.01);
      assertEquals(3.2204782844E13, range0.getCentralValue(), 0.01);
      assertEquals(3.2204782844E13, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertArrayEquals(new double[] {23.0, 23.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {23.0, 1004.0, 1.0, 1.0, 0.0, 1.0, 23.0}, doubleArray1, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(23));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) vector0, range0, false);
      assertNotNull(range1);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(3.2204782844E13, range0.getUpperBound(), 0.01);
      assertEquals(3.2204782844E13, range0.getCentralValue(), 0.01);
      assertEquals(3.2204782844E13, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals("[1]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(23.0, range1.getLowerBound(), 0.01);
      assertEquals(23.0, range1.getUpperBound(), 0.01);
      assertEquals(23.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertArrayEquals(new double[] {23.0, 23.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {23.0, 1004.0, 1.0, 1.0, 0.0, 1.0, 23.0}, doubleArray1, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertTrue(vector0.contains((byte)1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-2559.9113188402584), 0.0);
      assertNotNull(simpleHistogramBin0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-2559.9113188402584), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0.0, simpleHistogramBin0.getUpperBound(), 0.01);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(simpleHistogramBin0);
      assertNotNull(simpleHistogramDataset0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-2559.9113188402584), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-2559.9113188402584), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) simpleHistogramDataset0, false);
      assertNotNull(range0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-2559.9113188402584), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) simpleHistogramDataset0);
      assertNotNull(range1);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-2559.9113188402584), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals((-2559.9113188402584), range1.getLowerBound(), 0.01);
      assertEquals((-1279.9556594201292), range1.getCentralValue(), 0.01);
      assertEquals(2559.9113188402584, range1.getLength(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      ArrayList<Locale> arrayList0 = new ArrayList<Locale>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) arrayList0, false);
      assertNull(range2);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range3 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0);
      assertNotNull(range3);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-2559.9113188402584), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(2559.9113188402584, range3.getLength(), 0.01);
      assertEquals((-1279.9556594201292), range3.getCentralValue(), 0.01);
      assertEquals((-2559.9113188402584), range3.getLowerBound(), 0.01);
      assertFalse(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range1));
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) integer0);
      assertNotNull(defaultPieDataset0);
      
      defaultPieDataset0.insertValue(0, (Comparable) integer0, (Number) integer0);
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to org.jfree.data.SelectableValue
         //
         verifyException("org.jfree.data.pie.DefaultPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      defaultCategoryDataset0.addValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (Comparable) integer0);
      assertNotNull(pieDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) integer0, 832.8615439463, 100);
      assertNotNull(pieDataset1);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(100.0, range0.getLength(), 0.01);
      assertEquals(50.0, range0.getCentralValue(), 0.01);
      assertEquals(100.0, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(100.0, range1.getLength(), 0.01);
      assertEquals(100.0, range1.getUpperBound(), 0.01);
      assertEquals(50.0, range1.getCentralValue(), 0.01);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertEquals(100.0, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getColumnKeys();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      
      defaultCategoryDataset0.addValue((Number) null, (Comparable) integer1, (Comparable) integer0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (Comparable) integer0);
      assertNotNull(pieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) integer0, 1579.03, 2655);
      assertNotNull(pieDataset1);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Mon May 31 00:00:00 GMT 2990", mockDate0.toString());
      assertEquals(0, hour0.getHour());
      assertEquals(32201107200000L, hour0.getFirstMillisecond());
      assertEquals(32201107200000L, hour0.getLastMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Byte byte0 = new Byte((byte) (-89));
      assertEquals((byte) (-89), (byte)byte0);
      assertNotNull(byte0);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(byte0));
      
      boolean boolean0 = vector0.add(byte0);
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals("[-89]", vector0.toString());
      assertTrue(vector0.contains(byte0));
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(byte0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, (List) vector0, false);
      assertNotNull(range0);
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals("[-89]", vector0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(3.22011072E13, range0.getLowerBound(), 0.01);
      assertEquals(3.22011072E13, range0.getUpperBound(), 0.01);
      assertEquals(3.22011072E13, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      assertTrue(vector0.contains(byte0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[1];
      Instant instant0 = mockDate0.toInstant();
      assertNotNull(instant0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 23;
      doubleArray0[1] = (double) 23;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1004;
      doubleArray0[4] = (double) 1004;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 1571.704476034863;
      doubleArray0[7] = (double) 1004;
      doubleArray0[8] = (double) 1004;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(instant0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {23.0, 23.0, 0.0, 1004.0, 1004.0, 0.0, 1571.704476034863, 1004.0, 1004.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(1004.0);
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) simpleHistogramDataset0);
      assertNull(number0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) simpleHistogramDataset0);
      assertNull(range0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      double[][] doubleArray1 = new double[1][2];
      doubleArray1[0] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Duplicate items in 'columnKeys'.", "Duplicate items in 'columnKeys'.", doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray1.length);
      
      Number number1 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(1571.704476034863, number1);
      assertNotNull(number1);
      assertEquals(1, doubleArray1.length);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 994);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(994, categoryToPieDataset0.getExtractIndex());
      assertEquals(1, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 994, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Mon May 31 00:00:00 GMT 2990", mockDate0.toString());
      assertEquals(0, hour0.getHour());
      assertEquals(32201107200000L, hour0.getFirstMillisecond());
      assertEquals(32201107200000L, hour0.getLastMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Date[] dateArray0 = new Date[7];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      dateArray0[5] = (Date) mockDate0;
      dateArray0[6] = (Date) mockDate0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (byte)1;
      doubleArray0[2] = (double) (byte) (-3);
      doubleArray0[3] = (double) (byte)1;
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(1004));
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(Double.NEGATIVE_INFINITY, (-3.0));
      assertNotNull(powerFunction2D0);
      assertEquals(Double.NEGATIVE_INFINITY, powerFunction2D0.getA(), 0.01);
      assertEquals((-3.0), powerFunction2D0.getB(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, 2.0, 905.458123165, 1004, 1.0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(Double.NEGATIVE_INFINITY, powerFunction2D0.getA(), 0.01);
      assertEquals((-3.0), powerFunction2D0.getB(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(xYSeriesCollection0);
      assertNotNull(range0);
      assertEquals(Double.NEGATIVE_INFINITY, powerFunction2D0.getA(), 0.01);
      assertEquals((-3.0), powerFunction2D0.getB(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = vector0.add(byte0);
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals("[1]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertTrue(vector0.contains((byte)1));
      
      double[] doubleArray0 = new double[8];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(hour0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(3.2204782844E13, range0.getUpperBound(), 0.01);
      assertEquals(3.2204782844E13, range0.getCentralValue(), 0.01);
      assertEquals(3.2204782844E13, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(1004));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) vector0, range0, true);
      assertNotNull(range1);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals("[1]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(3.2204782844E13, range0.getUpperBound(), 0.01);
      assertEquals(3.2204782844E13, range0.getCentralValue(), 0.01);
      assertEquals(3.2204782844E13, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertTrue(vector0.contains((byte)1));
      assertFalse(range1.equals((Object)range0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(mockDate0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      simpleHistogramDataset0.fireSelectionEvent();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      SimpleHistogramDataset simpleHistogramDataset1 = (SimpleHistogramDataset)simpleHistogramDataset0.clone();
      assertNotNull(simpleHistogramDataset1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      
      Float float0 = new Float((-2804.244856847));
      assertEquals((-2804.2449F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(float0));
      
      Instant instant0 = mockDate0.toInstant();
      assertNotNull(instant0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      boolean boolean0 = arrayList0.add(float0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(float0));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer0);
      assertNotNull(integer0);
      
      defaultStatisticalCategoryDataset0.add((Number) float0, (Number) integer0, (Comparable) float0, (Comparable) mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Float float1 = new Float((-3129.682F));
      assertEquals((-3129.682F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      defaultStatisticalCategoryDataset0.add((Number) float1, (Number) float1, (Comparable) float1, (Comparable) integer0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      assertNotNull(range0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2804.244873046875), range0.getUpperBound(), 0.01);
      assertEquals((-2804.244873046875), range0.getCentralValue(), 0.01);
      assertEquals((-2804.244873046875), range0.getLowerBound(), 0.01);
      assertFalse(arrayList0.contains((-3129.682F)));
      assertTrue(arrayList0.contains(float0));
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      assertNotNull(range1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals((-2804.244873046875), range1.getLowerBound(), 0.01);
      assertEquals((-2804.244873046875), range1.getUpperBound(), 0.01);
      assertEquals((-2804.244873046875), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(arrayList0.contains((-3129.682F)));
      assertTrue(arrayList0.contains(float0));
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Random.setNextRandom((-679));
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) integer0);
      assertNotNull(pieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(integer0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      boolean boolean2 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertTrue(boolean2);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Vector<TimeSeriesCollection> vector0 = new Vector<TimeSeriesCollection>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) vector0, range0, true);
      assertNull(range1);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, true);
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 1004;
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      mockDate0.setTime(1004);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1004;
      doubleArray0[2] = (double) 1004;
      long long0 = mockDate0.getTime();
      assertEquals(1004L, long0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      
      double[][] doubleArray1 = new double[3][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) dateArray0, (Comparable[]) null, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'columnKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Week week0 = new Week(7556, 7556);
      assertNotNull(week0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7556, week0.getYearValue());
      assertEquals((-124), week0.getWeek());
      assertEquals(400344L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(week0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7556, week0.getYearValue());
      assertEquals((-124), week0.getWeek());
      assertEquals(400344L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(11.0, 7556, true, true);
      assertNotNull(simpleHistogramBin0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(7556.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7556, week0.getYearValue());
      assertEquals((-124), week0.getWeek());
      assertEquals(400344L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(7556.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(simpleHistogramDataset0);
      assertEquals(7556.0, number0);
      assertNotNull(number0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7556, week0.getYearValue());
      assertEquals((-124), week0.getWeek());
      assertEquals(400344L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 11.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {11.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-2.147483648E9), (-221.25), 53, week0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7556, week0.getYearValue());
      assertEquals((-124), week0.getWeek());
      assertEquals(400344L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertArrayEquals(new double[] {11.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(xYSeriesCollection0);
      assertNotNull(range0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7556, week0.getYearValue());
      assertEquals((-124), week0.getWeek());
      assertEquals(400344L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(11.0, range0.getUpperBound(), 0.01);
      assertEquals(11.0, range0.getLowerBound(), 0.01);
      assertEquals(11.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertArrayEquals(new double[] {11.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(week0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      String string0 = week0.toString();
      assertEquals("Week 7, 2014", string0);
      assertNotNull(string0);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      Year year0 = week0.getYear();
      assertNotNull(year0);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) simpleHistogramDataset0);
      assertTrue(boolean0);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) simpleHistogramDataset0, true);
      assertNull(range0);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      Byte byte0 = new Byte((byte) (-89));
      assertEquals((byte) (-89), (byte)byte0);
      assertNotNull(byte0);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains((byte) (-89)));
      
      boolean boolean0 = vector0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[-89]", vector0.toString());
      assertTrue(vector0.contains((byte) (-89)));
      
      double[] doubleArray0 = new double[8];
      doubleArray0[6] = (double) (byte) (-89);
      doubleArray0[1] = (double) 1004;
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) vector0, true);
      assertNull(range0);
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[-89]", vector0.toString());
      assertTrue(vector0.contains(byte0));
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNull(range1);
      
      Comparable<String>[] comparableArray0 = (Comparable<String>[]) Array.newInstance(Comparable.class, 5);
      comparableArray0[0] = (Comparable<String>) hour0;
      Day day0 = new Day(dateArray0[0]);
      assertNotNull(day0);
      assertEquals(32204782844000L, day0.getLastMillisecond());
      assertEquals(32204782844000L, day0.getFirstMillisecond());
      assertEquals(1, dateArray0.length);
      
      comparableArray0[1] = (Comparable<String>) day0;
      comparableArray0[2] = (Comparable<String>) hour0;
      comparableArray0[3] = (Comparable<String>) hour0;
      comparableArray0[4] = (Comparable<String>) hour0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(comparableArray0, comparableArray0, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, comparableArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-26), (-26), 203, (-26), (-26), (-26));
      assertNotNull(mockDate0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      assertNotNull(date0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      boolean boolean0 = mockDate0.before(date0);
      assertTrue(boolean0);
      assertEquals("Sun May 19 21:33:34 GMT 1872", mockDate0.toString());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-26);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Sun May 19 21:33:34 GMT 1872", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {(-26.0)}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(1, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      assertEquals((-26.0), number0);
      assertNotNull(number0);
      assertEquals("Sun May 19 21:33:34 GMT 1872", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {(-26.0)}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertEquals("Sun May 19 21:33:34 GMT 1872", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-3.080514386E12), range0.getUpperBound(), 0.01);
      assertEquals((-3.080514386E12), range0.getCentralValue(), 0.01);
      assertEquals((-3.080514386E12), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertArrayEquals(new double[] {(-26.0)}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(1, doubleArray0.length);
      
      double[][] doubleArray1 = new double[9][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) (-26);
      doubleArray2[1] = (double) (-26);
      doubleArray2[2] = (double) 203;
      doubleArray2[3] = (double) 203;
      doubleArray2[4] = (double) 203;
      doubleArray1[8] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, doubleArray1.length);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertNotNull(range1);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-26.0), range1.getLowerBound(), 0.01);
      assertEquals((-26.0), range1.getUpperBound(), 0.01);
      assertEquals((-26.0), range1.getCentralValue(), 0.01);
      assertEquals(9, doubleArray1.length);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range2);
      assertEquals("Sun May 19 21:33:34 GMT 1872", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-3.080514386E12), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-3.080514386E12), range2.getUpperBound(), 0.01);
      assertEquals((-3.080514386E12), range2.getCentralValue(), 0.01);
      assertArrayEquals(new double[] {(-26.0)}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      
      Range range3 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, false);
      assertNotNull(range3);
      assertEquals("Sun May 19 21:33:34 GMT 1872", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals((-3.080514386E12), range3.getUpperBound(), 0.01);
      assertEquals((-3.080514386E12), range3.getCentralValue(), 0.01);
      assertEquals((-3.080514386E12), range3.getLowerBound(), 0.01);
      assertArrayEquals(new double[] {(-26.0)}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-26), (-26), 203, (-26), (-26), (-26));
      assertNotNull(mockDate0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      assertNotNull(date0);
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      boolean boolean0 = mockDate0.before(date0);
      assertTrue(boolean0);
      assertEquals("Sun May 19 21:33:34 GMT 1872", mockDate0.toString());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-26);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Sun May 19 21:33:34 GMT 1872", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {(-26.0)}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(1, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      assertEquals((-26.0), number0);
      assertNotNull(number0);
      assertEquals("Sun May 19 21:33:34 GMT 1872", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {(-26.0)}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertEquals("Sun May 19 21:33:34 GMT 1872", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-3.080514386E12), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-3.080514386E12), range0.getUpperBound(), 0.01);
      assertEquals((-3.080514386E12), range0.getCentralValue(), 0.01);
      assertArrayEquals(new double[] {(-26.0)}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(1, doubleArray0.length);
      
      double[][] doubleArray1 = new double[5][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, doubleArray1.length);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range1);
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-26.0), range1.getUpperBound(), 0.01);
      assertEquals((-26.0), range1.getCentralValue(), 0.01);
      assertEquals((-26.0), range1.getLowerBound(), 0.01);
      assertEquals(5, doubleArray1.length);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertNotNull(range2);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(mockDate0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      simpleHistogramDataset0.fireSelectionEvent();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      SimpleHistogramDataset simpleHistogramDataset1 = (SimpleHistogramDataset)simpleHistogramDataset0.clone();
      assertNotNull(simpleHistogramDataset1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertTrue(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      
      Float float0 = new Float((-2804.244856847));
      assertEquals((-2804.2449F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(float0));
      
      boolean boolean0 = arrayList0.add(float0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(float0));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer0);
      assertNotNull(integer0);
      
      defaultStatisticalCategoryDataset0.add((Number) float0, (Number) integer0, (Comparable) float0, (Comparable) mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) simpleHistogramDataset1);
      assertNull(range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertTrue(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertTrue(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(integer0));
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(range1);
      assertEquals((-3004.244873046875), range1.getLowerBound(), 0.01);
      assertEquals((-2604.244873046875), range1.getUpperBound(), 0.01);
      assertEquals((-2804.244873046875), range1.getCentralValue(), 0.01);
      assertEquals(400.0, range1.getLength(), 0.01);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) simpleHistogramDataset0, (List) stack0, range1, false);
      assertNull(range2);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals((-3004.244873046875), range1.getLowerBound(), 0.01);
      assertEquals((-2604.244873046875), range1.getUpperBound(), 0.01);
      assertEquals((-2804.244873046875), range1.getCentralValue(), 0.01);
      assertEquals(400.0, range1.getLength(), 0.01);
      assertFalse(stack0.contains(integer0));
      assertTrue(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range3 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, keyToGroupMap0);
      assertNotNull(range3);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals((-1402.1224365234375), range3.getCentralValue(), 0.01);
      assertEquals((-2804.244873046875), range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(2804.244873046875, range3.getLength(), 0.01);
      assertFalse(range3.equals((Object)range1));
      assertNotSame(range3, range1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      Byte byte0 = new Byte((byte) (-89));
      assertEquals((byte) (-89), (byte)byte0);
      assertNotNull(byte0);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(byte0));
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(1004, 622.91374261);
      assertNotNull(lineFunction2D0);
      assertEquals(1004.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(622.91374261, lineFunction2D0.getSlope(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-862.3777068), 0, 23, hour0);
      assertNotNull(xYSeries0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(1004.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(622.91374261, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-1.1368683772161603E-13), xYSeries0.getMaxX(), 0.01);
      assertEquals((-536182.9248862172), xYSeries0.getMinY(), 0.01);
      assertEquals((-862.3777068), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(23, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1003.9999999999292, xYSeries0.getMaxY(), 0.01);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      // Undeclared exception!
      try { 
        xYSeries0.createCopy((byte) (-89), (-7));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getColumnKeys();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      defaultCategoryDataset0.addValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      boolean boolean0 = true;
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) list0, true);
      assertNotNull(range1);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      MockDate mockDate0 = new MockDate(20, 274, 274);
      assertNotNull(mockDate0);
      
      Second second0 = new Second(mockDate0);
      assertNotNull(second0);
      assertEquals("Sun Aug 01 00:00:00 GMT 1943", mockDate0.toString());
      assertEquals((-833760000000L), second0.getFirstMillisecond());
      assertEquals((-833759999001L), second0.getLastMillisecond());
      assertEquals(0, second0.getSecond());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 20, second0);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals("Sun Aug 01 00:00:00 GMT 1943", mockDate0.toString());
      assertEquals((-833760000000L), second0.getFirstMillisecond());
      assertEquals((-833759999001L), second0.getLastMillisecond());
      assertEquals(0, second0.getSecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(19, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) list0, range0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Hour hour1 = Hour.parseHour("");
      assertNull(hour1);
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      Byte byte0 = new Byte((byte) (-89));
      assertEquals((byte) (-89), (byte)byte0);
      assertNotNull(byte0);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains(byte0));
      
      boolean boolean0 = vector0.add(byte0);
      assertTrue(boolean0);
      assertEquals("[-89]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertTrue(vector0.contains(byte0));
      
      double[] doubleArray0 = new double[8];
      doubleArray0[6] = (double) (byte) (-89);
      doubleArray0[1] = (double) 1004;
      doubleArray0[2] = (double) (byte) (-89);
      doubleArray0[4] = (double) (byte) (-89);
      doubleArray0[4] = (double) 23;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(hour0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 1004.0, (-89.0), 0.0, 23.0, 0.0, (-89.0), 0.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, (List) vector0, true);
      assertNotNull(range0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals("[-89]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(3.2204782844E13, range0.getLowerBound(), 0.01);
      assertEquals(3.2204782844E13, range0.getUpperBound(), 0.01);
      assertEquals(3.2204782844E13, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertArrayEquals(new double[] {0.0, 1004.0, (-89.0), 0.0, 23.0, 0.0, (-89.0), 0.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertTrue(vector0.contains((byte) (-89)));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotNull(range1);
      assertEquals(3.2204782844E13, range1.getLowerBound(), 0.01);
      assertEquals(3.2204782844E13, range1.getUpperBound(), 0.01);
      assertEquals(3.2204782844E13, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 1004.0, (-89.0), 0.0, 23.0, 0.0, (-89.0), 0.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertTrue(range1.equals((Object)range0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(range1, range0);
      
      double[][] doubleArray1 = new double[3][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", (String) null, doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray1.length);
      
      Range range2 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotNull(range2);
      assertEquals((-89.0), range2.getLowerBound(), 0.01);
      assertEquals(1004.0, range2.getUpperBound(), 0.01);
      assertEquals(457.5, range2.getCentralValue(), 0.01);
      assertEquals(1093.0, range2.getLength(), 0.01);
      assertEquals(3, doubleArray1.length);
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(mockDate0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      simpleHistogramDataset0.fireSelectionEvent();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      SimpleHistogramDataset simpleHistogramDataset1 = (SimpleHistogramDataset)simpleHistogramDataset0.clone();
      assertNotNull(simpleHistogramDataset1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertTrue(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      
      Float float0 = new Float((-2804.244856847));
      assertEquals((-2804.2449F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(float0));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer0);
      assertNotNull(integer0);
      
      defaultStatisticalCategoryDataset0.add((Number) float0, (Number) integer0, (Comparable) float0, (Comparable) mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Date[] dateArray0 = new Date[2];
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(float0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      int int0 = timeTableXYDataset0.indexOf((Comparable) null);
      assertEquals((-1), int0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeTableXYDataset0);
      assertTrue(boolean0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Minute minute0 = new Minute();
      assertNotNull(minute0);
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      timeTableXYDataset0.add((TimePeriod) minute0, (Number) 0, "k%", true);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      
      boolean boolean1 = vector0.add((Byte) null);
      assertTrue(boolean1);
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[null]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertTrue(boolean1 == boolean0);
      
      Byte byte0 = new Byte((byte) (-73));
      assertEquals((byte) (-73), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean2 = vector0.add(byte0);
      assertTrue(boolean2);
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(2, vector0.size());
      assertEquals("[null, -73]", vector0.toString());
      assertTrue(vector0.contains((byte) (-73)));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Vector vector1 = (Vector)vector0.clone();
      assertNotNull(vector1);
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(2, vector0.size());
      assertEquals("[null, -73]", vector0.toString());
      assertFalse(vector1.isEmpty());
      assertEquals(2, vector1.size());
      assertEquals("[null, -73]", vector1.toString());
      assertEquals(2, vector1.capacity());
      assertTrue(vector0.contains((byte) (-73)));
      
      boolean boolean3 = vector0.add(byte0);
      assertTrue(boolean3);
      assertEquals("[null, -73, -73]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(3, vector0.size());
      assertTrue(vector0.contains((byte) (-73)));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      Range range0 = timeTableXYDataset0.getDomainBounds(true);
      assertNotNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.validateObject();
      boolean boolean4 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) vector1, range0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Minute minute0 = new Minute();
      assertNotNull(minute0);
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      Byte byte0 = new Byte((byte) (-73));
      assertEquals((byte) (-73), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = vector0.add(byte0);
      assertTrue(boolean0);
      assertFalse(vector0.isEmpty());
      assertEquals("[-73]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertTrue(vector0.contains(byte0));
      
      Vector vector1 = (Vector)vector0.clone();
      assertNotNull(vector1);
      assertFalse(vector0.isEmpty());
      assertEquals("[-73]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals(1, vector1.size());
      assertFalse(vector1.isEmpty());
      assertEquals(1, vector1.capacity());
      assertEquals("[-73]", vector1.toString());
      assertTrue(vector0.contains(byte0));
      
      boolean boolean1 = vector0.add(byte0);
      assertTrue(boolean1);
      assertFalse(vector0.isEmpty());
      assertEquals("[-73, -73]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertTrue(vector0.contains(byte0));
      assertTrue(boolean1 == boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      List list0 = defaultMultiValueCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      defaultMultiValueCategoryDataset0.validateObject();
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(Double.NEGATIVE_INFINITY, (-1261.076662));
      assertNotNull(lineFunction2D0);
      assertEquals(Double.NEGATIVE_INFINITY, lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-1261.076662), lineFunction2D0.getSlope(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, Double.NEGATIVE_INFINITY, 6.283185307179586, 100, byte0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(Double.NEGATIVE_INFINITY, lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-1261.076662), lineFunction2D0.getSlope(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) vector0, true);
      assertNull(range0);
      assertFalse(vector0.isEmpty());
      assertEquals("[-73, -73]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertEquals(Double.NEGATIVE_INFINITY, lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-1261.076662), lineFunction2D0.getSlope(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertTrue(vector0.contains(byte0));
      
      Double double0 = (Double)DatasetUtilities.findMinimumDomainValue(xYSeriesCollection0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(Double.NEGATIVE_INFINITY, lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-1261.076662), lineFunction2D0.getSlope(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(2, doubleArray0.length);
      
      MockDate mockDate0 = new MockDate(1873, 1873, 1873);
      assertNotNull(mockDate0);
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      assertNotNull(simpleTimePeriod0);
      assertEquals("Mon Mar 19 00:00:00 GMT 3934", mockDate0.toString());
      assertEquals(61984483200000L, simpleTimePeriod0.getEndMillis());
      assertEquals(61984483200000L, simpleTimePeriod0.getStartMillis());
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(simpleTimePeriod0, (OHLCDataItem[]) null);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Mon Mar 19 00:00:00 GMT 3934", mockDate0.toString());
      assertEquals(61984483200000L, simpleTimePeriod0.getEndMillis());
      assertEquals(61984483200000L, simpleTimePeriod0.getStartMillis());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      MockDate mockDate0 = new MockDate((-1L));
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(23, hour0.getHour());
      assertEquals((-1L), hour0.getFirstMillisecond());
      assertEquals((-1L), hour0.getLastMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Byte byte0 = new Byte((byte) (-89));
      assertEquals((byte) (-89), (byte)byte0);
      assertNotNull(byte0);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains((byte) (-89)));
      
      boolean boolean0 = vector0.add(byte0);
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals("[-89]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertTrue(vector0.contains((byte) (-89)));
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) 53;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 23;
      doubleArray0[4] = 288.8581;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = 1.7976931348623157E308;
      doubleArray0[7] = (double) 53;
      doubleArray0[8] = (double) 23;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2416.0);
      doubleArray1[1] = (double) (byte) (-89);
      doubleArray1[2] = 1.7976931348623157E308;
      doubleArray1[3] = (double) (byte) (-89);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(week0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {(-2416.0), (-89.0), 1.7976931348623157E308, (-89.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), 53.0, 1.0, 23.0, 288.8581, 1.0, 1.7976931348623157E308, 53.0, 23.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(2, dateArray0.length);
      assertEquals(10, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, (List) vector0, true);
      assertNotNull(range0);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(10, vector0.capacity());
      assertEquals("[-89]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertArrayEquals(new double[] {(-2416.0), (-89.0), 1.7976931348623157E308, (-89.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), 53.0, 1.0, 23.0, 288.8581, 1.0, 1.7976931348623157E308, 53.0, 23.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(2, dateArray0.length);
      assertEquals(10, doubleArray0.length);
      assertTrue(vector0.contains((byte) (-89)));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-19), (-19), 203, (-19), (-19), (-19));
      assertNotNull(mockDate0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      assertNotNull(date0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      boolean boolean0 = mockDate0.before(date0);
      assertTrue(boolean0);
      assertEquals("Fri Dec 19 04:40:41 GMT 1879", mockDate0.toString());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-19);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Fri Dec 19 04:40:41 GMT 1879", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {(-19.0)}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertEquals("Fri Dec 19 04:40:41 GMT 1879", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-2.841247159E12), range0.getUpperBound(), 0.01);
      assertEquals((-2.841247159E12), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2.841247159E12), range0.getLowerBound(), 0.01);
      assertArrayEquals(new double[] {(-19.0)}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(1, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      assertEquals((-19.0), number0);
      assertNotNull(number0);
      assertEquals("Fri Dec 19 04:40:41 GMT 1879", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {(-19.0)}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(1, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range1);
      assertEquals("Fri Dec 19 04:40:41 GMT 1879", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-2.841247159E12), range1.getLowerBound(), 0.01);
      assertEquals((-2.841247159E12), range1.getUpperBound(), 0.01);
      assertEquals((-2.841247159E12), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertArrayEquals(new double[] {(-19.0)}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(1, doubleArray0.length);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(11, 728);
      assertNotNull(simpleHistogramBin0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(728.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(simpleHistogramBin0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(728.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(728.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) simpleHistogramDataset0);
      assertNotNull(range0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(728.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(369.5, range0.getCentralValue(), 0.01);
      assertEquals(11.0, range0.getLowerBound(), 0.01);
      assertEquals(717.0, range0.getLength(), 0.01);
      assertEquals(728.0, range0.getUpperBound(), 0.01);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(11));
      
      Stack<DefaultTableXYDataset> stack1 = new Stack<DefaultTableXYDataset>();
      assertNotNull(stack1);
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) simpleHistogramDataset0, (List) stack1, range0, false);
      assertNull(range1);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(728.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(369.5, range0.getCentralValue(), 0.01);
      assertEquals(11.0, range0.getLowerBound(), 0.01);
      assertEquals(717.0, range0.getLength(), 0.01);
      assertEquals(728.0, range0.getUpperBound(), 0.01);
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) simpleHistogramDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(728.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0);
      assertNotNull(range2);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(728.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(728.0, range2.getUpperBound(), 0.01);
      assertEquals(11.0, range2.getLowerBound(), 0.01);
      assertEquals(717.0, range2.getLength(), 0.01);
      assertEquals(369.5, range2.getCentralValue(), 0.01);
      assertTrue(range2.equals((Object)range0));
      assertNotSame(range2, range0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add((double) (-3), 2003.83, "");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-3));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-603.579434);
      doubleArray1[1] = (-394.9779746236745);
      doubleArray1[2] = 200.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-603.579434);
      doubleArray2[1] = (-394.9779746236745);
      doubleArray2[2] = 200.0;
      doubleArray2[3] = (-603.579434);
      doubleArray2[4] = 200.0;
      doubleArray2[5] = 200.0;
      doubleArray2[6] = (-603.579434);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 200.0;
      doubleArray3[1] = (-394.9779746236745);
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(mockDate0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      simpleHistogramDataset0.fireSelectionEvent();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      SimpleHistogramDataset simpleHistogramDataset1 = (SimpleHistogramDataset)simpleHistogramDataset0.clone();
      assertNotNull(simpleHistogramDataset1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      
      Float float0 = new Float((-2818.4993837073125));
      assertEquals((-2818.4993F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(float0));
      
      boolean boolean0 = arrayList0.add(float0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(float0));
      
      Instant instant0 = mockDate0.toInstant();
      assertNotNull(instant0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer0);
      assertNotNull(integer0);
      
      defaultStatisticalCategoryDataset0.add((Number) float0, (Number) integer0, (Comparable) float0, (Comparable) mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      float float1 = (-3129.682F);
      Float float2 = new Float((-3129.682F));
      assertEquals((-3129.682F), (float)float2, 0.01F);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      defaultStatisticalCategoryDataset0.add((Number) float2, (Number) float2, (Comparable) float2, (Comparable) integer0);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      SimpleHistogramDataset simpleHistogramDataset2 = new SimpleHistogramDataset(float0);
      assertNotNull(simpleHistogramDataset2);
      assertTrue(simpleHistogramDataset2.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset2.getSeriesCount());
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertFalse(simpleHistogramDataset2.equals((Object)simpleHistogramDataset0));
      assertFalse(simpleHistogramDataset2.equals((Object)simpleHistogramDataset1));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      assertNotNull(range0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-2818.499267578125), range0.getCentralValue(), 0.01);
      assertEquals((-2818.499267578125), range0.getUpperBound(), 0.01);
      assertEquals((-2818.499267578125), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(arrayList0.contains(float2));
      assertTrue(arrayList0.contains(float0));
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(defaultStatisticalCategoryDataset0);
      assertNotNull(range1);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(3129.681884765625, range1.getLength(), 0.01);
      assertEquals((-3129.681884765625), range1.getLowerBound(), 0.01);
      assertEquals((-1564.8409423828125), range1.getCentralValue(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) float2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      
      Day day0 = new Day();
      assertNotNull(day0);
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) week0, (KeyedValues) defaultKeyedValues0);
      assertNotNull(categoryDataset0);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      MockDate mockDate0 = new MockDate(1, (-236), 53, 53, 53);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-158.182400125), (-1695.2321), 1150.255730649, (-2549.5783280160117), 2.5659277029E13);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Jun 24 05:53:00 GMT 1881", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 53, (-981.040657), 2.5659277029E13, (-3.5679473512781), (-981.040657));
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Jun 24 05:53:00 GMT 1881", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-236), (-981.040657), 1, (-338.9184182234), Double.NEGATIVE_INFINITY);
      assertNotNull(oHLCDataItem2);
      assertEquals("Fri Jun 24 05:53:00 GMT 1881", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(day0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, false);
      assertNotNull(range0);
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-2549.5783280160117), range0.getLowerBound(), 0.01);
      assertEquals(2546.0103806647335, range0.getLength(), 0.01);
      assertEquals((-3.5679473512781), range0.getUpperBound(), 0.01);
      assertEquals((-1276.573137683645), range0.getCentralValue(), 0.01);
      assertEquals(3, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      int int0 = timeTableXYDataset0.indexOf((Comparable) null);
      assertEquals((-1), int0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeTableXYDataset0);
      assertTrue(boolean0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Minute minute0 = new Minute();
      assertNotNull(minute0);
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      timeTableXYDataset0.add((TimePeriod) minute0, (Number) 0, "{k%", true);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      Byte byte0 = new Byte((byte) (-73));
      assertEquals((byte) (-73), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean1 = vector0.add(byte0);
      assertTrue(boolean1);
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[-73]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.contains(byte0));
      assertTrue(boolean1 == boolean0);
      
      Vector vector1 = (Vector)vector0.clone();
      assertNotNull(vector1);
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[-73]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector1.size());
      assertFalse(vector1.isEmpty());
      assertEquals(1, vector1.capacity());
      assertEquals("[-73]", vector1.toString());
      assertTrue(vector0.contains(byte0));
      
      boolean boolean2 = vector0.add(byte0);
      assertTrue(boolean2);
      assertEquals(2, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[-73, -73]", vector0.toString());
      assertTrue(vector0.contains(byte0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Range range0 = timeTableXYDataset0.getDomainBounds(true);
      assertNotNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.validateObject();
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) vector0, true);
      assertNotNull(range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(2, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[-73, -73]", vector0.toString());
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertTrue(vector0.contains(byte0));
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0);
      assertNotNull(range2);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1.39240928132E12, range2.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range2.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, (List) vector1, range0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      int int0 = timeTableXYDataset0.indexOf((Comparable) null);
      assertEquals((-1), int0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeTableXYDataset0);
      assertTrue(boolean0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Minute minute0 = new Minute();
      assertNotNull(minute0);
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      timeTableXYDataset0.add((TimePeriod) minute0, (Number) 0, "{k%", true);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      boolean boolean1 = vector0.add((Byte) null);
      assertTrue(boolean1);
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals("[null]", vector0.toString());
      assertTrue(boolean1 == boolean0);
      
      Byte byte0 = new Byte((byte) (-73));
      assertEquals((byte) (-73), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean2 = vector0.add(byte0);
      assertTrue(boolean2);
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertEquals("[null, -73]", vector0.toString());
      assertTrue(vector0.contains(byte0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Vector vector1 = (Vector)vector0.clone();
      assertNotNull(vector1);
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertEquals("[null, -73]", vector0.toString());
      assertFalse(vector1.isEmpty());
      assertEquals(2, vector1.size());
      assertEquals("[null, -73]", vector1.toString());
      assertEquals(2, vector1.capacity());
      assertTrue(vector0.contains(byte0));
      
      boolean boolean3 = vector0.add(byte0);
      assertTrue(boolean3);
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[null, -73, -73]", vector0.toString());
      assertEquals(3, vector0.size());
      assertTrue(vector0.contains(byte0));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      Range range0 = timeTableXYDataset0.getDomainBounds(true);
      assertNotNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.validateObject();
      boolean boolean4 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) vector1, range0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(11, 728);
      assertNotNull(simpleHistogramBin0);
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(728.0, simpleHistogramBin0.getUpperBound(), 0.01);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(simpleHistogramBin0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(728.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      simpleHistogramDataset0.addChangeListener((DatasetChangeListener) null);
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(728.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(728.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Double double0 = (Double)DatasetUtilities.findMaximumDomainValue(simpleHistogramDataset0);
      assertEquals(728.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(728.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-2549.5783280160117), 11, 11, double0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(728.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(728.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals((-2550.0783280160117), range0.getLowerBound(), 0.01);
      assertEquals(2561.578328016012, range0.getLength(), 0.01);
      assertEquals((-1269.2891640080056), range0.getCentralValue(), 0.01);
      assertEquals(11.500000000000455, range0.getUpperBound(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      Week week1 = (Week)week0.next();
      assertNotNull(week1);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week1.getYearValue());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(106750L, week1.getSerialIndex());
      assertEquals(8, week1.getWeek());
      assertFalse(week1.equals((Object)week0));
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(week1);
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week1.getYearValue());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(106750L, week1.getSerialIndex());
      assertEquals(8, week1.getWeek());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(1.5, 1522.4745);
      assertNotNull(simpleHistogramBin0);
      assertEquals(1.5, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1522.4745, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week1.getYearValue());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(106750L, week1.getSerialIndex());
      assertEquals(8, week1.getWeek());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(1.5, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1522.4745, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      
      Double double0 = (Double)DatasetUtilities.findMaximumDomainValue(simpleHistogramDataset0);
      assertEquals(1522.4745, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week1.getYearValue());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(106750L, week1.getSerialIndex());
      assertEquals(8, week1.getWeek());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 53;
      doubleArray0[1] = (double) 53;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = 1522.4745;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = 1522.4745;
      doubleArray0[6] = (double) 1;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(6, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {53.0, 53.0, 1.0, 1522.4745, 1.0, 1522.4745, 1.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-2549.5783280160117), 1522.4745, 1091, week1);
      assertNotNull(xYSeriesCollection0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week1.getYearValue());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(106750L, week1.getSerialIndex());
      assertEquals(8, week1.getWeek());
      assertEquals(6, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertArrayEquals(new double[] {53.0, 53.0, 1.0, 1522.4745, 1.0, 1522.4745, 1.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      
      Number[][] numberArray0 = new Number[5][7];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = (Number) 1.0;
      numberArray1[1] = (Number) 1.0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[2];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) 1522.4745;
      numberArray2[1] = (Number) 1.0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[0];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[7];
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray1));
      
      numberArray4[0] = (Number) 1.0;
      numberArray4[1] = (Number) 53;
      numberArray4[2] = (Number) 1.0;
      numberArray4[3] = (Number) 1522.4745;
      numberArray4[4] = (Number) 1.0;
      numberArray4[5] = (Number) 1.0;
      numberArray4[6] = (Number) double0;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[3];
      assertFalse(numberArray5.equals((Object)numberArray1));
      assertFalse(numberArray5.equals((Object)numberArray4));
      assertFalse(numberArray5.equals((Object)numberArray3));
      assertFalse(numberArray5.equals((Object)numberArray2));
      
      numberArray5[0] = (Number) 1.0;
      numberArray5[1] = (Number) 53.0;
      numberArray5[2] = (Number) 53;
      numberArray0[4] = numberArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (-13.0));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 2.5659277029E13;
      doubleArray1[1] = (-1779.82069066884);
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 1787.504057;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 1.0;
      doubleArray3[1] = (-1779.82069066884);
      doubleArray3[2] = 1.0;
      doubleArray3[3] = 2.5659277029E13;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getColumnKeys();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      defaultCategoryDataset0.addValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (Comparable) integer0);
      assertNotNull(pieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      Stack<IntervalXYDelegate> stack0 = new Stack<IntervalXYDelegate>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      
      TimeSeries timeSeries0 = new TimeSeries(integer0);
      assertNotNull(timeSeries0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(timeSeriesCollection0);
      assertNotNull(intervalXYDelegate0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      
      IntervalXYDelegate intervalXYDelegate1 = stack0.push(intervalXYDelegate0);
      assertNotNull(intervalXYDelegate1);
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate1.isAutoWidth());
      assertTrue(stack0.contains(intervalXYDelegate1));
      assertSame(intervalXYDelegate0, intervalXYDelegate1);
      assertSame(intervalXYDelegate1, intervalXYDelegate0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) list0, range0, true);
      assertNotNull(range1);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Date[] dateArray0 = new Date[2];
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      assertNotNull(dateFormatSymbols0);
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      assertNotNull(mockSimpleDateFormat0);
      
      ParsePosition parsePosition0 = new ParsePosition(65);
      assertNotNull(parsePosition0);
      assertEquals(65, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=65,errorIndex=-1]", parsePosition0.toString());
      
      Date date0 = mockSimpleDateFormat0.parse("DefaultIntervalCategoryDataset.setCategoryKeys(): null category not permitted.", parsePosition0);
      assertNotNull(date0);
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals(65, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=65,errorIndex=-1]", parsePosition0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      dateArray0[0] = date0;
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = (double) 65;
      doubleArray0[2] = (double) 65;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(integer0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 65.0, 65.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(dateArray0[1], 65, 0.0, Double.NEGATIVE_INFINITY, 200.0, 3865.0);
      assertNotNull(oHLCDataItem0);
      assertEquals(2, dateArray0.length);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, Double.NEGATIVE_INFINITY, 200.0, 0.0, Double.NEGATIVE_INFINITY, 1131.894);
      assertNotNull(oHLCDataItem1);
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals(65, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=65,errorIndex=-1]", parsePosition0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(dateArray0[1], (-5.536463494E12), Double.NEGATIVE_INFINITY, 65.0, (-311.12), (-697.14));
      assertNotNull(oHLCDataItem2);
      assertEquals(2, dateArray0.length);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(date0, 622.91374261, 1836.061311170024, 3865.0, 327.4739531, 1799.3591);
      assertNotNull(oHLCDataItem3);
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals(65, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=65,errorIndex=-1]", parsePosition0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(date0, 2.0, 1131.894, 622.91374261, 37.47600948523215, (-311.12));
      assertNotNull(oHLCDataItem4);
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals(65, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=65,errorIndex=-1]", parsePosition0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem1));
      
      oHLCDataItemArray0[4] = oHLCDataItem4;
      OHLCDataItem oHLCDataItem5 = new OHLCDataItem(date0, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, 1131.894, 659.52435413113);
      assertNotNull(oHLCDataItem5);
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals(65, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=65,errorIndex=-1]", parsePosition0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem1));
      
      oHLCDataItemArray0[5] = oHLCDataItem5;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(6, oHLCDataItemArray0.length);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
      assertNotNull(range2);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range2.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range2.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(6, oHLCDataItemArray0.length);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-2559.9113188402584), 0.0);
      assertNotNull(simpleHistogramBin0);
      assertEquals(0.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-2559.9113188402584), simpleHistogramBin0.getLowerBound(), 0.01);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(simpleHistogramBin0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals(0.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-2559.9113188402584), simpleHistogramBin0.getLowerBound(), 0.01);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertEquals(0.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-2559.9113188402584), simpleHistogramBin0.getLowerBound(), 0.01);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) simpleHistogramDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(0.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-2559.9113188402584), simpleHistogramBin0.getLowerBound(), 0.01);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) simpleHistogramDataset0, false);
      assertNotNull(range0);
      assertEquals(0.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-2559.9113188402584), simpleHistogramBin0.getLowerBound(), 0.01);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) simpleHistogramDataset0);
      assertNotNull(range1);
      assertEquals(0.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-2559.9113188402584), simpleHistogramBin0.getLowerBound(), 0.01);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(2559.9113188402584, range1.getLength(), 0.01);
      assertEquals((-2559.9113188402584), range1.getLowerBound(), 0.01);
      assertEquals((-1279.9556594201292), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) simpleHistogramDataset0);
      assertNotNull(range2);
      assertEquals(0.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-2559.9113188402584), simpleHistogramBin0.getLowerBound(), 0.01);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) simpleHistogramBin0, (-721.14276886));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getColumnKeys();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      defaultCategoryDataset0.addValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, false);
      assertNotNull(range0);
      assertEquals(100.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(100.0, range0.getLowerBound(), 0.01);
      assertEquals(100.0, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, false);
      assertNotNull(range1);
      assertEquals(100.0, range1.getUpperBound(), 0.01);
      assertEquals(100.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(100.0, range1.getLowerBound(), 0.01);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(integer0);
      assertNotNull(xYIntervalSeries0);
      assertTrue(xYIntervalSeries0.getNotify());
      assertTrue(xYIntervalSeries0.getAllowDuplicateXValues());
      assertNull(xYIntervalSeries0.getDescription());
      assertTrue(xYIntervalSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYIntervalSeries0.getMaximumItemCount());
      assertEquals(0, xYIntervalSeries0.getItemCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertFalse(boolean0);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNotNull(range2);
      assertEquals(100.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(100.0, range2.getUpperBound(), 0.01);
      assertEquals(100.0, range2.getCentralValue(), 0.01);
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      int int0 = timeTableXYDataset0.indexOf((Comparable) null);
      assertEquals((-1), int0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeTableXYDataset0);
      assertTrue(boolean0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Minute minute0 = new Minute();
      assertNotNull(minute0);
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      timeTableXYDataset0.add((TimePeriod) minute0, (Number) 0, "{k%", true);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      boolean boolean1 = vector0.add((Byte) null);
      assertTrue(boolean1);
      assertFalse(vector0.isEmpty());
      assertEquals("[null]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(boolean1 == boolean0);
      
      Byte byte0 = new Byte((byte) (-73));
      assertEquals((byte) (-73), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean2 = vector0.add(byte0);
      assertTrue(boolean2);
      assertFalse(vector0.isEmpty());
      assertEquals("[null, -73]", vector0.toString());
      assertEquals(2, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.contains((byte) (-73)));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Vector vector1 = (Vector)vector0.clone();
      assertNotNull(vector1);
      assertFalse(vector0.isEmpty());
      assertEquals("[null, -73]", vector0.toString());
      assertEquals(2, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector1.size());
      assertEquals("[null, -73]", vector1.toString());
      assertFalse(vector1.isEmpty());
      assertEquals(2, vector1.capacity());
      assertTrue(vector0.contains((byte) (-73)));
      
      boolean boolean3 = vector0.add(byte0);
      assertTrue(boolean3);
      assertFalse(vector0.isEmpty());
      assertEquals("[null, -73, -73]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(3, vector0.size());
      assertTrue(vector0.contains((byte) (-73)));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      Range range0 = timeTableXYDataset0.getDomainBounds(true);
      assertNotNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.validateObject();
      boolean boolean4 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (-1042.2734060028));
      assertNotNull(range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals((-1042.2734060028), range1.getUpperBound(), 0.01);
      assertEquals((-1042.2734060028), range1.getLowerBound(), 0.01);
      assertEquals((-1042.2734060028), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getColumnKeys();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      defaultCategoryDataset0.setValue((Number) bigInteger0, (Comparable) integer0, (Comparable) integer0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      defaultCategoryDataset0.addValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (Comparable) integer0);
      assertNotNull(pieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) list0, false);
      assertNotNull(range1);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      assertNotNull(range2);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getColumnKeys();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      defaultCategoryDataset0.addValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, false);
      assertNotNull(range0);
      assertEquals(100.0, range0.getUpperBound(), 0.01);
      assertEquals(100.0, range0.getLowerBound(), 0.01);
      assertEquals(100.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, false);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(100.0, range1.getUpperBound(), 0.01);
      assertEquals(100.0, range1.getLowerBound(), 0.01);
      assertEquals(100.0, range1.getCentralValue(), 0.01);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(integer0);
      assertNotNull(xYIntervalSeries0);
      assertTrue(xYIntervalSeries0.getNotify());
      assertTrue(xYIntervalSeries0.getAutoSort());
      assertNull(xYIntervalSeries0.getDescription());
      assertTrue(xYIntervalSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYIntervalSeries0.getMaximumItemCount());
      assertEquals(0, xYIntervalSeries0.getItemCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, (Comparable) integer0);
      assertNotNull(pieDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(100.0, double0, 0.01);
      
      PieDataset pieDataset1 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (Comparable) integer0);
      assertNotNull(pieDataset1);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(pieDataset1, pieDataset0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getColumnKeys();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      defaultCategoryDataset0.addValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (Comparable) integer0);
      assertNotNull(pieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertFalse(boolean0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNotNull(range0);
      assertEquals(300.0, range0.getUpperBound(), 0.01);
      assertEquals(150.0, range0.getCentralValue(), 0.01);
      assertEquals(300.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) list0, false);
      assertNotNull(range1);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(300.0, range1.getUpperBound(), 0.01);
      assertEquals(300.0, range1.getCentralValue(), 0.01);
      assertEquals(300.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, false);
      assertNotNull(range2);
      assertEquals(300.0, range2.getCentralValue(), 0.01);
      assertEquals(300.0, range2.getUpperBound(), 0.01);
      assertEquals(300.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      
      double double0 = (-2568.1);
      NormalDistributionFunction2D normalDistributionFunction2D0 = null;
      try {
        normalDistributionFunction2D0 = new NormalDistributionFunction2D((-2568.1), (-4263.6));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'std' > 0.
         //
         verifyException("org.jfree.data.function.NormalDistributionFunction2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) "M");
      assertNotNull(defaultPieDataset0);
      
      defaultPieDataset0.setValue((Comparable) "M", (Number) null);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Number[][] numberArray0 = new Number[7][3];
      Number[] numberArray1 = new Number[3];
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      numberArray1[0] = (Number) integer0;
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      numberArray1[1] = (Number) integer1;
      Integer integer2 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      numberArray1[2] = (Number) integer2;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[5];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) integer0;
      numberArray2[1] = (Number) integer2;
      numberArray2[2] = (Number) integer1;
      numberArray2[3] = (Number) integer0;
      numberArray2[4] = (Number) integer1;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[1];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) integer0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[0];
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray3));
      
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[5];
      assertFalse(numberArray5.equals((Object)numberArray1));
      assertFalse(numberArray5.equals((Object)numberArray4));
      assertFalse(numberArray5.equals((Object)numberArray3));
      assertFalse(numberArray5.equals((Object)numberArray2));
      
      numberArray5[0] = (Number) integer1;
      numberArray5[1] = (Number) integer2;
      numberArray5[2] = (Number) integer1;
      numberArray5[3] = (Number) integer0;
      numberArray5[4] = (Number) integer0;
      numberArray0[4] = numberArray5;
      Number[] numberArray6 = new Number[4];
      assertFalse(numberArray6.equals((Object)numberArray4));
      assertFalse(numberArray6.equals((Object)numberArray2));
      assertFalse(numberArray6.equals((Object)numberArray5));
      assertFalse(numberArray6.equals((Object)numberArray3));
      assertFalse(numberArray6.equals((Object)numberArray1));
      
      MockRandom mockRandom0 = new MockRandom(1665);
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(1665, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((short)52, bigInteger0.shortValue());
      assertEquals((byte)52, bigInteger0.byteValue());
      
      numberArray6[0] = (Number) bigInteger0;
      numberArray6[1] = (Number) integer1;
      numberArray6[2] = (Number) integer0;
      numberArray6[3] = (Number) integer1;
      numberArray0[5] = numberArray6;
      Number[] numberArray7 = new Number[8];
      assertFalse(numberArray7.equals((Object)numberArray2));
      assertFalse(numberArray7.equals((Object)numberArray3));
      assertFalse(numberArray7.equals((Object)numberArray5));
      assertFalse(numberArray7.equals((Object)numberArray4));
      assertFalse(numberArray7.equals((Object)numberArray6));
      assertFalse(numberArray7.equals((Object)numberArray1));
      
      numberArray7[0] = (Number) integer0;
      numberArray7[1] = (Number) integer0;
      numberArray7[2] = (Number) bigInteger0;
      numberArray7[3] = (Number) integer2;
      numberArray7[4] = (Number) integer0;
      numberArray7[5] = (Number) integer0;
      numberArray7[6] = (Number) bigInteger0;
      numberArray7[7] = (Number) integer1;
      numberArray0[6] = numberArray7;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[7];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[20];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(hour0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(7, dateArray0.length);
      assertEquals(20, doubleArray0.length);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(7, dateArray0.length);
      assertEquals(20, doubleArray0.length);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      Byte byte0 = new Byte((byte) (-89));
      assertEquals((byte) (-89), (byte)byte0);
      assertNotNull(byte0);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains(byte0));
      
      boolean boolean0 = vector0.add(byte0);
      assertTrue(boolean0);
      assertFalse(vector0.isEmpty());
      assertEquals("[-89]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.contains(byte0));
      
      double[] doubleArray0 = new double[8];
      doubleArray0[6] = (double) (byte) (-89);
      doubleArray0[1] = (double) 1004;
      doubleArray0[2] = (double) (byte) (-89);
      doubleArray0[4] = (double) (byte) (-89);
      doubleArray0[6] = (double) 23;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(hour0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 1004.0, (-89.0), 0.0, (-89.0), 0.0, 23.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, (List) vector0, true);
      assertNotNull(range0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertFalse(vector0.isEmpty());
      assertEquals("[-89]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(3.2204782844E13, range0.getCentralValue(), 0.01);
      assertEquals(3.2204782844E13, range0.getUpperBound(), 0.01);
      assertEquals(3.2204782844E13, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertArrayEquals(new double[] {0.0, 1004.0, (-89.0), 0.0, (-89.0), 0.0, 23.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertTrue(vector0.contains(byte0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
      assertEquals(3.2204782844E13, number0);
      assertNotNull(number0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 1004.0, (-89.0), 0.0, (-89.0), 0.0, 23.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 2147120715);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 2147120715, 2147120715);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(2147120715, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2147120715, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      // Undeclared exception!
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, keyToGroupMap0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer0);
      assertNotNull(integer0);
      
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "Null 'item' argument.", true);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 2147120715);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147120715, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      Byte byte0 = new Byte((byte) (-89));
      assertEquals((byte) (-89), (byte)byte0);
      assertNotNull(byte0);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains((byte) (-89)));
      
      boolean boolean0 = vector0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[-89]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertTrue(vector0.contains((byte) (-89)));
      
      double[] doubleArray0 = new double[8];
      doubleArray0[6] = (double) (byte) (-89);
      mockDate0.setTime(2485L);
      assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      
      doubleArray0[1] = (double) 1004;
      doubleArray0[2] = (double) (byte) (-89);
      doubleArray0[4] = (double) (byte) (-89);
      doubleArray0[6] = (double) 23;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(hour0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 1004.0, (-89.0), 0.0, (-89.0), 0.0, 23.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, (List) vector0, true);
      assertNotNull(range0);
      assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[-89]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2485.0, range0.getUpperBound(), 0.01);
      assertEquals(2485.0, range0.getLowerBound(), 0.01);
      assertEquals(2485.0, range0.getCentralValue(), 0.01);
      assertArrayEquals(new double[] {0.0, 1004.0, (-89.0), 0.0, (-89.0), 0.0, 23.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertTrue(vector0.contains((byte) (-89)));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (-89.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 1, 1);
      assertNotNull(matrixSeries0);
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      
      boolean boolean0 = matrixSeries0.isEmpty();
      assertFalse(boolean0);
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      boolean boolean1 = false;
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, false);
      assertNotNull(range0);
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (-1729.0526499);
      doubleArray1[5] = (double) 1;
      doubleArray1[6] = (double) 1;
      doubleArray1[7] = (double) 1;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (-222));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, doubleArray0.length);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      int int0 = defaultMultiValueCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Stack<XYBarDataset> stack0 = new Stack<XYBarDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(timeSeriesCollection0, (-1.0));
      assertNotNull(xYBarDataset0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals((-1.0), xYBarDataset0.getBarWidth(), 0.01);
      
      boolean boolean0 = stack0.add(xYBarDataset0);
      assertTrue(boolean0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals((-1.0), xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(stack0.contains(xYBarDataset0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeSeriesCollection0, (List) stack0, range0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYBarDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(11, 728);
      assertNotNull(simpleHistogramBin0);
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(728.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultMultiValueCategoryDataset0, false);
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, false);
      assertNull(range1);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset1);
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset2 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset2);
      assertTrue(defaultMultiValueCategoryDataset2.equals((Object)defaultMultiValueCategoryDataset0));
      assertTrue(defaultMultiValueCategoryDataset2.equals((Object)defaultMultiValueCategoryDataset1));
      
      int int0 = defaultMultiValueCategoryDataset2.getColumnCount();
      assertEquals(0, int0);
      assertTrue(defaultMultiValueCategoryDataset2.equals((Object)defaultMultiValueCategoryDataset0));
      assertTrue(defaultMultiValueCategoryDataset2.equals((Object)defaultMultiValueCategoryDataset1));
      assertNotSame(defaultMultiValueCategoryDataset2, defaultMultiValueCategoryDataset0);
      assertNotSame(defaultMultiValueCategoryDataset2, defaultMultiValueCategoryDataset1);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) null, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getColumnKeys();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      defaultCategoryDataset0.addValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, false);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(100.0, range0.getUpperBound(), 0.01);
      assertEquals(100.0, range0.getLowerBound(), 0.01);
      assertEquals(100.0, range0.getCentralValue(), 0.01);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (Comparable) integer0);
      assertNotNull(pieDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) integer0, 622.91374261, 399);
      assertNotNull(pieDataset1);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0, (-30000.0));
      assertNotNull(range1);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-30000.0), range1.getLowerBound(), 0.01);
      assertEquals((-30000.0), range1.getUpperBound(), 0.01);
      assertEquals((-30000.0), range1.getCentralValue(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      MockDate mockDate1 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate1);
      assertTrue(mockDate1.equals((Object)mockDate0));
      
      Hour hour0 = new Hour(mockDate1);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate1.toString());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Date date0 = hour0.getEnd();
      assertNotNull(date0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate1.toString());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", date0.toString());
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertTrue(date0.equals((Object)mockDate0));
      assertTrue(date0.equals((Object)mockDate1));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(mockDate1, date0);
      assertNotSame(mockDate1, mockDate0);
      assertNotSame(date0, mockDate1);
      assertNotSame(date0, mockDate0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 23;
      doubleArray0[1] = (double) (-461);
      LinkedList<JInternalFrame> linkedList0 = new LinkedList<JInternalFrame>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 2378.946887, (-461), (-991.0), (-461.0), (-461));
      assertNotNull(oHLCDataItem0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertTrue(mockDate0.equals((Object)date0));
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      MockDate mockDate2 = new MockDate(568, 2962, 2962, 2962, 388);
      assertNotNull(mockDate2);
      assertFalse(mockDate2.equals((Object)mockDate1));
      assertFalse(mockDate2.equals((Object)mockDate0));
      assertFalse(mockDate2.equals((Object)date0));
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate2, (-2804.227564594), 2962, 388, 1433.9, (-461));
      assertNotNull(oHLCDataItem1);
      assertEquals("Thu Apr 12 16:28:00 GMT 2723", mockDate2.toString());
      assertFalse(mockDate2.equals((Object)mockDate1));
      assertFalse(mockDate2.equals((Object)mockDate0));
      assertFalse(mockDate2.equals((Object)date0));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(hour0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate1.toString());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      assertFalse(mockDate1.equals((Object)mockDate2));
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertTrue(mockDate1.equals((Object)date0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultOHLCDataset0, Double.POSITIVE_INFINITY);
      assertNotNull(xYBarDataset0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate1.toString());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(Double.POSITIVE_INFINITY, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      assertFalse(mockDate1.equals((Object)mockDate2));
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertTrue(mockDate1.equals((Object)date0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(xYBarDataset0);
      assertNotNull(range0);
      assertEquals(1894.9, range0.getLength(), 0.01);
      assertEquals(486.45000000000005, range0.getCentralValue(), 0.01);
      assertEquals(1433.9, range0.getUpperBound(), 0.01);
      assertEquals((-461.0), range0.getLowerBound(), 0.01);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate1.toString());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(Double.POSITIVE_INFINITY, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      assertFalse(mockDate1.equals((Object)mockDate2));
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertTrue(mockDate1.equals((Object)date0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(mockDate1, mockDate2);
      assertNotSame(mockDate1, date0);
      assertNotSame(mockDate1, mockDate0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYBarDataset0, (List) linkedList0, range0, false);
      assertNull(range1);
      assertEquals(1894.9, range0.getLength(), 0.01);
      assertEquals(486.45000000000005, range0.getCentralValue(), 0.01);
      assertEquals(1433.9, range0.getUpperBound(), 0.01);
      assertEquals((-461.0), range0.getLowerBound(), 0.01);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate1.toString());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(0, linkedList0.size());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(Double.POSITIVE_INFINITY, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      assertFalse(mockDate1.equals((Object)mockDate2));
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertTrue(mockDate1.equals((Object)date0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(mockDate1, mockDate2);
      assertNotSame(mockDate1, date0);
      assertNotSame(mockDate1, mockDate0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      MockDate mockDate1 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate1);
      assertTrue(mockDate1.equals((Object)mockDate0));
      
      Hour hour0 = new Hour(mockDate1);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate1.toString());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(13, hour0.getHour());
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[1];
      Date date0 = hour0.getEnd();
      assertNotNull(date0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate1.toString());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", date0.toString());
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertTrue(date0.equals((Object)mockDate0));
      assertTrue(date0.equals((Object)mockDate1));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(mockDate1, mockDate0);
      assertNotSame(mockDate1, date0);
      assertNotSame(date0, mockDate0);
      assertNotSame(date0, mockDate1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 23;
      doubleArray0[1] = (double) (-461);
      doubleArray0[2] = 1489.8308;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 568;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (-5038.606967);
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) (-461);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {23.0, (-461.0), 1489.8308, 0.0, 568.0, 0.0, (-5038.606967), 0.0, (-461.0)}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertTrue(mockDate0.equals((Object)date0));
      
      Stack<IntervalXYDelegate> stack0 = new Stack<IntervalXYDelegate>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotNull(range0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(23.0, range0.getUpperBound(), 0.01);
      assertEquals(23.0, range0.getCentralValue(), 0.01);
      assertEquals(23.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {23.0, (-461.0), 1489.8308, 0.0, 568.0, 0.0, (-5038.606967), 0.0, (-461.0)}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertTrue(mockDate0.equals((Object)date0));
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(mockDate0, date0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range0, true);
      assertNull(range1);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(23.0, range0.getUpperBound(), 0.01);
      assertEquals(23.0, range0.getCentralValue(), 0.01);
      assertEquals(23.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {23.0, (-461.0), 1489.8308, 0.0, 568.0, 0.0, (-5038.606967), 0.0, (-461.0)}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertTrue(mockDate0.equals((Object)date0));
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(mockDate0, date0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getColumnKeys();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertEquals((-30000), (int)integer0);
      assertNotNull(integer0);
      
      defaultCategoryDataset0.addValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (Comparable) integer0);
      assertNotNull(pieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-30000.0), range0.getLowerBound(), 0.01);
      assertEquals(30000.0, range0.getLength(), 0.01);
      assertEquals((-15000.0), range0.getCentralValue(), 0.01);
      
      defaultCategoryDataset0.setValue((-1051.235), (Comparable) integer0, (Comparable) integer0);
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) integer0, 1579.03, 2655);
      assertNotNull(pieDataset1);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0, 1579.03);
      assertNotNull(range1);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(1579.03, range1.getLowerBound(), 0.01);
      assertEquals(1579.03, range1.getUpperBound(), 0.01);
      assertEquals(1579.03, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getColumnKeys();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      defaultCategoryDataset0.addValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(100.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(100.0, range0.getCentralValue(), 0.01);
      assertEquals(100.0, range0.getUpperBound(), 0.01);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (Comparable) integer0);
      assertNotNull(pieDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) integer0, 622.91374261, 399);
      assertNotNull(pieDataset1);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 399;
      doubleArray2[1] = 622.91374261;
      doubleArray2[2] = (double) 399;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 399;
      doubleArray3[1] = (double) 399;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 622.91374261;
      doubleArray3[4] = 622.91374261;
      doubleArray3[5] = (double) 399;
      doubleArray3[6] = (double) 399;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("s@CTl@", "s@CTl@", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertFalse(categoryDataset0.equals((Object)defaultCategoryDataset0));
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("The number of row keys does no match thenumber mf rows in the data array.", "The number of row keys does no match thenumber mf rows in the data array.", doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, (-6));
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-6), categoryToPieDataset0.getExtractIndex());
      assertEquals(2, doubleArray0.length);
      
      boolean boolean0 = defaultCategoryDataset0.hasListener(categoryToPieDataset0);
      assertTrue(boolean0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-6), categoryToPieDataset0.getExtractIndex());
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "The number of row keys does no match thenumber mf rows in the data array.", 1.5, 395);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getColumnKeys();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      defaultCategoryDataset0.addValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (Comparable) integer0);
      assertNotNull(pieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(histogramDataset0, 1579.03);
      assertNotNull(xYBarDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertEquals(1579.03, xYBarDataset0.getBarWidth(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYBarDataset0, (List) list0, range0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      MockDate mockDate1 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate1);
      assertTrue(mockDate1.equals((Object)mockDate0));
      
      Hour hour0 = new Hour(mockDate1);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate1.toString());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[1];
      Date date0 = hour0.getEnd();
      assertNotNull(date0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate1.toString());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", date0.toString());
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertTrue(date0.equals((Object)mockDate1));
      assertTrue(date0.equals((Object)mockDate0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(mockDate1, date0);
      assertNotSame(mockDate1, mockDate0);
      assertNotSame(date0, mockDate0);
      assertNotSame(date0, mockDate1);
      
      long long0 = MockDate.UTC(0, 37, 37, 0, 568, 1004);
      assertEquals((-2108556916000L), long0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2108556916000L);
      doubleArray0[1] = (double) (-461);
      doubleArray0[2] = 1489.8308;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 568;
      doubleArray0[5] = (double) (-2108556916000L);
      doubleArray0[6] = (-5038.606967);
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) (-461);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertArrayEquals(new double[] {(-2.108556916E12), (-461.0), 1489.8308, 0.0, 568.0, (-2.108556916E12), (-5038.606967), 0.0, (-461.0)}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertTrue(mockDate0.equals((Object)date0));
      
      Stack<IntervalXYDelegate> stack0 = new Stack<IntervalXYDelegate>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotNull(range0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals((-2.108556916E12), range0.getLowerBound(), 0.01);
      assertEquals((-2.108556916E12), range0.getUpperBound(), 0.01);
      assertEquals((-2.108556916E12), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertArrayEquals(new double[] {(-2.108556916E12), (-461.0), 1489.8308, 0.0, 568.0, (-2.108556916E12), (-5038.606967), 0.0, (-461.0)}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertTrue(mockDate0.equals((Object)date0));
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(mockDate0, date0);
      
      IntervalXYDelegate intervalXYDelegate0 = stack0.push((IntervalXYDelegate) null);
      assertNull(intervalXYDelegate0);
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      
      IntervalXYDelegate intervalXYDelegate1 = stack0.push((IntervalXYDelegate) null);
      assertNull(intervalXYDelegate1);
      assertFalse(stack0.isEmpty());
      assertEquals("[null, null]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) "M");
      assertNotNull(defaultPieDataset0);
      
      Short short0 = new Short((short)999);
      assertEquals((short)999, (short)short0);
      assertNotNull(short0);
      
      defaultPieDataset0.setValue((Comparable) "M", (Number) short0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertFalse(boolean0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(jDBCCategoryDataset0, tableOrder0, 1857);
      assertNotNull(categoryToPieDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(1857, categoryToPieDataset0.getExtractIndex());
      
      defaultCategoryDataset0.removeChangeListener(categoryToPieDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(1857, categoryToPieDataset0.getExtractIndex());
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      defaultCategoryDataset0.addValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (Comparable) integer0);
      assertNotNull(pieDataset0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.7976931348623157E308;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = (-1.7976931348623157E308);
      doubleArray0[3] = 703.0;
      doubleArray0[4] = (-1492.65);
      doubleArray0[5] = 1092.468387;
      doubleArray0[6] = (-1362.7847608582827);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(6, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {1.7976931348623157E308, Double.NEGATIVE_INFINITY, (-1.7976931348623157E308), 703.0, (-1492.65), 1092.468387, (-1362.7847608582827)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 0.5, 448.2, 25, (-1.7976931348623157E308));
      assertNotNull(xYSeriesCollection0);
      assertEquals(6, polynomialFunction2D0.getOrder());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertArrayEquals(new double[] {1.7976931348623157E308, Double.NEGATIVE_INFINITY, (-1.7976931348623157E308), 703.0, (-1492.65), 1092.468387, (-1362.7847608582827)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range0);
      assertEquals(6, polynomialFunction2D0.getOrder());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(448.69999999999993, range0.getUpperBound(), 0.01);
      assertEquals(224.34999999999997, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(448.69999999999993, range0.getLength(), 0.01);
      assertArrayEquals(new double[] {1.7976931348623157E308, Double.NEGATIVE_INFINITY, (-1.7976931348623157E308), 703.0, (-1492.65), 1092.468387, (-1362.7847608582827)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = 1004;
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      MockDate mockDate1 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate1);
      assertTrue(mockDate1.equals((Object)mockDate0));
      
      Hour hour0 = new Hour(mockDate1);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate1.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[7];
      dateArray0[0] = (Date) mockDate0;
      double[][] doubleArray0 = new double[4][1];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 1004;
      doubleArray1[1] = (double) 1004;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 1004;
      doubleArray1[4] = (double) 1004;
      doubleArray1[5] = (double) 1004;
      doubleArray1[6] = (double) 23;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 1004;
      doubleArray3[1] = (double) 1004;
      doubleArray3[2] = (double) 0;
      long long0 = mockDate1.getTime();
      assertEquals(32204782844000L, long0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate1.toString());
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertNotSame(mockDate1, mockDate0);
      
      doubleArray3[3] = (double) 1004;
      doubleArray3[4] = (double) 0;
      doubleArray3[5] = (double) 1004;
      doubleArray3[6] = (double) 23;
      doubleArray3[7] = (double) 23;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (double) 0;
      doubleArray4[1] = (double) 1004;
      doubleArray4[2] = (double) 23;
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      mockDate0.setTime(1004);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1004;
      doubleArray0[2] = (double) 23;
      doubleArray0[3] = (double) 0;
      Date date0 = hour0.getEnd();
      assertNotNull(date0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", date0.toString());
      assertFalse(date0.equals((Object)mockDate0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(mockDate0, date0);
      assertNotSame(date0, mockDate0);
      
      long long0 = MockDate.UTC((-461), 37, 0, 1004, 0, 965);
      assertEquals((-16655082235000L), long0);
      
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(hour0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(mockDate0.equals((Object)date0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Stack<IntervalXYDelegate> stack0 = new Stack<IntervalXYDelegate>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotNull(range0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1004.0, range0.getUpperBound(), 0.01);
      assertEquals(502.0, range0.getCentralValue(), 0.01);
      assertEquals(1004.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(mockDate0.equals((Object)date0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(mockDate0, date0);
      
      IntervalXYDelegate intervalXYDelegate0 = stack0.push((IntervalXYDelegate) null);
      assertNull(intervalXYDelegate0);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[null]", stack0.toString());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
      assertEquals(1004.0, number0);
      assertNotNull(number0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(mockDate0.equals((Object)date0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(mockDate0, date0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotNull(range1);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1004.0, range1.getLength(), 0.01);
      assertEquals(1004.0, range1.getUpperBound(), 0.01);
      assertEquals(502.0, range1.getCentralValue(), 0.01);
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(mockDate0.equals((Object)date0));
      assertTrue(range1.equals((Object)range0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(mockDate0, date0);
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      
      long long0 = hour0.getMiddleMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(1392409281320L, long0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2990,MONTH=6,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=12,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=13,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      mockDate0.setTime(1004);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1004;
      doubleArray0[2] = (double) 23;
      doubleArray0[3] = (double) 0;
      Date date0 = hour0.getEnd();
      assertNotNull(date0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", date0.toString());
      assertFalse(date0.equals((Object)mockDate0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(mockDate0, date0);
      assertNotSame(date0, mockDate0);
      
      long long1 = MockDate.UTC((-461), 37, 0, 1004, 0, 965);
      assertEquals((-16655082235000L), long1);
      assertFalse(long1 == long0);
      
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(hour0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(mockDate0.equals((Object)date0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Stack<IntervalXYDelegate> stack0 = new Stack<IntervalXYDelegate>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotNull(range0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(1004.0, range0.getLength(), 0.01);
      assertEquals(1004.0, range0.getUpperBound(), 0.01);
      assertEquals(502.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(mockDate0.equals((Object)date0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(mockDate0, date0);
      
      Range range1 = Range.combine(range0, range0);
      assertNotNull(range1);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(1004.0, range0.getLength(), 0.01);
      assertEquals(1004.0, range0.getUpperBound(), 0.01);
      assertEquals(502.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(1004.0, range1.getUpperBound(), 0.01);
      assertEquals(502.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1004.0, range1.getLength(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(mockDate0.equals((Object)date0));
      assertTrue(range1.equals((Object)range0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(mockDate0, date0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      IntervalXYDelegate intervalXYDelegate0 = stack0.push((IntervalXYDelegate) null);
      assertNull(intervalXYDelegate0);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[null]", stack0.toString());
      
      IntervalXYDelegate intervalXYDelegate1 = stack0.push((IntervalXYDelegate) null);
      assertNull(intervalXYDelegate1);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(2, stack0.size());
      assertEquals("[null, null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range0, true);
      assertNotNull(range2);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(2, stack0.size());
      assertEquals("[null, null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(1004.0, range0.getLength(), 0.01);
      assertEquals(1004.0, range0.getUpperBound(), 0.01);
      assertEquals(502.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(1004.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(1004.0, range2.getUpperBound(), 0.01);
      assertEquals(502.0, range2.getCentralValue(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(mockDate0.equals((Object)date0));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(mockDate0, date0);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      DefaultHighLowDataset defaultHighLowDataset1 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset1);
      assertEquals(1, defaultHighLowDataset1.getSeriesCount());
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(defaultHighLowDataset1.equals((Object)defaultHighLowDataset0));
      
      Range range3 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset1);
      assertNotNull(range3);
      assertEquals(1, defaultHighLowDataset1.getSeriesCount());
      assertEquals(1004.0, range3.getUpperBound(), 0.01);
      assertEquals(1004.0, range3.getCentralValue(), 0.01);
      assertEquals(1004.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(defaultHighLowDataset1.equals((Object)defaultHighLowDataset0));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertNotSame(defaultHighLowDataset1, defaultHighLowDataset0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultXYDataset0, (List) stack0, range2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      Year year1 = (Year)year0.next();
      assertNotNull(year1);
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2015, year1.getYear());
      assertEquals(2015L, year1.getSerialIndex());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals("2015", year1.toString());
      assertFalse(year1.equals((Object)year0));
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Comparable<CategoryTableXYDataset>[] comparableArray0 = (Comparable<CategoryTableXYDataset>[]) Array.newInstance(Comparable.class, 2);
      comparableArray0[0] = (Comparable<CategoryTableXYDataset>) year1;
      comparableArray0[1] = (Comparable<CategoryTableXYDataset>) year0;
      Comparable<DefaultBoxAndWhiskerCategoryDataset>[] comparableArray1 = (Comparable<DefaultBoxAndWhiskerCategoryDataset>[]) Array.newInstance(Comparable.class, 6);
      comparableArray1[0] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) year0;
      comparableArray1[1] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) year0;
      comparableArray1[2] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) year0;
      comparableArray1[3] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) year0;
      comparableArray1[4] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) year0;
      comparableArray1[5] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) year1;
      double[][] doubleArray0 = new double[6][8];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1864.033;
      doubleArray1[1] = (double) (-9999);
      doubleArray1[2] = (double) 9999;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 9999;
      doubleArray2[1] = 1864.033;
      doubleArray2[2] = (-2558.9555335715);
      doubleArray2[3] = (-1255.3448281946);
      doubleArray2[4] = 1864.033;
      doubleArray2[5] = (double) 9999;
      doubleArray2[6] = (double) 9999;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 9999;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 1864.033;
      doubleArray4[1] = 2134.460425877;
      doubleArray4[2] = (double) 9999;
      doubleArray4[3] = (-2558.9555335715);
      doubleArray4[4] = (-2558.9555335715);
      doubleArray4[5] = (-2558.9555335715);
      doubleArray4[6] = (-1255.3448281946);
      doubleArray4[7] = 1864.033;
      doubleArray4[8] = (-1255.3448281946);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = (-1255.3448281946);
      doubleArray5[1] = 1864.033;
      doubleArray5[2] = 1864.033;
      doubleArray5[3] = (-2558.9555335715);
      doubleArray5[4] = (-1255.3448281946);
      doubleArray5[5] = 2134.460425877;
      doubleArray5[6] = (-2558.9555335715);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray6[0] = 2134.460425877;
      doubleArray6[1] = 2134.460425877;
      doubleArray0[5] = doubleArray6;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'columnKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(week0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      
      SimpleHistogramDataset simpleHistogramDataset1 = (SimpleHistogramDataset)simpleHistogramDataset0.clone();
      assertNotNull(simpleHistogramDataset1);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, true);
      assertNull(range0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      
      Range range1 = Range.combine((Range) null, (Range) null);
      assertNull(range1);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) simpleHistogramDataset0);
      assertTrue(boolean0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      
      double[][] doubleArray0 = new double[6][0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 53;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = (double) 53;
      doubleArray2[2] = (double) 1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 1;
      doubleArray3[1] = (double) 53;
      doubleArray3[2] = (double) 53;
      doubleArray3[3] = (double) 53;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (double) 1;
      doubleArray4[1] = (double) 53;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = (double) 1;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = (double) 53;
      doubleArray6[1] = (double) 1;
      doubleArray6[2] = (double) 1;
      doubleArray0[5] = doubleArray6;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("Requires 'start' < 'end'.", "c", doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, (KeyToGroupMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) "v~1mwrA=S.%");
      assertNotNull(defaultPieDataset0);
      
      defaultPieDataset0.setValue((Comparable) "v~1mwrA=S.%", (-2692.8980631324994));
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset1 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset1);
      assertTrue(defaultKeyedValues2DDataset1.equals((Object)defaultKeyedValues2DDataset0));
      
      defaultKeyedValues2DDataset0.setSelectionState(defaultKeyedValues2DDataset1);
      assertTrue(defaultKeyedValues2DDataset0.equals((Object)defaultKeyedValues2DDataset1));
      assertTrue(defaultKeyedValues2DDataset1.equals((Object)defaultKeyedValues2DDataset0));
      assertNotSame(defaultKeyedValues2DDataset0, defaultKeyedValues2DDataset1);
      assertNotSame(defaultKeyedValues2DDataset1, defaultKeyedValues2DDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean0);
      assertTrue(defaultKeyedValues2DDataset0.equals((Object)defaultKeyedValues2DDataset1));
      assertNotSame(defaultKeyedValues2DDataset0, defaultKeyedValues2DDataset1);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(range0);
      assertTrue(defaultKeyedValues2DDataset0.equals((Object)defaultKeyedValues2DDataset1));
      assertNotSame(defaultKeyedValues2DDataset0, defaultKeyedValues2DDataset1);
      
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-2692.8980631324994);
      doubleArray1[1] = (-2692.8980631324994);
      doubleArray1[2] = (-221.25);
      doubleArray1[3] = (-2692.8980631324994);
      doubleArray1[4] = (-2692.8980631324994);
      doubleArray1[5] = (-2692.8980631324994);
      doubleArray1[6] = (-2692.8980631324994);
      doubleArray1[7] = (-2692.8980631324994);
      doubleArray0[0] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNotNull(range1);
      assertEquals((-1346.4490315662497), range1.getCentralValue(), 0.01);
      assertEquals((-2692.8980631324994), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(2692.8980631324994, range1.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[][] doubleArray0 = new double[8][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, doubleArray0.length);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Can't evaluate the month.", "}*9'PO~a", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(8, doubleArray0.length);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset((Comparable) "}*9'PO~a", (KeyedValues) defaultKeyedValues0);
      assertNotNull(categoryDataset1);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotSame(categoryDataset1, categoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-2558.9555335715);
      doubleArray1[1] = 0.0;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(2558.9555335715, range0.getLength(), 0.01);
      assertEquals((-2558.9555335715), range0.getLowerBound(), 0.01);
      assertEquals((-1279.47776678575), range0.getCentralValue(), 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(11, 715);
      assertNotNull(simpleHistogramBin0);
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(simpleHistogramBin0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(simpleHistogramBin0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
      assertNull(range0);
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertNull(number0);
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) "v~1mwrA=S.%");
      assertNotNull(defaultPieDataset0);
      
      defaultPieDataset0.setValue((Comparable) "v~1mwrA=S.%", (-2692.8980631324994));
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset1 = (DefaultKeyedValues2DDataset)defaultKeyedValues2DDataset0.getSelectionState();
      assertNotNull(defaultKeyedValues2DDataset1);
      assertSame(defaultKeyedValues2DDataset0, defaultKeyedValues2DDataset1);
      assertSame(defaultKeyedValues2DDataset1, defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.setSelectionState(defaultKeyedValues2DDataset1);
      assertSame(defaultKeyedValues2DDataset0, defaultKeyedValues2DDataset1);
      assertSame(defaultKeyedValues2DDataset1, defaultKeyedValues2DDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean0);
      assertSame(defaultKeyedValues2DDataset0, defaultKeyedValues2DDataset1);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(range0);
      assertSame(defaultKeyedValues2DDataset0, defaultKeyedValues2DDataset1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(11, 17);
      assertNotNull(simpleHistogramBin0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(17.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 17;
      doubleArray1[1] = (double) 11;
      doubleArray1[2] = (double) 17;
      doubleArray1[3] = (double) 17;
      doubleArray1[4] = (-1.0);
      doubleArray1[5] = (double) 11;
      doubleArray1[6] = (double) 11;
      doubleArray1[7] = (double) 17;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 17;
      doubleArray2[1] = (double) 11;
      doubleArray2[2] = (double) 11;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 17;
      doubleArray3[1] = (double) 17;
      doubleArray3[2] = (-1.0);
      doubleArray3[3] = (double) 11;
      doubleArray3[4] = (double) 17;
      doubleArray3[5] = (double) 17;
      doubleArray3[6] = (-1.0);
      doubleArray3[7] = (double) 11;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      boolean boolean0 = vector0.add((Byte) null);
      assertTrue(boolean0);
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals("[null]", vector0.toString());
      
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-2558.9555335715);
      doubleArray1[1] = (-157.42);
      doubleArray1[2] = 1932.29450522613;
      doubleArray1[3] = 1188.2813699;
      doubleArray1[4] = (-1525.38629053398);
      doubleArray1[5] = 2066.371;
      doubleArray1[6] = 2525.5645;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1525.38629053398);
      doubleArray2[1] = 605.0;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 4762.357041588665;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "XmQ1g65ZF[S`%`J1Y";
      stringArray0[2] = "";
      String string0 = "rnK:(6u";
      stringArray0[3] = "rnK:(6u";
      stringArray0[4] = "tCTa\"Yz'yRG|7N/XH";
      stringArray0[5] = "ZIhUSN`U.gSb";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, stringArray0.length);
      
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) arrayList1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getColumnKeys();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertEquals((-30000), (int)integer0);
      assertNotNull(integer0);
      
      defaultCategoryDataset0.addValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals((-30000.0), range0.getUpperBound(), 0.01);
      assertEquals((-30000.0), range0.getCentralValue(), 0.01);
      assertEquals((-30000.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-30000.0), range1.getUpperBound(), 0.01);
      assertEquals((-30000.0), range1.getCentralValue(), 0.01);
      assertEquals((-30000.0), range1.getLowerBound(), 0.01);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(integer0);
      assertNotNull(xYIntervalSeries0);
      assertNull(xYIntervalSeries0.getDescription());
      assertEquals(0, xYIntervalSeries0.getItemCount());
      assertTrue(xYIntervalSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYIntervalSeries0.getMaximumItemCount());
      assertTrue(xYIntervalSeries0.getAutoSort());
      assertTrue(xYIntervalSeries0.getNotify());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Mon May 31 00:00:00 GMT 2990", mockDate0.toString());
      assertEquals(32201107200000L, hour0.getFirstMillisecond());
      assertEquals(32201107200000L, hour0.getLastMillisecond());
      assertEquals(0, hour0.getHour());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[1];
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = (double) 1004;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(hour0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Mon May 31 00:00:00 GMT 2990", mockDate0.toString());
      assertEquals(32201107200000L, hour0.getFirstMillisecond());
      assertEquals(32201107200000L, hour0.getLastMillisecond());
      assertEquals(0, hour0.getHour());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(17, doubleArray0.length);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      assertEquals(1004.0, number0);
      assertNotNull(number0);
      assertEquals("Mon May 31 00:00:00 GMT 2990", mockDate0.toString());
      assertEquals(32201107200000L, hour0.getFirstMillisecond());
      assertEquals(32201107200000L, hour0.getLastMillisecond());
      assertEquals(0, hour0.getHour());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(17, doubleArray0.length);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertEquals("Mon May 31 00:00:00 GMT 2990", mockDate0.toString());
      assertEquals(32201107200000L, hour0.getFirstMillisecond());
      assertEquals(32201107200000L, hour0.getLastMillisecond());
      assertEquals(0, hour0.getHour());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1004.0, range0.getUpperBound(), 0.01);
      assertEquals(1004.0, range0.getCentralValue(), 0.01);
      assertEquals(1004.0, range0.getLowerBound(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(17, doubleArray0.length);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      mockDate0.setTime(1004);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1004;
      doubleArray0[2] = (double) 23;
      doubleArray0[3] = (double) 0;
      Date date0 = hour0.getEnd();
      assertNotNull(date0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", date0.toString());
      assertFalse(date0.equals((Object)mockDate0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(mockDate0, date0);
      assertNotSame(date0, mockDate0);
      
      long long0 = MockDate.UTC((-461), 37, 0, 1004, 0, 965);
      assertEquals((-16655082235000L), long0);
      
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(hour0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(mockDate0.equals((Object)date0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Stack<IntervalXYDelegate> stack0 = new Stack<IntervalXYDelegate>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotNull(range0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1004.0, range0.getLength(), 0.01);
      assertEquals(1004.0, range0.getUpperBound(), 0.01);
      assertEquals(502.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(mockDate0.equals((Object)date0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(mockDate0, date0);
      
      IntervalXYDelegate intervalXYDelegate0 = stack0.push((IntervalXYDelegate) null);
      assertNull(intervalXYDelegate0);
      assertFalse(stack0.isEmpty());
      assertEquals("[null]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      
      IntervalXYDelegate intervalXYDelegate1 = stack0.push((IntervalXYDelegate) null);
      assertNull(intervalXYDelegate1);
      assertFalse(stack0.isEmpty());
      assertEquals("[null, null]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, false);
      assertNotNull(range1);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(502.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1004.0, range1.getUpperBound(), 0.01);
      assertEquals(1004.0, range1.getLength(), 0.01);
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(mockDate0.equals((Object)date0));
      assertTrue(range1.equals((Object)range0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(mockDate0, date0);
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      double[][] doubleArray1 = new double[2][4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Comparable<Float> comparable0 = null;
      int int0 = timeTableXYDataset0.indexOf((Comparable) null);
      assertEquals((-1), int0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeTableXYDataset0);
      assertTrue(boolean0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Minute minute0 = new Minute();
      assertNotNull(minute0);
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Byte byte0 = new Byte((byte) (-73));
      assertEquals((byte) (-73), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-73));
      assertEquals((byte) (-73), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      XYSeries xYSeries0 = new XYSeries(minute0, true);
      assertNotNull(xYSeries0);
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      xYSeries0.add(4525.37724, (Number) byte0, true);
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals((-73.0), xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(4525.37724, xYSeries0.getMaxX(), 0.01);
      assertEquals((-73.0), xYSeries0.getMaxY(), 0.01);
      assertEquals(4525.37724, xYSeries0.getMinX(), 0.01);
      assertTrue(byte0.equals((Object)byte1));
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals((-73.0), xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(4525.37724, xYSeries0.getMaxX(), 0.01);
      assertEquals((-73.0), xYSeries0.getMaxY(), 0.01);
      assertEquals(4525.37724, xYSeries0.getMinX(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, (-473.9596031773311));
      assertNotNull(xYBarDataset0);
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals((-73.0), xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(4525.37724, xYSeries0.getMaxX(), 0.01);
      assertEquals((-73.0), xYSeries0.getMaxY(), 0.01);
      assertEquals(4525.37724, xYSeries0.getMinX(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals((-473.9596031773311), xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0);
      assertNull(range0);
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals((-73.0), xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(4525.37724, xYSeries0.getMaxX(), 0.01);
      assertEquals((-73.0), xYSeries0.getMaxY(), 0.01);
      assertEquals(4525.37724, xYSeries0.getMinX(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals((-473.9596031773311), xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      Comparable<Byte>[] comparableArray0 = null;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      boolean boolean0 = vector0.add((Byte) null);
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[null]", vector0.toString());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, (OHLCDataItem[]) null);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[4];
      doubleArray1[1] = 3708.857024385;
      doubleArray1[2] = (-3903.922027934);
      doubleArray1[3] = 1682.05282728;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 3708.857024385;
      doubleArray2[1] = 3708.857024385;
      doubleArray2[2] = 1682.05282728;
      doubleArray2[3] = (-3903.922027934);
      doubleArray2[4] = 1682.05282728;
      doubleArray2[5] = 1682.05282728;
      doubleArray2[6] = (-3903.922027934);
      doubleArray2[7] = 1682.05282728;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 894.09822;
      doubleArray3[1] = 1682.05282728;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[5];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(Integer.MAX_VALUE, (-2542), Integer.MAX_VALUE, Integer.MAX_VALUE, (-2542), 120);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2147483647,MONTH=-2542,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2147483647,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=2147483647,HOUR_OF_DAY=2147483647,MINUTE=-2542,SECOND=120,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      dateArray0[4] = date0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 120;
      doubleArray0[1] = (double) 1030;
      doubleArray0[2] = (double) 1030;
      doubleArray0[2] = (double) 120;
      doubleArray0[4] = (double) 1030;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {120.0, 1030.0, 120.0, 0.0, 1030.0}, doubleArray0, 0.01);
      assertEquals(5, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.361170208132E13, range0.getLength(), 0.01);
      assertEquals((-5.41344175934E12), range0.getCentralValue(), 0.01);
      assertEquals((-1.22192928E13), range0.getLowerBound(), 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {120.0, 1030.0, 120.0, 0.0, 1030.0}, doubleArray0, 0.01);
      assertEquals(5, dateArray0.length);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getColumnKeys();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      defaultCategoryDataset0.addValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      assertNotNull(range1);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(integer0);
      assertNotNull(xYIntervalSeries0);
      assertTrue(xYIntervalSeries0.getNotify());
      assertEquals(0, xYIntervalSeries0.getItemCount());
      assertTrue(xYIntervalSeries0.getAutoSort());
      assertTrue(xYIntervalSeries0.getAllowDuplicateXValues());
      assertNull(xYIntervalSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYIntervalSeries0.getMaximumItemCount());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) list0, true);
      assertNotNull(range2);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      
      Range range3 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) list0, true);
      assertNotNull(range3);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range0));
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Date[] dateArray0 = new Date[2];
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(11, 715);
      assertNotNull(simpleHistogramBin0);
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(simpleHistogramBin0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(simpleHistogramDataset0);
      assertEquals(715.0, number0);
      assertNotNull(number0);
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      SimpleHistogramDataset simpleHistogramDataset1 = (SimpleHistogramDataset)simpleHistogramDataset0.clone();
      assertNotNull(simpleHistogramDataset1);
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, true);
      assertNotNull(range0);
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(715.0, range0.getUpperBound(), 0.01);
      assertEquals(704.0, range0.getLength(), 0.01);
      assertEquals(11.0, range0.getLowerBound(), 0.01);
      assertEquals(363.0, range0.getCentralValue(), 0.01);
      assertTrue(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      
      Range range1 = Range.combine(range0, range0);
      assertNotNull(range1);
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(715.0, range0.getUpperBound(), 0.01);
      assertEquals(704.0, range0.getLength(), 0.01);
      assertEquals(11.0, range0.getLowerBound(), 0.01);
      assertEquals(363.0, range0.getCentralValue(), 0.01);
      assertEquals(363.0, range1.getCentralValue(), 0.01);
      assertEquals(704.0, range1.getLength(), 0.01);
      assertEquals(715.0, range1.getUpperBound(), 0.01);
      assertEquals(11.0, range1.getLowerBound(), 0.01);
      assertTrue(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertTrue(range1.equals((Object)range0));
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) simpleHistogramDataset0);
      assertFalse(boolean0);
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getColumnKeys();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      defaultCategoryDataset0.addValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(300.0, range0.getUpperBound(), 0.01);
      assertEquals(300.0, range0.getCentralValue(), 0.01);
      assertEquals(300.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      assertNotNull(range1);
      assertEquals(300.0, range1.getUpperBound(), 0.01);
      assertEquals(300.0, range1.getLowerBound(), 0.01);
      assertEquals(300.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(integer0);
      assertNotNull(xYIntervalSeries0);
      assertNull(xYIntervalSeries0.getDescription());
      assertEquals(0, xYIntervalSeries0.getItemCount());
      assertTrue(xYIntervalSeries0.getAllowDuplicateXValues());
      assertTrue(xYIntervalSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, xYIntervalSeries0.getMaximumItemCount());
      assertTrue(xYIntervalSeries0.getAutoSort());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) list0, true);
      assertNotNull(range2);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(300.0, range2.getLowerBound(), 0.01);
      assertEquals(300.0, range2.getUpperBound(), 0.01);
      assertEquals(300.0, range2.getCentralValue(), 0.01);
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      
      Range range3 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0);
      assertNull(range3);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      mockDate0.setTime(1004);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1004;
      doubleArray0[2] = (double) 23;
      doubleArray0[3] = (double) 0;
      Date date0 = hour0.getEnd();
      assertNotNull(date0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", date0.toString());
      assertFalse(date0.equals((Object)mockDate0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(mockDate0, date0);
      assertNotSame(date0, mockDate0);
      
      Stack<TimeTableXYDataset> stack0 = new Stack<TimeTableXYDataset>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      boolean boolean0 = true;
      double[][] doubleArray1 = new double[8][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      boolean boolean1 = stack0.add(timeTableXYDataset0);
      assertTrue(boolean1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(timeTableXYDataset0));
      assertTrue(boolean1 == boolean0);
      
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.TimeTableXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1004;
      doubleArray0[2] = (double) 23;
      doubleArray0[3] = (double) 0;
      Date date0 = hour0.getEnd();
      assertNotNull(date0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", date0.toString());
      assertTrue(date0.equals((Object)mockDate0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(mockDate0, date0);
      assertNotSame(date0, mockDate0);
      
      long long0 = MockDate.UTC((-461), 37, 0, 1004, 0, 965);
      assertEquals((-16655082235000L), long0);
      
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(hour0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertTrue(mockDate0.equals((Object)date0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Stack<IntervalXYDelegate> stack0 = new Stack<IntervalXYDelegate>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotNull(range0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1004.0, range0.getUpperBound(), 0.01);
      assertEquals(502.0, range0.getCentralValue(), 0.01);
      assertEquals(1004.0, range0.getLength(), 0.01);
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertTrue(mockDate0.equals((Object)date0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(mockDate0, date0);
      
      IntervalXYDelegate intervalXYDelegate0 = stack0.push((IntervalXYDelegate) null);
      assertNull(intervalXYDelegate0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[null]", stack0.toString());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range0, true);
      assertNull(range1);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[null]", stack0.toString());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1004.0, range0.getUpperBound(), 0.01);
      assertEquals(502.0, range0.getCentralValue(), 0.01);
      assertEquals(1004.0, range0.getLength(), 0.01);
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertTrue(mockDate0.equals((Object)date0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(mockDate0, date0);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, (List) stack0, false);
      assertNotNull(range2);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(3.2204782844E13, range2.getLowerBound(), 0.01);
      assertEquals(3.2204782844E13, range2.getUpperBound(), 0.01);
      assertEquals(3.2204782844E13, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[null]", stack0.toString());
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertTrue(mockDate0.equals((Object)date0));
      assertFalse(range2.equals((Object)range0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(mockDate0, date0);
      assertNotSame(range2, range0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, false);
      assertNotNull(range0);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2, doubleArray0.length);
      
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 27);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      String string0 = "";
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "Jjl8#", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) "");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[2];
      mockDate0.setTime(1004);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1004;
      doubleArray0[2] = (double) 23;
      doubleArray0[3] = (double) 0;
      Date date0 = hour0.getEnd();
      assertNotNull(date0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", date0.toString());
      assertFalse(date0.equals((Object)mockDate0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(mockDate0, date0);
      assertNotSame(date0, mockDate0);
      
      long long0 = mockDate0.getTime();
      assertEquals(1004L, long0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertFalse(mockDate0.equals((Object)date0));
      assertNotSame(mockDate0, date0);
      
      long long1 = MockDate.UTC((-461), 37, 0, 1004, 0, 965);
      assertEquals((-16655082235000L), long1);
      assertFalse(long1 == long0);
      
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(hour0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(mockDate0.equals((Object)date0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Stack<IntervalXYDelegate> stack0 = new Stack<IntervalXYDelegate>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotNull(range0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1004.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1004.0, range0.getLength(), 0.01);
      assertEquals(502.0, range0.getCentralValue(), 0.01);
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(mockDate0.equals((Object)date0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(mockDate0, date0);
      
      IntervalXYDelegate intervalXYDelegate0 = stack0.push((IntervalXYDelegate) null);
      assertNull(intervalXYDelegate0);
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      
      IntervalXYDelegate intervalXYDelegate1 = stack0.push((IntervalXYDelegate) null);
      assertNull(intervalXYDelegate1);
      assertFalse(stack0.isEmpty());
      assertEquals("[null, null]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MockDate mockDate0 = new MockDate(30, 30, 34, 35, 29, 11);
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 34;
      doubleArray0[1] = (double) 29;
      doubleArray0[2] = (double) 11;
      doubleArray0[3] = (double) 35;
      doubleArray0[4] = (double) 30;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Thu Aug 04 11:29:11 GMT 1932", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {34.0, 29.0, 11.0, 35.0, 30.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertEquals("Thu Aug 04 11:29:11 GMT 1932", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-1.180528249E12), range0.getUpperBound(), 0.01);
      assertEquals((-1.180528249E12), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.180528249E12), range0.getLowerBound(), 0.01);
      assertArrayEquals(new double[] {34.0, 29.0, 11.0, 35.0, 30.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Stack<IntervalXYDelegate> stack0 = new Stack<IntervalXYDelegate>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      boolean boolean0 = stack0.add((IntervalXYDelegate) null);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[null]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-2777.59593142), (-2777.59593142));
      assertNotNull(powerFunction2D0);
      assertEquals((-2777.59593142), powerFunction2D0.getA(), 0.01);
      assertEquals((-2777.59593142), powerFunction2D0.getB(), 0.01);
      
      Short short0 = new Short((short)59);
      assertEquals((short)59, (short)short0);
      assertNotNull(short0);
      
      XYDataItem xYDataItem0 = new XYDataItem((Number) short0, (Number) short0);
      assertNotNull(xYDataItem0);
      assertEquals(59.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(59.0, xYDataItem0.getYValue(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, (-2777.59593142), (-1053.2925107052802), 5, xYDataItem0);
      assertNotNull(xYSeriesCollection0);
      assertEquals((-2777.59593142), powerFunction2D0.getA(), 0.01);
      assertEquals((-2777.59593142), powerFunction2D0.getB(), 0.01);
      assertEquals(59.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(59.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(defaultTableXYDataset0);
      assertNotNull(xYDatasetTableModel0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((XYDataset) xYSeriesCollection0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals((-2777.59593142), powerFunction2D0.getA(), 0.01);
      assertEquals((-2777.59593142), powerFunction2D0.getB(), 0.01);
      assertEquals(59.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(59.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertNull(range0);
      assertEquals((-2777.59593142), powerFunction2D0.getA(), 0.01);
      assertEquals((-2777.59593142), powerFunction2D0.getB(), 0.01);
      assertEquals(59.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(59.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(11, 715);
      assertNotNull(simpleHistogramBin0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(simpleHistogramBin0);
      assertNotNull(simpleHistogramDataset0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(simpleHistogramDataset0);
      assertEquals(715.0, number0);
      assertNotNull(number0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      simpleHistogramBin0.setItemCount(715);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(715, simpleHistogramBin0.getItemCount());
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) simpleHistogramDataset0, true);
      assertNotNull(range0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(715, simpleHistogramBin0.getItemCount());
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.015625, range0.getLowerBound(), 0.01);
      assertEquals(1.015625, range0.getUpperBound(), 0.01);
      assertEquals(1.015625, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      mockDate0.setTime(1004);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 23;
      doubleArray0[2] = (double) 23;
      doubleArray0[3] = (double) 0;
      Date date0 = hour0.getEnd();
      assertNotNull(date0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", date0.toString());
      assertFalse(date0.equals((Object)mockDate0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(mockDate0, date0);
      assertNotSame(date0, mockDate0);
      
      long long0 = MockDate.UTC((-461), 37, 0, 6, 0, 965);
      assertEquals((-16658675035000L), long0);
      
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(hour0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {23.0, 0.0, 23.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(mockDate0.equals((Object)date0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Stack<IntervalXYDelegate> stack0 = new Stack<IntervalXYDelegate>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotNull(range0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(23.0, range0.getUpperBound(), 0.01);
      assertEquals(11.5, range0.getCentralValue(), 0.01);
      assertEquals(23.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertArrayEquals(new double[] {23.0, 0.0, 23.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(mockDate0.equals((Object)date0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(mockDate0, date0);
      
      IntervalXYDelegate intervalXYDelegate0 = stack0.push((IntervalXYDelegate) null);
      assertNull(intervalXYDelegate0);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[null]", stack0.toString());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range0, true);
      assertNull(range1);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[null]", stack0.toString());
      assertEquals(23.0, range0.getUpperBound(), 0.01);
      assertEquals(11.5, range0.getCentralValue(), 0.01);
      assertEquals(23.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertArrayEquals(new double[] {23.0, 0.0, 23.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(mockDate0.equals((Object)date0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(mockDate0, date0);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      DefaultHighLowDataset defaultHighLowDataset1 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset1);
      assertEquals(1, defaultHighLowDataset1.getSeriesCount());
      assertArrayEquals(new double[] {23.0, 0.0, 23.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(defaultHighLowDataset1.equals((Object)defaultHighLowDataset0));
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultHighLowDataset1);
      assertFalse(boolean0);
      assertEquals(1, defaultHighLowDataset1.getSeriesCount());
      assertArrayEquals(new double[] {23.0, 0.0, 23.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(defaultHighLowDataset1.equals((Object)defaultHighLowDataset0));
      assertNotSame(defaultHighLowDataset1, defaultHighLowDataset0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Number[][] numberArray0 = new Number[14][2];
      LinkedHashSet<TimeSeriesCollection> linkedHashSet0 = new LinkedHashSet<TimeSeriesCollection>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(14, numberArray0.length);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertNull(range0);
      assertEquals(14, numberArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertTrue(boolean0);
      assertEquals(14, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Stack<Byte> stack0 = new Stack<Byte>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      Byte byte0 = new Byte((byte)10);
      assertEquals((byte)10, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = stack0.add(byte0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[10]", stack0.toString());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains((byte)10));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      String[] stringArray0 = new String[0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, stringArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(11, 715);
      assertNotNull(simpleHistogramBin0);
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(simpleHistogramBin0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Double double0 = (Double)DatasetUtilities.findMaximumDomainValue(simpleHistogramDataset0);
      assertEquals(715.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-2548.3405338877), Double.NaN, 11, double0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) simpleHistogramDataset0, true);
      assertNotNull(range0);
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      Float float0 = Float.valueOf(3778.71F);
      assertEquals(3778.71F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(float0));
      
      Float float1 = new Float((-2944.54F));
      assertEquals((-2944.54F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      boolean boolean0 = arrayList0.add(float1);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.contains(3778.71F));
      assertTrue(arrayList0.contains(float1));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float(855.516);
      assertEquals(855.516F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      Float float3 = new Float(3778.71F);
      assertEquals(3778.71F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      
      boolean boolean1 = arrayList0.add(float2);
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.contains(float3));
      assertTrue(arrayList0.contains(float2));
      assertNotEquals((float)float2, (float)float3, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertTrue(boolean1 == boolean0);
      
      Stack<DefaultStatisticalCategoryDataset> stack0 = new Stack<DefaultStatisticalCategoryDataset>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      
      stack0.clear();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      
      TreeSet<DefaultHighLowDataset> treeSet0 = new TreeSet<DefaultHighLowDataset>();
      assertNotNull(treeSet0);
      
      Vector<MinguoEra> vector1 = new Vector<MinguoEra>();
      assertNotNull(vector1);
      assertTrue(vector1.isEmpty());
      assertEquals("[]", vector1.toString());
      assertEquals(0, vector1.size());
      assertEquals(10, vector1.capacity());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) vector1, true);
      assertNull(range0);
      assertTrue(vector1.isEmpty());
      assertEquals("[]", vector1.toString());
      assertEquals(0, vector1.size());
      assertEquals(10, vector1.capacity());
      
      MockDate mockDate0 = new MockDate(15, (-911), 15, 346, 1, (-2752));
      assertNotNull(mockDate0);
      
      boolean boolean2 = arrayList0.containsAll(stack0);
      assertTrue(boolean2);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertFalse(arrayList0.contains(float3));
      assertTrue(arrayList0.contains(float2));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Float float4 = new Float(Double.NEGATIVE_INFINITY);
      assertEquals(Float.NEGATIVE_INFINITY, (float)float4, 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      
      boolean boolean3 = arrayList0.add(float4);
      assertTrue(boolean3);
      assertFalse(arrayList0.isEmpty());
      assertEquals(3, arrayList0.size());
      assertFalse(arrayList0.contains(float3));
      assertTrue(arrayList0.contains(float2));
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertFalse(arrayList1.contains(1));
      
      boolean boolean4 = arrayList1.add((Object) null);
      assertTrue(boolean4);
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.contains(1));
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
      assertNull(range1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(3, arrayList0.size());
      assertFalse(arrayList0.contains(float3));
      assertTrue(arrayList0.contains(float2));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      assertNull(number0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, doubleArray0.length);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("b;MNe$X>c0%qXgL+h", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(11, 715);
      assertNotNull(simpleHistogramBin0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(simpleHistogramBin0);
      assertNotNull(simpleHistogramDataset0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, false);
      assertNotNull(range0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(363.0, range0.getCentralValue(), 0.01);
      assertEquals(363.0, range0.getUpperBound(), 0.01);
      assertEquals(363.0, range0.getLowerBound(), 0.01);
      
      Range range1 = Range.combine(range0, range0);
      assertNotNull(range1);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(363.0, range0.getCentralValue(), 0.01);
      assertEquals(363.0, range0.getUpperBound(), 0.01);
      assertEquals(363.0, range0.getLowerBound(), 0.01);
      assertEquals(363.0, range1.getLowerBound(), 0.01);
      assertEquals(363.0, range1.getUpperBound(), 0.01);
      assertEquals(363.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) simpleHistogramDataset0);
      assertFalse(boolean0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      Float float0 = Float.valueOf(3778.71F);
      assertEquals(3778.71F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(float0));
      
      Float float1 = new Float((-2944.54F));
      assertEquals((-2944.54F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      boolean boolean0 = arrayList0.add(float1);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.contains(float0));
      assertTrue(arrayList0.contains(float1));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float(855.516);
      assertEquals(855.516F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      Float float3 = new Float(3778.71F);
      assertEquals(3778.71F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      
      boolean boolean1 = arrayList0.add(float2);
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.contains(3778.71F));
      assertTrue(arrayList0.contains(float1));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float3, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertTrue(boolean1 == boolean0);
      
      Stack<DefaultStatisticalCategoryDataset> stack0 = new Stack<DefaultStatisticalCategoryDataset>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      stack0.clear();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      TreeSet<DefaultHighLowDataset> treeSet0 = new TreeSet<DefaultHighLowDataset>();
      assertNotNull(treeSet0);
      
      Vector<MinguoEra> vector1 = new Vector<MinguoEra>();
      assertNotNull(vector1);
      assertEquals(0, vector1.size());
      assertEquals(10, vector1.capacity());
      assertTrue(vector1.isEmpty());
      assertEquals("[]", vector1.toString());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) vector1, true);
      assertNull(range0);
      assertEquals(0, vector1.size());
      assertEquals(10, vector1.capacity());
      assertTrue(vector1.isEmpty());
      assertEquals("[]", vector1.toString());
      
      MockDate mockDate0 = new MockDate(3, (-911), 3, 346, 1, (-2752));
      assertNotNull(mockDate0);
      
      boolean boolean2 = arrayList0.containsAll(stack0);
      assertTrue(boolean2);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertFalse(arrayList0.contains(3778.71F));
      assertTrue(arrayList0.contains(float1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Float float4 = new Float(Double.NEGATIVE_INFINITY);
      assertEquals(Float.NEGATIVE_INFINITY, (float)float4, 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      
      boolean boolean3 = arrayList0.add(float4);
      assertTrue(boolean3);
      assertFalse(arrayList0.isEmpty());
      assertEquals(3, arrayList0.size());
      assertFalse(arrayList0.contains(3778.71F));
      assertTrue(arrayList0.contains(float1));
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertFalse(arrayList1.contains(3));
      
      boolean boolean4 = arrayList1.add((Object) null);
      assertTrue(boolean4);
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.contains(3));
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean5 = arrayList1.add(object0);
      assertTrue(boolean5);
      assertFalse(arrayList1.isEmpty());
      assertEquals(2, arrayList1.size());
      assertTrue(arrayList1.contains(object0));
      assertFalse(arrayList1.contains(3));
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
      assertNull(range1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(3, arrayList0.size());
      assertFalse(arrayList0.contains(3778.71F));
      assertTrue(arrayList0.contains(float1));
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) yIntervalSeriesCollection0, true);
      assertNull(range2);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      
      Range range3 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, Double.NEGATIVE_INFINITY);
      assertNotNull(range3);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(Double.NaN, range3.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range3.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range3.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range3.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(11, 715);
      assertNotNull(simpleHistogramBin0);
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(simpleHistogramBin0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Double double0 = (Double)DatasetUtilities.findMaximumDomainValue(simpleHistogramDataset0);
      assertEquals(715.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-2548.3405338877), Double.NaN, 11, double0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(defaultTableXYDataset0);
      assertNotNull(xYDatasetTableModel0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Double double1 = (Double)DatasetUtilities.findMaximumRangeValue((XYDataset) simpleHistogramDataset0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) simpleHistogramDataset0, false);
      assertNotNull(range0);
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, (List) stack0, true);
      assertNull(range0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(2, doubleArray0.length);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      assertNotNull(mockSimpleDateFormat0);
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertNotNull(timeZone0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("GMT", timeZone0.getID());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) stack0, true);
      assertNull(range1);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      double[][] doubleArray0 = new double[5][2];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 909.4850611227357;
      doubleArray2[1] = 1.7976931348623157E308;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 1.7976931348623157E308;
      doubleArray3[1] = 909.4850611227357;
      doubleArray3[2] = 909.4850611227357;
      doubleArray3[3] = 1.7976931348623157E308;
      doubleArray3[4] = 909.4850611227357;
      doubleArray3[5] = 1.7976931348623157E308;
      doubleArray3[6] = 909.4850611227357;
      doubleArray3[7] = 909.4850611227357;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 909.4850611227357;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = 909.4850611227357;
      doubleArray5[1] = 909.4850611227357;
      doubleArray5[2] = 1.7976931348623157E308;
      doubleArray5[3] = 1.7976931348623157E308;
      doubleArray5[4] = 1.7976931348623157E308;
      doubleArray5[5] = 1.7976931348623157E308;
      doubleArray0[4] = doubleArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("OH#@whs!", "OH#@whs!", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(5, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(5, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(1.7976931348623157E308, number0);
      assertNotNull(number0);
      assertEquals(5, doubleArray0.length);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains(1.7976931348623157E308));
      
      Range range1 = DatasetUtilities.findRangeBounds(categoryDataset0, (List) vector0, true);
      assertNull(range1);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(5, doubleArray0.length);
      assertFalse(vector0.contains(1.7976931348623157E308));
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("v~1mwrA=S.h%");
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains("v~1mwrA=S.h%"));
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, false);
      assertNull(range0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) simpleHistogramDataset0, false);
      assertNull(range1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) simpleHistogramDataset0);
      assertTrue(boolean0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[7];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[20];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(hour0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(7, dateArray0.length);
      assertEquals(20, doubleArray0.length);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(7, dateArray0.length);
      assertEquals(20, doubleArray0.length);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(2172.2065359305143, 622.906871628);
      assertNotNull(lineFunction2D0);
      assertEquals(2172.2065359305143, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(622.906871628, lineFunction2D0.getSlope(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-2.147483648E9), 3087.03, 2, mockDate0);
      assertNotNull(xYSeries0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(2172.2065359305143, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(622.906871628, lineFunction2D0.getSlope(), 0.01);
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals((-1.3376823188757585E12), xYSeries0.getMinY(), 0.01);
      assertEquals(3087.0300002098083, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1925104.4065884063, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals((-2.147483648E9), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      
      double[][] doubleArray1 = new double[2][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(20, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(20, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, doubleArray1.length);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(20, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(20, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      double[][] doubleArray0 = new double[5][1];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2251.738);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = (-2251.738);
      doubleArray3[2] = 3815.98025;
      doubleArray3[3] = (-2251.738);
      doubleArray3[4] = (-1.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (-2251.738);
      doubleArray4[1] = (-2251.738);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = (-2251.738);
      doubleArray5[1] = (-2251.738);
      doubleArray5[2] = (-1.0);
      doubleArray5[3] = (-1.0);
      doubleArray0[4] = doubleArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("J}j|t#", "J}j|t#", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(5, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(1563.2422500000002, range0.getUpperBound(), 0.01);
      assertEquals((-1471.1168749999997), range0.getCentralValue(), 0.01);
      assertEquals((-4505.476), range0.getLowerBound(), 0.01);
      assertEquals(6068.71825, range0.getLength(), 0.01);
      assertEquals(5, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertEquals((-6757.214), number0);
      assertNotNull(number0);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      int int0 = 1030;
      MockDate mockDate0 = new MockDate(1030, 1030, 1030, 1030, 1030, 1030);
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate();
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      Object object0 = mockDate1.clone();
      assertNotNull(object0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertTrue(object0.equals((Object)mockDate1));
      assertFalse(object0.equals((Object)mockDate0));
      assertNotSame(mockDate1, object0);
      assertNotSame(mockDate1, mockDate0);
      assertNotSame(object0, mockDate1);
      assertNotSame(object0, mockDate0);
      
      double[] doubleArray0 = new double[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate1, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertTrue(mockDate1.equals((Object)object0));
      
      int int1 = (-5742);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of row keys does not match the number of rows in the data array.", "The number of row keys does not match the number of rows in the data array.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 3877.0);
      assertNotNull(range0);
      assertEquals(3877.0, range0.getLowerBound(), 0.01);
      assertEquals(3877.0, range0.getUpperBound(), 0.01);
      assertEquals(3877.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotNull(range1);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getColumnKeys();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      defaultCategoryDataset0.addValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-783.236);
      doubleArray1[1] = 4132.43198;
      doubleArray1[2] = (-2.147483648E9);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 4132.43198;
      doubleArray2[1] = 4132.43198;
      doubleArray2[2] = (-783.236);
      doubleArray2[3] = (-783.236);
      doubleArray2[4] = (-783.236);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 4132.43198;
      doubleArray3[1] = (-2.147483648E9);
      doubleArray3[2] = 4132.43198;
      doubleArray3[3] = 4132.43198;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "SnN@<g", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertFalse(categoryDataset0.equals((Object)defaultCategoryDataset0));
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds(categoryDataset0, list0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      double[][] doubleArray0 = new double[4][1];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = (-2374.03161866);
      doubleArray1[2] = (-2374.03161866);
      doubleArray1[3] = (-2374.03161866);
      doubleArray1[4] = (-2374.03161866);
      doubleArray1[5] = (-2374.03161866);
      doubleArray1[6] = 1.0;
      doubleArray1[7] = (-2374.03161866);
      doubleArray1[8] = (-2374.03161866);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1.0;
      doubleArray3[1] = 1.0;
      doubleArray3[2] = (-2374.03161866);
      doubleArray3[3] = 1.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 1.0;
      doubleArray4[1] = 1.0;
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(",Z", ",Z", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, (List) stack0, false);
      assertNull(range0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(4, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, (-2374.03161866));
      assertNotNull(range1);
      assertEquals(Double.POSITIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertEquals((-7122.09485598), range1.getLowerBound(), 0.01);
      assertEquals(4, doubleArray0.length);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotNull(range2);
      assertEquals(Double.POSITIVE_INFINITY, range2.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range2.getCentralValue(), 0.01);
      assertEquals((-4748.06323732), range2.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range2.getLength(), 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(range2.equals((Object)range1));
      assertNotSame(range2, range1);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultXYDataset0, (List) stack0, range2, false);
      assertNull(range3);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(Double.POSITIVE_INFINITY, range2.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range2.getCentralValue(), 0.01);
      assertEquals((-4748.06323732), range2.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range2.getLength(), 0.01);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertEquals(4, doubleArray0.length);
      assertFalse(range2.equals((Object)range1));
      assertNotSame(range2, range1);
      
      Range range4 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultXYDataset0, false);
      assertNull(range4);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, (List) stack0, true);
      assertNull(range0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(2, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, (-2374.03161866));
      assertNotNull(range1);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-2374.03161866), range1.getUpperBound(), 0.01);
      assertEquals((-2374.03161866), range1.getCentralValue(), 0.01);
      assertEquals((-2374.03161866), range1.getLowerBound(), 0.01);
      assertEquals(2, doubleArray0.length);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotNull(range2);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(range2.equals((Object)range1));
      assertNotSame(range2, range1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      Number[][] numberArray0 = new Number[1][0];
      Number[] numberArray1 = new Number[7];
      numberArray1[0] = (Number) null;
      numberArray1[1] = (Number) null;
      numberArray1[2] = (Number) null;
      numberArray1[3] = (Number) null;
      numberArray1[4] = (Number) null;
      numberArray1[5] = (Number) null;
      numberArray1[6] = (Number) null;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, numberArray0.length);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, (-610), (-610));
      assertNotNull(slidingCategoryDataset0);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals((-610), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-610), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, numberArray0.length);
      
      boolean boolean0 = false;
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(slidingCategoryDataset0, false);
      assertNull(range0);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals((-610), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-610), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, numberArray0.length);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertNull(range1);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, numberArray0.length);
      
      XYIntervalSeries xYIntervalSeries0 = null;
      try {
        xYIntervalSeries0 = new XYIntervalSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(";51mwr1=S.%");
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(";51mwr1=S.%"));
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, false);
      assertNull(range0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) simpleHistogramDataset0);
      assertNull(number0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, false);
      assertNull(range1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 5, 5);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(5, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(5, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("v~1mwrA=S.h%");
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains("v~1mwrA=S.h%"));
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Object object0 = mockDate0.clone();
      assertNotNull(object0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
      assertTrue(object0.equals((Object)mockDate0));
      assertNotSame(mockDate0, object0);
      assertNotSame(object0, mockDate0);
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3801.264;
      doubleArray0[1] = 622.906871628;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("v~1mwrA=S.h%", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {3801.264, 622.906871628}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertArrayEquals(new double[] {3801.264, 622.906871628}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, 622.906871628);
      assertNotNull(range1);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(622.906871628, range1.getUpperBound(), 0.01);
      assertEquals(622.906871628, range1.getCentralValue(), 0.01);
      assertEquals(622.906871628, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
      assertNotNull(range2);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Function<TimeSeriesCollection, TimeSeriesCollection> function0 = Function.identity();
      assertNotNull(function0);
      
      Function<DefaultBoxAndWhiskerCategoryDataset, DefaultBoxAndWhiskerCategoryDataset> function1 = Function.identity();
      assertNotNull(function1);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>(2046);
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      UnaryOperator<Float> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      arrayList0.replaceAll(unaryOperator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Float float0 = new Float((double) 2046);
      assertEquals(2046.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      Number[][] numberArray0 = new Number[2][6];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = (Number) bigInteger0;
      numberArray1[1] = (Number) float0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[8];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) float0;
      numberArray2[1] = (Number) float0;
      numberArray2[2] = (Number) float0;
      numberArray2[3] = (Number) float0;
      numberArray2[4] = (Number) float0;
      numberArray2[5] = (Number) float0;
      numberArray2[6] = (Number) float0;
      numberArray2[7] = (Number) bigInteger0;
      numberArray0[1] = numberArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'rowData' argument.", "Null 'rowData' argument.", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, numberArray0.length);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) arrayList0, false);
      assertNull(range0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(2, numberArray0.length);
      assertFalse(arrayList0.contains(float0));
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(float0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotNull(range1);
      assertEquals(4092.0, range1.getUpperBound(), 0.01);
      assertEquals(2046.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(4092.0, range1.getLength(), 0.01);
      assertEquals(2, numberArray0.length);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) arrayList0, true);
      assertNull(range2);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(2, numberArray0.length);
      assertFalse(arrayList0.contains(float0));
      
      SimpleHistogramDataset simpleHistogramDataset1 = new SimpleHistogramDataset(";J!{Y");
      assertNotNull(simpleHistogramDataset1);
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      
      TimeTableXYDataset timeTableXYDataset1 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset1);
      assertFalse(timeTableXYDataset1.getDomainIsPointsInTime());
      assertTrue(timeTableXYDataset1.equals((Object)timeTableXYDataset0));
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      UnaryOperator<Float> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Function<TimeSeriesCollection, TimeSeriesCollection> function0 = Function.identity();
      assertNotNull(function0);
      
      Function<DefaultBoxAndWhiskerCategoryDataset, DefaultBoxAndWhiskerCategoryDataset> function1 = Function.identity();
      assertNotNull(function1);
      
      arrayList0.replaceAll(unaryOperator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ArrayDeque<DefaultTableXYDataset> arrayDeque0 = new ArrayDeque<DefaultTableXYDataset>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Float float0 = new Float((-845.2126475));
      assertEquals((-845.21265F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = arrayList0.add(float0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(float0));
      
      boolean boolean1 = arrayList0.containsAll(arrayDeque0);
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(arrayList0.contains(float0));
      assertTrue(boolean1 == boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertNull(range0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(float0));
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(float0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Comparable<IntervalXYDelegate>[] comparableArray0 = (Comparable<IntervalXYDelegate>[]) Array.newInstance(Comparable.class, 2);
      Clock clock0 = MockClock.systemDefaultZone();
      assertNotNull(clock0);
      
      Instant instant0 = MockInstant.now(clock0);
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertNotNull(date0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      Quarter quarter0 = new Quarter(date0);
      assertNotNull(quarter0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      
      comparableArray0[0] = (Comparable<IntervalXYDelegate>) quarter0;
      Minute minute0 = new Minute(date0);
      assertNotNull(minute0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      Minute minute1 = (Minute)minute0.previous();
      assertNotNull(minute1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(20, minute1.getHourValue());
      assertEquals(20, minute1.getMinute());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertFalse(minute1.equals((Object)minute0));
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      
      comparableArray0[1] = (Comparable<IntervalXYDelegate>) minute1;
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 4;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 4;
      doubleArray1[3] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-845.2126475);
      doubleArray2[1] = (-845.2126475);
      doubleArray2[2] = (double) 59;
      doubleArray2[3] = (double) 1;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = 13.0;
      doubleArray2[6] = (double) 0;
      doubleArray2[7] = (double) 59;
      doubleArray2[8] = (double) 1;
      doubleArray0[1] = doubleArray2;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of column keys does not match the number of columns in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Number[][] numberArray0 = new Number[14][2];
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      HashSet<TimeSeriesCollection> hashSet0 = new HashSet<TimeSeriesCollection>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("sV", "", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(14, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNull(number0);
      assertEquals(14, numberArray0.length);
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) xYIntervalSeriesCollection0);
      assertTrue(boolean0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertNull(number1);
      assertEquals(14, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of row keys does not match the number of rows in the data array.", "The number of row keys does not match the number of rows in the data array.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ArrayList<DefaultTableXYDataset> arrayList1 = new ArrayList<DefaultTableXYDataset>();
      assertNotNull(arrayList1);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      boolean boolean0 = arrayList0.containsAll(arrayList1);
      assertTrue(boolean0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      Number[][] numberArray0 = new Number[1][4];
      Number[] numberArray1 = new Number[1];
      Float float0 = new Float(936.55F);
      assertEquals(936.55F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      numberArray1[0] = (Number) float0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertNotNull(categoryDataset1);
      assertEquals(1, numberArray0.length);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotSame(categoryDataset1, categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset1);
      assertEquals(936.5499877929688, number0);
      assertNotNull(number0);
      assertEquals(1, numberArray0.length);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotSame(categoryDataset1, categoryDataset0);
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYIntervalSeriesCollection0, (List) arrayList0, false);
      assertNull(range0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertFalse(arrayList0.contains(float0));
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) xYIntervalSeriesCollection0);
      assertTrue(boolean1);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertTrue(boolean1 == boolean0);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset1);
      assertEquals(0.0, number1);
      assertNotNull(number1);
      assertEquals(1, numberArray0.length);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertFalse(number1.equals((Object)number0));
      assertNotSame(categoryDataset1, categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(11, 715);
      assertNotNull(simpleHistogramBin0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(simpleHistogramBin0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Double double0 = (Double)DatasetUtilities.findMaximumDomainValue(simpleHistogramDataset0);
      assertEquals(715.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-2548.3405338877), Double.NaN, 11, double0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(defaultTableXYDataset0);
      assertNotNull(xYDatasetTableModel0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      xYDatasetTableModel0.fireTableRowsUpdated(11, 11);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      simpleHistogramDataset0.removeChangeListener(xYDatasetTableModel0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      Double double1 = (Double)DatasetUtilities.findMaximumRangeValue((XYDataset) simpleHistogramDataset0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertNull(range0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotEquals((double)double0, (double)double1, 0.01);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(simpleHistogramDataset0);
      assertNotNull(range1);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[7];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[15];
      doubleArray0[0] = (double) 1004;
      doubleArray0[2] = (double) 23;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 23;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(hour0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(7, dateArray0.length);
      assertEquals(15, doubleArray0.length);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Stack<IntervalXYDelegate> stack0 = new Stack<IntervalXYDelegate>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Double double0 = new Double(23);
      assertEquals(23.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue(defaultHighLowDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(11, 715);
      assertNotNull(simpleHistogramBin0);
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(simpleHistogramBin0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Double double0 = (Double)DatasetUtilities.findMaximumDomainValue(simpleHistogramDataset0);
      assertEquals(715.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-2548.3405338877), Double.NaN, 11, double0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(defaultTableXYDataset0);
      assertNotNull(xYDatasetTableModel0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      simpleHistogramDataset0.removeChangeListener(xYDatasetTableModel0);
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      Double double1 = (Double)DatasetUtilities.findMaximumRangeValue((XYDataset) simpleHistogramDataset0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertNull(range0);
      assertEquals(11.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(715.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotEquals((double)double0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      int int0 = 1030;
      MockDate mockDate0 = new MockDate(1030, 1030, 1030, 1030, 1030, 1030);
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      int int1 = defaultMultiValueCategoryDataset0.getColumnCount();
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      defaultMultiValueCategoryDataset0.validateObject();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      LinkedList<DefaultTableModel> linkedList0 = new LinkedList<DefaultTableModel>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 1030;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Thu Oct 08 15:27:10 GMT 3018", mockDate0.toString());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1030.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Stack<IntervalXYDelegate> stack0 = new Stack<IntervalXYDelegate>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getColumnKeys();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      defaultCategoryDataset0.addValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, 340);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 340, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getColumnKeys();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      defaultCategoryDataset0.addValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(integer0);
      assertNotNull(xYIntervalSeries0);
      assertNull(xYIntervalSeries0.getDescription());
      assertEquals(0, xYIntervalSeries0.getItemCount());
      assertTrue(xYIntervalSeries0.getAllowDuplicateXValues());
      assertTrue(xYIntervalSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYIntervalSeries0.getMaximumItemCount());
      assertTrue(xYIntervalSeries0.getNotify());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      int int0 = defaultMultiValueCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      
      defaultMultiValueCategoryDataset0.validateObject();
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) list0, true);
      assertNull(range2);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      System.setCurrentTimeMillis((-1L));
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) list0, range0, false);
      assertNull(range3);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertTrue(range0.equals((Object)range1));
      assertNotSame(range0, range1);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Number[][] numberArray0 = new Number[0][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, numberArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNull(range0);
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, numberArray0.length);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertNotNull(regularTimePeriod0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getFirstMillisecond());
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(fixedMillisecond0);
      assertNotNull(xYIntervalSeries0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertTrue(xYIntervalSeries0.getAllowDuplicateXValues());
      assertNull(xYIntervalSeries0.getDescription());
      assertTrue(xYIntervalSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYIntervalSeries0.getMaximumItemCount());
      assertTrue(xYIntervalSeries0.getNotify());
      assertEquals(0, xYIntervalSeries0.getItemCount());
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      int int0 = defaultMultiValueCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      
      defaultMultiValueCategoryDataset0.validateObject();
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) arrayList0, false);
      assertNull(range1);
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, numberArray0.length);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(fixedMillisecond0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      
      TimeTableXYDataset timeTableXYDataset1 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset1);
      assertFalse(timeTableXYDataset1.getDomainIsPointsInTime());
      assertTrue(timeTableXYDataset1.equals((Object)timeTableXYDataset0));
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNull(range2);
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, numberArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 1958);
      assertNotNull(pieDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, numberArray0.length);
      
      Range range3 = DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, arrayList0, false);
      assertNull(range3);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(timeTableXYDataset0.equals((Object)timeTableXYDataset1));
      assertNotSame(timeTableXYDataset0, timeTableXYDataset1);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1030, 1030, 1030, 1030, 1030, 1030);
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      int int0 = defaultMultiValueCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      
      defaultMultiValueCategoryDataset0.validateObject();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      LinkedList<DefaultTableModel> linkedList0 = new LinkedList<DefaultTableModel>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      
      System.setCurrentTimeMillis(1030);
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultXYZDataset0, (List) linkedList0, range0, false);
      assertNull(range1);
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Range range2 = DatasetUtilities.iterateToFindDomainBounds(defaultXYZDataset0, linkedList0, false);
      assertNull(range2);
      assertEquals(0, linkedList0.size());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, (Comparable) dateArray0[0]);
      assertNotNull(pieDataset0);
      assertEquals(1, dateArray0.length);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) dateArray0[0], (KeyedValues) pieDataset0);
      assertNotNull(categoryDataset0);
      assertEquals(1, dateArray0.length);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Float float0 = new Float((-1098.352F));
      assertEquals((-1098.352F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = arrayList0.add(float0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains((-1098.352F)));
      
      Float float1 = new Float(842.8F);
      assertEquals(842.8F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYTaskDataset0, true);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(true));
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) xYTaskDataset0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertNull(range1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) xYTaskDataset0);
      assertNull(range2);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertNull(range3);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("v~1mwrA=S.h%");
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Stack<IntervalXYDelegate> stack0 = new Stack<IntervalXYDelegate>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(simpleHistogramDataset0);
      assertNotNull(intervalXYDelegate0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      
      boolean boolean0 = stack0.add(intervalXYDelegate0);
      assertTrue(boolean0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(stack0.contains(intervalXYDelegate0));
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(3415, (-497));
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-498), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(simpleHistogramDataset0, stack0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.IntervalXYDelegate cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      mockDate0.setTime(1004);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1004;
      doubleArray0[2] = (double) 23;
      doubleArray0[3] = (double) 0;
      Date date0 = hour0.getEnd();
      assertNotNull(date0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", date0.toString());
      assertFalse(date0.equals((Object)mockDate0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(mockDate0, date0);
      assertNotSame(date0, mockDate0);
      
      long long0 = MockDate.UTC((-461), 37, 0, 6, (-78), 965);
      assertEquals((-16658679715000L), long0);
      
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(hour0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(mockDate0.equals((Object)date0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Stack<IntervalXYDelegate> stack0 = new Stack<IntervalXYDelegate>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotNull(range0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1004.0, range0.getUpperBound(), 0.01);
      assertEquals(502.0, range0.getCentralValue(), 0.01);
      assertEquals(1004.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(mockDate0.equals((Object)date0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(mockDate0, date0);
      
      IntervalXYDelegate intervalXYDelegate0 = stack0.push((IntervalXYDelegate) null);
      assertNull(intervalXYDelegate0);
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, stack0, true);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1004.0, range1.getUpperBound(), 0.01);
      assertEquals(1004.0, range1.getCentralValue(), 0.01);
      assertEquals(1004.0, range1.getLowerBound(), 0.01);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(range1.equals((Object)range0));
      assertFalse(mockDate0.equals((Object)date0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(range1, range0);
      assertNotSame(mockDate0, date0);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range0, true);
      assertNotNull(range2);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(1004.0, range2.getLength(), 0.01);
      assertEquals(1004.0, range2.getUpperBound(), 0.01);
      assertEquals(502.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(1004.0, range0.getUpperBound(), 0.01);
      assertEquals(502.0, range0.getCentralValue(), 0.01);
      assertEquals(1004.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(mockDate0.equals((Object)date0));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range0.equals((Object)range1));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(mockDate0, date0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      DefaultHighLowDataset defaultHighLowDataset1 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset1);
      assertEquals(1, defaultHighLowDataset1.getSeriesCount());
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(defaultHighLowDataset1.equals((Object)defaultHighLowDataset0));
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultHighLowDataset1);
      assertFalse(boolean0);
      assertEquals(1, defaultHighLowDataset1.getSeriesCount());
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(defaultHighLowDataset1.equals((Object)defaultHighLowDataset0));
      assertNotSame(defaultHighLowDataset1, defaultHighLowDataset0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      MockDate mockDate1 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      int int0 = defaultMultiValueCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset1);
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      
      defaultMultiValueCategoryDataset1.validateObject();
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Vector<XYBarDataset> vector0 = new Vector<XYBarDataset>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) vector0, true);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      System.setCurrentTimeMillis(0L);
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (double) 1004);
      assertNotNull(range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1004.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1004.0, range1.getUpperBound(), 0.01);
      assertEquals(1004.0, range1.getCentralValue(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) null, (List) vector0, range1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("v~1mwrA=S.h%");
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains("v~1mwrA=S.h%"));
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, true);
      assertNull(range0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      int int0 = 1030;
      MockDate mockDate0 = new MockDate(1030, 1030, 1030, 1030, 1030, 1030);
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate();
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      Object object0 = mockDate1.clone();
      assertNotNull(object0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertTrue(object0.equals((Object)mockDate1));
      assertFalse(object0.equals((Object)mockDate0));
      assertNotSame(mockDate1, mockDate0);
      assertNotSame(mockDate1, object0);
      assertNotSame(object0, mockDate1);
      assertNotSame(object0, mockDate0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      boolean boolean0 = arrayList0.containsAll(priorityQueue0);
      assertTrue(boolean0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, priorityQueue0.size());
      
      double[][] doubleArray0 = new double[0][3];
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) dateArray0, (Comparable[]) dateArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getColumnKeys();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      defaultCategoryDataset0.addValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(100.0, range0.getUpperBound(), 0.01);
      assertEquals(100.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(100.0, range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      assertNotNull(range1);
      assertEquals(100.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(100.0, range1.getCentralValue(), 0.01);
      assertEquals(100.0, range1.getLowerBound(), 0.01);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertNotNull(regularTimePeriod0);
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(integer0);
      assertNotNull(xYIntervalSeries0);
      assertTrue(xYIntervalSeries0.getNotify());
      assertNull(xYIntervalSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYIntervalSeries0.getMaximumItemCount());
      assertTrue(xYIntervalSeries0.getAllowDuplicateXValues());
      assertTrue(xYIntervalSeries0.getAutoSort());
      assertEquals(0, xYIntervalSeries0.getItemCount());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      int int0 = defaultMultiValueCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      
      defaultMultiValueCategoryDataset0.validateObject();
      Number[][] numberArray0 = new Number[2][3];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = (Number) integer0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[2] = (Number) integer0;
      numberArray2[2] = (Number) integer0;
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      numberArray2[3] = (Number) bigInteger0;
      numberArray0[1] = numberArray2;
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultCategoryDataset0);
      assertEquals(100.0, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1030, 1030, 1030, 1030, 1030, 1030);
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate();
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      Object object0 = mockDate1.clone();
      assertNotNull(object0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(object0.equals((Object)mockDate0));
      assertTrue(object0.equals((Object)mockDate1));
      assertNotSame(mockDate1, mockDate0);
      assertNotSame(mockDate1, object0);
      assertNotSame(object0, mockDate1);
      assertNotSame(object0, mockDate0);
      
      double[] doubleArray0 = new double[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate1, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertTrue(mockDate1.equals((Object)object0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[4];
      String string0 = "The number of row keys does not match the number of rows in the data array.";
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of row keys does not match the number of rows in the data array.", "The number of row keys does not match the number of rows in the data array.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (-1136));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Float float0 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection1);
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      
      boolean boolean0 = true;
      TimeSeries timeSeries0 = new TimeSeries(float0);
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      
      MockDate mockDate0 = new MockDate(184L);
      assertNotNull(mockDate0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "y>AC](ww3GN+O{_Tn");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=y>AC](ww3GN+O{_Tn,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("y>AC](ww3GN+O{_Tn", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      Year year0 = new Year(mockDate0, simpleTimeZone0);
      assertNotNull(year0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=y>AC](ww3GN+O{_Tn,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("y>AC](ww3GN+O{_Tn", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(184L, year0.getFirstMillisecond());
      assertEquals(184L, year0.getLastMillisecond());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals(1970, year0.getYear());
      assertEquals("1970", year0.toString());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-9999));
      assertNull(timeSeriesDataItem0);
      assertEquals((-9999.0), timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=y>AC](ww3GN+O{_Tn,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("y>AC](ww3GN+O{_Tn", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(184L, year0.getFirstMillisecond());
      assertEquals(184L, year0.getLastMillisecond());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals(1970, year0.getYear());
      assertEquals("1970", year0.toString());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (Comparable) float0);
      assertNotNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) null, (KeyedValues) pieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = "";
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, false);
      assertNull(range0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(timeSeriesCollection0);
      assertNull(range1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range2 = DatasetUtilities.iterateXYRangeBounds(timeSeriesCollection0);
      assertNull(range2);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Vector<YIntervalSeriesCollection> vector0 = new Vector<YIntervalSeriesCollection>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = vector0.add(yIntervalSeriesCollection0);
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertTrue(vector0.contains(yIntervalSeriesCollection0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) vector0, (Range) null, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.YIntervalSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection1);
      assertEquals(0, timeSeriesCollection1.getSeriesCount());
      assertTrue(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-620.796269618);
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 2728.77;
      doubleArray1[4] = 2.0088219966;
      doubleArray1[5] = 5341.0169379747;
      doubleArray1[6] = 10.0;
      doubleArray1[7] = 707.089559;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 10.0;
      doubleArray3[1] = 2728.77;
      doubleArray3[2] = 2.0088219966;
      doubleArray3[3] = 5341.0169379747;
      doubleArray3[4] = 1.0;
      doubleArray3[5] = 5341.0169379747;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("=K]?/* c}He", "Rg&%sY,:ey)(M/[", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(13423.812697946001, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(3, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertTrue(timeSeriesCollection0.equals((Object)timeSeriesCollection1));
      assertNotSame(timeSeriesCollection0, timeSeriesCollection1);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-2374.03161866);
      doubleArray1[0] = (-351.583);
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals((-351.583), range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(2, doubleArray0.length);
      
      defaultCategoryDataset0.validateObject();
      assertEquals(2, doubleArray0.length);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(Double.POSITIVE_INFINITY);
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-988.62009368), Double.POSITIVE_INFINITY, true, true);
      assertNotNull(simpleHistogramBin0);
      assertEquals((-988.62009368), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(Double.POSITIVE_INFINITY, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals((-988.62009368), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(Double.POSITIVE_INFINITY, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((XYDataset) simpleHistogramDataset0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-2374.03161866);
      doubleArray1[0] = (-351.583);
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(2, doubleArray0.length);
      
      defaultCategoryDataset0.validateObject();
      assertEquals(2, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(2, doubleArray0.length);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(double0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(2, doubleArray0.length);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Double double1 = (Double)DatasetUtilities.findMinimumStackedRangeValue(defaultCategoryDataset0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals(2, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-1180.65818), Double.POSITIVE_INFINITY);
      assertNotNull(powerFunction2D0);
      assertEquals((-1180.65818), powerFunction2D0.getA(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, powerFunction2D0.getB(), 0.01);
      
      // Undeclared exception!
      DatasetUtilities.sampleFunction2D(powerFunction2D0, (-351.583), Double.POSITIVE_INFINITY, 856, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getColumnKeys();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      defaultCategoryDataset0.addValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertNotNull(regularTimePeriod0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(integer0);
      assertNotNull(xYIntervalSeries0);
      assertEquals(0, xYIntervalSeries0.getItemCount());
      assertNull(xYIntervalSeries0.getDescription());
      assertTrue(xYIntervalSeries0.getNotify());
      assertTrue(xYIntervalSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYIntervalSeries0.getMaximumItemCount());
      assertTrue(xYIntervalSeries0.getAllowDuplicateXValues());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      int int0 = defaultMultiValueCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      
      defaultMultiValueCategoryDataset0.validateObject();
      Number[][] numberArray0 = new Number[2][3];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = (Number) integer0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) integer0;
      numberArray2[1] = (Number) integer0;
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.containsAll(list0);
      assertFalse(boolean0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) list0, true);
      assertNotNull(range2);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(integer0);
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(integer0.equals((Object)int0));
      
      TimeTableXYDataset timeTableXYDataset1 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset1);
      assertFalse(timeTableXYDataset1.getDomainIsPointsInTime());
      assertTrue(timeTableXYDataset1.equals((Object)timeTableXYDataset0));
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Float float0 = new Float((-1098.352F));
      assertEquals((-1098.352F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = arrayList0.add(float0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains((-1098.352F)));
      
      Float float1 = new Float(842.8F);
      assertEquals(842.8F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      double[][] doubleArray0 = new double[0][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of row keys does not match the number of rows in the data array.", "Requires 'samples' > 1", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, doubleArray0.length);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      Year year0 = new Year(2140);
      assertNotNull(year0);
      assertEquals(2140L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2140", year0.toString());
      assertEquals(2140, year0.getYear());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      defaultKeyedValues0.setValue((Comparable) year0, (Number) (-9999));
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertEquals(2140L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2140", year0.toString());
      assertEquals(2140, year0.getYear());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset((Comparable) "Requires 'samples' > 1", (KeyedValues) defaultKeyedValues0);
      assertNotNull(categoryDataset1);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotSame(categoryDataset1, categoryDataset0);
      
      Comparable<String>[] comparableArray0 = (Comparable<String>[]) Array.newInstance(Comparable.class, 0);
      CategoryDataset categoryDataset2 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertNotNull(categoryDataset2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, comparableArray0.length);
      assertFalse(categoryDataset2.equals((Object)categoryDataset1));
      assertTrue(categoryDataset2.equals((Object)categoryDataset0));
      assertNotSame(categoryDataset2, categoryDataset1);
      assertNotSame(categoryDataset2, categoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset2);
      assertNull(number0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, comparableArray0.length);
      assertFalse(categoryDataset2.equals((Object)categoryDataset1));
      assertTrue(categoryDataset2.equals((Object)categoryDataset0));
      assertNotSame(categoryDataset2, categoryDataset1);
      assertNotSame(categoryDataset2, categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("v~1mwrA=S.%");
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains("v~1mwrA=S.%"));
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, false);
      assertNull(range0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      Number[][] numberArray0 = new Number[0][0];
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) simpleHistogramDataset0);
      assertNull(number0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = new Stack<DefaultStatisticalCategoryDataset>();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      defaultCategoryDataset0.addValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertNotNull(regularTimePeriod0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getMiddleMillisecond());
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(integer0);
      assertNotNull(xYIntervalSeries0);
      assertEquals(0, xYIntervalSeries0.getItemCount());
      assertNull(xYIntervalSeries0.getDescription());
      assertTrue(xYIntervalSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYIntervalSeries0.getMaximumItemCount());
      assertTrue(xYIntervalSeries0.getAutoSort());
      assertTrue(xYIntervalSeries0.getNotify());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      int int0 = defaultMultiValueCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      
      defaultMultiValueCategoryDataset0.validateObject();
      Number[][] numberArray0 = new Number[2][3];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = (Number) integer0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) integer0;
      numberArray2[1] = (Number) integer0;
      numberArray2[2] = (Number) integer0;
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("kr", "P", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, numberArray0.length);
      assertFalse(categoryDataset0.equals((Object)defaultCategoryDataset0));
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) list0, true);
      assertNull(range2);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Range range3 = timeTableXYDataset0.getDomainBounds(true);
      assertNull(range3);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeTableXYDataset0);
      assertNull(number0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range4 = DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, false);
      assertNull(range4);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range5 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, (double) 0);
      assertNotNull(range5);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(0.0, range5.getUpperBound(), 0.01);
      assertEquals(0.0, range5.getCentralValue(), 0.01);
      assertEquals(0.0, range5.getLowerBound(), 0.01);
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertTrue(range5.equals((Object)range1));
      assertTrue(range5.equals((Object)range0));
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertNotSame(range5, range1);
      assertNotSame(range5, range0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      int int0 = 1004;
      MockDate mockDate0 = new MockDate(1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      int int1 = new Integer(1004);
      assertEquals(1004, int1);
      assertTrue(int1 == int0);
      
      defaultMultiValueCategoryDataset0.validateObject();
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      Number[][] numberArray0 = new Number[1][6];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("kr", "7Q LmxZEZm?uKaT", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getColumnKeys();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      defaultCategoryDataset0.addValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertNotNull(regularTimePeriod0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getMiddleMillisecond());
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(integer0);
      assertNotNull(xYIntervalSeries0);
      assertNull(xYIntervalSeries0.getDescription());
      assertEquals(0, xYIntervalSeries0.getItemCount());
      assertTrue(xYIntervalSeries0.getAllowDuplicateXValues());
      assertTrue(xYIntervalSeries0.getNotify());
      assertTrue(xYIntervalSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYIntervalSeries0.getMaximumItemCount());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      int int0 = defaultMultiValueCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      
      defaultMultiValueCategoryDataset0.validateObject();
      Number[][] numberArray0 = new Number[2][3];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = (Number) integer0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) integer0;
      numberArray2[1] = (Number) integer0;
      numberArray2[2] = (Number) integer0;
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("kr", "P", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, numberArray0.length);
      assertFalse(categoryDataset0.equals((Object)defaultCategoryDataset0));
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) list0, true);
      assertNull(range2);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      
      Range range3 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertNotNull(range3);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(2, numberArray0.length);
      assertFalse(categoryDataset0.equals((Object)defaultCategoryDataset0));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range1));
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeTableXYDataset0);
      assertNull(number0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Float float0 = new Float((-1098.352F));
      assertEquals((-1098.352F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = arrayList0.add(float0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(float0));
      
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) (-1098.352F);
      doubleArray1[1] = (double) (-1098.352F);
      doubleArray1[2] = (double) (-1098.352F);
      doubleArray1[3] = (double) (-1098.352F);
      doubleArray1[4] = (double) (-1098.352F);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-1098.352F);
      doubleArray2[1] = (double) (-1098.352F);
      doubleArray2[2] = (double) (-1098.352F);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) (-1098.352F);
      doubleArray3[1] = 752.209605;
      doubleArray3[2] = (double) (-1098.352F);
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("sV", "sV", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals((-3295.05615234375), range0.getLowerBound(), 0.01);
      assertEquals(4047.26575734375, range0.getLength(), 0.01);
      assertEquals(752.209605, range0.getUpperBound(), 0.01);
      assertEquals((-1271.423273671875), range0.getCentralValue(), 0.01);
      assertEquals(3, doubleArray0.length);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      jDBCCategoryDataset0.validateObject();
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
      assertNotNull(range1);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(752.209605, number0);
      assertNotNull(number0);
      assertEquals(3, doubleArray0.length);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      assertNotNull(jDesktopPane0);
      assertTrue(jDesktopPane0.isFocusTraversalPolicySet());
      assertTrue(jDesktopPane0.getFocusTraversalKeysEnabled());
      assertTrue(jDesktopPane0.isFocusCycleRoot());
      assertFalse(jDesktopPane0.isFocusTraversalPolicyProvider());
      assertFalse(jDesktopPane0.getIgnoreRepaint());
      
      // Undeclared exception!
      try { 
        jDesktopPane0.selectFrame(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.JDesktopPane", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2374.03161866);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (-352.15687466376176);
      doubleArray4[1] = (-2374.03161866);
      doubleArray4[2] = (-1417.7237039464196);
      doubleArray4[3] = Double.POSITIVE_INFINITY;
      doubleArray4[4] = (-2374.03161866);
      doubleArray4[5] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray0.length);
      assertFalse(categoryDataset0.equals((Object)defaultCategoryDataset0));
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals((-2726.1884933237616), range0.getLowerBound(), 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(categoryDataset0.equals((Object)defaultCategoryDataset0));
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      
      defaultCategoryDataset0.validateObject();
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds(categoryDataset0, true);
      assertNotNull(range1);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertEquals((-2374.03161866), range1.getLowerBound(), 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(categoryDataset0.equals((Object)defaultCategoryDataset0));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      assertNotSame(range1, range0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(Double.POSITIVE_INFINITY, number0);
      assertNotNull(number0);
      assertEquals(4, doubleArray0.length);
      assertFalse(categoryDataset0.equals((Object)defaultCategoryDataset0));
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset((-2374.03161866));
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      Number number1 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(Double.POSITIVE_INFINITY, number1);
      assertNotNull(number1);
      assertEquals(4, doubleArray0.length);
      assertFalse(categoryDataset0.equals((Object)defaultCategoryDataset0));
      assertTrue(number1.equals((Object)number0));
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) arrayList0, true);
      assertNull(range2);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Stack<IntervalXYDelegate> stack0 = new Stack<IntervalXYDelegate>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      boolean boolean0 = stack0.add((IntervalXYDelegate) null);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[null]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = 479.72399717068583;
      doubleArray0[2] = 1278.047988424;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (-450.5);
      doubleArray0[5] = (double) 0.0F;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {0.0, 479.72399717068583, 1278.047988424, 0.0, (-450.5), 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-119.37852), 727.869237108934, 2, 0.0);
      assertNotNull(xYSeries0);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals((-1.2644624211712766E14), xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals((-9.147730604110716E10), xYSeries0.getMaxY(), 0.01);
      assertEquals(727.869237108934, xYSeries0.getMaxX(), 0.01);
      assertEquals((-119.37852), xYSeries0.getMinX(), 0.01);
      assertArrayEquals(new double[] {0.0, 479.72399717068583, 1278.047988424, 0.0, (-450.5), 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals((-1.2644624211712766E14), xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals((-9.147730604110716E10), xYSeries0.getMaxY(), 0.01);
      assertEquals(727.869237108934, xYSeries0.getMaxX(), 0.01);
      assertEquals((-119.37852), xYSeries0.getMinX(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertArrayEquals(new double[] {0.0, 479.72399717068583, 1278.047988424, 0.0, (-450.5), 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, 0.0F);
      assertNotNull(xYBarDataset0);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals((-1.2644624211712766E14), xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals((-9.147730604110716E10), xYSeries0.getMaxY(), 0.01);
      assertEquals(727.869237108934, xYSeries0.getMaxX(), 0.01);
      assertEquals((-119.37852), xYSeries0.getMinX(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01);
      assertArrayEquals(new double[] {0.0, 479.72399717068583, 1278.047988424, 0.0, (-450.5), 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range0);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals((-1.2644624211712766E14), xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals((-9.147730604110716E10), xYSeries0.getMaxY(), 0.01);
      assertEquals(727.869237108934, xYSeries0.getMaxX(), 0.01);
      assertEquals((-119.37852), xYSeries0.getMinX(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(848.247757108934, range0.getLength(), 0.01);
      assertEquals((-119.87852), range0.getLowerBound(), 0.01);
      assertEquals(728.369237108934, range0.getUpperBound(), 0.01);
      assertEquals(304.24535855446703, range0.getCentralValue(), 0.01);
      assertArrayEquals(new double[] {0.0, 479.72399717068583, 1278.047988424, 0.0, (-450.5), 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1030, 1030, 1030, 1030, 1030, 1030);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Thu Oct 08 15:27:10 GMT 3018", mockDate0.toString());
      assertEquals(33095921230000L, hour0.getFirstMillisecond());
      assertEquals(33095921230000L, hour0.getLastMillisecond());
      assertEquals(15, hour0.getHour());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate();
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      Hour hour1 = new Hour(mockDate1);
      assertNotNull(hour1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(20, hour1.getHour());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      double[] doubleArray0 = new double[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate1, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      Stack<IntervalXYDelegate> stack0 = new Stack<IntervalXYDelegate>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      SeriesChangeType seriesChangeType0 = SeriesChangeType.ADD;
      assertNotNull(seriesChangeType0);
      assertEquals("SeriesChangeType.ADD", seriesChangeType0.toString());
      
      int int0 = 1272;
      int int1 = (-1744);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds(defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      UnaryOperator<Float> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Function<TimeSeriesCollection, TimeSeriesCollection> function0 = Function.identity();
      assertNotNull(function0);
      
      Function<DefaultBoxAndWhiskerCategoryDataset, DefaultBoxAndWhiskerCategoryDataset> function1 = Function.identity();
      assertNotNull(function1);
      
      arrayList0.replaceAll(unaryOperator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ArrayDeque<DefaultTableXYDataset> arrayDeque0 = new ArrayDeque<DefaultTableXYDataset>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      Float float0 = new Float((-845.2126475));
      assertEquals((-845.21265F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = arrayList0.add(float0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(float0));
      
      boolean boolean1 = arrayList0.containsAll(arrayDeque0);
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayList0.contains(float0));
      assertTrue(boolean1 == boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertNull(range0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(float0));
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, arrayList0, false);
      assertNull(range1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertTrue(arrayList0.contains(float0));
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, true);
      assertNull(range2);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("Null or zero length 'values' argument.");
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Float float0 = new Float(1.0);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      ArrayList<Float> arrayList1 = new ArrayList<Float>();
      assertNotNull(arrayList1);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertFalse(arrayList1.contains(float0));
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      Float float1 = new Float((-17.0F));
      assertEquals((-17.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      boolean boolean0 = arrayList1.add(float1);
      assertTrue(boolean0);
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.contains(float0));
      assertTrue(arrayList1.contains(float1));
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotSame(arrayList1, arrayList0);
      
      HashSet<TimeSeriesCollection> hashSet0 = new HashSet<TimeSeriesCollection>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      boolean boolean1 = arrayList0.containsAll(arrayList1);
      assertFalse(boolean1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList0.contains(float0));
      assertFalse(arrayList1.contains(float0));
      assertTrue(arrayList1.contains(float1));
      assertFalse(arrayList0.equals((Object)arrayList1));
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(arrayList1, arrayList0);
      
      Number[][] numberArray0 = new Number[3][8];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = (Number) float1;
      numberArray1[1] = (Number) float1;
      numberArray1[2] = (Number) float1;
      numberArray1[3] = (Number) float0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[2];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) float1;
      numberArray2[1] = (Number) float1;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[0];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray0[2] = numberArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Fe ><.UBB3FZu", "Fe ><.UBB3FZu", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, numberArray0.length);
      
      Vector<DefaultHighLowDataset> vector0 = new Vector<DefaultHighLowDataset>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) vector0, true);
      assertNull(range0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(3, numberArray0.length);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertNotNull(range1);
      assertEquals((-8.0), range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(18.0, range1.getLength(), 0.01);
      assertEquals((-17.0), range1.getLowerBound(), 0.01);
      assertEquals(3, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getColumnKeys();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      defaultCategoryDataset0.addValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertNotNull(regularTimePeriod0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getFirstMillisecond());
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(integer0);
      assertNotNull(xYIntervalSeries0);
      assertTrue(xYIntervalSeries0.getNotify());
      assertTrue(xYIntervalSeries0.getAutoSort());
      assertEquals(0, xYIntervalSeries0.getItemCount());
      assertTrue(xYIntervalSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYIntervalSeries0.getMaximumItemCount());
      assertNull(xYIntervalSeries0.getDescription());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      int int0 = defaultMultiValueCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      
      defaultMultiValueCategoryDataset0.validateObject();
      Number[][] numberArray0 = new Number[2][3];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = (Number) integer0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) integer0;
      numberArray2[1] = (Number) integer0;
      numberArray2[2] = (Number) integer0;
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      numberArray2[3] = (Number) bigInteger0;
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) list0, false);
      assertNull(range2);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(integer0);
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(integer0.equals((Object)int0));
      
      TimeTableXYDataset timeTableXYDataset1 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset1);
      assertFalse(timeTableXYDataset1.getDomainIsPointsInTime());
      assertTrue(timeTableXYDataset1.equals((Object)timeTableXYDataset0));
      
      Range range3 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNotNull(range3);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range0));
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      UnaryOperator<Float> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Function<TimeSeriesCollection, TimeSeriesCollection> function0 = Function.identity();
      assertNotNull(function0);
      
      Function<DefaultBoxAndWhiskerCategoryDataset, DefaultBoxAndWhiskerCategoryDataset> function1 = Function.identity();
      assertNotNull(function1);
      
      arrayList0.replaceAll(unaryOperator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-203.23073112102824);
      doubleArray0[1] = 1641.591;
      doubleArray0[2] = 241.0;
      doubleArray0[3] = 747.6;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {(-203.23073112102824), 1641.591, 241.0, 747.6}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-3985.52997), 1641.591, 244, 1641.591);
      assertNotNull(xYSeries0);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertEquals(244, xYSeries0.getItemCount());
      assertEquals(3.307880480123888E12, xYSeries0.getMaxY(), 0.01);
      assertEquals((-3985.52997), xYSeries0.getMinX(), 0.01);
      assertEquals(1641.591, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-4.732520039869616E13), xYSeries0.getMinY(), 0.01);
      assertArrayEquals(new double[] {(-203.23073112102824), 1641.591, 241.0, 747.6}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertEquals(244, xYSeries0.getItemCount());
      assertEquals(3.307880480123888E12, xYSeries0.getMaxY(), 0.01);
      assertEquals((-3985.52997), xYSeries0.getMinX(), 0.01);
      assertEquals(1641.591, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-4.732520039869616E13), xYSeries0.getMinY(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertArrayEquals(new double[] {(-203.23073112102824), 1641.591, 241.0, 747.6}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, (-203.23073112102824));
      assertNotNull(xYBarDataset0);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertEquals(244, xYSeries0.getItemCount());
      assertEquals(3.307880480123888E12, xYSeries0.getMaxY(), 0.01);
      assertEquals((-3985.52997), xYSeries0.getMinX(), 0.01);
      assertEquals(1641.591, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-4.732520039869616E13), xYSeries0.getMinY(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals((-203.23073112102824), xYBarDataset0.getBarWidth(), 0.01);
      assertArrayEquals(new double[] {(-203.23073112102824), 1641.591, 241.0, 747.6}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range0);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertEquals(244, xYSeries0.getItemCount());
      assertEquals(3.307880480123888E12, xYSeries0.getMaxY(), 0.01);
      assertEquals((-3985.52997), xYSeries0.getMinX(), 0.01);
      assertEquals(1641.591, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-4.732520039869616E13), xYSeries0.getMinY(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals((-1171.969485), range0.getCentralValue(), 0.01);
      assertEquals(1642.091, range0.getUpperBound(), 0.01);
      assertEquals(5628.12097, range0.getLength(), 0.01);
      assertEquals((-3986.02997), range0.getLowerBound(), 0.01);
      assertArrayEquals(new double[] {(-203.23073112102824), 1641.591, 241.0, 747.6}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-86));
      assertEquals((byte) (-86), (byte)byte0);
      assertNotNull(byte0);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains(byte0));
      
      boolean boolean0 = vector0.add(byte0);
      assertTrue(boolean0);
      assertFalse(vector0.isEmpty());
      assertEquals("[-86]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.contains(byte0));
      
      SerialDate serialDate0 = SerialDate.createInstance(183);
      assertNotNull(serialDate0);
      assertEquals(1900, serialDate0.getYYYY());
      assertNull(serialDate0.getDescription());
      assertEquals(1, serialDate0.getDayOfWeek());
      assertEquals(7, serialDate0.getMonth());
      assertEquals(183, serialDate0.toSerial());
      assertEquals(1, serialDate0.getDayOfMonth());
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      
      Date date0 = serialDate0.toDate();
      assertNotNull(date0);
      assertEquals(1900, serialDate0.getYYYY());
      assertNull(serialDate0.getDescription());
      assertEquals(1, serialDate0.getDayOfWeek());
      assertEquals(7, serialDate0.getMonth());
      assertEquals(183, serialDate0.toSerial());
      assertEquals(1, serialDate0.getDayOfMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      
      Month month0 = new Month(date0);
      assertNotNull(month0);
      assertEquals(1900, serialDate0.getYYYY());
      assertNull(serialDate0.getDescription());
      assertEquals(1, serialDate0.getDayOfWeek());
      assertEquals(7, serialDate0.getMonth());
      assertEquals(183, serialDate0.toSerial());
      assertEquals(1, serialDate0.getDayOfMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(month0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1900, serialDate0.getYYYY());
      assertNull(serialDate0.getDescription());
      assertEquals(1, serialDate0.getDayOfWeek());
      assertEquals(7, serialDate0.getMonth());
      assertEquals(183, serialDate0.toSerial());
      assertEquals(1, serialDate0.getDayOfMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) vector0, true);
      assertNull(range0);
      assertFalse(vector0.isEmpty());
      assertEquals("[-86]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(vector0.contains(byte0));
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertTrue(boolean1);
      assertEquals(1900, serialDate0.getYYYY());
      assertNull(serialDate0.getDescription());
      assertEquals(1, serialDate0.getDayOfWeek());
      assertEquals(7, serialDate0.getMonth());
      assertEquals(183, serialDate0.toSerial());
      assertEquals(1, serialDate0.getDayOfMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1L));
      assertNotNull(fixedMillisecond0);
      assertEquals((-1L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-1L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-1L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-1L), fixedMillisecond0.getSerialIndex());
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false, true);
      assertNotNull(xYSeries0);
      assertEquals((-1L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-1L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-1L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-1L), fixedMillisecond0.getSerialIndex());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate(Double.POSITIVE_INFINITY, Double.NaN);
      assertNull(xYDataItem0);
      assertEquals((-1L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-1L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-1L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-1L), fixedMillisecond0.getSerialIndex());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMaxX(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      UnaryOperator<Float> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Function<TimeSeriesCollection, TimeSeriesCollection> function0 = Function.identity();
      assertNotNull(function0);
      
      Function<DefaultBoxAndWhiskerCategoryDataset, DefaultBoxAndWhiskerCategoryDataset> function1 = Function.identity();
      assertNotNull(function1);
      
      arrayList0.replaceAll(unaryOperator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      byte byte0 = (byte)28;
      Byte byte1 = new Byte((byte)28);
      assertEquals((byte)28, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      boolean boolean0 = vector0.add(byte1);
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals("[28]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertTrue(vector0.contains((byte)28));
      assertTrue(byte1.equals((Object)byte0));
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(byte1);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(byte1.equals((Object)byte0));
      
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, (List) arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("Null or zero length 'values' argument.");
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      simpleHistogramDataset0.fireSelectionEvent();
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      simpleHistogramDataset0.addBin((SimpleHistogramBin) null);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) simpleHistogramDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      int int0 = 1004;
      double[] doubleArray0 = new double[6];
      Stack<IntervalXYDelegate> stack0 = new Stack<IntervalXYDelegate>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      boolean boolean0 = stack0.add((IntervalXYDelegate) null);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(715, 1);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, stack0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      int int0 = 1004;
      Stack<IntervalXYDelegate> stack0 = new Stack<IntervalXYDelegate>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      
      boolean boolean0 = stack0.add((IntervalXYDelegate) null);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals("[null]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(715, 1);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, stack0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      int int0 = timeTableXYDataset0.indexOf((Comparable) null);
      assertEquals((-1), int0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeTableXYDataset0);
      assertTrue(boolean0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Minute minute0 = new Minute();
      assertNotNull(minute0);
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      timeTableXYDataset0.add((TimePeriod) minute0, (Number) 0, "{k%", true);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      Byte byte0 = new Byte((byte) (-73));
      assertEquals((byte) (-73), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-73));
      assertEquals((byte) (-73), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      boolean boolean1 = vector0.add(byte1);
      assertTrue(boolean1);
      assertEquals(1, vector0.size());
      assertEquals("[-73]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertTrue(vector0.contains(byte0));
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(boolean1 == boolean0);
      
      Vector vector1 = (Vector)vector0.clone();
      assertNotNull(vector1);
      assertEquals(1, vector0.size());
      assertEquals("[-73]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertFalse(vector1.isEmpty());
      assertEquals("[-73]", vector1.toString());
      assertEquals(1, vector1.size());
      assertEquals(1, vector1.capacity());
      assertTrue(vector0.contains(byte0));
      
      boolean boolean2 = vector0.add(byte1);
      assertTrue(boolean2);
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertEquals("[-73, -73]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertTrue(vector0.contains(byte0));
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Range range0 = timeTableXYDataset0.getDomainBounds(true);
      assertNotNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.validateObject();
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) vector0, true);
      assertNotNull(range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertEquals("[-73, -73]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertTrue(vector0.contains(byte0));
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      Range range2 = DatasetUtilities.iterateCategoryRangeBounds(defaultMultiValueCategoryDataset0, true);
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-3666.07839978007);
      doubleArray1[1] = (-1527.3533409004644);
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = 973.451416015625;
      doubleArray1[4] = (-309.498);
      doubleArray1[5] = 1242.433242;
      doubleArray1[6] = 196.6225;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1242.433242;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 1242.433242;
      doubleArray3[1] = (-1376.0325941);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = Double.NEGATIVE_INFINITY;
      doubleArray4[1] = (-309.498);
      doubleArray4[2] = 196.6225;
      doubleArray4[3] = Double.NEGATIVE_INFINITY;
      doubleArray4[4] = Double.NEGATIVE_INFINITY;
      doubleArray4[5] = (-1527.3533409004644);
      doubleArray4[6] = 293.19526177601;
      doubleArray4[7] = 196.6225;
      doubleArray4[8] = 196.6225;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = 973.451416015625;
      doubleArray5[1] = 1940.6955857;
      doubleArray5[2] = 196.6225;
      doubleArray5[3] = 293.19526177601;
      doubleArray5[4] = 293.19526177601;
      doubleArray5[5] = (-309.498);
      doubleArray5[6] = (-1632.370465);
      doubleArray5[7] = (-309.498);
      doubleArray0[4] = doubleArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'xRange' argument", "Null 'xRange' argument", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(5, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals(Double.NEGATIVE_INFINITY, number0);
      assertNotNull(number0);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1004;
      doubleArray0[2] = (double) 23;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 23;
      doubleArray0[5] = (double) 0;
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(hour0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      MinguoEra[] minguoEraArray0 = new MinguoEra[4];
      MinguoEra minguoEra0 = MinguoEra.ROC;
      minguoEraArray0[0] = minguoEra0;
      MinguoEra minguoEra1 = MinguoEra.BEFORE_ROC;
      minguoEraArray0[1] = minguoEra1;
      MinguoEra minguoEra2 = MinguoEra.ROC;
      minguoEraArray0[2] = minguoEra2;
      MinguoEra minguoEra3 = MinguoEra.BEFORE_ROC;
      minguoEraArray0[3] = minguoEra3;
      JComboBox<MinguoEra> jComboBox0 = new JComboBox<MinguoEra>(minguoEraArray0);
      assertNotNull(jComboBox0);
      assertFalse(jComboBox0.isFocusTraversalPolicyProvider());
      assertFalse(jComboBox0.getIgnoreRepaint());
      assertFalse(jComboBox0.isFocusTraversalPolicySet());
      assertTrue(jComboBox0.getFocusTraversalKeysEnabled());
      assertFalse(jComboBox0.isFocusCycleRoot());
      assertEquals(4, minguoEraArray0.length);
      
      boolean boolean0 = simpleHistogramDataset0.hasListener(jComboBox0);
      assertFalse(boolean0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertFalse(jComboBox0.isFocusTraversalPolicyProvider());
      assertFalse(jComboBox0.getIgnoreRepaint());
      assertFalse(jComboBox0.isFocusTraversalPolicySet());
      assertTrue(jComboBox0.getFocusTraversalKeysEnabled());
      assertFalse(jComboBox0.isFocusCycleRoot());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(4, minguoEraArray0.length);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) simpleHistogramDataset0);
      assertNull(number0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1004, 1004.0);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(1004.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1004.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, (-3911.0), 0.0, 1004, hour0);
      assertNotNull(xYSeries0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(1004.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1004.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(1004, xYSeries0.getItemCount());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2.4100669772823043E-4, xYSeries0.getMaxY(), 0.01);
      assertEquals(2.4843714919843484E-9, xYSeries0.getMinY(), 0.01);
      assertEquals((-3911.0), xYSeries0.getMinX(), 0.01);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Stack<IntervalXYDelegate> stack0 = new Stack<IntervalXYDelegate>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      boolean boolean0 = true;
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) vectorSeriesCollection0, true);
      assertNull(range0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range1 = Range.expandToInclude((Range) null, 1070.6177099);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1070.6177099, range1.getUpperBound(), 0.01);
      assertEquals(1070.6177099, range1.getCentralValue(), 0.01);
      assertEquals(1070.6177099, range1.getLowerBound(), 0.01);
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean1 = stack0.add((IntervalXYDelegate) null);
      assertTrue(boolean1);
      assertFalse(stack0.isEmpty());
      assertEquals("[null]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean1 == boolean0);
      
      Range range2 = DatasetUtilities.iterateToFindDomainBounds(vectorSeriesCollection0, arrayList0, true);
      assertNull(range2);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) vectorSeriesCollection0, (List) null, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(0.0);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getColumnKeys();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      defaultCategoryDataset0.addValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertNotNull(regularTimePeriod0);
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getSerialIndex());
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(integer0);
      assertNotNull(xYIntervalSeries0);
      assertTrue(xYIntervalSeries0.getAutoSort());
      assertEquals(0, xYIntervalSeries0.getItemCount());
      assertTrue(xYIntervalSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, xYIntervalSeries0.getMaximumItemCount());
      assertTrue(xYIntervalSeries0.getAllowDuplicateXValues());
      assertNull(xYIntervalSeries0.getDescription());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      int int0 = defaultMultiValueCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      
      defaultMultiValueCategoryDataset0.validateObject();
      Number[][] numberArray0 = new Number[2][3];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = (Number) integer0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) integer0;
      numberArray2[1] = (Number) integer0;
      numberArray2[2] = (Number) integer0;
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      numberArray2[3] = (Number) bigInteger0;
      numberArray0[1] = numberArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("kr", "7Q LmxZEZm?uKaT", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, numberArray0.length);
      assertFalse(categoryDataset0.equals((Object)defaultCategoryDataset0));
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(10.0, number0);
      assertNotNull(number0);
      assertEquals(2, numberArray0.length);
      assertFalse(categoryDataset0.equals((Object)defaultCategoryDataset0));
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) list0, true);
      assertNull(range2);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("v~1mwrA=S.%");
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains("v~1mwrA=S.%"));
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, false);
      assertNull(range0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) simpleHistogramDataset0, true);
      assertNull(range1);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      assertTrue(boolean0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      System.setCurrentTimeMillis(17);
      Stack<IntervalXYDelegate> stack0 = new Stack<IntervalXYDelegate>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      boolean boolean1 = stack0.add((IntervalXYDelegate) null);
      assertTrue(boolean1);
      assertEquals("[null]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(boolean1 == boolean0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(17, 17);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(16, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, stack0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][2];
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(float0));
      
      Float float1 = new Float(0.0);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      boolean boolean0 = arrayList0.add(float1);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(float1));
      assertEquals((float)float1, (float)float0, 0.01F);
      
      HashSet<TimeSeriesCollection> hashSet0 = new HashSet<TimeSeriesCollection>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      boolean boolean1 = arrayList0.containsAll(hashSet0);
      assertTrue(boolean1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(arrayList0.contains(float1));
      assertTrue(boolean1 == boolean0);
      
      String string0 = "";
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("sV", "", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1004;
      doubleArray0[2] = (double) 23;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 23;
      doubleArray0[5] = (double) 0;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      long long0 = MockDate.UTC((-1081), (-1081), 44, 6, 222, (-1081));
      assertEquals((-39160766161000L), long0);
      
      doubleArray1[1] = (double) 23;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Stack<IntervalXYDelegate> stack0 = new Stack<IntervalXYDelegate>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(month0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      simpleHistogramDataset0.fireSelectionEvent();
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(715.0, Double.POSITIVE_INFINITY);
      assertNotNull(simpleHistogramBin0);
      assertEquals(Double.POSITIVE_INFINITY, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(715.0, simpleHistogramBin0.getLowerBound(), 0.01);
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(Double.POSITIVE_INFINITY, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(715.0, simpleHistogramBin0.getLowerBound(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(simpleHistogramDataset0);
      assertEquals(Double.POSITIVE_INFINITY, number0);
      assertNotNull(number0);
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("Null or zero length 'values' argument.");
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      simpleHistogramDataset0.fireSelectionEvent();
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      simpleHistogramDataset0.addBin((SimpleHistogramBin) null);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue(simpleHistogramDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      MockDate mockDate1 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate1);
      assertTrue(mockDate1.equals((Object)mockDate0));
      
      Hour hour0 = new Hour(mockDate1);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate1.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1004;
      doubleArray0[1] = (double) 0;
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultXYZDataset0);
      assertNull(number0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultXYZDataset0, true);
      assertNull(range0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultXYZDataset0, true);
      assertNull(range1);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, 1004);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      UnaryOperator<Float> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Function<TimeSeriesCollection, TimeSeriesCollection> function0 = Function.identity();
      assertNotNull(function0);
      
      Function<DefaultBoxAndWhiskerCategoryDataset, DefaultBoxAndWhiskerCategoryDataset> function1 = Function.identity();
      assertNotNull(function1);
      
      arrayList0.replaceAll(unaryOperator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ArrayDeque<DefaultTableXYDataset> arrayDeque0 = new ArrayDeque<DefaultTableXYDataset>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      Float float0 = new Float((-845.2126475));
      assertEquals((-845.21265F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = arrayList0.add(float0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(float0));
      
      boolean boolean1 = arrayList0.containsAll(arrayDeque0);
      assertTrue(boolean1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayList0.contains(float0));
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, (Comparable) float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      Byte byte0 = new Byte((byte) (-89));
      assertEquals((byte) (-89), (byte)byte0);
      assertNotNull(byte0);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(byte0));
      
      boolean boolean0 = vector0.add(byte0);
      assertTrue(boolean0);
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals("[-89]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.contains(byte0));
      
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 1004;
      doubleArray0[2] = (double) (byte) (-89);
      doubleArray0[4] = (double) (byte) (-89);
      doubleArray0[4] = (double) 23;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(hour0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 1004.0, (-89.0), 0.0, 23.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(3.2204782844E13, range0.getUpperBound(), 0.01);
      assertEquals(3.2204782844E13, range0.getCentralValue(), 0.01);
      assertEquals(3.2204782844E13, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertArrayEquals(new double[] {0.0, 1004.0, (-89.0), 0.0, 23.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, (byte) (-89), 0);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals((-89), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Float float0 = new Float(973.4514F);
      assertEquals(973.4514F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(973.4514F));
      
      Float float1 = new Float((double) 973.4514F);
      assertEquals(973.4514F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      boolean boolean0 = arrayList0.add(float1);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(973.4514F));
      assertEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float(973.4514F);
      assertEquals(973.4514F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 973.4514F;
      doubleArray0[1] = (double) 973.4514F;
      doubleArray0[2] = (double) 973.4514F;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {973.451416015625, 973.451416015625, 973.451416015625}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 604.0, 973.451416015625, 13, 973.451416015625);
      assertNotNull(xYSeries0);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertEquals(604.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(9.233985989252841E8, xYSeries0.getMaxY(), 0.01);
      assertEquals(13, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(973.451416015625, xYSeries0.getMaxX(), 0.01);
      assertEquals(3.557195898918457E8, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertArrayEquals(new double[] {973.451416015625, 973.451416015625, 973.451416015625}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertEquals(604.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(9.233985989252841E8, xYSeries0.getMaxY(), 0.01);
      assertEquals(13, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(973.451416015625, xYSeries0.getMaxX(), 0.01);
      assertEquals(3.557195898918457E8, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertArrayEquals(new double[] {973.451416015625, 973.451416015625, 973.451416015625}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, (-2289.18812297258));
      assertNotNull(xYBarDataset0);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertEquals(604.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(9.233985989252841E8, xYSeries0.getMaxY(), 0.01);
      assertEquals(13, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(973.451416015625, xYSeries0.getMaxX(), 0.01);
      assertEquals(3.557195898918457E8, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals((-2289.18812297258), xYBarDataset0.getBarWidth(), 0.01);
      assertArrayEquals(new double[] {973.451416015625, 973.451416015625, 973.451416015625}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYBarDataset0);
      assertNull(range0);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertEquals(604.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(9.233985989252841E8, xYSeries0.getMaxY(), 0.01);
      assertEquals(13, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(973.451416015625, xYSeries0.getMaxX(), 0.01);
      assertEquals(3.557195898918457E8, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals((-2289.18812297258), xYBarDataset0.getBarWidth(), 0.01);
      assertArrayEquals(new double[] {973.451416015625, 973.451416015625, 973.451416015625}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ArrayList<Float> arrayList1 = new ArrayList<Float>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      Float float0 = new Float((double) 4701.044F);
      assertEquals(4701.044F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) 4701.044F);
      assertEquals(4701.044F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float(4701.044F);
      assertEquals(4701.044F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      
      ArrayList<Float> arrayList2 = new ArrayList<Float>();
      assertNotNull(arrayList2);
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      assertFalse(arrayList2.contains(float2));
      assertTrue(arrayList2.equals((Object)arrayList0));
      assertTrue(arrayList2.equals((Object)arrayList1));
      
      boolean boolean1 = arrayList2.add(float1);
      assertTrue(boolean1);
      assertFalse(arrayList2.isEmpty());
      assertEquals(1, arrayList2.size());
      assertTrue(arrayList2.contains(float2));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((float)float1, (float)float2, 0.01F);
      assertFalse(arrayList2.equals((Object)arrayList0));
      assertFalse(arrayList2.equals((Object)arrayList1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(arrayList2, arrayList0);
      assertNotSame(arrayList2, arrayList1);
      
      Float float3 = new Float(4701.044F);
      assertEquals(4701.044F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, Double.NaN, 4701.044F, 13, float0);
      assertNotNull(xYSeries0);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(13, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals((float)float0, (float)float2, 0.01F);
      assertEquals((float)float0, (float)float3, 0.01F);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) float1, (KeyedValues) jDBCPieDataset0);
      assertNotNull(categoryDataset0);
      assertEquals((float)float1, (float)float3, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((float)float1, (float)float2, 0.01F);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(week0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, true);
      assertNull(range0);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) simpleHistogramDataset0);
      assertTrue(boolean0);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0);
      assertNull(range1);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) xIntervalSeriesCollection0);
      assertNull(number0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      xIntervalSeriesCollection0.validateObject();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      XIntervalSeriesCollection xIntervalSeriesCollection1 = (XIntervalSeriesCollection)xIntervalSeriesCollection0.clone();
      assertNotNull(xIntervalSeriesCollection1);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertEquals(0, xIntervalSeriesCollection1.getSeriesCount());
      assertTrue(xIntervalSeriesCollection1.equals((Object)xIntervalSeriesCollection0));
      assertNotSame(xIntervalSeriesCollection0, xIntervalSeriesCollection1);
      assertNotSame(xIntervalSeriesCollection1, xIntervalSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xIntervalSeriesCollection0, false);
      assertNull(range0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertTrue(xIntervalSeriesCollection0.equals((Object)xIntervalSeriesCollection1));
      assertNotSame(xIntervalSeriesCollection0, xIntervalSeriesCollection1);
      
      double[][] doubleArray0 = new double[8][7];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.5;
      doubleArray1[1] = 2886.36044;
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = (-2165.891145465635);
      doubleArray1[4] = 2332.880687983193;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2165.891145465635);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 2886.36044;
      doubleArray3[1] = 2332.880687983193;
      doubleArray3[2] = 0.5;
      doubleArray3[3] = 2332.880687983193;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (-1.0);
      doubleArray4[1] = 0.5;
      doubleArray4[2] = 0.5;
      doubleArray4[3] = (-1.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = 2332.880687983193;
      doubleArray5[1] = 2332.880687983193;
      doubleArray5[2] = (-2165.891145465635);
      doubleArray5[3] = (-1.0);
      doubleArray5[4] = 2332.880687983193;
      doubleArray5[5] = 2886.36044;
      doubleArray5[6] = (-1.0);
      doubleArray5[7] = 2332.880687983193;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      
      doubleArray6[0] = (-3933.35341);
      doubleArray6[1] = 0.5;
      doubleArray6[2] = (-1.0);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      
      doubleArray7[0] = (-2165.891145465635);
      doubleArray7[1] = (-4695.0268929927);
      doubleArray7[2] = (-3933.35341);
      doubleArray7[3] = 2332.880687983193;
      doubleArray7[4] = (-2165.891145465635);
      doubleArray7[5] = 1.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[1];
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      
      doubleArray8[0] = 0.5;
      doubleArray0[7] = doubleArray8;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      boolean boolean0 = true;
      List list0 = defaultCategoryDataset0.getColumnKeys();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds((CategoryDataset) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Stack<IntervalXYDelegate> stack0 = new Stack<IntervalXYDelegate>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      boolean boolean0 = true;
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) vectorSeriesCollection0, true);
      assertNull(range0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range1 = Range.expandToInclude((Range) null, 1070.6177099);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1070.6177099, range1.getUpperBound(), 0.01);
      assertEquals(1070.6177099, range1.getCentralValue(), 0.01);
      assertEquals(1070.6177099, range1.getLowerBound(), 0.01);
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean1 = stack0.add((IntervalXYDelegate) null);
      assertTrue(boolean1);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[null]", stack0.toString());
      assertTrue(boolean1 == boolean0);
      
      Range range2 = DatasetUtilities.iterateToFindDomainBounds(vectorSeriesCollection0, arrayList0, true);
      assertNull(range2);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) vectorSeriesCollection0, (List) stack0, range1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.VectorSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ArrayList<Float> arrayList1 = new ArrayList<Float>();
      assertNotNull(arrayList1);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      Float float0 = new Float((double) 4701.044F);
      assertEquals(4701.044F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) 4701.044F);
      assertEquals(4701.044F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float(4701.044F);
      assertEquals(4701.044F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      
      ArrayList<Float> arrayList2 = new ArrayList<Float>();
      assertNotNull(arrayList2);
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertFalse(arrayList2.contains(float1));
      assertTrue(arrayList2.equals((Object)arrayList1));
      assertTrue(arrayList2.equals((Object)arrayList0));
      
      boolean boolean1 = arrayList2.add(float1);
      assertTrue(boolean1);
      assertEquals(1, arrayList2.size());
      assertFalse(arrayList2.isEmpty());
      assertTrue(arrayList2.contains(float1));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((float)float1, (float)float2, 0.01F);
      assertFalse(arrayList2.equals((Object)arrayList0));
      assertFalse(arrayList2.equals((Object)arrayList1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(arrayList2, arrayList0);
      assertNotSame(arrayList2, arrayList1);
      
      Float float3 = new Float(4701.044F);
      assertEquals(4701.044F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      
      double[] doubleArray0 = new double[1];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, Double.NaN, 4701.044F, 13, float0);
      assertNotNull(xYSeries0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(13, xYSeries0.getItemCount());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals((float)float0, (float)float3, 0.01F);
      assertEquals((float)float0, (float)float2, 0.01F);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(13, xYSeries0.getItemCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals((float)float0, (float)float3, 0.01F);
      assertEquals((float)float0, (float)float2, 0.01F);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, Double.NaN);
      assertNotNull(xYBarDataset0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(13, xYSeries0.getItemCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, xYBarDataset0.getBarWidth(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals((float)float0, (float)float3, 0.01F);
      assertEquals((float)float0, (float)float2, 0.01F);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(categoryTableXYDataset0);
      assertNotNull(xYDatasetTableModel0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      xYBarDataset0.addChangeListener(xYDatasetTableModel0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(13, xYSeries0.getItemCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals((float)float0, (float)float3, 0.01F);
      assertEquals((float)float0, (float)float2, 0.01F);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYBarDataset0);
      assertNull(range0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(13, xYSeries0.getItemCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, xYBarDataset0.getBarWidth(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals((float)float0, (float)float3, 0.01F);
      assertEquals((float)float0, (float)float2, 0.01F);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) float3, (double) 4701.044F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      assertTrue(boolean0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      System.setCurrentTimeMillis(17);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(17));
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, false);
      assertNotNull(range0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      Range range1 = Range.scale(range0, 17);
      assertNotNull(range1);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      Range range2 = Range.combine(range1, range1);
      assertNotNull(range2);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Float float0 = new Float((-2374.03161866));
      assertEquals((-2374.0317F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(2189.4184474);
      assertEquals(2189.4185F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float(4701.044F);
      assertEquals(4701.044F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(float1));
      
      boolean boolean0 = arrayList0.add(float1);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(float1));
      assertFalse(arrayList0.contains(float2));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      
      Float float3 = new Float(4701.044F);
      assertEquals(4701.044F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      
      arrayList0.trimToSize();
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(float1));
      assertFalse(arrayList0.contains(float2));
      
      Float float4 = new Float(4701.044F);
      assertEquals(4701.044F, (float)float4, 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      
      boolean boolean1 = arrayList0.add(float4);
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(arrayList0.contains(4701.044F));
      assertFalse(arrayList0.contains(float0));
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 4701.044F;
      doubleArray0[1] = 2189.4184474;
      doubleArray0[2] = (-351.583);
      doubleArray0[3] = (-2374.03161866);
      doubleArray0[4] = (-2374.03161866);
      doubleArray0[5] = 2411.47523;
      doubleArray0[6] = 2189.4184474;
      doubleArray0[7] = (double) 4701.044F;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {4701.0439453125, 2189.4184474, (-351.583), (-2374.03161866), (-2374.03161866), 2411.47523, 2189.4184474, 4701.0439453125}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      int int0 = 965;
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 4389.916171064, 4701.044F, 965, (-2374.03161866));
      assertNotNull(xYSeries0);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2.385599423749484E29, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(4389.916171064, xYSeries0.getMinX(), 0.01);
      assertEquals(1.4771819241195357E29, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(4701.0439453125, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(965, xYSeries0.getItemCount());
      assertArrayEquals(new double[] {4701.0439453125, 2189.4184474, (-351.583), (-2374.03161866), (-2374.03161866), 2411.47523, 2189.4184474, 4701.0439453125}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      xYSeries0.setKey(float3);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2.385599423749484E29, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(4389.916171064, xYSeries0.getMinX(), 0.01);
      assertEquals(1.4771819241195357E29, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(4701.0439453125, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(965, xYSeries0.getItemCount());
      assertArrayEquals(new double[] {4701.0439453125, 2189.4184474, (-351.583), (-2374.03161866), (-2374.03161866), 2411.47523, 2189.4184474, 4701.0439453125}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals((float)float3, (float)float4, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2.385599423749484E29, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(4389.916171064, xYSeries0.getMinX(), 0.01);
      assertEquals(1.4771819241195357E29, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(4701.0439453125, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(965, xYSeries0.getItemCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertArrayEquals(new double[] {4701.0439453125, 2189.4184474, (-351.583), (-2374.03161866), (-2374.03161866), 2411.47523, 2189.4184474, 4701.0439453125}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range0);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2.385599423749484E29, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(4389.916171064, xYSeries0.getMinX(), 0.01);
      assertEquals(1.4771819241195357E29, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(4701.0439453125, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(965, xYSeries0.getItemCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.4771819241195357E29, range0.getLowerBound(), 0.01);
      assertEquals(9.084174996299485E28, range0.getLength(), 0.01);
      assertEquals(2.385599423749484E29, range0.getUpperBound(), 0.01);
      assertEquals(1.93139067393451E29, range0.getCentralValue(), 0.01);
      assertArrayEquals(new double[] {4701.0439453125, 2189.4184474, (-351.583), (-2374.03161866), (-2374.03161866), 2411.47523, 2189.4184474, 4701.0439453125}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      String string0 = "3P_Q_ 9#)S";
      Number[][] numberArray0 = new Number[7][4];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = (Number) 2411.47523;
      numberArray1[1] = (Number) 2189.4184474;
      numberArray1[2] = (Number) (-351.583);
      numberArray1[3] = (Number) (-351.583);
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[2];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) (-351.583);
      numberArray2[1] = (Number) 4701.0439453125;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[2];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) float1;
      numberArray3[1] = (Number) float4;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[0];
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray2));
      
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[7];
      assertFalse(numberArray5.equals((Object)numberArray2));
      assertFalse(numberArray5.equals((Object)numberArray1));
      assertFalse(numberArray5.equals((Object)numberArray3));
      assertFalse(numberArray5.equals((Object)numberArray4));
      
      numberArray5[0] = (Number) (-2374.03161866);
      numberArray5[1] = (Number) (-351.583);
      numberArray5[2] = (Number) float2;
      numberArray5[3] = (Number) 2411.47523;
      numberArray5[4] = (Number) 4701.0439453125;
      numberArray5[5] = (Number) float1;
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        xIntervalSeriesCollection0.getSeries(965);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.XIntervalSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      UnaryOperator<Float> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Function<TimeSeriesCollection, TimeSeriesCollection> function0 = Function.identity();
      assertNotNull(function0);
      
      Function<DefaultBoxAndWhiskerCategoryDataset, DefaultBoxAndWhiskerCategoryDataset> function1 = Function.identity();
      assertNotNull(function1);
      
      arrayList0.replaceAll(unaryOperator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ArrayDeque<DefaultTableXYDataset> arrayDeque0 = new ArrayDeque<DefaultTableXYDataset>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      Float float0 = new Float((-845.2126475));
      assertEquals((-845.21265F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = arrayList0.add(float0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(float0));
      
      boolean boolean1 = arrayList0.add(float0);
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(arrayList0.contains(float0));
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = arrayList0.containsAll(arrayDeque0);
      assertTrue(boolean2);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayList0.contains(float0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertNull(range0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(arrayList0.contains(float0));
      
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      assertNotNull(arrayList1);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertFalse(arrayList1.contains((-845.2126475)));
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(float0);
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0);
      assertNull(range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ArrayList<Float> arrayList1 = new ArrayList<Float>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      Float float0 = new Float((double) 4701.044F);
      assertEquals(4701.044F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) 4701.044F);
      assertEquals(4701.044F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float(4701.044F);
      assertEquals(4701.044F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      
      ArrayList<Float> arrayList2 = new ArrayList<Float>();
      assertNotNull(arrayList2);
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertFalse(arrayList2.contains(float0));
      assertTrue(arrayList2.equals((Object)arrayList0));
      assertTrue(arrayList2.equals((Object)arrayList1));
      
      boolean boolean1 = arrayList2.add(float1);
      assertTrue(boolean1);
      assertFalse(arrayList2.isEmpty());
      assertEquals(1, arrayList2.size());
      assertTrue(arrayList2.contains(float0));
      assertEquals((float)float1, (float)float2, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertFalse(arrayList2.equals((Object)arrayList1));
      assertFalse(arrayList2.equals((Object)arrayList0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(arrayList2, arrayList1);
      assertNotSame(arrayList2, arrayList0);
      
      Float float3 = new Float(4701.044F);
      assertEquals(4701.044F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      
      boolean boolean2 = arrayList2.add((Float) null);
      assertTrue(boolean2);
      assertFalse(arrayList2.isEmpty());
      assertEquals(2, arrayList2.size());
      assertTrue(arrayList2.contains(float0));
      assertFalse(arrayList2.equals((Object)arrayList1));
      assertFalse(arrayList2.equals((Object)arrayList0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(arrayList2, arrayList1);
      assertNotSame(arrayList2, arrayList0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 4701.044F;
      doubleArray0[1] = (double) 4701.044F;
      doubleArray0[2] = (double) 4701.044F;
      doubleArray0[3] = (double) 4701.044F;
      doubleArray0[4] = (double) 4701.044F;
      doubleArray0[5] = (double) 4701.044F;
      doubleArray0[6] = (double) 4701.044F;
      doubleArray0[7] = (double) 4701.044F;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {4701.0439453125, 4701.0439453125, 4701.0439453125, 4701.0439453125, 4701.0439453125, 4701.0439453125, 4701.0439453125, 4701.0439453125}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, Double.NaN, 4701.0439453125, 8, 4701.0439453125);
      assertNotNull(xYSeries0);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(8, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertArrayEquals(new double[] {4701.0439453125, 4701.0439453125, 4701.0439453125, 4701.0439453125, 4701.0439453125, 4701.0439453125, 4701.0439453125, 4701.0439453125}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(8, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertArrayEquals(new double[] {4701.0439453125, 4701.0439453125, 4701.0439453125, 4701.0439453125, 4701.0439453125, 4701.0439453125, 4701.0439453125, 4701.0439453125}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertNull(range0);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(8, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertArrayEquals(new double[] {4701.0439453125, 4701.0439453125, 4701.0439453125, 4701.0439453125, 4701.0439453125, 4701.0439453125, 4701.0439453125, 4701.0439453125}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 23;
      Byte byte0 = new Byte((byte)7);
      assertEquals((byte)7, (byte)byte0);
      assertNotNull(byte0);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains((byte)7));
      
      boolean boolean0 = vector0.add(byte0);
      assertTrue(boolean0);
      assertEquals("[7]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertTrue(vector0.contains((byte)7));
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(0.0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) vector0, true);
      assertNull(range0);
      assertEquals("[7]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertTrue(vector0.contains((byte)7));
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, true);
      assertNull(range1);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertNull(range2);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, false);
      assertNull(range3);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
      
      Stack<Byte> stack0 = new Stack<Byte>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      Byte byte0 = new Byte((byte)52);
      assertEquals((byte)52, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean1 = stack0.add(byte0);
      assertTrue(boolean1);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[52]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains((byte)52));
      assertTrue(boolean1 == boolean0);
      
      SerialDate serialDate0 = SerialDate.createInstance((int) (byte)52);
      assertNotNull(serialDate0);
      assertEquals(2, serialDate0.getMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(3, serialDate0.getDayOfWeek());
      assertEquals(52, serialDate0.toSerial());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(20, serialDate0.getDayOfMonth());
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      
      Date date0 = serialDate0.toDate();
      assertNotNull(date0);
      assertEquals(2, serialDate0.getMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(3, serialDate0.getDayOfWeek());
      assertEquals(52, serialDate0.toSerial());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(20, serialDate0.getDayOfMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      
      Month month0 = new Month(date0);
      assertNotNull(month0);
      assertEquals(2, serialDate0.getMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(3, serialDate0.getDayOfWeek());
      assertEquals(52, serialDate0.toSerial());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(20, serialDate0.getDayOfMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(serialDate0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2, serialDate0.getMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(3, serialDate0.getDayOfWeek());
      assertEquals(52, serialDate0.toSerial());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(20, serialDate0.getDayOfMonth());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      assertNull(range0);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[52]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(stack0.contains((byte)52));
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      XYSeries xYSeries0 = new XYSeries(serialDate0, true, true);
      assertNotNull(xYSeries0);
      assertEquals(2, serialDate0.getMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(3, serialDate0.getDayOfWeek());
      assertEquals(52, serialDate0.toSerial());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(20, serialDate0.getDayOfMonth());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(2, serialDate0.getMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(3, serialDate0.getDayOfWeek());
      assertEquals(52, serialDate0.toSerial());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(20, serialDate0.getDayOfMonth());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultBoxAndWhiskerXYDataset0);
      assertNull(number0);
      assertEquals(2, serialDate0.getMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(3, serialDate0.getDayOfWeek());
      assertEquals(52, serialDate0.toSerial());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(20, serialDate0.getDayOfMonth());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      assertNull(number1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "Null 'columnKeys' argument.");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("Null 'columnKeys' argument.", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=Null 'columnKeys' argument.,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(2, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0);
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("Null 'columnKeys' argument.", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=Null 'columnKeys' argument.,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(2, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, stack0, true);
      assertNull(range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[52]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("Null 'columnKeys' argument.", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=Null 'columnKeys' argument.,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(2, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertTrue(stack0.contains((byte)52));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("Null 'columnKeys' argument.", "Null 'columnKeys' argument.", (Number[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getColumnKeys();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      defaultCategoryDataset0.addValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertNotNull(regularTimePeriod0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(regularTimePeriod0);
      assertNotNull(xYIntervalSeries0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertTrue(xYIntervalSeries0.getNotify());
      assertEquals(0, xYIntervalSeries0.getItemCount());
      assertTrue(xYIntervalSeries0.getAutoSort());
      assertNull(xYIntervalSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYIntervalSeries0.getMaximumItemCount());
      assertTrue(xYIntervalSeries0.getAllowDuplicateXValues());
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (-687));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      assertTrue(boolean0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      System.setCurrentTimeMillis(17);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 177;
      doubleArray0[1] = (double) 17;
      doubleArray0[2] = (double) 17;
      doubleArray0[3] = (double) (-3472);
      doubleArray0[4] = (double) (-3472);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(4, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {177.0, 17.0, 17.0, (-3472.0), (-3472.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 17.0, 2451.0, 177, (-3472.0));
      assertNotNull(xYSeries0);
      assertEquals(4, polynomialFunction2D0.getOrder());
      assertEquals(17.0, xYSeries0.getMinX(), 0.01);
      assertEquals(177, xYSeries0.getItemCount());
      assertEquals((-1.2535166755350408E17), xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2451.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-3.07037469E8), xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertArrayEquals(new double[] {177.0, 17.0, 17.0, (-3472.0), (-3472.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(4, polynomialFunction2D0.getOrder());
      assertEquals(17.0, xYSeries0.getMinX(), 0.01);
      assertEquals(177, xYSeries0.getItemCount());
      assertEquals((-1.2535166755350408E17), xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2451.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-3.07037469E8), xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertArrayEquals(new double[] {177.0, 17.0, 17.0, (-3472.0), (-3472.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      XYSeriesCollection xYSeriesCollection1 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection1);
      assertEquals(4, polynomialFunction2D0.getOrder());
      assertEquals(17.0, xYSeries0.getMinX(), 0.01);
      assertEquals(177, xYSeries0.getItemCount());
      assertEquals((-1.2535166755350408E17), xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2451.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-3.07037469E8), xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.5, xYSeriesCollection1.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection1.getSeriesCount());
      assertFalse(xYSeriesCollection1.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection1.getIntervalWidth(), 0.01);
      assertArrayEquals(new double[] {177.0, 17.0, 17.0, (-3472.0), (-3472.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertTrue(xYSeriesCollection1.equals((Object)xYSeriesCollection0));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection1);
      assertNotNull(range0);
      assertEquals(4, polynomialFunction2D0.getOrder());
      assertEquals(17.0, xYSeries0.getMinX(), 0.01);
      assertEquals(177, xYSeries0.getItemCount());
      assertEquals((-1.2535166755350408E17), xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2451.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-3.07037469E8), xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.5, xYSeriesCollection1.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection1.getSeriesCount());
      assertFalse(xYSeriesCollection1.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection1.getIntervalWidth(), 0.01);
      assertEquals((-3.07037469E8), range0.getUpperBound(), 0.01);
      assertEquals((-6.2675833930270776E16), range0.getCentralValue(), 0.01);
      assertEquals((-1.2535166755350408E17), range0.getLowerBound(), 0.01);
      assertEquals(1.25351667246466608E17, range0.getLength(), 0.01);
      assertArrayEquals(new double[] {177.0, 17.0, 17.0, (-3472.0), (-3472.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertTrue(xYSeriesCollection1.equals((Object)xYSeriesCollection0));
      assertNotSame(xYSeriesCollection1, xYSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null, (-422.562282467));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ArrayList<Float> arrayList1 = new ArrayList<Float>();
      assertNotNull(arrayList1);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      Float float0 = new Float((double) 4701.044F);
      assertEquals(4701.044F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) 4701.044F);
      assertEquals(4701.044F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      ArrayList<Float> arrayList2 = new ArrayList<Float>();
      assertNotNull(arrayList2);
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      assertFalse(arrayList2.contains(float0));
      assertTrue(arrayList2.equals((Object)arrayList1));
      assertTrue(arrayList2.equals((Object)arrayList0));
      
      boolean boolean0 = arrayList2.add(float1);
      assertTrue(boolean0);
      assertFalse(arrayList2.isEmpty());
      assertEquals(1, arrayList2.size());
      assertTrue(arrayList2.contains(float0));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertFalse(arrayList2.equals((Object)arrayList1));
      assertFalse(arrayList2.equals((Object)arrayList0));
      assertNotSame(arrayList2, arrayList1);
      assertNotSame(arrayList2, arrayList0);
      
      Float float2 = new Float(4701.044F);
      assertEquals(4701.044F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      
      boolean boolean1 = arrayList1.add(float2);
      assertTrue(boolean1);
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertTrue(arrayList1.contains(float2));
      assertTrue(arrayList1.equals((Object)arrayList2));
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertNotSame(arrayList1, arrayList2);
      assertNotSame(arrayList1, arrayList0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertNull(range0);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(jDBCPieDataset0);
      assertEquals(0.0, double0, 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertNull(range1);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(1004, 0, 1004, 23, 0, (-22));
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      Hour hour1 = new Hour(mockDate1);
      assertNotNull(hour1);
      assertEquals("Thu Sep 30 22:59:38 GMT 2906", mockDate1.toString());
      assertEquals(29560892378000L, hour1.getFirstMillisecond());
      assertEquals(22, hour1.getHour());
      assertEquals(29560892378000L, hour1.getLastMillisecond());
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      double[] doubleArray0 = new double[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate1, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Thu Sep 30 22:59:38 GMT 2906", mockDate1.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      Stack<IntervalXYDelegate> stack0 = new Stack<IntervalXYDelegate>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, 23, 669);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(669, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(23, slidingCategoryDataset0.getFirstCategoryIndex());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, (Comparable) mockDate0);
      assertNotNull(pieDataset0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(669, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(23, slidingCategoryDataset0.getFirstCategoryIndex());
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertNotSame(mockDate0, mockDate1);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(pieDataset0);
      assertNotNull(defaultPieDataset0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(669, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(23, slidingCategoryDataset0.getFirstCategoryIndex());
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
      assertEquals(0.0, double0, 0.01);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(669, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(23, slidingCategoryDataset0.getFirstCategoryIndex());
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1004;
      doubleArray0[2] = (double) 23;
      long long0 = hour0.getMiddleMillisecond();
      assertEquals(32204782844000L, long0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 23;
      doubleArray0[5] = (double) 0;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      long long1 = MockDate.UTC((-1081), (-1081), 44, 6, 222, (-1081));
      assertEquals((-39160766161000L), long1);
      assertFalse(long1 == long0);
      
      doubleArray1[1] = (double) 23;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 1004;
      doubleArray1[5] = (double) 1004;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(hour0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 23.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 23.0, 0.0, 1004.0, 0.0, 1004.0}, doubleArray1, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Stack<IntervalXYDelegate> stack0 = new Stack<IntervalXYDelegate>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      DefaultHighLowDataset defaultHighLowDataset1 = (DefaultHighLowDataset)defaultHighLowDataset0.clone();
      assertNotNull(defaultHighLowDataset1);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, defaultHighLowDataset1.getSeriesCount());
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 23.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 23.0, 0.0, 1004.0, 0.0, 1004.0}, doubleArray1, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertTrue(defaultHighLowDataset1.equals((Object)defaultHighLowDataset0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(defaultHighLowDataset0, defaultHighLowDataset1);
      assertNotSame(defaultHighLowDataset1, defaultHighLowDataset0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotNull(range0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1004.0, range0.getLength(), 0.01);
      assertEquals(1004.0, range0.getUpperBound(), 0.01);
      assertEquals(502.0, range0.getCentralValue(), 0.01);
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 23.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 23.0, 0.0, 1004.0, 0.0, 1004.0}, doubleArray1, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertTrue(defaultHighLowDataset0.equals((Object)defaultHighLowDataset1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(defaultHighLowDataset0, defaultHighLowDataset1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, stack0, true);
      assertNull(range1);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 23.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 23.0, 0.0, 1004.0, 0.0, 1004.0}, doubleArray1, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertTrue(defaultHighLowDataset0.equals((Object)defaultHighLowDataset1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(defaultHighLowDataset0, defaultHighLowDataset1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range0, true);
      assertNull(range2);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1004.0, range0.getLength(), 0.01);
      assertEquals(1004.0, range0.getUpperBound(), 0.01);
      assertEquals(502.0, range0.getCentralValue(), 0.01);
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 23.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 23.0, 0.0, 1004.0, 0.0, 1004.0}, doubleArray1, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertTrue(defaultHighLowDataset0.equals((Object)defaultHighLowDataset1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(defaultHighLowDataset0, defaultHighLowDataset1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Range range3 = new Range(1004.0, 1004.0);
      assertNotNull(range3);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(1004.0, range3.getLowerBound(), 0.01);
      assertEquals(1004.0, range3.getUpperBound(), 0.01);
      assertEquals(1004.0, range3.getCentralValue(), 0.01);
      assertFalse(range3.equals((Object)range0));
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultXYDataset0, 0.0);
      assertNotNull(xYBarDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01);
      
      Range range4 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range4);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(3.2204782844E13, range4.getUpperBound(), 0.01);
      assertEquals(3.2204782844E13, range4.getCentralValue(), 0.01);
      assertEquals(3.2204782844E13, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 23.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 23.0, 0.0, 1004.0, 0.0, 1004.0}, doubleArray1, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertTrue(defaultHighLowDataset0.equals((Object)defaultHighLowDataset1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(defaultHighLowDataset0, defaultHighLowDataset1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(range4, range3);
      assertNotSame(range4, range0);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      double[][] doubleArray0 = new double[7][7];
      double[] doubleArray1 = new double[6];
      doubleArray0[1] = doubleArray1;
      doubleArray0[2] = doubleArray0[0];
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      boolean boolean0 = true;
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][2];
      Number[] numberArray1 = new Number[9];
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("sV", (String) null, numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertNull(range0);
      assertEquals(1, numberArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds(categoryDataset0, (List) stack0, true);
      assertNull(range1);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(1, numberArray0.length);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) "sV");
      assertNotNull(pieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
      
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 2);
      int int0 = (-1829);
      int int1 = 838;
      Second second0 = null;
      try {
        second0 = new Second((-1829), 838, (-1829), 838, 838, 838);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("v~1mwrA=S.%");
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      double[] doubleArray0 = new double[0];
      simpleHistogramDataset0.addObservations(doubleArray0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) simpleHistogramDataset0);
      assertNull(range0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Connection connection0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      UnaryOperator<Float> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Function<TimeSeriesCollection, TimeSeriesCollection> function0 = Function.identity();
      assertNotNull(function0);
      
      Function<DefaultBoxAndWhiskerCategoryDataset, DefaultBoxAndWhiskerCategoryDataset> function1 = Function.identity();
      assertNotNull(function1);
      
      arrayList0.replaceAll(unaryOperator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ArrayDeque<DefaultTableXYDataset> arrayDeque0 = new ArrayDeque<DefaultTableXYDataset>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      Float float0 = new Float((-845.2126475));
      assertEquals((-845.21265F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = arrayList0.add(float0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(float0));
      
      boolean boolean1 = arrayList0.containsAll(arrayDeque0);
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayList0.contains(float0));
      assertTrue(boolean1 == boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertNull(range0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(float0));
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertNull(range1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(float0));
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMaximumDomainValue(yIntervalSeriesCollection0);
      assertNull(number1);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Number number2 = DatasetUtilities.findMinimumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number2);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      int int0 = 1004;
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      MockDate mockDate1 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate1);
      assertTrue(mockDate1.equals((Object)mockDate0));
      
      Hour hour0 = new Hour(mockDate1);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate1.toString());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1004;
      doubleArray0[1] = (double) 0;
      TimeSeries timeSeries0 = new TimeSeries(mockDate1, "$Ux8B", "$Ux8B");
      assertNotNull(timeSeries0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate1.toString());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("$Ux8B", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("$Ux8B", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(mockDate1.equals((Object)mockDate0));
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate1.toString());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("$Ux8B", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("$Ux8B", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertTrue(mockDate1.equals((Object)mockDate0));
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, true);
      assertNull(range0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate1.toString());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("$Ux8B", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("$Ux8B", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertNotSame(mockDate1, mockDate0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(timeSeriesCollection0, arrayList0, true);
      assertNull(range1);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate1.toString());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("$Ux8B", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("$Ux8B", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertNotSame(mockDate1, mockDate0);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, (Range) null, false);
      assertNull(range2);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate1.toString());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("$Ux8B", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("$Ux8B", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertNotSame(mockDate1, mockDate0);
      
      double double0 = 1.7976931348623157E308;
      double double1 = (-1724.13303);
      Range range3 = null;
      try {
        range3 = new Range(1.7976931348623157E308, (-1724.13303));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (1.7976931348623157E308) <= upper (-1724.13303).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(1004, 0, 1004, 23, 0, (-22));
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      Hour hour1 = new Hour(mockDate1);
      assertNotNull(hour1);
      assertEquals("Thu Sep 30 22:59:38 GMT 2906", mockDate1.toString());
      assertEquals(22, hour1.getHour());
      assertEquals(29560892378000L, hour1.getLastMillisecond());
      assertEquals(29560892378000L, hour1.getFirstMillisecond());
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      double[] doubleArray0 = new double[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate1, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Thu Sep 30 22:59:38 GMT 2906", mockDate1.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      Stack<IntervalXYDelegate> stack0 = new Stack<IntervalXYDelegate>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      MockDate mockDate1 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate1);
      assertTrue(mockDate1.equals((Object)mockDate0));
      
      Hour hour0 = new Hour(mockDate1);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate1.toString());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1004;
      Stack<IntervalXYDelegate> stack0 = new Stack<IntervalXYDelegate>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) vectorSeriesCollection0, true);
      assertNull(range0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range1 = Range.expandToInclude((Range) null, 0);
      assertNotNull(range1);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      
      Range range2 = DatasetUtilities.iterateToFindDomainBounds(vectorSeriesCollection0, stack0, true);
      assertNull(range2);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) vectorSeriesCollection0, (List) stack0, range1, true);
      assertNull(range3);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      long long0 = MockDate.UTC((-1), (-1081), (-1), 222, 1911, 187);
      assertEquals((-5082602753000L), long0);
      
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate(222, (-1081), 1896, 243, 44);
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      assertNotNull(serialDate0);
      assertEquals("Tue Feb 17 03:44:00 GMT 2037", mockDate0.toString());
      assertEquals(3, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      assertEquals(17, serialDate0.getDayOfMonth());
      assertEquals(2, serialDate0.getMonth());
      assertEquals(2037, serialDate0.getYYYY());
      assertEquals(50088, serialDate0.toSerial());
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      
      Date date0 = serialDate0.toDate();
      assertNotNull(date0);
      assertEquals("Tue Feb 17 03:44:00 GMT 2037", mockDate0.toString());
      assertEquals(3, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      assertEquals(17, serialDate0.getDayOfMonth());
      assertEquals(2, serialDate0.getMonth());
      assertEquals(2037, serialDate0.getYYYY());
      assertEquals(50088, serialDate0.toSerial());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      
      dateArray0[1] = date0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1081);
      doubleArray0[1] = (double) (-1081);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("v~1mrA=S.%", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {(-1081.0), (-1081.0)}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      
      Stack<IntervalXYDelegate> stack0 = new Stack<IntervalXYDelegate>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotNull(range0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1081.0), range0.getCentralValue(), 0.01);
      assertEquals((-1081.0), range0.getUpperBound(), 0.01);
      assertEquals((-1081.0), range0.getLowerBound(), 0.01);
      assertArrayEquals(new double[] {(-1081.0), (-1081.0)}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      
      Range range1 = Range.expandToInclude(range0, Double.POSITIVE_INFINITY);
      assertNotNull(range1);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1081.0), range0.getCentralValue(), 0.01);
      assertEquals((-1081.0), range0.getUpperBound(), 0.01);
      assertEquals((-1081.0), range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertEquals((-1081.0), range1.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertArrayEquals(new double[] {(-1081.0), (-1081.0)}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      Range range2 = DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, vector0, false);
      assertNull(range2);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertArrayEquals(new double[] {(-1081.0), (-1081.0)}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) vector0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset1 = (DefaultBoxAndWhiskerXYDataset)defaultBoxAndWhiskerXYDataset0.clone();
      assertNotNull(defaultBoxAndWhiskerXYDataset1);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset1.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset1.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset1.getFaroutCoefficient(), 0.01);
      assertTrue(defaultBoxAndWhiskerXYDataset1.equals((Object)defaultBoxAndWhiskerXYDataset0));
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset1);
      assertNotSame(defaultBoxAndWhiskerXYDataset1, defaultBoxAndWhiskerXYDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertNull(range0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertTrue(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset1);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      LinkedList<YIntervalSeriesCollection> linkedList0 = new LinkedList<YIntervalSeriesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset1, (List) linkedList0, false);
      assertNull(range1);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset1.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset1.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset1.getFaroutCoefficient(), 0.01);
      assertEquals(0, linkedList0.size());
      assertTrue(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertTrue(defaultBoxAndWhiskerXYDataset1.equals((Object)defaultBoxAndWhiskerXYDataset0));
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset1);
      assertNotSame(defaultBoxAndWhiskerXYDataset1, defaultBoxAndWhiskerXYDataset0);
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset1, false);
      assertNull(range2);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset1.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset1.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset1.getFaroutCoefficient(), 0.01);
      assertTrue(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertTrue(defaultBoxAndWhiskerXYDataset1.equals((Object)defaultBoxAndWhiskerXYDataset0));
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset1);
      assertNotSame(defaultBoxAndWhiskerXYDataset1, defaultBoxAndWhiskerXYDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1004;
      doubleArray0[2] = (double) 23;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 23;
      doubleArray0[5] = (double) 0;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      long long0 = MockDate.UTC((-1081), (-1081), 44, 6, 222, (-1081));
      assertEquals((-39160766161000L), long0);
      
      doubleArray1[1] = (double) 23;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 1004;
      doubleArray1[5] = (double) 1004;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(hour0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 23.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 23.0, 0.0, 1004.0, 0.0, 1004.0}, doubleArray1, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Stack<IntervalXYDelegate> stack0 = new Stack<IntervalXYDelegate>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotNull(range0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1004.0, range0.getLength(), 0.01);
      assertEquals(1004.0, range0.getUpperBound(), 0.01);
      assertEquals(502.0, range0.getCentralValue(), 0.01);
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 23.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 23.0, 0.0, 1004.0, 0.0, 1004.0}, doubleArray1, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, stack0, true);
      assertNull(range1);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 23.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 23.0, 0.0, 1004.0, 0.0, 1004.0}, doubleArray1, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range0, true);
      assertNull(range2);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1004.0, range0.getLength(), 0.01);
      assertEquals(1004.0, range0.getUpperBound(), 0.01);
      assertEquals(502.0, range0.getCentralValue(), 0.01);
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 23.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 23.0, 0.0, 1004.0, 0.0, 1004.0}, doubleArray1, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Range range3 = new Range(1004.0, 1004.0);
      assertNotNull(range3);
      assertEquals(1004.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(1004.0, range3.getUpperBound(), 0.01);
      assertEquals(1004.0, range3.getCentralValue(), 0.01);
      assertFalse(range3.equals((Object)range0));
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      DefaultHighLowDataset defaultHighLowDataset1 = new DefaultHighLowDataset(hour0, dateArray0, doubleArray2, doubleArray2, doubleArray1, doubleArray1, doubleArray2);
      assertNotNull(defaultHighLowDataset1);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(1, defaultHighLowDataset1.getSeriesCount());
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 23.0, 0.0, 1004.0, 0.0, 1004.0}, doubleArray1, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(defaultHighLowDataset1.equals((Object)defaultHighLowDataset0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultHighLowDataset1);
      assertFalse(boolean0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(1, defaultHighLowDataset1.getSeriesCount());
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 23.0, 0.0, 1004.0, 0.0, 1004.0}, doubleArray1, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(defaultHighLowDataset1.equals((Object)defaultHighLowDataset0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(defaultHighLowDataset1, defaultHighLowDataset0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1004;
      doubleArray0[2] = (double) 23;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 23;
      doubleArray0[5] = (double) 0;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      long long0 = MockDate.UTC((-1081), (-1081), 44, 6, 222, (-1081));
      assertEquals((-39160766161000L), long0);
      
      doubleArray1[1] = (double) 23;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 1004;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 1004;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(hour0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 23.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 23.0, 0.0, 1004.0, 0.0, 1004.0}, doubleArray1, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Stack<IntervalXYDelegate> stack0 = new Stack<IntervalXYDelegate>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotNull(range0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1004.0, range0.getUpperBound(), 0.01);
      assertEquals(502.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1004.0, range0.getLength(), 0.01);
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 23.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 23.0, 0.0, 1004.0, 0.0, 1004.0}, doubleArray1, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Range range1 = Range.expandToInclude((Range) null, 1159.7196352608785);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1159.7196352608785, range1.getUpperBound(), 0.01);
      assertEquals(1159.7196352608785, range1.getCentralValue(), 0.01);
      assertEquals(1159.7196352608785, range1.getLowerBound(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      Range range2 = DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, stack0, false);
      assertNull(range2);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 23.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 23.0, 0.0, 1004.0, 0.0, 1004.0}, doubleArray1, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range0, false);
      assertNull(range3);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(1004.0, range0.getUpperBound(), 0.01);
      assertEquals(502.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1004.0, range0.getLength(), 0.01);
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 23.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 23.0, 0.0, 1004.0, 0.0, 1004.0}, doubleArray1, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(range0.equals((Object)range1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(range0, range1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 23;
      Byte byte0 = new Byte((byte)7);
      assertEquals((byte)7, (byte)byte0);
      assertNotNull(byte0);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(byte0));
      
      boolean boolean0 = vector0.add(byte0);
      assertTrue(boolean0);
      assertFalse(vector0.isEmpty());
      assertEquals("[7]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.contains(byte0));
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(0.0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      Class<DefaultIntervalXYDataset> class0 = DefaultIntervalXYDataset.class;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1004, "Null 'dataset' argument.");
      assertNotNull(simpleTimeZone0);
      assertEquals("Null 'dataset' argument.", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1004, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=Null 'dataset' argument.,offset=1004,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      RegularTimePeriod regularTimePeriod0 = RegularTimePeriod.createInstance(class0, mockDate0, simpleTimeZone0);
      assertNull(regularTimePeriod0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals("Null 'dataset' argument.", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1004, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=Null 'dataset' argument.,offset=1004,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) vector0, true);
      assertNull(range0);
      assertFalse(vector0.isEmpty());
      assertEquals("[7]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(vector0.contains(byte0));
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, true);
      assertNull(range1);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-2555), 23);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals((-2555), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(23, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      DomainOrder domainOrder0 = defaultBoxAndWhiskerXYDataset0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      Float float0 = new Float((double) (-2555));
      assertEquals((-2555.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultBoxAndWhiskerXYDataset0);
      assertNull(number0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-2374.03161866);
      doubleArray1[1] = (-351.583);
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals((-2374.03161866), range0.getLowerBound(), 0.01);
      assertEquals(2, doubleArray0.length);
      
      defaultCategoryDataset0.validateObject();
      assertEquals(2, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      assertNotNull(range1);
      assertEquals(Double.POSITIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertEquals((-2374.03161866), range1.getLowerBound(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) yIntervalSeriesCollection0, true);
      assertNull(range2);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal((TableXYDataset) null, 1217);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][2];
      Number[] numberArray1 = new Number[9];
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("sV", (String) null, numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (Comparable) "sV");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      TimeSeriesCollection timeSeriesCollection1 = (TimeSeriesCollection)timeSeriesCollection0.clone();
      assertNotNull(timeSeriesCollection1);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, timeSeriesCollection1.getSeriesCount());
      assertTrue(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      assertNotSame(timeSeriesCollection0, timeSeriesCollection1);
      assertNotSame(timeSeriesCollection1, timeSeriesCollection0);
      
      Stack<IntervalXYDelegate> stack0 = new Stack<IntervalXYDelegate>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(xYIntervalSeriesCollection0);
      assertNull(number0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, true);
      assertNull(range0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertTrue(timeSeriesCollection0.equals((Object)timeSeriesCollection1));
      assertNotSame(timeSeriesCollection0, timeSeriesCollection1);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection1, false);
      assertNull(range1);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, timeSeriesCollection1.getSeriesCount());
      assertTrue(timeSeriesCollection0.equals((Object)timeSeriesCollection1));
      assertTrue(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      assertNotSame(timeSeriesCollection0, timeSeriesCollection1);
      assertNotSame(timeSeriesCollection1, timeSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-2374.03161866);
      doubleArray1[1] = (-351.583);
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 625, 187);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(625, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(187, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset(slidingGanttCategoryDataset0, (-71), 625);
      assertNotNull(slidingGanttCategoryDataset1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(625, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(187, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(625, slidingGanttCategoryDataset1.getMaximumCategoryCount());
      assertEquals((-71), slidingGanttCategoryDataset1.getFirstCategoryIndex());
      assertFalse(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      
      Vector<Byte> vector0 = new Vector<Byte>(625, 29);
      assertNotNull(vector0);
      assertEquals(625, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) vector0, false);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(625, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(187, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(625, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertFalse(slidingGanttCategoryDataset0.equals((Object)slidingGanttCategoryDataset1));
      assertNotSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, (double) 625);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Comparable<Byte>[] comparableArray0 = (Comparable<Byte>[]) Array.newInstance(Comparable.class, 0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ArrayList<Float> arrayList1 = new ArrayList<Float>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      Float float0 = new Float((double) 4701.044F);
      assertEquals(4701.044F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) 4701.044F);
      assertEquals(4701.044F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float(4701.044F);
      assertEquals(4701.044F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      
      ArrayList<Float> arrayList2 = new ArrayList<Float>();
      assertNotNull(arrayList2);
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertFalse(arrayList2.contains(float0));
      assertTrue(arrayList2.equals((Object)arrayList1));
      assertTrue(arrayList2.equals((Object)arrayList0));
      
      boolean boolean1 = arrayList2.add(float1);
      assertTrue(boolean1);
      assertFalse(arrayList2.isEmpty());
      assertEquals(1, arrayList2.size());
      assertTrue(arrayList2.contains(float0));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((float)float1, (float)float2, 0.01F);
      assertFalse(arrayList2.equals((Object)arrayList0));
      assertFalse(arrayList2.equals((Object)arrayList1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(arrayList2, arrayList0);
      assertNotSame(arrayList2, arrayList1);
      
      Float float3 = new Float(4701.044F);
      assertEquals(4701.044F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      
      Float float4 = new Float((double) 4701.044F);
      assertEquals(4701.044F, (float)float4, 0.01F);
      assertNotNull(float4);
      assertEquals((float)float4, (float)float0, 0.01F);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertEquals((float)float4, (float)float1, 0.01F);
      
      boolean boolean2 = arrayList1.add(float4);
      assertTrue(boolean2);
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertTrue(arrayList1.contains(float4));
      assertTrue(arrayList1.equals((Object)arrayList2));
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertEquals((float)float4, (float)float0, 0.01F);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(arrayList1, arrayList0);
      assertNotSame(arrayList1, arrayList2);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 4701.044F;
      doubleArray0[1] = (double) 4701.044F;
      doubleArray0[2] = (double) 4701.044F;
      doubleArray0[3] = (double) 4701.044F;
      doubleArray0[4] = (double) 4701.044F;
      doubleArray0[5] = (double) 4701.044F;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {4701.0439453125, 4701.0439453125, 4701.0439453125, 4701.0439453125, 4701.0439453125, 4701.0439453125}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 4701.0439453125, 4701.0439453125, 13, float3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[5] = 1172.1026013;
      Stack<IntervalXYDelegate> stack0 = new Stack<IntervalXYDelegate>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(xYIntervalSeriesCollection0);
      assertNull(number0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYIntervalSeriesCollection0, true);
      assertNull(range0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) xYIntervalSeriesCollection0, true);
      assertNull(range1);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1004;
      doubleArray0[2] = (double) 23;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 23;
      doubleArray0[5] = (double) 0;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      long long0 = MockDate.UTC((-1081), (-1081), 44, 6, 222, (-1081));
      assertEquals((-39160766161000L), long0);
      
      doubleArray1[1] = (double) 23;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 1004;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 1004;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(hour0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 23.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 23.0, 0.0, 1004.0, 0.0, 1004.0}, doubleArray1, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Stack<IntervalXYDelegate> stack0 = new Stack<IntervalXYDelegate>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotNull(range0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1004.0, range0.getUpperBound(), 0.01);
      assertEquals(502.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1004.0, range0.getLength(), 0.01);
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 23.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 23.0, 0.0, 1004.0, 0.0, 1004.0}, doubleArray1, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, stack0, true);
      assertNull(range1);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 23.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 23.0, 0.0, 1004.0, 0.0, 1004.0}, doubleArray1, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(integer0);
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NaN, 3060.359621);
      assertNotNull(simpleHistogramBin0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(3060.359621, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, simpleHistogramBin0.getLowerBound(), 0.01);
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(3060.359621, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, simpleHistogramBin0.getLowerBound(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) simpleHistogramDataset0);
      assertNull(number0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      MockDate mockDate1 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate1);
      assertTrue(mockDate1.equals((Object)mockDate0));
      
      Hour hour0 = new Hour(mockDate1);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate1.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(mockDate0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(mockDate0.equals((Object)mockDate1));
      
      simpleHistogramDataset0.fireSelectionEvent();
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertNotSame(mockDate0, mockDate1);
      
      simpleHistogramDataset0.addBin((SimpleHistogramBin) null);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertNotSame(mockDate0, mockDate1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) simpleHistogramDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      LinkedList<DefaultStatisticalCategoryDataset> linkedList0 = new LinkedList<DefaultStatisticalCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean0 = defaultStatisticalCategoryDataset0.hasListener(xYSeriesCollection0);
      assertFalse(boolean0);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      boolean boolean1 = linkedList0.add(defaultStatisticalCategoryDataset0);
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(defaultStatisticalCategoryDataset0));
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultStatisticalCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ArrayList<Float> arrayList1 = new ArrayList<Float>();
      assertNotNull(arrayList1);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      Float float0 = new Float((double) 4701.044F);
      assertEquals(4701.044F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) 4701.044F);
      assertEquals(4701.044F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float(4701.044F);
      assertEquals(4701.044F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      
      ArrayList<Float> arrayList2 = new ArrayList<Float>();
      assertNotNull(arrayList2);
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertFalse(arrayList2.contains(float2));
      assertTrue(arrayList2.equals((Object)arrayList1));
      assertTrue(arrayList2.equals((Object)arrayList0));
      
      boolean boolean1 = arrayList2.add(float1);
      assertTrue(boolean1);
      assertFalse(arrayList2.isEmpty());
      assertEquals(1, arrayList2.size());
      assertTrue(arrayList2.contains(float2));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((float)float1, (float)float2, 0.01F);
      assertFalse(arrayList2.equals((Object)arrayList1));
      assertFalse(arrayList2.equals((Object)arrayList0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(arrayList2, arrayList1);
      assertNotSame(arrayList2, arrayList0);
      
      Float float3 = new Float(4701.044F);
      assertEquals(4701.044F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      
      boolean boolean2 = arrayList2.add(float3);
      assertTrue(boolean2);
      assertFalse(arrayList2.isEmpty());
      assertEquals(2, arrayList2.size());
      assertTrue(arrayList2.contains(float3));
      assertFalse(arrayList2.equals((Object)arrayList1));
      assertFalse(arrayList2.equals((Object)arrayList0));
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(arrayList2, arrayList1);
      assertNotSame(arrayList2, arrayList0);
      
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, Double.NaN, 4701.044F, 13, float0);
      assertNotNull(xYSeries0);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertEquals(13, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals((float)float0, (float)float3, 0.01F);
      assertEquals((float)float0, (float)float2, 0.01F);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertEquals(13, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals((float)float0, (float)float3, 0.01F);
      assertEquals((float)float0, (float)float2, 0.01F);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, Double.NaN);
      assertNotNull(xYBarDataset0);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertEquals(13, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(Double.NaN, xYBarDataset0.getBarWidth(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals((float)float0, (float)float3, 0.01F);
      assertEquals((float)float0, (float)float2, 0.01F);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYBarDataset0);
      assertNull(range0);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertEquals(13, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(Double.NaN, xYBarDataset0.getBarWidth(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals((float)float0, (float)float3, 0.01F);
      assertEquals((float)float0, (float)float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1004;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 23;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (-2941.74));
      assertNotNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals((-2941.74), range0.getUpperBound(), 0.01);
      assertEquals((-2941.74), range0.getCentralValue(), 0.01);
      assertEquals((-2941.74), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Number[][] numberArray0 = new Number[6][9];
      Number[] numberArray1 = new Number[9];
      numberArray1[0] = (Number) 0.0;
      numberArray1[1] = (Number) 0.0;
      numberArray1[2] = (Number) 1004.0;
      numberArray1[3] = (Number) 0.0;
      numberArray1[4] = (Number) 0.0;
      numberArray1[5] = (Number) 23.0;
      numberArray1[6] = (Number) 23;
      numberArray1[7] = (Number) 1004.0;
      numberArray1[8] = (Number) 23;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[1];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) 0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[0];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[2];
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray3));
      
      numberArray4[0] = (Number) 23;
      numberArray4[1] = (Number) 23.0;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[0];
      assertFalse(numberArray5.equals((Object)numberArray1));
      assertFalse(numberArray5.equals((Object)numberArray2));
      assertFalse(numberArray5.equals((Object)numberArray4));
      assertFalse(numberArray5.equals((Object)numberArray3));
      
      numberArray0[4] = numberArray5;
      Number[] numberArray6 = new Number[7];
      assertFalse(numberArray6.equals((Object)numberArray5));
      assertFalse(numberArray6.equals((Object)numberArray1));
      assertFalse(numberArray6.equals((Object)numberArray4));
      assertFalse(numberArray6.equals((Object)numberArray3));
      assertFalse(numberArray6.equals((Object)numberArray2));
      
      numberArray6[0] = (Number) 0.0;
      numberArray6[1] = (Number) 23.0;
      numberArray6[2] = (Number) 0.0;
      numberArray6[3] = (Number) 23;
      numberArray6[4] = (Number) 0;
      numberArray6[5] = (Number) 0;
      numberArray6[6] = (Number) 0;
      numberArray0[5] = numberArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, numberArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertFalse(boolean0);
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("v~1mrA=S.%");
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) simpleHistogramDataset0);
      assertNull(range0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Number[] numberArray0 = new Number[9];
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection1);
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection1, 2, 2);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(2, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(2, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) slidingGanttCategoryDataset0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(2, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(2, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      assertNotSame(taskSeriesCollection1, taskSeriesCollection0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = vector0.add(byte0);
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals("[2]", vector0.toString());
      assertEquals(1, vector0.size());
      assertTrue(vector0.contains(byte0));
      
      Stack<Byte> stack0 = new Stack<Byte>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(byte0));
      
      Stack stack1 = (Stack)stack0.clone();
      assertNotNull(stack1);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(0, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertFalse(stack0.contains(byte0));
      
      Vector<Byte> vector1 = new Vector<Byte>();
      assertNotNull(vector1);
      assertTrue(vector1.isEmpty());
      assertEquals("[]", vector1.toString());
      assertEquals(10, vector1.capacity());
      assertEquals(0, vector1.size());
      assertFalse(vector1.contains(byte0));
      assertFalse(vector1.equals((Object)vector0));
      
      boolean boolean1 = vector1.add(byte0);
      assertTrue(boolean1);
      assertEquals(10, vector1.capacity());
      assertEquals(1, vector1.size());
      assertFalse(vector1.isEmpty());
      assertEquals("[2]", vector1.toString());
      assertTrue(vector1.contains(byte0));
      assertTrue(vector1.equals((Object)vector0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(vector1, vector0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = timeTableXYDataset0.getDomainBounds(false);
      assertNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.validateObject();
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) vector1, true);
      assertNull(range1);
      assertEquals(10, vector1.capacity());
      assertEquals(1, vector1.size());
      assertFalse(vector1.isEmpty());
      assertEquals("[2]", vector1.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertTrue(vector1.contains(byte0));
      assertTrue(vector1.equals((Object)vector0));
      assertNotSame(vector1, vector0);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Byte byte0 = new Byte((byte)87);
      assertEquals((byte)87, (byte)byte0);
      assertNotNull(byte0);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains(byte0));
      
      boolean boolean1 = vector0.add(byte0);
      assertTrue(boolean1);
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals("[87]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertTrue(vector0.contains(byte0));
      assertTrue(boolean1 == boolean0);
      
      Stack<Byte> stack0 = new Stack<Byte>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(byte0));
      
      Vector vector1 = (Vector)vector0.clone();
      assertNotNull(vector1);
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals("[87]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector1.capacity());
      assertEquals(1, vector1.size());
      assertFalse(vector1.isEmpty());
      assertEquals("[87]", vector1.toString());
      assertTrue(vector0.contains(byte0));
      
      Vector<Byte> vector2 = new Vector<Byte>();
      assertNotNull(vector2);
      assertEquals(10, vector2.capacity());
      assertEquals(0, vector2.size());
      assertTrue(vector2.isEmpty());
      assertEquals("[]", vector2.toString());
      assertFalse(vector2.contains(byte0));
      assertFalse(vector2.equals((Object)vector0));
      
      Byte byte1 = new Byte((byte)56);
      assertEquals((byte)56, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      boolean boolean2 = stack0.add(byte1);
      assertTrue(boolean2);
      assertEquals(10, stack0.capacity());
      assertEquals("[56]", stack0.toString());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(byte1));
      assertFalse(stack0.contains(byte0));
      assertFalse(byte1.equals((Object)byte0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      int int0 = timeTableXYDataset0.getSeriesCount();
      assertEquals(0, int0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = timeTableXYDataset0.getDomainBounds(false);
      assertNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.validateObject();
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) arrayList0, true);
      assertNull(range1);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)87;
      doubleArray0[1] = (double) (byte)56;
      doubleArray0[2] = (double) (byte)87;
      doubleArray0[3] = (double) (byte)87;
      doubleArray0[4] = (double) (byte)56;
      doubleArray0[5] = (double) (byte)56;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {87.0, 56.0, 87.0, 87.0, 56.0, 56.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      XYSeriesCollection xYSeriesCollection1 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 1573.905, 2411.47523, (byte)56, 56.0);
      assertNotNull(xYSeriesCollection1);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection1.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection1.getSeriesCount());
      assertFalse(xYSeriesCollection1.isAutoWidth());
      assertArrayEquals(new double[] {87.0, 56.0, 87.0, 87.0, 56.0, 56.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertFalse(xYSeriesCollection1.equals((Object)xYSeriesCollection0));
      assertNotSame(xYSeriesCollection1, xYSeriesCollection0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection1, (List) vector0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      UnaryOperator<Float> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Function<TimeSeriesCollection, TimeSeriesCollection> function0 = Function.identity();
      assertNotNull(function0);
      
      Function<DefaultBoxAndWhiskerCategoryDataset, DefaultBoxAndWhiskerCategoryDataset> function1 = Function.identity();
      assertNotNull(function1);
      
      arrayList0.replaceAll(unaryOperator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ArrayDeque<DefaultTableXYDataset> arrayDeque0 = new ArrayDeque<DefaultTableXYDataset>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Float float0 = new Float((-845.2126475));
      assertEquals((-845.21265F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = arrayList0.add(float0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(float0));
      
      boolean boolean1 = arrayList0.containsAll(arrayDeque0);
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(arrayList0.contains(float0));
      assertTrue(boolean1 == boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertNull(range0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(float0));
      
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      assertNotNull(arrayList1);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertFalse(arrayList1.contains((-845.2126475)));
      
      boolean boolean2 = arrayList0.add((Float) null);
      assertTrue(boolean2);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(float0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      ArrayList<Object> arrayList2 = new ArrayList<Object>();
      assertNotNull(arrayList2);
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertFalse(arrayList2.contains((-845.2126475)));
      assertTrue(arrayList2.equals((Object)arrayList1));
      
      boolean boolean3 = arrayList2.add((Object) arrayList1);
      assertTrue(boolean3);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertFalse(arrayList2.isEmpty());
      assertEquals(1, arrayList2.size());
      assertFalse(arrayList1.contains((-845.2126475)));
      assertFalse(arrayList2.contains((-845.2126475)));
      assertFalse(arrayList1.equals((Object)arrayList2));
      assertFalse(arrayList2.equals((Object)arrayList1));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertNotSame(arrayList1, arrayList2);
      assertNotSame(arrayList2, arrayList1);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, 2512);
      assertNotNull(pieDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "k;66", 1092.862594, (-2278));
      assertNotNull(pieDataset1);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(pieDataset0, pieDataset1);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) float0, (KeyedValues) pieDataset1);
      assertNotNull(categoryDataset0);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertFalse(pieDataset0.equals((Object)pieDataset1));
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(pieDataset0, pieDataset1);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertFalse(defaultPieDataset0.equals((Object)pieDataset1));
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertFalse(pieDataset1.equals((Object)defaultPieDataset0));
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertFalse(categoryDataset0.equals((Object)defaultCategoryDataset0));
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertFalse(pieDataset0.equals((Object)pieDataset1));
      assertNotSame(pieDataset1, defaultPieDataset0);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(pieDataset0, pieDataset1);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList1, true);
      assertNull(range1);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertFalse(arrayList1.contains(2512));
      assertFalse(arrayList1.equals((Object)arrayList2));
      assertNotSame(arrayList1, arrayList2);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range2 = timeTableXYDataset0.getDomainBounds(true);
      assertNull(range2);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Number number1 = DatasetUtilities.findMaximumStackedRangeValue(defaultCategoryDataset0);
      assertNull(number1);
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      
      Number number2 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeTableXYDataset0);
      assertNull(number2);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      double[] doubleArray0 = new double[8];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      XYSeries xYSeries0 = new XYSeries(0.0, true);
      assertNotNull(xYSeries0);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) xYSeriesCollection0);
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1004;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 23;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(dateArray0[1], dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      
      Stack<IntervalXYDelegate> stack0 = new Stack<IntervalXYDelegate>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, stack0, false);
      assertNull(range0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range1);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(502.0, range1.getCentralValue(), 0.01);
      assertEquals(1004.0, range1.getUpperBound(), 0.01);
      assertEquals(1004.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      
      double[][] doubleArray1 = new double[9][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 1004;
      doubleArray2[1] = (double) 23;
      doubleArray2[2] = (double) 23;
      doubleArray2[3] = (double) 23;
      doubleArray2[4] = (double) 23;
      doubleArray1[4] = doubleArray2;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(9, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 23);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 23, Size: 6
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String string0 = null;
      String string1 = "s\\V";
      Number[][] numberArray0 = new Number[1][2];
      Number[] numberArray1 = new Number[9];
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("sV", (String) null, numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0, (-5038.606967));
      assertNotNull(range0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals((-5038.606967), range0.getUpperBound(), 0.01);
      assertEquals((-5038.606967), range0.getCentralValue(), 0.01);
      assertEquals((-5038.606967), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 2164);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2164, Size: 9
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][2];
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(float0));
      
      Float float1 = new Float(Double.NEGATIVE_INFINITY);
      assertEquals(Float.NEGATIVE_INFINITY, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      boolean boolean0 = arrayList0.add(float0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.contains(float1));
      assertTrue(arrayList0.contains(float0));
      assertNotEquals((float)float0, (float)float1, 0.01F);
      
      HashSet<TimeSeriesCollection> hashSet0 = new HashSet<TimeSeriesCollection>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      boolean boolean1 = arrayList0.containsAll(hashSet0);
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(arrayList0.contains(float1));
      assertTrue(arrayList0.contains(float0));
      assertTrue(boolean1 == boolean0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("sV", "sV", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("sV", "sV", numberArray0);
      assertNotNull(categoryDataset1);
      assertEquals(1, numberArray0.length);
      assertTrue(categoryDataset1.equals((Object)categoryDataset0));
      assertNotSame(categoryDataset1, categoryDataset0);
      
      ArrayList<Float> arrayList1 = new ArrayList<Float>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertFalse(arrayList1.contains(float1));
      assertFalse(arrayList1.equals((Object)arrayList0));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset1, (List) arrayList1, false);
      assertNull(range0);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals(1, numberArray0.length);
      assertFalse(arrayList1.contains(float1));
      assertTrue(categoryDataset1.equals((Object)categoryDataset0));
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertNotSame(categoryDataset1, categoryDataset0);
      assertNotSame(arrayList1, arrayList0);
      
      ArrayList<Object> arrayList2 = new ArrayList<Object>();
      assertNotNull(arrayList2);
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertFalse(arrayList2.contains(Double.NEGATIVE_INFINITY));
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(float1);
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 1);
      assertNotNull(pieDataset0);
      assertEquals(1, numberArray0.length);
      assertTrue(categoryDataset0.equals((Object)categoryDataset1));
      assertNotSame(categoryDataset0, categoryDataset1);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1004;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 23;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 23;
      doubleArray0[5] = (double) 0;
      Class<DefaultHighLowDataset> class0 = DefaultHighLowDataset.class;
      Class class1 = RegularTimePeriod.downsize(class0);
      assertNotNull(class1);
      assertEquals("class org.jfree.data.time.Millisecond", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = 1172.1026013;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 1004;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 1004;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(hour0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 23.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1172.1026013, 0.0, 1004.0, 0.0, 1004.0}, doubleArray1, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Stack<IntervalXYDelegate> stack0 = new Stack<IntervalXYDelegate>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, stack0, false);
      assertNull(range0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 23.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1172.1026013, 0.0, 1004.0, 0.0, 1004.0}, doubleArray1, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotNull(range1);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(13, hour0.getHour());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1004.0, range1.getLength(), 0.01);
      assertEquals(1004.0, range1.getUpperBound(), 0.01);
      assertEquals(502.0, range1.getCentralValue(), 0.01);
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 23.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1172.1026013, 0.0, 1004.0, 0.0, 1004.0}, doubleArray1, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(xYIntervalSeriesCollection0);
      assertNull(number0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Comparable<Float> comparable0 = null;
      int int0 = timeTableXYDataset0.indexOf((Comparable) null);
      assertEquals((-1), int0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeTableXYDataset0);
      assertTrue(boolean0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Minute minute0 = new Minute();
      assertNotNull(minute0);
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      Byte byte0 = new Byte((byte) (-73));
      assertEquals((byte) (-73), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-73));
      assertEquals((byte) (-73), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      XYSeries xYSeries0 = new XYSeries(minute0, true);
      assertNotNull(xYSeries0);
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, (-473.9596031773311));
      assertNotNull(xYBarDataset0);
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals((-473.9596031773311), xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0);
      assertNull(range0);
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals((-473.9596031773311), xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      double[][] doubleArray0 = new double[0][6];
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) null, (Comparable[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      XYSeries xYSeries0 = new XYSeries("sV", false);
      assertNotNull(xYSeries0);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, (-742));
      assertNotNull(xYBarDataset0);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals((-742.0), xYBarDataset0.getBarWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      assertNull(range0);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      assertEquals(0.0, double0, 0.01);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "sV", (KeyedValues) defaultKeyedValuesDataset0);
      assertNotNull(categoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "sV", 966.8456733332, 176);
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 23;
      Byte byte0 = new Byte((byte)3);
      assertEquals((byte)3, (byte)byte0);
      assertNotNull(byte0);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(byte0));
      
      boolean boolean0 = vector0.add(byte0);
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals("[3]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertTrue(vector0.contains(byte0));
      
      boolean boolean1 = vector0.add(byte0);
      assertTrue(boolean1);
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(2, vector0.size());
      assertEquals("[3, 3]", vector0.toString());
      assertTrue(vector0.contains(byte0));
      assertTrue(boolean1 == boolean0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-913), (-913));
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals((-913), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-913), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingGanttCategoryDataset0, 194);
      assertNotNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals((-913), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-913), slidingGanttCategoryDataset0.getMaximumCategoryCount());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(189);
      assertNotNull(spreadsheetDate0);
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals(7, spreadsheetDate0.getMonth());
      assertEquals(189, spreadsheetDate0.toSerial());
      assertEquals(7, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      
      SerialDate serialDate0 = SerialDate.addMonths(189, spreadsheetDate0);
      assertNotNull(serialDate0);
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals(7, spreadsheetDate0.getMonth());
      assertEquals(189, spreadsheetDate0.toSerial());
      assertEquals(7, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1916, serialDate0.getYYYY());
      assertNull(serialDate0.getDescription());
      assertEquals(7, serialDate0.getDayOfMonth());
      assertEquals(5942, serialDate0.toSerial());
      assertEquals(4, serialDate0.getMonth());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertFalse(serialDate0.equals((Object)spreadsheetDate0));
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertNotSame(spreadsheetDate0, serialDate0);
      assertNotSame(serialDate0, spreadsheetDate0);
      
      Day day0 = new Day(serialDate0);
      assertNotNull(day0);
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals(7, spreadsheetDate0.getMonth());
      assertEquals(189, spreadsheetDate0.toSerial());
      assertEquals(7, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1916, serialDate0.getYYYY());
      assertNull(serialDate0.getDescription());
      assertEquals(7, serialDate0.getDayOfMonth());
      assertEquals(5942, serialDate0.toSerial());
      assertEquals(4, serialDate0.getMonth());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertFalse(spreadsheetDate0.equals((Object)serialDate0));
      assertFalse(serialDate0.equals((Object)spreadsheetDate0));
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      
      RegularTimePeriod regularTimePeriod0 = day0.next();
      assertNotNull(regularTimePeriod0);
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals(7, spreadsheetDate0.getMonth());
      assertEquals(189, spreadsheetDate0.toSerial());
      assertEquals(7, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1916, serialDate0.getYYYY());
      assertNull(serialDate0.getDescription());
      assertEquals(7, serialDate0.getDayOfMonth());
      assertEquals(5942, serialDate0.toSerial());
      assertEquals(4, serialDate0.getMonth());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getFirstMillisecond());
      assertFalse(spreadsheetDate0.equals((Object)serialDate0));
      assertFalse(serialDate0.equals((Object)spreadsheetDate0));
      assertFalse(regularTimePeriod0.equals((Object)day0));
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertNotSame(spreadsheetDate0, serialDate0);
      assertNotSame(serialDate0, spreadsheetDate0);
      assertNotSame(day0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, day0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(regularTimePeriod0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals(7, spreadsheetDate0.getMonth());
      assertEquals(189, spreadsheetDate0.toSerial());
      assertEquals(7, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1916, serialDate0.getYYYY());
      assertNull(serialDate0.getDescription());
      assertEquals(7, serialDate0.getDayOfMonth());
      assertEquals(5942, serialDate0.toSerial());
      assertEquals(4, serialDate0.getMonth());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertFalse(spreadsheetDate0.equals((Object)serialDate0));
      assertFalse(serialDate0.equals((Object)spreadsheetDate0));
      assertFalse(day0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)day0));
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      TimeSeriesCollection timeSeriesCollection1 = (TimeSeriesCollection)timeSeriesCollection0.clone();
      assertNotNull(timeSeriesCollection1);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, timeSeriesCollection1.getSeriesCount());
      assertTrue(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      assertNotSame(timeSeriesCollection0, timeSeriesCollection1);
      assertNotSame(timeSeriesCollection1, timeSeriesCollection0);
      
      List<DefaultTableModel> list0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Float float0 = new Float((double) 4701.044F);
      assertEquals(4701.044F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      ArrayList<Float> arrayList1 = new ArrayList<Float>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertFalse(arrayList1.contains(4701.044F));
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      Float float1 = new Float((double) 4701.044F);
      assertEquals(4701.044F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      boolean boolean1 = arrayList1.add(float1);
      assertTrue(boolean1);
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertTrue(arrayList1.contains(4701.044F));
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertNotSame(arrayList1, arrayList0);
      
      Float float2 = new Float(4701.044F);
      assertEquals(4701.044F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      
      ArrayList<Float> arrayList2 = new ArrayList<Float>();
      assertNotNull(arrayList2);
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertFalse(arrayList2.contains(4701.044F));
      assertFalse(arrayList2.equals((Object)arrayList1));
      assertTrue(arrayList2.equals((Object)arrayList0));
      
      boolean boolean2 = arrayList2.add(float1);
      assertTrue(boolean2);
      assertEquals(1, arrayList2.size());
      assertFalse(arrayList2.isEmpty());
      assertTrue(arrayList2.contains(4701.044F));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((float)float1, (float)float2, 0.01F);
      assertFalse(arrayList2.equals((Object)arrayList0));
      assertTrue(arrayList2.equals((Object)arrayList1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(arrayList2, arrayList1);
      assertNotSame(arrayList2, arrayList0);
      
      Float float3 = new Float(4701.044F);
      assertEquals(4701.044F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      
      boolean boolean3 = arrayList2.add(float3);
      assertTrue(boolean3);
      assertEquals(2, arrayList2.size());
      assertFalse(arrayList2.isEmpty());
      assertTrue(arrayList2.contains(4701.044F));
      assertFalse(arrayList2.equals((Object)arrayList1));
      assertFalse(arrayList2.equals((Object)arrayList0));
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertNotSame(arrayList2, arrayList1);
      assertNotSame(arrayList2, arrayList0);
      
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      XYSeries xYSeries0 = new XYSeries(float3, false);
      assertNotNull(xYSeries0);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      
      Number[][] numberArray0 = new Number[4][5];
      Number[] numberArray1 = new Number[3];
      numberArray1[0] = (Number) float3;
      numberArray1[1] = (Number) float3;
      numberArray0[1] = numberArray1;
      Number[] numberArray2 = new Number[2];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) float2;
      numberArray2[1] = (Number) float2;
      numberArray0[2] = numberArray2;
      Number[] numberArray3 = new Number[1];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 189);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      UnaryOperator<Float> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Function<TimeSeriesCollection, TimeSeriesCollection> function0 = Function.identity();
      assertNotNull(function0);
      
      arrayList0.replaceAll(unaryOperator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ArrayDeque<DefaultTableXYDataset> arrayDeque0 = new ArrayDeque<DefaultTableXYDataset>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      Float float0 = new Float((-845.2126475));
      assertEquals((-845.21265F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = arrayList0.add(float0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(float0));
      
      boolean boolean1 = arrayList0.containsAll(arrayDeque0);
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayList0.contains(float0));
      assertTrue(boolean1 == boolean0);
      
      Range range0 = new Range((-845.2126475), (-845.2126475));
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-845.2126475), range0.getLowerBound(), 0.01);
      assertEquals((-845.2126475), range0.getCentralValue(), 0.01);
      assertEquals((-845.2126475), range0.getUpperBound(), 0.01);
      
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertFalse(arrayList1.contains((-845.2126475)));
      
      boolean boolean2 = arrayList0.add((Float) null);
      assertTrue(boolean2);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(float0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      ArrayList<Object> arrayList2 = new ArrayList<Object>();
      assertNotNull(arrayList2);
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertFalse(arrayList2.contains((-845.2126475)));
      assertTrue(arrayList2.equals((Object)arrayList1));
      
      boolean boolean3 = arrayList2.add((Object) arrayList1);
      assertTrue(boolean3);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertFalse(arrayList2.isEmpty());
      assertEquals(1, arrayList2.size());
      assertFalse(arrayList1.contains((-845.2126475)));
      assertFalse(arrayList2.contains((-845.2126475)));
      assertFalse(arrayList1.equals((Object)arrayList2));
      assertFalse(arrayList2.equals((Object)arrayList1));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertNotSame(arrayList1, arrayList2);
      assertNotSame(arrayList2, arrayList1);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      boolean boolean4 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, (List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1004;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 23;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 23;
      doubleArray0[5] = (double) 0;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = 1172.1026013;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 1004;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 1004;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(hour0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 23.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1172.1026013, 0.0, 1004.0, 0.0, 1004.0}, doubleArray1, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Stack<IntervalXYDelegate> stack0 = new Stack<IntervalXYDelegate>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, stack0, false);
      assertNull(range0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 23.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1172.1026013, 0.0, 1004.0, 0.0, 1004.0}, doubleArray1, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotNull(range1);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1004.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1004.0, range1.getUpperBound(), 0.01);
      assertEquals(502.0, range1.getCentralValue(), 0.01);
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 23.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1172.1026013, 0.0, 1004.0, 0.0, 1004.0}, doubleArray1, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotNull(range2);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(3.2204782844E13, range2.getUpperBound(), 0.01);
      assertEquals(3.2204782844E13, range2.getLowerBound(), 0.01);
      assertEquals(3.2204782844E13, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertArrayEquals(new double[] {1004.0, 0.0, 23.0, 0.0, 23.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1172.1026013, 0.0, 1004.0, 0.0, 1004.0}, doubleArray1, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(range2.equals((Object)range1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(range2, range1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean0 = defaultStatisticalCategoryDataset0.equals((Object) null);
      assertFalse(boolean0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, 1665);
      assertNotNull(pieDataset0);
      
      Minute minute0 = new Minute();
      assertNotNull(minute0);
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      Second second0 = new Second(1665, minute0);
      assertNotNull(second0);
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals((-127), second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      Second second1 = (Second)second0.previous();
      assertNotNull(second1);
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals((-127), second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals((-128), second1.getSecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertFalse(second1.equals((Object)second0));
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) second1, (double) 59, 59);
      assertNotNull(defaultPieDataset0);
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals((-127), second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals((-128), second1.getSecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertFalse(second0.equals((Object)second1));
      assertFalse(second1.equals((Object)second0));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertNotSame(defaultPieDataset0, pieDataset0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(59));
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, (-2327));
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals((-2328), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      
      Range range0 = dynamicTimeSeriesCollection0.getRangeBounds(false);
      assertNotNull(range0);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals((-2328), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, (List) vector0, range0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      int int0 = timeTableXYDataset0.indexOf((Comparable) null);
      assertEquals((-1), int0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeTableXYDataset0);
      assertTrue(boolean0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Minute minute0 = new Minute();
      assertNotNull(minute0);
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Byte byte0 = new Byte((byte) (-73));
      assertEquals((byte) (-73), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-73));
      assertEquals((byte) (-73), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, (int) (byte) (-73));
      assertNotNull(pieDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(minute0);
      assertNotNull(keyToGroupMap0);
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, keyToGroupMap0);
      assertNull(range0);
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (-845.2126475));
      assertNull(range1);
      
      PieDataset pieDataset1 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, 507);
      assertNotNull(pieDataset1);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(pieDataset1, pieDataset0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) xIntervalSeriesCollection0);
      assertNull(number0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Vector<DefaultStatisticalCategoryDataset> vector0 = new Vector<DefaultStatisticalCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Vector<DefaultIntervalXYDataset> vector1 = new Vector<DefaultIntervalXYDataset>();
      assertNotNull(vector1);
      assertTrue(vector1.isEmpty());
      assertEquals(0, vector1.size());
      assertEquals(10, vector1.capacity());
      assertEquals("[]", vector1.toString());
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Float float0 = new Float((double) 3777.0F);
      assertEquals(3777.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(3777.0F);
      assertEquals(3777.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      vector0.clear();
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      TreeSet<DefaultHighLowDataset> treeSet0 = new TreeSet<DefaultHighLowDataset>();
      assertNotNull(treeSet0);
      
      Long[] longArray0 = new Long[3];
      long long0 = 0L;
      Long long1 = new Long(0L);
      assertEquals(0L, (long)long1);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      
      longArray0[0] = long1;
      Long long2 = new Long(long0);
      assertEquals(0L, (long)long2);
      assertNotNull(long2);
      assertTrue(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      
      longArray0[1] = long2;
      Long long3 = new Long(2685L);
      assertEquals(2685L, (long)long3);
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      
      longArray0[2] = long3;
      Long[] longArray1 = arrayList0.toArray(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray0.length);
      assertFalse(arrayList0.contains(3777.0F));
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) vector0, true);
      assertNull(range0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      boolean boolean0 = arrayList0.add(float0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(3777.0F));
      assertEquals((float)float0, (float)float1, 0.01F);
      
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      assertNotNull(arrayList1);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertFalse(arrayList1.contains(0L));
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(Double.NaN, number1);
      assertNotNull(number1);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      double[] doubleArray0 = new double[1];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      XYSeries xYSeries0 = new XYSeries(0.0, true);
      assertNotNull(xYSeries0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, (-742));
      assertNotNull(xYBarDataset0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals((-742.0), xYBarDataset0.getBarWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0);
      assertNull(range0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals((-742.0), xYBarDataset0.getBarWidth(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal((PieDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(1320);
      assertNotNull(serialDate0);
      assertEquals(1903, serialDate0.getYYYY());
      assertEquals(12, serialDate0.getDayOfMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(8, serialDate0.getMonth());
      assertEquals(4, serialDate0.getDayOfWeek());
      assertEquals(1320, serialDate0.toSerial());
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Stack<TimeSeriesCollection> stack0 = new Stack<TimeSeriesCollection>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      assertNotNull(arrayList1);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertFalse(arrayList1.contains(1320));
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      double double0 = defaultTableXYDataset0.getDomainLowerBound(false);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, 0.0);
      assertNotNull(range0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      UnaryOperator<Float> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Function<Object, Float> function0 = (Function<Object, Float>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Float, Float> function1 = unaryOperator0.compose((Function<? super Float, ? extends Float>) function0);
      assertNotNull(function1);
      
      Function<TimeSeriesCollection, TimeSeriesCollection> function2 = Function.identity();
      assertNotNull(function2);
      
      Function<DefaultBoxAndWhiskerCategoryDataset, DefaultBoxAndWhiskerCategoryDataset> function3 = Function.identity();
      assertNotNull(function3);
      
      arrayList0.replaceAll(unaryOperator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Byte byte0 = new Byte((byte)3);
      assertEquals((byte)3, (byte)byte0);
      assertNotNull(byte0);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains((byte)3));
      
      boolean boolean0 = vector0.add(byte0);
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals("[3]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertTrue(vector0.contains((byte)3));
      
      boolean boolean1 = vector0.add(byte0);
      assertTrue(boolean1);
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertEquals("[3, 3]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertTrue(vector0.contains((byte)3));
      assertTrue(boolean1 == boolean0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(byte0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)3;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {3.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      XYSeries xYSeries0 = new XYSeries(3.0, false);
      assertNotNull(xYSeries0);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultBoxAndWhiskerXYDataset0, (-1270.62));
      assertNotNull(xYBarDataset0);
      assertEquals((-1270.62), xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertNull(range0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 23;
      Byte byte0 = new Byte((byte)3);
      assertEquals((byte)3, (byte)byte0);
      assertNotNull(byte0);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(byte0));
      
      boolean boolean0 = vector0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals("[3]", vector0.toString());
      assertTrue(vector0.contains(byte0));
      
      boolean boolean1 = vector0.add(byte0);
      assertTrue(boolean1);
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[3, 3]", vector0.toString());
      assertTrue(vector0.contains(byte0));
      assertTrue(boolean1 == boolean0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(0.0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) vector0, true);
      assertNull(range0);
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[3, 3]", vector0.toString());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertTrue(vector0.contains(byte0));
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertNull(number0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) vector0, true);
      assertNull(range1);
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[3, 3]", vector0.toString());
      assertTrue(vector0.contains(byte0));
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range2 = timeTableXYDataset0.getDomainBounds(true);
      assertNull(range2);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Number number1 = DatasetUtilities.findMaximumStackedRangeValue(defaultCategoryDataset0);
      assertNull(number1);
      
      Number number2 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals(Double.NaN, number2);
      assertNotNull(number2);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      int int0 = timeTableXYDataset0.indexOf((Comparable) null);
      assertEquals((-1), int0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeTableXYDataset0);
      assertTrue(boolean0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Minute minute0 = new Minute();
      assertNotNull(minute0);
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Byte byte0 = new Byte((byte) (-73));
      assertEquals((byte) (-73), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-73));
      assertEquals((byte) (-73), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      boolean boolean1 = vector0.add(byte1);
      assertTrue(boolean1);
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[-73]", vector0.toString());
      assertTrue(vector0.contains(byte0));
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(boolean1 == boolean0);
      
      Vector vector1 = (Vector)vector0.clone();
      assertNotNull(vector1);
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[-73]", vector0.toString());
      assertEquals("[-73]", vector1.toString());
      assertEquals(1, vector1.size());
      assertFalse(vector1.isEmpty());
      assertEquals(1, vector1.capacity());
      assertTrue(vector0.contains(byte0));
      
      Stream<Byte> stream0 = vector0.stream();
      assertNotNull(stream0);
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[-73]", vector0.toString());
      assertTrue(vector0.contains(byte0));
      
      boolean boolean2 = vector0.add(byte1);
      assertTrue(boolean2);
      assertEquals(2, vector0.size());
      assertEquals("[-73, -73]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.contains(byte0));
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Range range0 = timeTableXYDataset0.getDomainBounds(true);
      assertNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.validateObject();
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) vector0, true);
      assertNull(range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(2, vector0.size());
      assertEquals("[-73, -73]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.contains(byte0));
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, false);
      assertNotNull(range2);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      Float float0 = new Float((-669.6372F));
      assertEquals((-669.6372F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains((-669.6372F)));
      
      Float float1 = new Float(0.0F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      boolean boolean0 = arrayList0.add(float1);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.contains((-669.6372F)));
      assertTrue(arrayList0.contains(0.0F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float(355.8);
      assertEquals(355.8F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      Float float3 = new Float(3777.0F);
      assertEquals(3777.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      
      boolean boolean1 = arrayList0.add(float2);
      assertTrue(boolean1);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(arrayList0.contains((-669.6372F)));
      assertTrue(arrayList0.contains(float2));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float3, 0.01F);
      assertTrue(boolean1 == boolean0);
      
      Stack<DefaultStatisticalCategoryDataset> stack0 = new Stack<DefaultStatisticalCategoryDataset>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      stack0.clear();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      TreeSet<DefaultHighLowDataset> treeSet0 = new TreeSet<DefaultHighLowDataset>();
      assertNotNull(treeSet0);
      
      Vector<MinguoEra> vector1 = new Vector<MinguoEra>();
      assertNotNull(vector1);
      assertEquals(10, vector1.capacity());
      assertTrue(vector1.isEmpty());
      assertEquals("[]", vector1.toString());
      assertEquals(0, vector1.size());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) vector1, true);
      assertNull(range0);
      assertEquals(10, vector1.capacity());
      assertTrue(vector1.isEmpty());
      assertEquals("[]", vector1.toString());
      assertEquals(0, vector1.size());
      
      MockDate mockDate0 = new MockDate(3, (-911), 3, 346, 1, (-2774));
      assertNotNull(mockDate0);
      
      boolean boolean2 = arrayList0.containsAll(stack0);
      assertTrue(boolean2);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(arrayList0.contains((-669.6372F)));
      assertTrue(arrayList0.contains(float2));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Float float4 = new Float(Double.NEGATIVE_INFINITY);
      assertEquals(Float.NEGATIVE_INFINITY, (float)float4, 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      
      boolean boolean3 = arrayList0.add(float4);
      assertTrue(boolean3);
      assertEquals(3, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(arrayList0.contains((-669.6372F)));
      assertTrue(arrayList0.contains(float2));
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      assertNotNull(arrayList1);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertFalse(arrayList1.contains((-669.6372F)));
      
      boolean boolean4 = arrayList1.add((Object) null);
      assertTrue(boolean4);
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.contains((-669.6372F)));
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
      assertNull(range1);
      assertEquals(3, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(arrayList0.contains((-669.6372F)));
      assertTrue(arrayList0.contains(float2));
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        yIntervalSeriesCollection0.getItemCount((-182));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.YIntervalSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      UnaryOperator<Float> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Function<TimeSeriesCollection, TimeSeriesCollection> function0 = Function.identity();
      assertNotNull(function0);
      
      Function<DefaultBoxAndWhiskerCategoryDataset, DefaultBoxAndWhiskerCategoryDataset> function1 = Function.identity();
      assertNotNull(function1);
      
      arrayList0.replaceAll(unaryOperator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ArrayDeque<DefaultTableXYDataset> arrayDeque0 = new ArrayDeque<DefaultTableXYDataset>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Float float0 = new Float((-845.2126475));
      assertEquals((-845.21265F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = arrayList0.add(float0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(float0));
      
      boolean boolean1 = arrayList0.containsAll(arrayDeque0);
      assertTrue(boolean1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(arrayList0.contains(float0));
      assertTrue(boolean1 == boolean0);
      
      Byte byte0 = new Byte((byte)3);
      assertEquals((byte)3, (byte)byte0);
      assertNotNull(byte0);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(byte0));
      
      boolean boolean2 = vector0.add(byte0);
      assertTrue(boolean2);
      assertFalse(vector0.isEmpty());
      assertEquals("[3]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.contains(byte0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = vector0.add(byte0);
      assertTrue(boolean3);
      assertFalse(vector0.isEmpty());
      assertEquals("[3, 3]", vector0.toString());
      assertEquals(2, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.contains(byte0));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(second0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) vector0, true);
      assertNull(range0);
      assertFalse(vector0.isEmpty());
      assertEquals("[3, 3]", vector0.toString());
      assertEquals(2, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(vector0.contains(byte0));
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, true);
      assertNull(range1);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 2, (-2567));
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(2, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-2567), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) arrayList0, true);
      assertNull(range2);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(arrayList0.contains(float0));
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Number[][] numberArray0 = new Number[0][0];
      Number[][] numberArray1 = new Number[0][0];
      assertFalse(numberArray1.equals((Object)numberArray0));
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray1);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, numberArray0.length);
      assertEquals(0, numberArray1.length);
      assertFalse(numberArray0.equals((Object)numberArray1));
      assertFalse(numberArray1.equals((Object)numberArray0));
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Float float0 = new Float((-365.776695));
      assertEquals((-365.7767F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(439.8367F);
      assertEquals(439.8367F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      boolean boolean0 = arrayList0.add(float1);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(float1));
      assertFalse(arrayList0.contains(float0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float(0.0F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      ArrayList<Float> arrayList1 = new ArrayList<Float>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertFalse(arrayList1.contains(float0));
      assertFalse(arrayList1.equals((Object)arrayList0));
      
      boolean boolean1 = arrayList0.add(float2);
      assertTrue(boolean1);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(float1));
      assertFalse(arrayList0.contains(float0));
      assertFalse(arrayList0.equals((Object)arrayList1));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertNotSame(arrayList0, arrayList1);
      
      Float float3 = new Float((-3912.0));
      assertEquals((-3912.0F), (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      
      boolean boolean2 = arrayList1.add(float3);
      assertTrue(boolean2);
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertFalse(arrayList1.contains(float0));
      assertTrue(arrayList1.contains(float3));
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(arrayList1, arrayList0);
      
      Float float4 = new Float(0.0F);
      assertEquals(0.0F, (float)float4, 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      
      Float float5 = new Float(1.0);
      assertEquals(1.0F, (float)float5, 0.01F);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      
      boolean boolean3 = arrayList1.add(float5);
      assertTrue(boolean3);
      assertEquals(2, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertFalse(arrayList1.contains(float0));
      assertTrue(arrayList1.contains(float5));
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertNotSame(arrayList1, arrayList0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (-365.776695);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) 439.8367F;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(4, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {1.0, 0.0, (-365.776695), 1.0, 439.8367004394531}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      XYSeries xYSeries0 = new XYSeries(float1, true);
      assertNotNull(xYSeries0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals((float)float1, (float)float3, 0.01F);
      assertNotEquals((float)float1, (float)float4, 0.01F);
      assertNotEquals((float)float1, (float)float5, 0.01F);
      
      // Undeclared exception!
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, Double.NaN, 1315, 1315, float3);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      int int0 = timeTableXYDataset0.indexOf((Comparable) null);
      assertEquals((-1), int0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeTableXYDataset0);
      assertTrue(boolean0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Minute minute0 = new Minute();
      assertNotNull(minute0);
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      Byte byte0 = new Byte((byte) (-73));
      assertEquals((byte) (-73), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-73));
      assertEquals((byte) (-73), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      boolean boolean1 = vector0.add(byte1);
      assertTrue(boolean1);
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[-73]", vector0.toString());
      assertTrue(vector0.contains(byte1));
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(boolean1 == boolean0);
      
      Vector vector1 = (Vector)vector0.clone();
      assertNotNull(vector1);
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[-73]", vector0.toString());
      assertEquals(1, vector1.capacity());
      assertEquals(1, vector1.size());
      assertEquals("[-73]", vector1.toString());
      assertFalse(vector1.isEmpty());
      assertTrue(vector0.contains(byte1));
      
      boolean boolean2 = vector0.add(byte1);
      assertTrue(boolean2);
      assertEquals("[-73, -73]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertTrue(vector0.contains(byte1));
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Range range0 = timeTableXYDataset0.getDomainBounds(true);
      assertNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.validateObject();
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) vector0, true);
      assertNull(range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("[-73, -73]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertTrue(vector0.contains(byte1));
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      int int0 = timeTableXYDataset0.indexOf((Comparable) null);
      assertEquals((-1), int0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeTableXYDataset0);
      assertTrue(boolean0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Minute minute0 = new Minute();
      assertNotNull(minute0);
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      Byte byte0 = new Byte((byte) (-104));
      assertEquals((byte) (-104), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean1 = vector0.add(byte0);
      assertTrue(boolean1);
      assertEquals(1, vector0.size());
      assertEquals("[-104]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.contains(byte0));
      assertTrue(boolean1 == boolean0);
      
      Byte byte1 = new Byte((byte) (-73));
      assertEquals((byte) (-73), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-73));
      assertEquals((byte) (-73), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      boolean boolean2 = vector0.add(byte2);
      assertTrue(boolean2);
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertEquals("[-104, -73]", vector0.toString());
      assertTrue(vector0.contains((byte) (-73)));
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Byte byte3 = new Byte((byte) (-73));
      assertEquals((byte) (-73), (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      
      Vector vector1 = (Vector)vector0.clone();
      assertNotNull(vector1);
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertEquals("[-104, -73]", vector0.toString());
      assertEquals(2, vector1.capacity());
      assertEquals("[-104, -73]", vector1.toString());
      assertEquals(2, vector1.size());
      assertFalse(vector1.isEmpty());
      assertTrue(vector0.contains((byte) (-73)));
      
      boolean boolean3 = vector0.add(byte3);
      assertTrue(boolean3);
      assertEquals("[-104, -73, -73]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(3, vector0.size());
      assertTrue(vector0.contains((byte) (-73)));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      Range range0 = timeTableXYDataset0.getDomainBounds(true);
      assertNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number0);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(timeTableXYDataset0);
      assertNull(range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-351.583);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'xRange' argument", "Null 'xRange' argument", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = arrayList0.add(float0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(0.0F));
      
      Float float1 = new Float(0.0F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      boolean boolean1 = arrayList0.add(float1);
      assertTrue(boolean1);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(0.0F));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertTrue(boolean1 == boolean0);
      
      Float float2 = new Float(0.0F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      
      Float float3 = new Float((double) 0.0F);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      
      boolean boolean2 = arrayList0.add(float3);
      assertTrue(boolean2);
      assertEquals(3, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(0.0F));
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertNotNull(polynomialFunction2D0);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {(-351.583), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray1.length);
      
      XYSeries xYSeries0 = new XYSeries(float3, true);
      assertNotNull(xYSeries0);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertNotNull(doubleArray2);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {(-351.583), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-351.583), 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      
      XYSeries xYSeries1 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 0.5, 2886.36044, 13, float0);
      assertNotNull(xYSeries1);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertEquals(13, xYSeries1.getItemCount());
      assertTrue(xYSeries1.getAutoSort());
      assertNull(xYSeries1.getDescription());
      assertEquals(2886.36044, xYSeries1.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals((-351.583), xYSeries1.getMinY(), 0.01);
      assertEquals(0.5, xYSeries1.getMinX(), 0.01);
      assertTrue(xYSeries1.getNotify());
      assertEquals((-351.583), xYSeries1.getMaxY(), 0.01);
      assertArrayEquals(new double[] {(-351.583), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals((float)float0, (float)float3, 0.01F);
      assertEquals((float)float0, (float)float2, 0.01F);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(xYSeries1, xYSeries0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      
      XYBarDataset xYBarDataset0 = null;
      try {
        xYBarDataset0 = new XYBarDataset((XYDataset) null, 502.084174158);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYBarDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ArrayList<Float> arrayList1 = new ArrayList<Float>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      Float float0 = new Float((double) 4701.044F);
      assertEquals(4701.044F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      ArrayList<Float> arrayList2 = new ArrayList<Float>();
      assertNotNull(arrayList2);
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertFalse(arrayList2.contains(float0));
      assertTrue(arrayList2.equals((Object)arrayList0));
      assertTrue(arrayList2.equals((Object)arrayList1));
      
      Float float1 = new Float((double) 4701.044F);
      assertEquals(4701.044F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      boolean boolean1 = arrayList2.add(float1);
      assertTrue(boolean1);
      assertFalse(arrayList2.isEmpty());
      assertEquals(1, arrayList2.size());
      assertTrue(arrayList2.contains(4701.044F));
      assertFalse(arrayList2.equals((Object)arrayList0));
      assertFalse(arrayList2.equals((Object)arrayList1));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertNotSame(arrayList2, arrayList0);
      assertNotSame(arrayList2, arrayList1);
      
      Float float2 = new Float(4701.044F);
      assertEquals(4701.044F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      KeyToGroupMap keyToGroupMap1 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap1);
      assertEquals(1, keyToGroupMap1.getGroupCount());
      assertTrue(keyToGroupMap1.equals((Object)keyToGroupMap0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, keyToGroupMap1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1004;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 23;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 23;
      Byte byte0 = new Byte((byte)30);
      assertEquals((byte)30, (byte)byte0);
      assertNotNull(byte0);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains((byte)30));
      
      Byte byte1 = new Byte((byte)99);
      assertEquals((byte)99, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      boolean boolean0 = vector0.add(byte1);
      assertTrue(boolean0);
      assertEquals(1, vector0.size());
      assertEquals("[99]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertFalse(vector0.contains(byte0));
      assertTrue(vector0.contains((byte)99));
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)99);
      assertEquals((byte)99, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      boolean boolean1 = vector0.add(byte2);
      assertTrue(boolean1);
      assertEquals(2, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[99, 99]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertFalse(vector0.contains(byte0));
      assertTrue(vector0.contains(byte2));
      assertTrue(boolean1 == boolean0);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(23.0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) vector0, true);
      assertNull(range0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[99, 99]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertFalse(vector0.contains(byte0));
      assertTrue(vector0.contains(byte2));
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, true);
      assertNull(range1);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 23, 0);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(23, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      double[][] doubleArray1 = new double[4][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) dateArray0, (Comparable[]) dateArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'rowKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      int int0 = timeTableXYDataset0.indexOf((Comparable) null);
      assertEquals((-1), int0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeTableXYDataset0);
      assertTrue(boolean0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Minute minute0 = new Minute();
      assertNotNull(minute0);
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      Byte byte0 = new Byte((byte) (-73));
      assertEquals((byte) (-73), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-73));
      assertEquals((byte) (-73), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      boolean boolean1 = vector0.add(byte1);
      assertTrue(boolean1);
      assertFalse(vector0.isEmpty());
      assertEquals("[-73]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertTrue(vector0.contains(byte1));
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(boolean1 == boolean0);
      
      Byte byte2 = new Byte((byte) (-73));
      assertEquals((byte) (-73), (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      Vector vector1 = (Vector)vector0.clone();
      assertNotNull(vector1);
      assertFalse(vector0.isEmpty());
      assertEquals("[-73]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals("[-73]", vector1.toString());
      assertEquals(1, vector1.capacity());
      assertEquals(1, vector1.size());
      assertFalse(vector1.isEmpty());
      assertTrue(vector0.contains((byte) (-73)));
      
      boolean boolean2 = vector0.add(byte2);
      assertTrue(boolean2);
      assertFalse(vector0.isEmpty());
      assertEquals("[-73, -73]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertTrue(vector0.contains((byte) (-73)));
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Range range0 = timeTableXYDataset0.getDomainBounds(true);
      assertNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ArrayList<Float> arrayList1 = new ArrayList<Float>();
      assertNotNull(arrayList1);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      Float float0 = new Float((double) 4701.044F);
      assertEquals(4701.044F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      ArrayList<Float> arrayList2 = new ArrayList<Float>();
      assertNotNull(arrayList2);
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertFalse(arrayList2.contains(4701.044F));
      assertTrue(arrayList2.equals((Object)arrayList0));
      assertTrue(arrayList2.equals((Object)arrayList1));
      
      Float float1 = new Float((double) 4701.044F);
      assertEquals(4701.044F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      boolean boolean1 = arrayList2.add(float1);
      assertTrue(boolean1);
      assertFalse(arrayList2.isEmpty());
      assertEquals(1, arrayList2.size());
      assertTrue(arrayList2.contains(4701.044F));
      assertFalse(arrayList2.equals((Object)arrayList0));
      assertFalse(arrayList2.equals((Object)arrayList1));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertNotSame(arrayList2, arrayList0);
      assertNotSame(arrayList2, arrayList1);
      
      Float float2 = new Float(4701.044F);
      assertEquals(4701.044F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      
      ArrayList<Float> arrayList3 = new ArrayList<Float>();
      assertNotNull(arrayList3);
      assertEquals(0, arrayList3.size());
      assertTrue(arrayList3.isEmpty());
      assertFalse(arrayList3.contains(4701.044F));
      assertFalse(arrayList3.equals((Object)arrayList2));
      assertTrue(arrayList3.equals((Object)arrayList0));
      assertTrue(arrayList3.equals((Object)arrayList1));
      
      boolean boolean2 = arrayList3.add(float2);
      assertTrue(boolean2);
      assertEquals(1, arrayList3.size());
      assertFalse(arrayList3.isEmpty());
      assertTrue(arrayList3.contains(4701.044F));
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertFalse(arrayList3.equals((Object)arrayList1));
      assertTrue(arrayList3.equals((Object)arrayList2));
      assertFalse(arrayList3.equals((Object)arrayList0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(arrayList3, arrayList2);
      assertNotSame(arrayList3, arrayList1);
      assertNotSame(arrayList3, arrayList0);
      
      boolean boolean3 = arrayList3.add(float1);
      assertTrue(boolean3);
      assertEquals(2, arrayList3.size());
      assertFalse(arrayList3.isEmpty());
      assertTrue(arrayList3.contains(4701.044F));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((float)float1, (float)float2, 0.01F);
      assertFalse(arrayList3.equals((Object)arrayList2));
      assertFalse(arrayList3.equals((Object)arrayList1));
      assertFalse(arrayList3.equals((Object)arrayList0));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertNotSame(arrayList3, arrayList2);
      assertNotSame(arrayList3, arrayList1);
      assertNotSame(arrayList3, arrayList0);
      
      Float float3 = new Float(4701.044F);
      assertEquals(4701.044F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      
      boolean boolean4 = arrayList3.add(float3);
      assertTrue(boolean4);
      assertEquals(3, arrayList3.size());
      assertFalse(arrayList3.isEmpty());
      assertTrue(arrayList3.contains(4701.044F));
      assertFalse(arrayList3.equals((Object)arrayList2));
      assertFalse(arrayList3.equals((Object)arrayList1));
      assertFalse(arrayList3.equals((Object)arrayList0));
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertNotSame(arrayList3, arrayList2);
      assertNotSame(arrayList3, arrayList1);
      assertNotSame(arrayList3, arrayList0);
      
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      XYSeries xYSeries0 = new XYSeries(float3, false);
      assertNotNull(xYSeries0);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      
      XYSeries xYSeries1 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, Double.NaN, (-1825.0434), 13, float0);
      assertNotNull(xYSeries1);
      assertTrue(xYSeries1.getNotify());
      assertEquals(0.0, xYSeries1.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertEquals(13, xYSeries1.getItemCount());
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertTrue(xYSeries1.getAutoSort());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertNull(xYSeries1.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertEquals(0.0, xYSeries1.getMaxY(), 0.01);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertEquals((float)float0, (float)float3, 0.01F);
      assertEquals((float)float0, (float)float2, 0.01F);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertNotSame(xYSeries1, xYSeries0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries1);
      assertNotNull(xYSeriesCollection0);
      assertTrue(xYSeries1.getNotify());
      assertEquals(0.0, xYSeries1.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertEquals(13, xYSeries1.getItemCount());
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertTrue(xYSeries1.getAutoSort());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertNull(xYSeries1.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertEquals(0.0, xYSeries1.getMaxY(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertEquals((float)float0, (float)float3, 0.01F);
      assertEquals((float)float0, (float)float2, 0.01F);
      assertEquals((float)float0, (float)float1, 0.01F);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, Double.NaN);
      assertNotNull(xYBarDataset0);
      assertTrue(xYSeries1.getNotify());
      assertEquals(0.0, xYSeries1.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertEquals(13, xYSeries1.getItemCount());
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertTrue(xYSeries1.getAutoSort());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertNull(xYSeries1.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertEquals(0.0, xYSeries1.getMaxY(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(Double.NaN, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertEquals((float)float0, (float)float3, 0.01F);
      assertEquals((float)float0, (float)float2, 0.01F);
      assertEquals((float)float0, (float)float1, 0.01F);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ArrayList<Float> arrayList1 = new ArrayList<Float>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      Float float0 = new Float((double) 4701.044F);
      assertEquals(4701.044F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) 4701.044F);
      assertEquals(4701.044F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float(4701.044F);
      assertEquals(4701.044F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      
      ArrayList<Float> arrayList2 = new ArrayList<Float>();
      assertNotNull(arrayList2);
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertFalse(arrayList2.contains(float2));
      assertTrue(arrayList2.equals((Object)arrayList1));
      assertTrue(arrayList2.equals((Object)arrayList0));
      
      boolean boolean1 = arrayList2.add(float1);
      assertTrue(boolean1);
      assertFalse(arrayList2.isEmpty());
      assertEquals(1, arrayList2.size());
      assertTrue(arrayList2.contains(float2));
      assertEquals((float)float1, (float)float2, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertFalse(arrayList2.equals((Object)arrayList0));
      assertFalse(arrayList2.equals((Object)arrayList1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(arrayList2, arrayList0);
      assertNotSame(arrayList2, arrayList1);
      
      Float float3 = new Float(4701.044F);
      assertEquals(4701.044F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      
      boolean boolean2 = arrayList1.add(float3);
      assertTrue(boolean2);
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertTrue(arrayList1.contains(float2));
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertTrue(arrayList1.equals((Object)arrayList2));
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(arrayList1, arrayList0);
      assertNotSame(arrayList1, arrayList2);
      
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, Double.NaN, 4701.044F, 13, float0);
      assertNotNull(xYSeries0);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(13, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((float)float0, (float)float3, 0.01F);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals((float)float0, (float)float2, 0.01F);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(13, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((float)float0, (float)float3, 0.01F);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals((float)float0, (float)float2, 0.01F);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range0);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(13, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((float)float0, (float)float3, 0.01F);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals((float)float0, (float)float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getColumnKeys();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, false);
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, false);
      assertNull(range1);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertNotNull(regularTimePeriod0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      
      // Undeclared exception!
      try { 
        Hour.parseHour((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Hour", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = (double) 1004;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 23;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 23;
      doubleArray0[5] = (double) 0;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray0[2] = (double) 0;
      doubleArray1[1] = (double) 1004;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 1004;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 1004;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(hour0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 1004.0, 0.0, 1004.0, 0.0, 1004.0}, doubleArray1, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(12, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Stack<IntervalXYDelegate> stack0 = new Stack<IntervalXYDelegate>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, stack0, false);
      assertNull(range0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertArrayEquals(new double[] {0.0, 1004.0, 0.0, 1004.0, 0.0, 1004.0}, doubleArray1, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(12, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range1);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1004.0, range1.getUpperBound(), 0.01);
      assertEquals(502.0, range1.getCentralValue(), 0.01);
      assertEquals(1004.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertArrayEquals(new double[] {0.0, 1004.0, 0.0, 1004.0, 0.0, 1004.0}, doubleArray1, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(12, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Range range2 = DatasetUtilities.iterateCategoryRangeBounds(jDBCCategoryDataset0, false);
      assertNull(range2);
      assertTrue(jDBCCategoryDataset0.getTranspose());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("}Vey@FOU?cMm$ZMQ}|");
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      simpleHistogramDataset0.fireSelectionEvent();
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains("}Vey@FOU?cMm$ZMQ}|"));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) simpleHistogramDataset0, true);
      assertNull(range0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Mon Jul 12 13:00:44 GMT 2990", mockDate0.toString());
      assertEquals(32204782844000L, hour0.getFirstMillisecond());
      assertEquals(32204782844000L, hour0.getLastMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1004;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 23;
      Byte byte0 = new Byte((byte)3);
      assertEquals((byte)3, (byte)byte0);
      assertNotNull(byte0);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(byte0));
      
      boolean boolean0 = vector0.add(byte0);
      assertTrue(boolean0);
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals("[3]", vector0.toString());
      assertTrue(vector0.contains(byte0));
      
      boolean boolean1 = vector0.add(byte0);
      assertTrue(boolean1);
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertEquals("[3, 3]", vector0.toString());
      assertTrue(vector0.contains(byte0));
      assertTrue(boolean1 == boolean0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(0.0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) vector0, true);
      assertNull(range0);
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertEquals("[3, 3]", vector0.toString());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertTrue(vector0.contains(byte0));
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, true);
      assertNull(range1);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-2567), 23);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals((-2567), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(23, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultBoxAndWhiskerXYDataset0);
      assertNull(number0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) vector0, true);
      assertNull(range2);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertEquals("[3, 3]", vector0.toString());
      assertTrue(vector0.contains(byte0));
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Number[][] numberArray0 = new Number[0][0];
      Number[][] numberArray1 = new Number[0][0];
      assertFalse(numberArray1.equals((Object)numberArray0));
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray1);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, numberArray0.length);
      assertEquals(0, numberArray1.length);
      assertFalse(numberArray0.equals((Object)numberArray1));
      assertFalse(numberArray1.equals((Object)numberArray0));
      
      SerialDate serialDate0 = SerialDate.createInstance(1315);
      assertNotNull(serialDate0);
      assertNull(serialDate0.getDescription());
      assertEquals(8, serialDate0.getMonth());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertEquals(7, serialDate0.getDayOfMonth());
      assertEquals(1903, serialDate0.getYYYY());
      assertEquals(1315, serialDate0.toSerial());
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Stack<TimeSeriesCollection> stack0 = new Stack<TimeSeriesCollection>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = (DefaultIntervalCategoryDataset)defaultIntervalCategoryDataset0.clone();
      assertNotNull(defaultIntervalCategoryDataset1);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(0, numberArray0.length);
      assertEquals(0, numberArray1.length);
      assertFalse(numberArray0.equals((Object)numberArray1));
      assertFalse(numberArray1.equals((Object)numberArray0));
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertNotSame(numberArray0, numberArray1);
      assertNotSame(numberArray1, numberArray0);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertNotSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      
      boolean boolean0 = arrayList0.containsAll(stack0);
      assertTrue(boolean0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertFalse(arrayList1.contains(1315));
      
      boolean boolean1 = arrayList0.add((Float) null);
      assertTrue(boolean1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = arrayList1.add((Object) defaultIntervalCategoryDataset0);
      assertTrue(boolean2);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertEquals(0, numberArray0.length);
      assertEquals(0, numberArray1.length);
      assertFalse(arrayList1.contains(1315));
      assertFalse(numberArray0.equals((Object)numberArray1));
      assertFalse(numberArray1.equals((Object)numberArray0));
      assertTrue(defaultIntervalCategoryDataset0.equals((Object)defaultIntervalCategoryDataset1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(numberArray0, numberArray1);
      assertNotSame(numberArray1, numberArray0);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) arrayList0, true);
      assertNull(range0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, numberArray0.length);
      assertEquals(0, numberArray1.length);
      assertFalse(numberArray0.equals((Object)numberArray1));
      assertFalse(numberArray1.equals((Object)numberArray0));
      assertTrue(defaultIntervalCategoryDataset0.equals((Object)defaultIntervalCategoryDataset1));
      assertNotSame(numberArray0, numberArray1);
      assertNotSame(numberArray1, numberArray0);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getColumnKeys();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      defaultCategoryDataset0.addValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(integer0);
      assertNotNull(xYIntervalSeries0);
      assertTrue(xYIntervalSeries0.getNotify());
      assertEquals(0, xYIntervalSeries0.getItemCount());
      assertNull(xYIntervalSeries0.getDescription());
      assertTrue(xYIntervalSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYIntervalSeries0.getMaximumItemCount());
      assertTrue(xYIntervalSeries0.getAutoSort());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      int int0 = defaultMultiValueCategoryDataset0.getColumnIndex(integer0);
      assertEquals((-1), int0);
      
      int int1 = defaultMultiValueCategoryDataset0.getColumnCount();
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) list0, true);
      assertNotNull(range2);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(bigInteger0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      TimeTableXYDataset timeTableXYDataset1 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset1);
      assertFalse(timeTableXYDataset1.getDomainIsPointsInTime());
      assertTrue(timeTableXYDataset1.equals((Object)timeTableXYDataset0));
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(simpleHistogramDataset0);
      assertNull(number0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Float float0 = new Float((double) 4701.044F);
      assertEquals(4701.044F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean1 = arrayList0.add(float0);
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(float0));
      assertTrue(boolean1 == boolean0);
      
      Float float1 = new Float(4701.044F);
      assertEquals(4701.044F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      boolean boolean2 = arrayList0.add(float1);
      assertTrue(boolean2);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(arrayList0.contains(float0));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 4701.044F;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {4701.0439453125}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      XYSeries xYSeries0 = new XYSeries(4701.0439453125, true);
      assertNotNull(xYSeries0);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, (-742));
      assertNotNull(xYBarDataset0);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals((-742.0), xYBarDataset0.getBarWidth(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(xYSeriesCollection0);
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) arrayList0, true);
      assertNull(range0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(arrayList0.contains(float0));
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      UnaryOperator<Float> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Function<TimeSeriesCollection, TimeSeriesCollection> function0 = Function.identity();
      assertNotNull(function0);
      
      Function<DefaultBoxAndWhiskerCategoryDataset, DefaultBoxAndWhiskerCategoryDataset> function1 = Function.identity();
      assertNotNull(function1);
      
      arrayList0.replaceAll(unaryOperator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ArrayDeque<DefaultTableXYDataset> arrayDeque0 = new ArrayDeque<DefaultTableXYDataset>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Float float0 = new Float((-845.2126475));
      assertEquals((-845.21265F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = arrayList0.add(float0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(float0));
      
      boolean boolean1 = arrayList0.containsAll(arrayDeque0);
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(arrayList0.contains(float0));
      assertTrue(boolean1 == boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertNull(range0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(float0));
      
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      assertNotNull(arrayList1);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertFalse(arrayList1.contains((-845.2126475)));
      
      boolean boolean2 = arrayList0.add((Float) null);
      assertTrue(boolean2);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(float0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      ArrayList<Object> arrayList2 = new ArrayList<Object>();
      assertNotNull(arrayList2);
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      assertFalse(arrayList2.contains((-845.2126475)));
      assertTrue(arrayList2.equals((Object)arrayList1));
      
      boolean boolean3 = arrayList2.add((Object) arrayList1);
      assertTrue(boolean3);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertFalse(arrayList2.isEmpty());
      assertEquals(1, arrayList2.size());
      assertFalse(arrayList1.contains((-845.2126475)));
      assertFalse(arrayList2.contains((-845.2126475)));
      assertFalse(arrayList1.equals((Object)arrayList2));
      assertFalse(arrayList2.equals((Object)arrayList1));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertNotSame(arrayList1, arrayList2);
      assertNotSame(arrayList2, arrayList1);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, 2512);
      assertNotNull(pieDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "k;66", 1092.862594, (-2278));
      assertNotNull(pieDataset1);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(pieDataset0, pieDataset1);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) float0, (KeyedValues) pieDataset1);
      assertNotNull(categoryDataset0);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertFalse(pieDataset0.equals((Object)pieDataset1));
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(pieDataset0, pieDataset1);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      assertFalse(defaultPieDataset0.equals((Object)pieDataset1));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertFalse(pieDataset1.equals((Object)defaultPieDataset0));
      assertFalse(categoryDataset0.equals((Object)defaultCategoryDataset0));
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertFalse(pieDataset0.equals((Object)pieDataset1));
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(pieDataset1, defaultPieDataset0);
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset0, defaultPieDataset0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList1, true);
      assertNull(range1);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertFalse(arrayList1.contains((-845.2126475)));
      assertFalse(arrayList1.equals((Object)arrayList2));
      assertNotSame(arrayList1, arrayList2);
      
      TimeSeries timeSeries0 = null;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(1468, (String) null, 2512, 16, 1468, 1468, 4418, 604, 604, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      Hour hour0 = new Hour(mockDate0);
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1004;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 23;
      Byte byte0 = new Byte((byte)3);
      Vector<Byte> vector0 = new Vector<Byte>();
      vector0.add(byte0);
      vector0.add(byte0);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1731.83142798, 1004.0);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-4531.0091939), 3794.0, 23, mockDate0);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(23, 1242);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 23, Size: 23
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      UnaryOperator<Float> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      arrayList0.replaceAll(unaryOperator0);
      ArrayDeque<DefaultTableXYDataset> arrayDeque0 = new ArrayDeque<DefaultTableXYDataset>();
      double double0 = (-845.2126475);
      Float float0 = new Float((-845.2126475));
      arrayList0.add(float0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2435.369749669907;
      doubleArray0[1] = (-845.2126475);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      int int0 = (-742);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 0.0, 0.5, 624, float0);
      // Undeclared exception!
      try { 
        xYSeries0.update((-845.2126475), float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No observation for x = -845.2126475
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      Hour hour0 = new Hour(mockDate0);
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1004;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 23;
      Byte byte0 = new Byte((byte)3);
      Vector<Byte> vector0 = new Vector<Byte>();
      vector0.add(byte0);
      vector0.add(byte0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(0.0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) vector0, true);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, true);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-2567), 23);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) vector0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      SerialDate.createInstance(1315);
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      Stack<TimeSeriesCollection> stack0 = new Stack<TimeSeriesCollection>();
      arrayList0.containsAll(stack0);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      DatasetUtilities.isEmptyOrNull((PieDataset) null);
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      Float float0 = new Float((double) 4701.044F);
      arrayList0.add(float0);
      Float float1 = new Float(4701.044F);
      arrayList0.add(float1);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 4701.044F;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      XYSeries xYSeries0 = new XYSeries(4701.0439453125, true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, (-742));
      DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("", (String) null, (Number[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-351.583);
      DatasetUtilities.createCategoryDataset("The number of row keys does not match the number of rows in the data array.", "The number of row keys does not match the number of rows in the data array.", doubleArray0);
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      defaultKeyedValues0.setValue((Comparable) (-351.583), (Number) (-351.583));
      DatasetUtilities.createCategoryDataset((Comparable) "The number of row keys does not match the number of rows in the data array.", (KeyedValues) defaultKeyedValues0);
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds((XYDataset) null, stack0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-351.583);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'xRange' argument", "Null 'xRange' argument", doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      KeyToGroupMap keyToGroupMap1 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap1);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.validateObject();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, true);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) yIntervalSeriesCollection0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Number[][] numberArray0 = new Number[0][0];
      Number[][] numberArray1 = new Number[0][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray1);
      SerialDate serialDate0 = SerialDate.createInstance(1315);
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      Stack<TimeSeriesCollection> stack0 = new Stack<TimeSeriesCollection>();
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'f' argument.", "Null 'f' argument.", numberArray0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) serialDate0);
      DatasetUtilities.createCategoryDataset((Comparable) serialDate0, (KeyedValues) pieDataset0);
      DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>();
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      boolean boolean0 = vector0.add(xIntervalSeriesCollection0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      SerialDate.createInstance(1315);
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      Stack<TimeSeriesCollection> stack0 = new Stack<TimeSeriesCollection>();
      arrayList0.containsAll(stack0);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1900;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 3;
      doubleArray0[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[7] = (double) (-1);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 1.0, 0, (-943), (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      String string0 = "";
      // Undeclared exception!
      try { 
        Month.parseMonth("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      String string0 = "s\\V";
      Number[][] numberArray0 = new Number[1][2];
      Number[] numberArray1 = new Number[9];
      numberArray0[0] = numberArray1;
      DatasetUtilities.createCategoryDataset("sV", (String) null, numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, (Comparable) "sV");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Number[][] numberArray0 = new Number[0][0];
      Number[][] numberArray1 = new Number[0][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray1);
      SerialDate serialDate0 = SerialDate.createInstance(1315);
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      Stack<TimeSeriesCollection> stack0 = new Stack<TimeSeriesCollection>();
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = (DefaultIntervalCategoryDataset)defaultIntervalCategoryDataset0.clone();
      arrayList0.containsAll(stack0);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset1, true);
      matrixSeriesCollection0.indexOf(serialDate0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) matrixSeriesCollection0, (List) arrayList0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Number[][] numberArray0 = new Number[0][0];
      Number[][] numberArray1 = new Number[0][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray1);
      SerialDate.createInstance(1315);
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      Stack<TimeSeriesCollection> stack0 = new Stack<TimeSeriesCollection>();
      defaultIntervalCategoryDataset0.clone();
      arrayList0.containsAll(stack0);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      arrayList0.add((Float) null);
      arrayList1.add((Object) defaultIntervalCategoryDataset0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-5038.606967));
      assertEquals((-5038.606967), range0.getUpperBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      UnaryOperator<Float> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      arrayList0.replaceAll(unaryOperator0);
      ArrayDeque<DefaultTableXYDataset> arrayDeque0 = new ArrayDeque<DefaultTableXYDataset>();
      Float float0 = new Float((-845.2126475));
      arrayList0.add(float0);
      arrayList0.containsAll(arrayDeque0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      arrayList0.add((Float) null);
      ArrayList<Object> arrayList2 = new ArrayList<Object>();
      arrayList2.add((Object) arrayList1);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, 2512);
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "k;66", 1092.862594, (-2278));
      DatasetUtilities.createCategoryDataset((Comparable) float0, (KeyedValues) pieDataset1);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, (-1524));
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      Number number0 = DatasetUtilities.findMinimumDomainValue(jDBCXYDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(11, 715);
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(simpleHistogramBin0);
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      Double double0 = (Double)DatasetUtilities.findMaximumDomainValue(simpleHistogramDataset0);
      assertEquals(715.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-2548.3405338877), Double.NaN, 11, double0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(defaultTableXYDataset0);
      simpleHistogramDataset0.removeChangeListener(xYDatasetTableModel0);
      Double double1 = (Double)DatasetUtilities.findMaximumRangeValue((XYDataset) simpleHistogramDataset0);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      Double double2 = (Double)DatasetUtilities.findMinimumDomainValue(simpleHistogramDataset0);
      assertEquals(11.0, (double)double2, 0.01);
      assertNotNull(double2);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NaN, 622.91374261, false, false);
      simpleHistogramBin0.clone();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(simpleHistogramBin0);
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      Number number0 = DatasetUtilities.findMinimumDomainValue(simpleHistogramDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, true);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      DatasetUtilities.findMinimumDomainValue(vectorSeriesCollection0);
      Number[][] numberArray0 = new Number[5][9];
      Number[] numberArray1 = new Number[6];
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      numberArray1[0] = (Number) integer0;
      numberArray1[1] = null;
      numberArray1[2] = null;
      numberArray1[3] = null;
      numberArray1[4] = null;
      numberArray1[5] = null;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[6];
      numberArray2[0] = (Number) integer0;
      Byte byte0 = new Byte((byte)10);
      numberArray2[1] = (Number) byte0;
      numberArray2[2] = (Number) integer0;
      numberArray2[3] = (Number) integer0;
      numberArray2[4] = null;
      numberArray2[5] = (Number) integer0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[7];
      numberArray3[0] = (Number) integer0;
      numberArray3[1] = (Number) byte0;
      numberArray3[2] = (Number) byte0;
      numberArray3[3] = (Number) integer0;
      numberArray3[4] = null;
      numberArray3[5] = (Number) integer0;
      numberArray3[6] = (Number) byte0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[7];
      numberArray4[0] = (Number) byte0;
      numberArray4[1] = (Number) integer0;
      numberArray4[2] = null;
      numberArray4[3] = (Number) integer0;
      numberArray4[4] = null;
      numberArray4[5] = (Number) integer0;
      numberArray4[6] = null;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[2];
      numberArray5[0] = (Number) integer0;
      numberArray5[1] = (Number) integer0;
      numberArray0[4] = numberArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertNotNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      double double0 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 32);
      assertEquals(0.0, double0, 0.01);
      
      SerialDate serialDate0 = SerialDate.createInstance(1135);
      defaultCategoryDataset0.addValue((Number) 0.0, (Comparable) serialDate0, (Comparable) serialDate0);
      serialDate0.getNearestDayOfWeek(1);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0);
      double[][] doubleArray0 = new double[0][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of row keys does not match the number of rows in the data array.", "The number of row keys does not match the number of rows in the data array.", doubleArray0);
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultTableXYDataset0);
      assertNull(number0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultTableXYDataset0);
      assertNull(number1);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) serialDate0, (double) 1);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(pieDataset0);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) serialDate0, (-1554.636263218889), 3);
      Number number2 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNull(number2);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, true);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("Null or zero length 'values' argument.");
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) simpleHistogramDataset0);
      assertNull(number0);
      
      Month month0 = new Month();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) jDBCCategoryDataset0, (Comparable) month0);
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) month0, 1039.464);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      PieDataset pieDataset0 = null;
      DatasetUtilities.isEmptyOrNull((PieDataset) null);
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      Float float0 = new Float((double) 4701.044F);
      arrayList0.add(float0);
      Float float1 = new Float(4701.044F);
      arrayList0.add(float1);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 4701.044F;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      int int0 = (-742);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 0.0, 3938.070395841776, (-742), 4701.0439453125);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultIntervalXYDataset0);
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      stack0.parallelStream();
      DatasetUtilities.findDomainBounds((XYDataset) defaultIntervalXYDataset0, (List) stack0, true);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      Byte byte0 = new Byte((byte)3);
      Vector<Byte> vector0 = new Vector<Byte>();
      vector0.add((Byte) null);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(0.0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) vector0, true);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultIntervalXYDataset0, true);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (byte)3, (byte)3);
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) slidingGanttCategoryDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Number[][] numberArray0 = new Number[0][0];
      Number[][] numberArray1 = new Number[0][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray1);
      SerialDate.createInstance(1315);
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      Stack<TimeSeriesCollection> stack0 = new Stack<TimeSeriesCollection>();
      defaultIntervalCategoryDataset0.clone();
      arrayList0.containsAll(stack0);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      arrayList0.add((Float) null);
      arrayList1.add((Object) defaultIntervalCategoryDataset0);
      DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      // Undeclared exception!
      try { 
        defaultTableXYDataset0.getItemCount((-1989));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.DefaultTableXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[6];
      stringArray0[3] = "The number of column keys does not match the number of columns in the data array.";
      stringArray0[1] = "4Ww>";
      stringArray0[2] = "4Ww>";
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (-2374.03161866);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Category", "eF?(<ByKR&QE9s", doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals((-2374.03161866), range0.getLowerBound(), 0.01);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      defaultCategoryDataset0.setValue(Double.POSITIVE_INFINITY, (Comparable) "4Ww>", (Comparable) (-2374.03161866));
      Range range1 = DatasetUtilities.findRangeBounds(categoryDataset0, true);
      assertEquals((-1187.51580933), range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-351.583);
      doubleArray1[1] = 2189.4184474;
      doubleArray1[2] = (-2374.03161866);
      doubleArray1[3] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (-2374.03161866);
      doubleArray2[1] = (-351.583);
      doubleArray2[2] = Double.POSITIVE_INFINITY;
      doubleArray2[3] = (-2374.03161866);
      doubleArray0[1] = doubleArray2;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      MockDate mockDate0 = new MockDate();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      ZoneInfo zoneInfo0 = (ZoneInfo)mockSimpleDateFormat0.getTimeZone();
      Day day0 = new Day(mockDate0, zoneInfo0);
      defaultCategoryDataset0.addValue((-351.583), (Comparable) day0, (Comparable) (-2374.03161866));
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap0);
      defaultCategoryDataset0.setValue(1435.30633, (Comparable) 2189.4184474, (Comparable) Double.POSITIVE_INFINITY);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((-2374.03161866), (String) null, "Null 'rowKeys' argument.");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      Double double0 = (Double)DatasetUtilities.findMinimumDomainValue(timePeriodValuesCollection0);
      assertEquals(Double.NaN, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-351.583);
      String string0 = "The number of row keys does not match the number of rows in the data array.";
      DatasetUtilities.createCategoryDataset("The number of row keys does not match the number of rows in the data array.", "The number of row keys does not match the number of rows in the data array.", doubleArray0);
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      int int0 = 390;
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) "The number of row keys does not match the number of rows in the data array.", 2057.0, 390);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "The number of column keys does not match the number of columns in the data array.";
      stringArray0[1] = "4Ww>";
      stringArray0[2] = "n";
      MockDate.UTC(638, 1859, 1859, 2387, 308, (-2494));
      OffsetDateTime offsetDateTime0 = MockOffsetDateTime.now();
      Instant instant0 = MockInstant.from(offsetDateTime0);
      Date date0 = Date.from(instant0);
      Week week0 = new Week(date0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, 2387);
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) instant0, (double) 22982196386000L, 2451);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, 1);
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(351, Double.NaN);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(28.87162207, 28.87162207);
      DatasetUtilities.sampleFunction2D(powerFunction2D0, 1771.89, 2451, 638, "n");
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (double) 2451);
      assertEquals(2451.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, true);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Number[][] numberArray0 = new Number[0][0];
      SerialDate serialDate0 = SerialDate.createInstance(1315);
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      Float float0 = new Float((double) 2958465);
      arrayList0.add(float0);
      Stack<TimeSeriesCollection> stack0 = new Stack<TimeSeriesCollection>();
      arrayList0.containsAll(stack0);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      XYSeries xYSeries0 = new XYSeries(serialDate0, false);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, 1);
      DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertNotNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-351.583);
      DatasetUtilities.createCategoryDataset("The number of row keys does not match the number of rows in the data array.", "The number of row keys does not match the number of rows in the data array.", doubleArray0);
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      defaultKeyedValues0.setValue((Comparable) (-351.583), (Number) (-351.583));
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "The number of row keys does not match the number of rows in the data array.", (KeyedValues) defaultKeyedValues0);
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals((-351.583), number0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-351.583);
      doubleArray1[1] = 2189.4184474;
      doubleArray1[2] = (-2374.03161866);
      doubleArray1[3] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (-2374.03161866);
      doubleArray2[1] = (-351.583);
      doubleArray2[2] = Double.POSITIVE_INFINITY;
      doubleArray2[3] = (-2374.03161866);
      doubleArray0[1] = doubleArray2;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals((-2725.61461866), range0.getLowerBound(), 0.01);
      
      defaultCategoryDataset0.setValue(1435.30633, (Comparable) 2189.4184474, (Comparable) Double.POSITIVE_INFINITY);
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      assertEquals((-2374.03161866), range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      DatasetUtilities.findMaximumDomainValue(xYSeriesCollection0);
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset("yntU&|}7d!C4&slaI", "yntU&|}7d!C4&slaI", "yntU&|}7d!C4&slaI", "");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      LinkedList<DefaultStatisticalCategoryDataset> linkedList0 = new LinkedList<DefaultStatisticalCategoryDataset>();
      DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, false);
      Byte byte0 = new Byte((byte)3);
      Vector<Byte> vector0 = new Vector<Byte>();
      Vector<Byte> vector1 = new Vector<Byte>();
      vector1.add(byte0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultBoxAndWhiskerXYDataset0, (-1.0));
      DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) linkedList0, true);
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(mockDate0);
      simpleHistogramDataset0.clone();
      Float float0 = new Float(1.0);
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      arrayList0.add(float0);
      ArrayList<XYIntervalSeriesCollection> arrayList1 = new ArrayList<XYIntervalSeriesCollection>();
      arrayList0.containsAll(arrayList1);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      defaultStatisticalCategoryDataset0.add((Number) float0, (Number) integer0, (Comparable) mockDate0, (Comparable) integer0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(mockDate0);
      simpleHistogramDataset0.fireSelectionEvent();
      simpleHistogramDataset0.clone();
      Float float0 = new Float((-2804.244856847));
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      arrayList0.add(float0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      defaultStatisticalCategoryDataset0.add((Number) float0, (Number) integer0, (Comparable) float0, (Comparable) mockDate0);
      Float float1 = new Float((-3129.682F));
      defaultStatisticalCategoryDataset0.add((Number) float1, (Number) float1, (Comparable) float1, (Comparable) integer0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      SimpleHistogramDataset simpleHistogramDataset1 = new SimpleHistogramDataset(float0);
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertEquals(400.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      UnaryOperator<Float> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      arrayList0.replaceAll(unaryOperator0);
      ArrayDeque<DefaultTableXYDataset> arrayDeque0 = new ArrayDeque<DefaultTableXYDataset>();
      Float float0 = new Float((-845.2126475));
      arrayList0.add(float0);
      arrayList0.containsAll(arrayDeque0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      arrayList0.add((Float) null);
      ArrayList<Object> arrayList2 = new ArrayList<Object>();
      arrayList2.add((Object) arrayList1);
      Number[][] numberArray0 = new Number[1][4];
      Number[] numberArray1 = new Number[1];
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      numberArray1[0] = (Number) integer0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "k;66", numberArray0);
      Range range0 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) arrayList1, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1004, 1004, 1004, 1004, 1004, 1004);
      Hour hour0 = new Hour(mockDate0);
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1004;
      doubleArray0[2] = (double) 23;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 23;
      doubleArray0[5] = (double) 0;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 0;
      MockDate.UTC((-1081), (-1081), 44, 6, 222, (-1081));
      doubleArray1[1] = (double) 23;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 1004;
      doubleArray1[5] = (double) 1004;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(hour0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1);
      Stack<IntervalXYDelegate> stack0 = new Stack<IntervalXYDelegate>();
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotNull(range0);
      
      DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, stack0, true);
      DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range0, true);
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
      assertNotNull(number0);
      assertEquals(1004.0, number0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      DatasetUtilities.isEmptyOrNull((PieDataset) null);
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      Float float0 = new Float((double) 4701.044F);
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(float0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) simpleHistogramDataset0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYTaskDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Comparable<Float> comparable0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("The number of row keys does not match the number of rows in the data array.", "[QxgM{)a`q+Jc-0'cS", (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      UnaryOperator<Float> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      arrayList0.replaceAll(unaryOperator0);
      ArrayDeque<DefaultTableXYDataset> arrayDeque0 = new ArrayDeque<DefaultTableXYDataset>();
      arrayList0.containsAll(arrayDeque0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0, 0);
      MockDate.UTC(0, 1734, 358, 638, 351, (-2509));
      Week week0 = new Week(mockDate0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, 1);
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) week0, (double) 53, 0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, 2);
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1734, 2);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, 358, 1000.0487, 351, mockDate0);
      Range range0 = DatasetUtilities.findDomainBounds(xYDataset0, false);
      assertEquals(679.02435, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultIntervalXYDataset0);
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      stack0.parallelStream();
      DatasetUtilities.findDomainBounds((XYDataset) defaultIntervalXYDataset0, (List) stack0, true);
      Byte byte0 = new Byte((byte)3);
      Vector<Byte> vector0 = new Stack<Byte>();
      vector0.add((Byte) null);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      DatasetUtilities.findDomainBounds((XYDataset) defaultIntervalXYDataset0, (List) stack0, true);
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2065.20025496;
      doubleArray0[5] = (-845.2126475);
      Float float0 = new Float(2126.522F);
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      Float float1 = new Float((double) 2126.522F);
      arrayList0.add(float1);
      Float float2 = new Float(2065.20025496);
      Float float3 = new Float((-1.0F));
      arrayList0.add(float3);
      TreeSet<DefaultHighLowDataset> treeSet0 = new TreeSet<DefaultHighLowDataset>();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, false);
      MockDate mockDate0 = new MockDate(1, 2, 5, 5, 320, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2065.20025496;
      doubleArray0[5] = (-845.2126475);
      doubleArray0[6] = (-3122.1635757);
      doubleArray0[7] = 0.0;
      TableXYDataset tableXYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      DatasetUtilities.findMinimumRangeValue((XYDataset) xIntervalSeriesCollection0);
      Vector<DefaultStatisticalCategoryDataset> vector0 = new Vector<DefaultStatisticalCategoryDataset>();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Vector<DefaultIntervalXYDataset> vector1 = new Vector<DefaultIntervalXYDataset>();
      defaultBoxAndWhiskerCategoryDataset0.getGroup();
      Float float0 = new Float(3777.0F);
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      arrayList0.add(float0);
      Float float1 = new Float((double) 3777.0F);
      Float float2 = new Float(3777.0F);
      arrayList0.add(float2);
      vector0.clear();
      TreeSet<DefaultHighLowDataset> treeSet0 = new TreeSet<DefaultHighLowDataset>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) vector0, true);
      MockDate mockDate0 = new MockDate(3008, 3, 346, 1, 3, 3008);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, true);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) vector1, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      defaultBoxAndWhiskerXYDataset0.clone();
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, true);
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      xIntervalSeriesCollection0.validateObject();
      xIntervalSeriesCollection0.clone();
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-1567.2), 0);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(powerFunction2D0, 0, 2569.6135588913203, 0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Number[][] numberArray0 = new Number[0][0];
      Number[][] numberArray1 = new Number[0][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray1);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 0, 0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingCategoryDataset0, 0);
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      Float float0 = new Float(4701.044F);
      arrayList0.add(float0);
      Float float1 = new Float(657.766);
      arrayList0.add(float1);
      TreeSet<DefaultHighLowDataset> treeSet0 = new TreeSet<DefaultHighLowDataset>();
      MockDate mockDate0 = new MockDate(1, 2, 0, 1, 0, 0);
      MockDate.UTC((-3810), 46, 7, 1, 2540, 1);
      Week week0 = new Week(mockDate0);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 53);
      ((DefaultPieDataset) pieDataset0).getItemCount();
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) week0, 0.0, (-2509));
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, 0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      stack0.parallelStream();
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      DatasetUtilities.findDomainBounds((XYDataset) defaultWindDataset0, (List) stack0, false);
      Byte byte0 = new Byte((byte)3);
      Vector<Byte> vector0 = new Vector<Byte>();
      vector0.add((Byte) null);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultBoxAndWhiskerXYDataset0, (-1.0));
      DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0, (List) stack0, false);
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYBarDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-351.583);
      Vector<Byte> vector0 = new Vector<Byte>();
      vector0.add((Byte) null);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) vector0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.AbstractSeriesDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      UnaryOperator<Float> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      arrayList0.replaceAll(unaryOperator0);
      ArrayDeque<DefaultTableXYDataset> arrayDeque0 = new ArrayDeque<DefaultTableXYDataset>();
      arrayList0.containsAll(arrayDeque0);
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) null, (List) arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Number[][] numberArray0 = new Number[0][0];
      Number[][] numberArray1 = new Number[0][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray1);
      SerialDate.createInstance(1315);
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      Stack<TimeSeriesCollection> stack0 = new Stack<TimeSeriesCollection>();
      defaultIntervalCategoryDataset0.clone();
      arrayList0.containsAll(stack0);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      arrayList0.add((Float) null);
      arrayList1.add((Object) defaultIntervalCategoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) arrayList1, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.category.DefaultIntervalCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      UnaryOperator<Float> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      arrayList0.replaceAll(unaryOperator0);
      ArrayDeque<DefaultTableXYDataset> arrayDeque0 = new ArrayDeque<DefaultTableXYDataset>();
      arrayList0.containsAll(arrayDeque0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0, 0);
      MockDate.UTC(0, 1734, 358, 638, 351, (-2509));
      Week week0 = new Week(mockDate0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, 1);
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) week0, (double) 53, 0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, 2);
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1734, 2);
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, 358, 1000.0487, 351, mockDate0);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Number[][] numberArray0 = new Number[0][0];
      Number[][] numberArray1 = new Number[0][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray1);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 0, 0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingCategoryDataset0, 0);
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      Float float0 = new Float(4701.044F);
      arrayList0.add(float0);
      Float float1 = new Float(657.766);
      arrayList0.add(float1);
      TreeSet<DefaultHighLowDataset> treeSet0 = new TreeSet<DefaultHighLowDataset>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingCategoryDataset0, (List) arrayList0, false);
      MockDate mockDate0 = new MockDate(1, 2, 0, 1, 0, 0);
      MockDate.UTC((-3810), 46, 7, 1, 2540, 1);
      Week week0 = new Week(mockDate0);
      PieDataset pieDataset1 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 53);
      ((DefaultPieDataset) pieDataset0).getItemCount();
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) week0, 0.0, (-2509));
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      PieDataset pieDataset2 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, 0);
      assertNotSame(pieDataset2, pieDataset1);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      UnaryOperator<Float> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      arrayList0.replaceAll(unaryOperator0);
      ArrayDeque<DefaultTableXYDataset> arrayDeque0 = new ArrayDeque<DefaultTableXYDataset>();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, (-1542), (-1796));
      slidingCategoryDataset0.getRowCount();
      slidingCategoryDataset0.validateObject();
      SerialDate serialDate0 = SerialDate.createInstance(1901);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingCategoryDataset0, (Comparable) serialDate0);
      DatasetUtilities.createCategoryDataset((Comparable) serialDate0, (KeyedValues) pieDataset0);
      ArrayList<Float> arrayList1 = new ArrayList<Float>();
      Stack<TimeSeriesCollection> stack0 = new Stack<TimeSeriesCollection>();
      ArrayList<Float> arrayList2 = new ArrayList<Float>();
      arrayList2.containsAll(stack0);
      ArrayList<Object> arrayList3 = new ArrayList<Object>();
      HashSet<Byte> hashSet0 = new HashSet<Byte>();
      ArrayList<Byte> arrayList4 = new ArrayList<Byte>(hashSet0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingCategoryDataset0, (List) arrayList4, true);
      MockDate mockDate0 = new MockDate(2, 0, (-1), 3, (-1500), 2);
      Week week0 = new Week(mockDate0);
      Year year0 = new Year((-382));
      RegularTimePeriod regularTimePeriod0 = year0.next();
      XYSeries xYSeries0 = new XYSeries(regularTimePeriod0, true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, (-957.0126914268754));
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      defaultBoxAndWhiskerXYDataset0.clone();
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      UnaryOperator<Float> unaryOperator0 = UnaryOperator.identity();
      arrayList0.replaceAll(unaryOperator0);
      ArrayDeque<DefaultTableXYDataset> arrayDeque0 = new ArrayDeque<DefaultTableXYDataset>();
      arrayList0.containsAll(arrayDeque0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) arrayList0, true);
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0, 2566);
      MockDate.UTC((-931), 428, 2566, 212, 212, 0);
      Week week0 = new Week(mockDate0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (-931));
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) null, (double) 428, (-2600));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultIntervalXYDataset0);
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      stack0.parallelStream();
      DatasetUtilities.findDomainBounds((XYDataset) defaultIntervalXYDataset0, (List) stack0, true);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 582.2763521279087;
      doubleArray0[2] = 0.0;
      Byte byte0 = new Byte((byte)3);
      Vector<Byte> vector0 = new Vector<Byte>();
      vector0.add((Byte) null);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(0.0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) vector0, true);
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultIntervalXYDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      Byte byte0 = new Byte((byte)97);
      Stack<Byte> stack1 = new Stack<Byte>();
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      Predicate<Byte> predicate0 = Predicate.isEqual((Object) defaultIntervalXYDataset0);
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<Byte> predicate2 = predicate0.and(predicate1);
      Predicate<Byte> predicate3 = predicate2.or(predicate0);
      Predicate<Byte> predicate4 = predicate3.negate();
      stack1.removeIf(predicate4);
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, (List) stack1, false);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultIntervalXYDataset0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      DatasetUtilities.findMinimumRangeValue((XYDataset) xIntervalSeriesCollection0);
      Vector<DefaultStatisticalCategoryDataset> vector0 = new Vector<DefaultStatisticalCategoryDataset>();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      List list0 = new Vector<DefaultIntervalXYDataset>();
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      datasetGroup0.clone();
      categoryTableXYDataset0.setGroup(datasetGroup0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xIntervalSeriesCollection0);
      DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      DatasetUtilities.findMinimumDomainValue(categoryTableXYDataset0);
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) xIntervalSeriesCollection0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      DatasetUtilities.findMinimumRangeValue((XYDataset) xIntervalSeriesCollection0);
      Vector<DefaultStatisticalCategoryDataset> vector0 = new Vector<DefaultStatisticalCategoryDataset>();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      Predicate<Byte> predicate0 = Predicate.isEqual((Object) categoryTableXYDataset0);
      Short short0 = new Short((short)2285);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) short0);
      Predicate<Byte> predicate2 = predicate0.and(predicate1);
      Predicate<Byte> predicate3 = predicate2.or(predicate1);
      Predicate.isEqual((Object) predicate3);
      Predicate<Byte> predicate4 = predicate3.or(predicate0);
      predicate4.negate();
      Stack<Byte> stack0 = new Stack<Byte>();
      stack0.removeIf(predicate3);
      DatasetUtilities.findDomainBounds((XYDataset) defaultIntervalXYDataset0, (List) stack0, false);
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Number[][] numberArray0 = new Number[0][0];
      Number[][] numberArray1 = new Number[0][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray1);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 0, 0);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingCategoryDataset0, 0);
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      Float float0 = new Float(4701.044F);
      arrayList0.add(float0);
      Float float1 = new Float((float) 0);
      arrayList0.add(float1);
      Float float2 = new Float(657.766);
      arrayList0.add(float2);
      TreeSet<DefaultHighLowDataset> treeSet0 = new TreeSet<DefaultHighLowDataset>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingCategoryDataset0, (List) arrayList0, false);
      MockDate mockDate0 = new MockDate(1, 2, 0, 1, 0, 0);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      DatasetUtilities.isEmptyOrNull((PieDataset) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "4Ww>";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "Oc*PdrWL`B<@";
      stringArray0[5] = "Null or zero length 'values' argument.";
      Object[][][] objectArray0 = new Object[3][0][7];
      Object[][] objectArray1 = new Object[4][9];
      Object[] objectArray2 = new Object[0];
      objectArray1[0] = objectArray2;
      objectArray1[1] = (Object[]) stringArray0;
      objectArray1[2] = (Object[]) stringArray0;
      Object[] objectArray3 = new Object[4];
      objectArray3[0] = (Object) "Oc*PdrWL`B<@";
      objectArray3[1] = (Object) "4Ww>";
      objectArray3[2] = (Object) "";
      objectArray3[3] = (Object) "Oc*PdrWL`B<@";
      objectArray1[3] = objectArray3;
      objectArray0[0] = objectArray1;
      Object[][] objectArray4 = new Object[7][8];
      objectArray4[0] = objectArray3;
      objectArray4[1] = (Object[]) stringArray0;
      objectArray4[2] = (Object[]) stringArray0;
      objectArray4[3] = (Object[]) stringArray0;
      objectArray4[4] = (Object[]) stringArray0;
      objectArray4[5] = objectArray2;
      objectArray4[6] = objectArray2;
      objectArray0[1] = objectArray4;
      Object[][] objectArray5 = new Object[9][0];
      Object[] objectArray6 = new Object[3];
      objectArray6[0] = (Object) "4Ww>";
      objectArray6[1] = (Object) "";
      objectArray6[2] = (Object) "";
      objectArray5[0] = objectArray6;
      objectArray5[1] = (Object[]) stringArray0;
      objectArray5[2] = objectArray3;
      objectArray5[3] = objectArray3;
      objectArray5[4] = objectArray2;
      objectArray5[5] = objectArray3;
      objectArray5[6] = (Object[]) stringArray0;
      objectArray5[7] = objectArray3;
      objectArray5[8] = objectArray3;
      objectArray0[2] = objectArray5;
      DefaultWindDataset defaultWindDataset0 = null;
      try {
        defaultWindDataset0 = new DefaultWindDataset(stringArray0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of series keys does not match the number of series in the data array.
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-351.583);
      doubleArray1[1] = 2189.4184474;
      doubleArray1[2] = (-2374.03161866);
      doubleArray1[3] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (-2374.03161866);
      doubleArray2[1] = (-351.583);
      doubleArray2[2] = Double.POSITIVE_INFINITY;
      doubleArray2[3] = (-2374.03161866);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      String string0 = null;
      String string1 = "s\\V";
      Number[][] numberArray0 = new Number[1][2];
      Number[] numberArray1 = new Number[9];
      int int0 = 7;
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries((Function2D) null, 0.3233303842687914, (-1.0), 7, "Lngbh8R1U!_)ZSU");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-351.583);
      doubleArray1[1] = 2189.4184474;
      doubleArray1[2] = (-2374.03161866);
      doubleArray1[3] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (-2374.03161866);
      Vector<Byte> vector0 = new Vector<Byte>();
      TreeSet<Double> treeSet0 = new TreeSet<Double>();
      vector0.removeAll(treeSet0);
      Byte byte0 = new Byte((byte)68);
      vector0.add(byte0);
      XYSeries xYSeries0 = new XYSeries((-2374.03161866), true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) vector0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.XYSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Number[][] numberArray0 = new Number[0][0];
      Number[][] numberArray1 = new Number[0][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray1);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 0, 0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingCategoryDataset0, 0);
      slidingCategoryDataset0.getRowCount();
      slidingCategoryDataset0.validateObject();
      SerialDate serialDate0 = SerialDate.createInstance(1315);
      DatasetUtilities.createCategoryDataset((Comparable) serialDate0, (KeyedValues) pieDataset0);
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      Stack<TimeSeriesCollection> stack0 = new Stack<TimeSeriesCollection>();
      arrayList0.containsAll(stack0);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) arrayList1, true);
      MockDate mockDate0 = new MockDate(4201, 1, 2, 3, 0, 0);
      Week week0 = new Week(mockDate0);
      XYSeries xYSeries0 = new XYSeries(serialDate0, false);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, 1);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultIntervalXYDataset0);
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      stack0.parallelStream();
      DatasetUtilities.findDomainBounds((XYDataset) defaultIntervalXYDataset0, (List) stack0, true);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 582.2763521279087;
      doubleArray0[2] = 0.0;
      Float float0 = new Float(0.0F);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      float float0 = 0.0F;
      Float float1 = new Float(0.0F);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) float1, (KeyedValues) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowData' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      defaultBoxAndWhiskerXYDataset0.clone();
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, true);
      Vector<DefaultStatisticalCategoryDataset> vector0 = new Vector<DefaultStatisticalCategoryDataset>();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      defaultBoxAndWhiskerCategoryDataset0.getColumnKeys();
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      datasetGroup0.clone();
      categoryTableXYDataset0.setGroup(datasetGroup0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0);
      boolean boolean0 = true;
      DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, true);
      String string0 = "rSlb";
      String string1 = "[1!;FUaB";
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset("", "sf+x+N", "[1!;FUaB", "");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float(832.8615439463);
      defaultKeyedValues2DDataset0.addValue((Number) float0, (Comparable) float0, (Comparable) float0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) float0);
      DatasetUtilities.isEmptyOrNull(pieDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) float0, 2701.7, (-2825));
      assertNotSame(pieDataset0, pieDataset1);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      defaultCategoryDataset0.getColumnKeys();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      defaultCategoryDataset0.addValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (Comparable) integer0);
      DatasetUtilities.isEmptyOrNull(pieDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0);
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) integer0, 1579.03, 2655);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      UnaryOperator<Float> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      arrayList0.replaceAll(unaryOperator0);
      ArrayDeque<DefaultTableXYDataset> arrayDeque0 = new ArrayDeque<DefaultTableXYDataset>();
      arrayList0.containsAll(arrayDeque0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0, 0);
      MockDate.UTC(0, 1734, 358, 638, 351, (-2509));
      Week week0 = new Week(mockDate0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, 1);
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) week0, (double) 53, 0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      PieDataset pieDataset2 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, 0);
      assertFalse(pieDataset2.equals((Object)pieDataset1));
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      Float float0 = new Float(0.0F);
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) float0, 1482.8, 0);
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Comparable<Object> comparable0 = null;
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      defaultBoxAndWhiskerXYDataset0.clone();
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      boolean boolean0 = true;
      DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, true);
      String string0 = "";
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset("", "", "rSlb", "sf+x+N");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 32);
      SerialDate serialDate0 = SerialDate.createInstance(1151);
      // Undeclared exception!
      try { 
        serialDate0.getFollowingDayOfWeek(10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid day-of-the-week code.
         //
         verifyException("org.jfree.data.time.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 0.0;
      double double0 = 2065.20025496;
      doubleArray0[4] = 2065.20025496;
      doubleArray0[5] = (-845.2126475);
      doubleArray0[6] = (-3122.1635757);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 2569.6135588913203;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 2569.6135588913203, (-845.2126475), 0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      String string0 = "nQ=";
      timeZone0.setID("nQ=");
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, (List) stack0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      DatasetUtilities.findMinimumRangeValue((XYDataset) xIntervalSeriesCollection0);
      int int0 = 91;
      // Undeclared exception!
      try { 
        xIntervalSeriesCollection0.getXValue(91, 91);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 91, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      UnaryOperator<Float> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      arrayList0.replaceAll(unaryOperator0);
      ArrayDeque<DefaultTableXYDataset> arrayDeque0 = new ArrayDeque<DefaultTableXYDataset>();
      arrayList0.containsAll(arrayDeque0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      MockDate mockDate0 = new MockDate(0, 0, (-741), (-741), (-741), 0);
      Week week0 = new Week(mockDate0);
      XYSeries xYSeries0 = new XYSeries(week0, true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, 0.0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      timeTableXYDataset0.indexOf((Comparable) null);
      DatasetUtilities.isEmptyOrNull((XYDataset) timeTableXYDataset0);
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      xYSeries0.isEmpty();
      minute0.getHour();
      XYSeries xYSeries1 = xYSeries0.createCopy(0, 0);
      // Undeclared exception!
      try { 
        xYSeries1.remove((Number) 59);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      Number[][] numberArray0 = new Number[0][0];
      Number[][] numberArray1 = new Number[0][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray1);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 0, 0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingCategoryDataset0, 0);
      slidingCategoryDataset0.getRowCount();
      slidingCategoryDataset0.validateObject();
      SerialDate serialDate0 = SerialDate.createInstance(1315);
      DatasetUtilities.createCategoryDataset((Comparable) serialDate0, (KeyedValues) pieDataset0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      // Undeclared exception!
      try { 
        SerialDate.monthCodeToString(0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SerialDate.monthCodeToString: month outside valid range.
         //
         verifyException("org.jfree.data.time.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultIntervalXYDataset0);
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      stack0.parallelStream();
      DatasetUtilities.findDomainBounds((XYDataset) defaultIntervalXYDataset0, (List) stack0, true);
      Comparable<DefaultIntervalXYDataset>[] comparableArray0 = (Comparable<DefaultIntervalXYDataset>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[7][0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 582.2763521279087;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = Double.NEGATIVE_INFINITY;
      doubleArray1[5] = (-1522.34750955697);
      doubleArray1[6] = 1036.5957212609492;
      doubleArray1[7] = (-483.26001377);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 582.2763521279087;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 1036.5957212609492;
      doubleArray3[7] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (-483.26001377);
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      doubleArray6[0] = 1036.5957212609492;
      doubleArray6[1] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = 582.2763521279087;
      doubleArray7[3] = 0.0;
      doubleArray7[4] = (-1522.34750955697);
      doubleArray0[6] = doubleArray7;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      XYDataset xYDataset0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      DatasetUtilities.isEmptyOrNull((PieDataset) null);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.clone();
      DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0);
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of row keys does not match the number of rows in the data array.", "The number of row keys does not match the number of rows in the data array.", doubleArray0);
      DatasetUtilities.createCategoryDataset("", "J}j|t#", doubleArray0);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      List list0 = defaultCategoryDataset0.getColumnKeys();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      defaultCategoryDataset0.addValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, true);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(integer0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.getColumnCount();
      defaultMultiValueCategoryDataset0.validateObject();
      BigInteger bigInteger0 = BigInteger.TEN;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) list0, true);
      System.setCurrentTimeMillis((-1L));
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) list0, range0, true);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      DatasetUtilities.isEmptyOrNull((PieDataset) null);
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      ArrayList<Float> arrayList1 = new ArrayList<Float>();
      Float float0 = new Float((double) 4701.044F);
      Float float1 = new Float((double) 4701.044F);
      Float float2 = new Float(4701.044F);
      ArrayList<Float> arrayList2 = new ArrayList<Float>();
      arrayList2.add(float1);
      Float float3 = new Float(4701.044F);
      arrayList1.add(float3);
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, Double.NaN, 4701.044F, 13, float0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, Double.NaN);
      xYBarDataset0.clone();
      DatasetUtilities.iterateDomainBounds((XYDataset) xYBarDataset0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultMultiValueCategoryDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Object object0 = new Object();
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      defaultMultiValueCategoryDataset0.addChangeListener(xYDatasetTableModel0);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      defaultTableXYDataset0.removeAllValuesForX(integer0);
      arrayList0.add(object0);
      arrayList0.add(object0);
      DatasetUtilities.findCumulativeRangeBounds(defaultMultiValueCategoryDataset0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      defaultTableXYDataset0.setGroup(datasetGroup0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultTableXYDataset0, (List) arrayList0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }
}
