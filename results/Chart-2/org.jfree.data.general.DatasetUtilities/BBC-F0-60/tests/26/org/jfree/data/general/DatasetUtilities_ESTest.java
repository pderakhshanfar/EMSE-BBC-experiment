/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 15:16:11 GMT 2021
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.Connection;
import java.time.ZoneOffset;
import java.time.chrono.ThaiBuddhistEra;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import javax.swing.JLayeredPane;
import javax.swing.JToolBar;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.DefaultKeyedValues;
import org.jfree.data.KeyToGroupMap;
import org.jfree.data.KeyedValues;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.function.Function2D;
import org.jfree.data.function.LineFunction2D;
import org.jfree.data.function.NormalDistributionFunction2D;
import org.jfree.data.function.PolynomialFunction2D;
import org.jfree.data.function.PowerFunction2D;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.DatasetUtilities;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.pie.DefaultPieDataset;
import org.jfree.data.pie.PieDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Second;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DatasetUtilities_ESTest extends DatasetUtilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "Null 'rowData' argument.", false);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (-1.0);
      double[][] doubleArray1 = new double[3][6];
      doubleArray1[0] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(".wT61f.Keh8kO&=c3", "", doubleArray1);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 2098.90636288;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "org.jfree.data.xy.XYSeries", doubleArray0);
      DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.push((Float) null);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, linkedList0, true);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (Comparable) "");
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "", 2682.60095196, 0);
      DatasetUtilities.isEmptyOrNull(pieDataset1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-151.0), (-151.0), (-151), (-151.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[][] doubleArray0 = new double[0][5];
      Comparable<DefaultMultiValueCategoryDataset>[] comparableArray0 = (Comparable<DefaultMultiValueCategoryDataset>[]) Array.newInstance(Comparable.class, 2);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      defaultPieDataset0.setValue((Comparable) 999.0, (Number) 999.0);
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) millisecond0, (-856.28659319), 0);
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) 1.7976931348623157E308, (double) 0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(61, 61);
      DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, 61, 3389.0, 61, "[ean=");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(999, 3.01443888E12);
      MockDate mockDate0 = new MockDate();
      Month month0 = new Month(mockDate0, timeZone0);
      DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-2498.806707040514), 0.0, 22, month0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(4351.24, 21);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-709.31823527), (-470.32253154), 21, "U}u/{Oe");
      assertEquals((-470.32253154), xYSeries0.getMaxX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Date[] dateArray0 = new Date[1];
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 3124;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("The 'item' index is ous of Counds.", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultHighLowDataset0);
      assertEquals(3124.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("[ean=", 93, 93);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Range range0 = DatasetUtilities.iterateXYRangeBounds(matrixSeriesCollection0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1L));
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 11, (-1L), (-1L), (-1L), (-177.9915));
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(3974.99386);
      linkedList0.push(float0);
      MockDate mockDate0 = new MockDate();
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3974.99386;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(float0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, false);
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, true);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range1);
      assertEquals(3974.99386, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.push((Float) null);
      MockDate mockDate0 = new MockDate();
      Date[] dateArray0 = new Date[4];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1112.76777984);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, true);
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, false);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>(0, 0);
      Integer integer0 = new Integer(323);
      vector0.add(integer0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.add((double) 0, (-1991.6487742), (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) vector0, false);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float((-279.83329438));
      linkedList0.push(float0);
      MockDate mockDate0 = new MockDate((-3052L));
      Date[] dateArray0 = new Date[6];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      dateArray0[5] = (Date) mockDate0;
      double[] doubleArray0 = new double[4];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, linkedList0, true);
      assertEquals((-3052.0), range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "[ean=", false);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, false);
      assertEquals(200.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 1, 362);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, false);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "[ean=", true);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertEquals((-30000.0), range0.getCentralValue(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      Date[] dateArray0 = new Date[2];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "[ean=3", true);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertEquals((-30000.0), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.addValue((double) 2085, (Comparable) "s", (Comparable) "s");
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, true);
      assertEquals(2085.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[22];
      doubleArray1[2] = 3602.985607589717;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(3602.985607589717, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      Number[][] numberArray0 = new Number[2][7];
      Number[] numberArray1 = new Number[5];
      numberArray1[0] = (Number) integer0;
      numberArray0[1] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", (String) null, numberArray0);
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertEquals(200.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 2542.0;
      doubleArray0[2] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("JDBCCategoryDataset.executeQuery() : insufficient columns returned from the database.", "org.jfree.data.KeyToGroupMap", doubleArray0);
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(2542.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][0];
      Number[] numberArray1 = new Number[1];
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      numberArray1[0] = (Number) integer0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("ej^@I2-b", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, true);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "[ean=3", true);
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYTaskDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 2, 11);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(matrixSeriesCollection0, (-1.0));
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYBarDataset0);
      assertEquals(9.0, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'rowData' argument.", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate(1, 1, 1, 0, (-2076), 1);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1, 1552.49, 0.0, 1.0, 0.0);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(dateArray0[0], oHLCDataItemArray0);
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) (-2458);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("uC?yNR[B.", "#", doubleArray0);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertEquals(2458.0, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(".wT61f.Keh8kO&=c3", ".wT61f.Keh8kO&=c3", doubleArray0);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Integer integer0 = Integer.getInteger("Eyu", 1337);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      defaultPieDataset0.setValue((Comparable) integer0, (Number) integer0);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "Eyu", (KeyedValues) defaultPieDataset0);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertEquals(1337.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.add((-30000.0), (-30000.0), (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, false);
      assertEquals((-30000.0), range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 0.0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "Ng", false);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertEquals(400.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "=aX'D3-J", doubleArray0);
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-889.6398);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("@9V", "@9V", doubleArray0);
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals((-444.8199), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "[kaMn=2", true);
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotNull(range0);
      assertEquals(100.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      Date[] dateArray0 = new Date[2];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, false);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries(".VT?wT61.Keh8kO&=c3", false, false);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeries0.add(2191.86599757, (-2024.307550943), false);
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertEquals((-2024.307550943), range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float((-1.0F));
      linkedList0.push(float0);
      MockDate mockDate0 = new MockDate();
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (-1.0F);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, linkedList0, true);
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, true);
      assertNotNull(range1);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.push((Float) null);
      MockDate mockDate0 = new MockDate();
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, linkedList0, false);
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, false);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float((-1.0F));
      linkedList0.push(float0);
      MockDate mockDate0 = new MockDate();
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1.0F);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, linkedList0, true);
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, true);
      assertNotNull(range1);
      assertEquals((-0.5), range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1, 45, 1700, 3, 3);
      Date[] dateArray0 = new Date[2];
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 45;
      doubleArray0[1] = (double) 1700;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
      assertEquals(1700.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      Date[] dateArray0 = new Date[2];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      Locale locale0 = Locale.GERMAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, (-1539.0174805928), 1662.78566, (-1539.0174805928), 0.0, 1662.78566);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItemArray0[0];
      oHLCDataItemArray0[2] = oHLCDataItemArray0[0];
      oHLCDataItemArray0[3] = oHLCDataItemArray0[2];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, oHLCDataItemArray0);
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals(3201.8031405928, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((-3336.831), (-3336.831), "wvR%7%lESVDO;q,1_`A");
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      assertEquals((-3336.831), range0.getCentralValue(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, true);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Minute minute0 = new Minute();
      Second second0 = new Second((-2319), minute0);
      defaultKeyedValues2DDataset0.addValue((-3086.5537352211004), (Comparable) second0, (Comparable) second0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, false);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      stack0.add(integer0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.add(1793.41047902, 3.01443888E12, (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertEquals((-3.0144388782065894E12), range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Float float0 = new Float(0.0F);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.push(float0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      defaultPieDataset0.setValue((Comparable) float0, (Number) float0);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) float0, (KeyedValues) defaultPieDataset0);
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, (List) linkedList0, false);
      assertNotNull(range0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      Stack<Integer> stack0 = new Stack<Integer>();
      stack0.add(integer0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.add(3410.70679999, 3410.70679999, (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, false);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-339.03005663);
      doubleArray1[1] = (-648.05);
      doubleArray1[2] = (-2906.3432004766537);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("TimeSeriesDataset.addValue(): series #", "TimeSeriesDataset.addValue(): series #", doubleArray0);
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(2567.3131438466535, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1945.825083805368);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "The 'item' index is out of bounds.", doubleArray0);
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals((-972.912541902684), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate(0L);
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, false);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate();
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, false);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((-3333.1552797574077), (-3333.1552797574077), "Null '`Range' argument");
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertEquals((-3332.6552797574077), range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.push((Float) null);
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate(0L);
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(14, 14, 14, 14, 14);
      dateArray0[1] = (Date) mockDate1;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, false);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate(0L);
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 2, 11);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(5.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-982L));
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[4];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(1507.0, Double.NEGATIVE_INFINITY, "[ean=6");
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      assertEquals(1506.5, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[8];
      doubleArray1[3] = (double) 1768;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(884.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1945.825083805368);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "The 'item' index is out of bounds.", doubleArray0);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertEquals((-972.912541902684), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) "Null 'values' argument.");
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Float float0 = new Float(Double.NEGATIVE_INFINITY);
      categoryTableXYDataset0.add((Number) float0, (Number) float0, "Cte5gory 1", true);
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      // Undeclared exception!
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-2.147483648E9), 0.5, 1310, Double.NEGATIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-1.0), 466.0);
      // Undeclared exception!
      DatasetUtilities.sampleFunction2D(powerFunction2D0, 1.7976931348623157E308, Double.POSITIVE_INFINITY, 253, 1.7976931348623157E308);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date[] dateArray0 = new Date[9];
      double[] doubleArray0 = new double[5];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds(defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.push((Float) null);
      MockDate mockDate0 = new MockDate();
      Date[] dateArray0 = new Date[8];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      dateArray0[5] = (Date) mockDate0;
      dateArray0[6] = (Date) mockDate0;
      dateArray0[7] = (Date) mockDate0;
      double[] doubleArray0 = new double[4];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("Null 'values' argument.", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[][] doubleArray0 = new double[9][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Stack<Integer> stack0 = new Stack<Integer>();
      stack0.add((Integer) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LinkedList<YIntervalSeriesCollection> linkedList0 = new LinkedList<YIntervalSeriesCollection>();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      linkedList0.add(yIntervalSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.YIntervalSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      Vector<Integer> vector0 = new Vector<Integer>();
      vector0.add(integer0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Integer integer1 = JLayeredPane.DEFAULT_LAYER;
      defaultStatisticalCategoryDataset0.add((-30000.0), (-30000.0), (Comparable) integer1, (Comparable) integer1);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) vector0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      LinkedList<YIntervalSeriesCollection> linkedList0 = new LinkedList<YIntervalSeriesCollection>();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      linkedList0.add(yIntervalSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultXYZDataset0, linkedList0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.YIntervalSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer0 = new Integer(1);
      vector0.add(integer0);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(histogramDataset0, vector0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("The number of column keys does not match the number of columns in the data array.", 71, 71);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(matrixSeriesCollection0, 71);
      // Undeclared exception!
      DatasetUtilities.iterateRangeBounds((XYDataset) xYBarDataset0, true);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[][] doubleArray1 = new double[8][3];
      doubleArray1[0] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[2];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("[ean=", 93, 93);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      matrixSeriesCollection0.addSeries(matrixSeries0);
      // Undeclared exception!
      DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, false);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1083L));
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, (OHLCDataItem[]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds((CategoryDataset) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[6];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String[] stringArray0 = new String[2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 2);
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String[] stringArray0 = new String[0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, (KeyToGroupMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[][] doubleArray0 = new double[5][8];
      double[] doubleArray1 = new double[4];
      doubleArray0[3] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap((-79.2648277));
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String[] stringArray0 = new String[6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (-1734.4516025362939));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Number[][] numberArray0 = new Number[3][3];
      Number[] numberArray1 = new Number[6];
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (-534.0));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[][] doubleArray0 = new double[7][9];
      double[] doubleArray1 = new double[3];
      doubleArray0[1] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      stack0.add(integer0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) stack0, (Range) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      Month month0 = new Month(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(month0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      vector0.add(defaultIntervalXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) vector0, (Range) null, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultIntervalXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      Vector<Integer> vector0 = new Vector<Integer>();
      vector0.add(integer0);
      MockDate mockDate0 = new MockDate();
      Date[] dateArray0 = new Date[4];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(integer0, dateArray0, doubleArray0, doubleArray1, doubleArray0, doubleArray1, doubleArray0);
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, vector0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) vector0, range0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Long long0 = Long.getLong("", (long) 1779);
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(long0, (OHLCDataItem[]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Number[][] numberArray0 = new Number[8][5];
      Number[] numberArray1 = new Number[7];
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      String[] stringArray0 = new String[2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      arrayList0.add(xYIntervalSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYIntervalSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "dD4,#", doubleArray0);
      Integer integer0 = new Integer(0);
      Stack<Integer> stack0 = new Stack<Integer>();
      stack0.add(integer0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds(categoryDataset0, (List) stack0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[6];
      doubleArray0[1] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[][] doubleArray0 = new double[6][1];
      double[] doubleArray1 = new double[6];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      Date[] dateArray0 = new Date[11];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[][] doubleArray0 = new double[6][2];
      double[] doubleArray1 = new double[8];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1, 1, 1);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1, 1, fixedMillisecond0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue(dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[][] doubleArray0 = new double[9][6];
      double[] doubleArray1 = new double[3];
      doubleArray0[5] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Date[] dateArray0 = new Date[2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(dateArray0, dateArray0, (Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[4];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(894, 667);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue(dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2166, 2166, timeZone0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.push((Float) null);
      MockDate mockDate0 = new MockDate(0L);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      TimeZone timeZone0 = TimeZone.getDefault();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) linkedList0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      LinkedList<YIntervalSeriesCollection> linkedList0 = new LinkedList<YIntervalSeriesCollection>();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      linkedList0.add(yIntervalSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultXYZDataset0, (List) linkedList0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.YIntervalSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      Vector<FixedMillisecond> vector0 = new Vector<FixedMillisecond>();
      vector0.setSize(11);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) histogramDataset0, (List) vector0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 368, 0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(slidingCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[8];
      doubleArray0[1] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[][] doubleArray0 = new double[5][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, (-1131), (-1131));
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingCategoryDataset0, (-1131));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[][] doubleArray0 = new double[5][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'rowKeys' argument.", "JDBCCategoryDataset.executeQuery() : insufficient columns returned from the database.", doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, 347);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 347, Size: 5
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[7];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, (Comparable) "3<mOa}my&B{&8b_~1I");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      Millisecond millisecond0 = new Millisecond();
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) millisecond0, (KeyedValues) defaultKeyedValues0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(".VT,wT61f.Keh8kO&=c3", ".VT,wT61f.Keh8kO&=c3", doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) ".VT,wT61f.Keh8kO&=c3");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(".VT,wT61.Keh8kO&=c3", ".VT,wT61.Keh8kO&=c3", doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 1807);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1807, Size: 9
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[][] doubleArray0 = new double[9][9];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (-5785));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[][] doubleArray0 = new double[20][9];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "[ean=3", doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 90);
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "Null 'rowData' argument.", (double) 90, 90);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 90, Size: 9
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      defaultPieDataset0.insertValue(0, (Comparable) 1, (Number) 0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) 1, Double.POSITIVE_INFINITY, 3441);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to org.jfree.data.SelectableValue
         //
         verifyException("org.jfree.data.pie.DefaultPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[][] doubleArray0 = new double[3][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("54stx9)iNGk}{Jboeb", "~@=,E,h>(Z5m&`U 'Y", doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-1));
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "54stx9)iNGk}{Jboeb", (double) (-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-419));
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) zoneOffset0, (double) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("", "Requires 'samples' > 1", (Number[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("5[]~H`:QeTFbH", "5[]~H`:QeTFbH", (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("CatogorL 2", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Double double0 = (Double)DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      double[][] doubleArray0 = new double[6][3];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("%+DV}nEE;(t2OIir", "(J.bCI8~3%-[pp-5J", doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, (-1638));
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) double0, (KeyedValues) categoryToPieDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal((TableXYDataset) null, 357);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "Null 'visibleSeriesKeys' argument.", false);
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 2332);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2332, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Long long0 = new Long(2);
      categoryTableXYDataset0.add((Number) long0, (Number) long0, "Nulle'extract' argument.", false);
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-2857));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[][] doubleArray0 = new double[5][9];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'serieKey' argumnt", "Null 'serieKey' argumnt", doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-1070));
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "[ean=3", true);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-835.826952));
      assertNotNull(range0);
      assertEquals(30000.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, (double) 0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 0.5;
      double[][] doubleArray1 = new double[3][6];
      doubleArray1[0] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(".wT61f.Keh8kO&=c3", "", doubleArray1);
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, (-1822.55090278));
      assertNotNull(range0);
      assertEquals(0.5, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.push((Float) null);
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate();
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, true);
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, true);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate((-1322), 61, 1497, 1497, 61);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1322), (-582.2627937), 3389.0, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("[ean=", oHLCDataItemArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (3389.0) <= upper (-582.2627937).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("[ean=", oHLCDataItemArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'extract' argument.", 19, 19);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, false);
      assertEquals(18.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      Vector<Integer> vector0 = new Vector<Integer>();
      vector0.add(integer0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.add((-30000.0), (-30000.0), (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) vector0, false);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) vector0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[2];
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Kbgs 7<N-?.^I1'", "Kbgs 7<N-?.^I1'", doubleArray0);
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries(".VT?wT61.Keh8kO&=c3", false, false);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      Date[] dateArray0 = new Date[4];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1.0), (-1.0));
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-1.0), 446.56038357144854, 2, "");
      assertEquals(446.56038357144854, xYSeries0.getMaxX(), 0.01);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries((Function2D) null, 0L, 1, 0, ")");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Float float0 = new Float(19.886792036486195);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      defaultPieDataset0.setValue((Comparable) float0, (Number) float0);
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) float0, 60.904739181962, 567);
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, 1634);
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 28);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][9];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("=cG}c", "=cG}c", numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal((PieDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[5];
      doubleArray1[3] = Double.NaN;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "The 'item' index is out of bounds.", doubleArray0);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[15];
      doubleArray0[1] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "[ean=", false);
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals(200.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((-3333.1552797574077), (-3333.1552797574077), "Null '`Range' argument");
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-1666.5776398787038), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "[en=", false);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 200.0);
      assertNotNull(range0);
      assertEquals(200.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) null, "9ST7LW):LN7", true);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null, 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 0.5;
      double[][] doubleArray1 = new double[3][6];
      doubleArray1[0] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(".wT61f.Keh8kO&=c3", "", doubleArray1);
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.5, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[8];
      doubleArray1[2] = (-1.0);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "org.jfree.data.xy.XYSeries", doubleArray0);
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertEquals((-1.0), number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, keyToGroupMap0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[2];
      doubleArray1[1] = (-555.4263944457246);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Kbgs 7<N-?.^I1'", "Kbgs 7<N-?.^I1'", doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertEquals(555.4263944457246, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 945.8;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Kbgs 7<N-?.^I1'", "Kbgs 7<N-?.^I1'", doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(945.8, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[2];
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Kbgs 7<N-?.^I1'", "Kbgs 7<N-?.^I1'", doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, keyToGroupMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (-1.0);
      double[][] doubleArray1 = new double[3][6];
      doubleArray1[0] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(".wT61f.Keh8kO&=c3", "", doubleArray1);
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, (-1822.55090278));
      assertEquals(1.0, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][3];
      Number[] numberArray1 = new Number[2];
      Float float0 = new Float((float) 504);
      numberArray1[1] = (Number) float0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertEquals(252.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[2];
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Kbgs 7<N-?.^I1'", "Kbgs 7<N-?.^I1'", doubleArray0);
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 0.0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      double[][] doubleArray0 = new double[9][9];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The 'item' index is out of bounds.", "The 'item' index is out of bounds.", doubleArray0);
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 0.601755524896944);
      assertNotNull(range0);
      assertEquals(0.601755524896944, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, 2104.252166253);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      Date[] dateArray0 = new Date[21];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "Null 'visibleSeriesKeys' argument.", false);
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals(300.0, number0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 188, 2);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(187.0, number0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Long long0 = new Long(16L);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(long0, "DomainOrder.NONE", (String) null);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timePeriodValuesCollection0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) jDBCXYDataset0);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[5];
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("}6,~&9*[Zoh", "Period can't be longer than dataset.", doubleArray0);
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultIntervalXYDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Date[] dateArray0 = new Date[1];
      double[] doubleArray0 = new double[8];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("The 'item' index is ous of Counds.", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 188, 2);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-1.0), 999.0);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(powerFunction2D0, 999, 2865.08, 999, "}6,~&9*[Zoh");
      Number number0 = DatasetUtilities.findMinimumRangeValue(xYDataset0);
      assertEquals(Double.NEGATIVE_INFINITY, number0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 11, 11);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(matrixSeriesCollection0, 11);
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) xYBarDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Number[][] numberArray0 = new Number[20][4];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("~", "~", numberArray0);
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      Number number0 = DatasetUtilities.findMaximumDomainValue(xYTaskDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("key", 93, 93);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      // Undeclared exception!
      DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Nulle'extract' argument.", 2, 2);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(matrixSeriesCollection0, 2.0);
      Number number0 = DatasetUtilities.findMaximumDomainValue(xYBarDataset0);
      assertEquals(2.0, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      Number number0 = DatasetUtilities.findMinimumDomainValue(xYTaskDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 2, 11);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(matrixSeriesCollection0, (-1.0));
      Number number0 = DatasetUtilities.findMinimumDomainValue(xYBarDataset0);
      assertNotNull(number0);
      assertEquals(0.5, number0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.push((Float) null);
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate(0L);
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(1, 1, 1, 1, 1, 1);
      dateArray0[1] = (Date) mockDate1;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, linkedList0, false);
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, false);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range1, false);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(2.174770739E12, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      ThaiBuddhistEra thaiBuddhistEra0 = ThaiBuddhistEra.BEFORE_BE;
      Stack<ThaiBuddhistEra> stack0 = new Stack<ThaiBuddhistEra>();
      stack0.add(thaiBuddhistEra0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) stack0, range0, true);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Range range0 = new Range((-230.44), (-230.44));
      Stack<ThaiBuddhistEra> stack0 = new Stack<ThaiBuddhistEra>();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("The 'item' index isout of bounds.");
      ThaiBuddhistEra thaiBuddhistEra0 = ThaiBuddhistEra.BE;
      stack0.add(thaiBuddhistEra0);
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, range0, true);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      double[][] doubleArray0 = new double[20][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Stack<ThaiBuddhistEra> stack0 = new Stack<ThaiBuddhistEra>();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      ThaiBuddhistEra thaiBuddhistEra0 = ThaiBuddhistEra.BE;
      stack0.add(thaiBuddhistEra0);
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, range0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.AbstractSeriesDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float((-1.0F));
      linkedList0.push(float0);
      MockDate mockDate0 = new MockDate();
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = Double.NaN;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, linkedList0, true);
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, true);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.push((Float) null);
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate();
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, true);
      mockDate0.setTime((-411L));
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, true);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.push((Float) null);
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate(0L);
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, linkedList0, true);
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, true);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      Date[] dateArray0 = new Date[4];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultHighLowDataset0);
      Vector<DefaultHighLowDataset> vector0 = new Vector<DefaultHighLowDataset>();
      vector0.add(defaultHighLowDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) vector0, range0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultHighLowDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 11, 11);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(matrixSeriesCollection0, 11);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYBarDataset0, true);
      assertNotNull(range0);
      
      Vector<DefaultHighLowDataset> vector0 = new Vector<DefaultHighLowDataset>();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) matrixSeriesCollection0, (List) vector0, range0, true);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(5.0, range0.getCentralValue(), 0.01);
      assertEquals(10.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultWindDataset0, (List) linkedList0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(".wT61f.Keh8kO&=c3", ".wT61f.Keh8kO&=c3", doubleArray0);
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(2098.90636288);
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultXYZDataset0, (List) null, range0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      LinkedList<YIntervalSeriesCollection> linkedList0 = new LinkedList<YIntervalSeriesCollection>();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) null, (List) linkedList0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(1507.0, Double.NEGATIVE_INFINITY, "[ean=6");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("The 'item' index is out of bounds.");
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, false);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      vector0.add(integer0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(383, (-3414));
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, vector0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      Stack<Integer> stack0 = new Stack<Integer>();
      stack0.add(integer0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(383, 28);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, stack0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultWindDataset0, (List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Stack<Long> stack0 = new Stack<Long>();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds((XYDataset) null, stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("?'", 2, 2);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, false);
      assertEquals(1.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      categoryTableXYDataset0.add(number0, number0, "org.jfree.data.xy.AbstractXYDataset", false);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      vector0.add(integer0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      defaultCategoryDataset0.setValue((Number) null, (Comparable) integer0, (Comparable) mockDate0);
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) vector0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      Stack<Integer> stack0 = new Stack<Integer>();
      stack0.add(integer0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.add((-30000.0), (-30000.0), (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, false);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      Stack<Integer> stack0 = new Stack<Integer>();
      stack0.add(integer0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      Vector<Integer> vector0 = new Vector<Integer>();
      vector0.add(integer0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.add((-30000.0), 1.0, (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) vector0, true);
      assertEquals((-29999.0), range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      stack0.add(integer0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.add(stack0, integer0, integer0);
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertEquals(200.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      stack0.add(integer0);
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      double[][] doubleArray0 = new double[3][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      stack0.add(integer0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      vector0.add(integer0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) vector0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) null, (List) vector0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[5];
      doubleArray1[3] = Double.NaN;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "The 'item' index is out of bounds.", doubleArray0);
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      jDBCCategoryDataset0.addValue((-2181.0476894377), (Comparable) "Db", (Comparable) "Null 'extract' argument.");
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) jDBCCategoryDataset0, true);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[22];
      doubleArray1[1] = Double.NaN;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Number[][] numberArray0 = new Number[20][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("+", 2, 2);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      LinkedList<XYIntervalSeriesCollection> linkedList0 = new LinkedList<XYIntervalSeriesCollection>();
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, (List) linkedList0, range0, false);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertNull(range1);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Vector<DefaultHighLowDataset> vector0 = new Vector<DefaultHighLowDataset>();
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, (List) vector0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) stack0, (Range) null, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("");
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, (List) vector0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, false);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      Vector<XYSeriesCollection> vector0 = new Vector<XYSeriesCollection>();
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) vector0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, (List) arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timePeriodValuesCollection0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 11, 11);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(matrixSeriesCollection0, 11);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) xYBarDataset0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      jDBCCategoryDataset0.addValue((-2181.0476894377), (Comparable) "Db", (Comparable) "Null 'extract' argument.");
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) jDBCCategoryDataset0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      double[][] doubleArray0 = new double[0][4];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][4];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("#", "#", numberArray0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Integer integer0 = Integer.getInteger("Eyu", 1337);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      defaultPieDataset0.setValue((Comparable) integer0, (Number) integer0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      double[][] doubleArray0 = new double[20][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, (-112));
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 1318.8, 1904.4326398, 0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Integer integer0 = Integer.getInteger("Eyu", 1337);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1337, 2041.2);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, 1.5, (-731.897), 1337, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(59, 2423.5852095);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, 0, 1634, 59, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      double[][] doubleArray0 = new double[9][9];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The 'item' index is out of bounds.", "The 'item' index is out of bounds.", doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 3209);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) "The 'item' index is out of bounds.", (KeyedValues) categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3209, Size: 9
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(767);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) spreadsheetDate0, (KeyedValues) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowData' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, (-367));
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) null, (KeyedValues) categoryToPieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Comparable<String>[] comparableArray0 = (Comparable<String>[]) Array.newInstance(Comparable.class, 1);
      double[][] doubleArray0 = new double[1][4];
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of column keys does not match the number of columns in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      Comparable<DefaultIntervalXYDataset>[] comparableArray0 = (Comparable<DefaultIntervalXYDataset>[]) Array.newInstance(Comparable.class, 0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      double[][] doubleArray0 = new double[0][5];
      Comparable<DefaultIntervalXYDataset>[] comparableArray0 = (Comparable<DefaultIntervalXYDataset>[]) Array.newInstance(Comparable.class, 0);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertNotNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      double[][] doubleArray0 = new double[2][9];
      Comparable<JToolBar.Separator>[] comparableArray0 = (Comparable<JToolBar.Separator>[]) Array.newInstance(Comparable.class, 0);
      Comparable<CategoryTableXYDataset>[] comparableArray1 = (Comparable<CategoryTableXYDataset>[]) Array.newInstance(Comparable.class, 6);
      comparableArray1[0] = (Comparable<CategoryTableXYDataset>) millisecond0;
      comparableArray1[1] = (Comparable<CategoryTableXYDataset>) millisecond0;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'columnKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Day day0 = new Day();
      Comparable<Double>[] comparableArray0 = (Comparable<Double>[]) Array.newInstance(Comparable.class, 3);
      comparableArray0[0] = (Comparable<Double>) day0;
      comparableArray0[1] = (Comparable<Double>) day0;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, (double[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'rowKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Comparable<TimeSeriesCollection>[] comparableArray0 = (Comparable<TimeSeriesCollection>[]) Array.newInstance(Comparable.class, 7);
      double[][] doubleArray0 = new double[2][4];
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, (Comparable[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'columnKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) null, (Comparable[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Comparable<DefaultIntervalXYDataset>[] comparableArray0 = (Comparable<DefaultIntervalXYDataset>[]) Array.newInstance(Comparable.class, 0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Float float0 = new Float(19.886792036486195);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      defaultPieDataset0.setValue((Comparable) float0, (Number) float0);
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) float0, 60.904739181962, (-118));
      assertNotSame(defaultPieDataset0, pieDataset0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.add((-30000.0), (-30000.0), (Comparable) integer0, (Comparable) integer0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) integer0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][9];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("=cG}c", "=cG}c", numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (Comparable) "=cG}c");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      double[][] doubleArray0 = new double[0][4];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "Null 'rowKeys' argument.", doubleArray0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 347);
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      defaultPieDataset0.setValue((Comparable) "SL!:S^A  <c&", 2306.6913909371488);
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
      assertEquals(2306.6913909371488, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate(0L);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      defaultPieDataset0.setValue((Comparable) mockDate0, (Number) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) dateArray0[0], 1135.767107090536, (-2899));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) "SL!:S^A  <c&", 1.0, (-2458));
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][0];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(2, 569.395545);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, 569.395545, 712.0, 2, "Null 'values' argument.");
      Range range0 = DatasetUtilities.iterateRangeBounds(xYDataset0);
      assertEquals(3.7422989979787874E-4, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(3773, 895);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-3169L));
      Minute minute0 = new Minute(mockDate0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, (Comparable) minute0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "Eyu", (KeyedValues) defaultPieDataset0);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultXYDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][4];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("#", "#", numberArray0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 10);
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "#", (double) 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 4
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
