/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 15:15:13 GMT 2021
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dimension;
import java.lang.reflect.Array;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.sql.Connection;
import java.sql.Statement;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.ParsePosition;
import java.time.Clock;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.MinguoDate;
import java.time.chrono.MinguoEra;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.EventListener;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import java.util.function.Consumer;
import javax.swing.Action;
import javax.swing.JFormattedTextField;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import javax.swing.JRadioButton;
import javax.swing.plaf.synth.SynthToggleButtonUI;
import javax.swing.plaf.synth.SynthToolBarUI;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.JTableHeader;
import javax.swing.text.DefaultFormatter;
import javax.swing.text.DefaultFormatterFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.DefaultKeyedValues;
import org.jfree.data.DomainOrder;
import org.jfree.data.KeyToGroupMap;
import org.jfree.data.KeyedValues;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.event.SeriesChangeEvent;
import org.jfree.data.function.Function2D;
import org.jfree.data.function.LineFunction2D;
import org.jfree.data.function.NormalDistributionFunction2D;
import org.jfree.data.function.PolynomialFunction2D;
import org.jfree.data.function.PowerFunction2D;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeries;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DatasetUtilities;
import org.jfree.data.general.DefaultHeatMapDataset;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.SeriesChangeInfo;
import org.jfree.data.general.SeriesChangeType;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.pie.DefaultPieDataset;
import org.jfree.data.pie.PieDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.IntervalXYDelegate;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.VectorSeries;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYDatasetTableModel;
import org.jfree.data.xy.XYIntervalSeries;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DatasetUtilities_ESTest extends DatasetUtilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2419, 2419, 2419);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 2419, 2419, 2419, 2419, 2419);
      assertNotNull(oHLCDataItem0);
      assertEquals("Sun Mar 16 00:00:00 GMT 4527", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Sun Mar 16 00:00:00 GMT 4527", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertNotNull(number0);
      assertEquals("Sun Mar 16 00:00:00 GMT 4527", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals(2419.0, number0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0);
      assertNull(range0);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      double[][] doubleArray0 = new double[9][8];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 2419;
      doubleArray1[1] = (double) 2419;
      doubleArray1[2] = (double) 2419;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.39240928132E12;
      doubleArray2[1] = (double) 2419;
      doubleArray2[2] = (double) 2419;
      doubleArray2[3] = (double) 2419;
      doubleArray2[4] = (-2507.58);
      doubleArray2[5] = (double) 2419;
      doubleArray2[6] = (double) 2419;
      doubleArray2[7] = (-4272.618580885);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1.39240928132E12;
      doubleArray3[1] = 1.39240928132E12;
      doubleArray3[2] = (-1977.7);
      doubleArray3[3] = (-405.75952142);
      doubleArray3[4] = (double) 2419;
      doubleArray3[5] = (double) 2419;
      doubleArray3[6] = (-4272.618580885);
      doubleArray3[7] = (-2507.58);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (-405.75952142);
      doubleArray4[1] = (-4272.618580885);
      doubleArray4[2] = (-2507.58);
      doubleArray4[3] = (double) 2419;
      doubleArray4[4] = (-1977.7);
      doubleArray4[5] = (-1977.7);
      doubleArray4[6] = (-2507.58);
      doubleArray4[7] = (-2507.58);
      doubleArray4[8] = (-4272.618580885);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = (double) 2419;
      doubleArray5[1] = (-2507.58);
      doubleArray5[2] = (double) 2419;
      doubleArray5[3] = (-2507.58);
      doubleArray5[4] = (-405.75952142);
      doubleArray5[5] = 1.39240928132E12;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray6[0] = 1.39240928132E12;
      doubleArray6[1] = (-4272.618580885);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      
      doubleArray7[0] = 1.39240928132E12;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[9];
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      
      doubleArray8[0] = (-2507.58);
      doubleArray8[1] = (-4272.618580885);
      doubleArray8[2] = (-4272.618580885);
      doubleArray8[3] = (-1977.7);
      doubleArray8[4] = (-405.75952142);
      doubleArray8[5] = 1.39240928132E12;
      doubleArray8[6] = (-405.75952142);
      doubleArray8[7] = (-1.7976931348623157E308);
      doubleArray8[8] = (-1918.418);
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[5];
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      
      doubleArray9[0] = (-1977.7);
      doubleArray9[1] = 0.0;
      doubleArray9[2] = (-1977.7);
      doubleArray9[3] = (double) 2419;
      doubleArray9[4] = (-2507.58);
      doubleArray0[8] = doubleArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Number[][] numberArray0 = new Number[3][4];
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, numberArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 1);
      assertNotNull(categoryToPieDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, numberArray0.length);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, numberArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertNull(range0);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2419, 2419, 152);
      assertNotNull(mockDate0);
      
      Number[][] numberArray0 = new Number[3][1];
      Number[] numberArray1 = new Number[3];
      Float float0 = new Float(2.0);
      assertNotNull(float0);
      assertEquals(2.0F, (float)float0, 0.01F);
      
      numberArray1[0] = (Number) float0;
      Byte byte0 = new Byte((byte)37);
      assertNotNull(byte0);
      assertEquals((byte)37, (byte)byte0);
      
      numberArray1[1] = (Number) byte0;
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      numberArray1[2] = (Number) integer0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      Integer integer1 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(100, (int)integer1);
      
      numberArray2[0] = (Number) integer1;
      numberArray2[1] = (Number) byte0;
      numberArray2[2] = (Number) integer0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[1];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) integer0;
      numberArray0[2] = numberArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("F50SrVrG>", "F50SrVrG>", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, numberArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (byte)37);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(37, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) mockDate0, (-835.231265361902));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 37, Size: 3
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = 1454.481121;
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray1[3] = (-2807.23422);
      doubleArray1[4] = 90.9600076488;
      doubleArray1[5] = (-964.0);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals((-2807.23422), range0.getLowerBound(), 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      MockDate mockDate1 = new MockDate();
      assertNotNull(mockDate1);
      assertTrue(mockDate1.equals((Object)mockDate0));
      
      Date[] dateArray0 = new Date[7];
      dateArray0[0] = (Date) mockDate1;
      dateArray0[1] = (Date) mockDate1;
      dateArray0[2] = (Date) mockDate1;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate1;
      dateArray0[5] = (Date) mockDate0;
      dateArray0[6] = (Date) mockDate0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-437.236876056325);
      doubleArray0[1] = (-3003.7209370244);
      doubleArray0[2] = (-1153.8955);
      doubleArray0[3] = 0.0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate1, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {(-437.236876056325), (-3003.7209370244), (-1153.8955), 0.0}, doubleArray0, 0.01);
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(7, dateArray0.length);
      assertEquals(4, doubleArray0.length);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1541.1670292), (-1421.74255));
      assertNotNull(lineFunction2D0);
      assertEquals((-1541.1670292), lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-1421.74255), lineFunction2D0.getSlope(), 0.01);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-1429.366286571582), (-437.236876056325));
      assertNotNull(powerFunction2D0);
      assertEquals((-1429.366286571582), powerFunction2D0.getA(), 0.01);
      assertEquals((-437.236876056325), powerFunction2D0.getB(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, 652.975647473015, 1163.0, 670, 0.0);
      assertNotNull(xYSeriesCollection0);
      assertEquals((-1429.366286571582), powerFunction2D0.getA(), 0.01);
      assertEquals((-437.236876056325), powerFunction2D0.getB(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(Double.NaN, (-695.6719587353908), "");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = new Range((-695.6719587353908), Double.NaN);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals((-695.6719587353908), range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      assertNull(range1);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[][] doubleArray0 = new double[19][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(19, doubleArray0.length);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, (-4240), 212);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(212, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-4240), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(19, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[7];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      dateArray0[5] = (Date) mockDate0;
      dateArray0[6] = (Date) mockDate0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 999;
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 999;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {999.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 999.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(7, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotNull(range0);
      assertArrayEquals(new double[] {999.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 999.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      ArrayList<CategoryTableXYDataset> arrayList0 = new ArrayList<CategoryTableXYDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) arrayList0, range0, false);
      assertNull(range1);
      assertArrayEquals(new double[] {999.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 999.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds(defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String[] stringArray0 = new String[3];
      Number[][] numberArray0 = new Number[3][4];
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, stringArray0.length);
      assertEquals(3, numberArray0.length);
      
      defaultIntervalCategoryDataset0.setSeriesKeys(stringArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, stringArray0.length);
      assertEquals(3, numberArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, stringArray0.length);
      assertEquals(3, numberArray0.length);
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNull(range0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, stringArray0.length);
      assertEquals(3, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String[] stringArray0 = new String[3];
      Number[][] numberArray0 = new Number[3][4];
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, stringArray0.length);
      assertEquals(3, numberArray0.length);
      
      defaultIntervalCategoryDataset0.setSeriesKeys(stringArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, stringArray0.length);
      assertEquals(3, numberArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, stringArray0.length);
      assertEquals(3, numberArray0.length);
      assertTrue(boolean0);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) histogramDataset0);
      assertNull(range0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNull(range1);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, stringArray0.length);
      assertEquals(3, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertNull(number0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Vector<Integer> vector0 = new Vector<Integer>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      double[][] doubleArray0 = new double[7][5];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-1324.0);
      doubleArray1[1] = (-1324.0);
      doubleArray1[2] = (-1324.0);
      doubleArray1[3] = (-1324.0);
      doubleArray1[4] = 5.0;
      doubleArray1[5] = (-1324.0);
      doubleArray1[6] = (-1324.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1324.0);
      doubleArray2[1] = 5.0;
      doubleArray2[2] = 5.0;
      doubleArray2[3] = (-1324.0);
      doubleArray2[4] = (-1324.0);
      doubleArray2[5] = 5.0;
      doubleArray2[6] = 5.0;
      doubleArray2[7] = 613.80542839;
      doubleArray2[8] = (-1324.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (-1324.0);
      doubleArray4[1] = 613.80542839;
      doubleArray4[2] = 5.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = 1872.7658516716;
      doubleArray5[1] = 613.80542839;
      doubleArray5[2] = 5.0;
      doubleArray5[3] = 5.0;
      doubleArray5[4] = 5.0;
      doubleArray5[5] = 613.80542839;
      doubleArray5[6] = 613.80542839;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = (-1324.0);
      doubleArray6[1] = 5.0;
      doubleArray6[2] = 1872.7658516716;
      doubleArray6[3] = 613.80542839;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      
      doubleArray7[0] = 1872.7658516716;
      doubleArray7[1] = 5.0;
      doubleArray7[2] = 0.5;
      doubleArray7[3] = 1872.7658516716;
      doubleArray7[4] = 613.80542839;
      doubleArray7[5] = 5.0;
      doubleArray0[6] = doubleArray7;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Short short0 = new Short((short) (-3622));
      assertNotNull(short0);
      assertEquals((short) (-3622), (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(short0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[13];
      doubleArray0[5] = (double) (short) (-3622);
      doubleArray0[2] = (double) (short) (-3622);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(dateArray0[0], dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(13, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, false);
      assertNotNull(range0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(13, doubleArray0.length);
      
      Range range1 = Range.combine(range0, range0);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(1, dateArray0.length);
      assertEquals(13, doubleArray0.length);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) arrayList0, range1, false);
      assertNotNull(range2);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertTrue(arrayList0.contains((short) (-3622)));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(1, dateArray0.length);
      assertEquals(13, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[1];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(2, dateArray0.length);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Quarter quarter0 = new Quarter();
      assertNotNull(quarter0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      
      defaultKeyedValuesDataset0.setValue((Comparable) quarter0, (double) 1);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) quarter0, (KeyedValues) defaultKeyedValuesDataset0);
      assertNotNull(categoryDataset0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) quarter0, (double) 4, 1);
      assertNotNull(pieDataset0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add((-1324.0), (-1324.0), "");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Comparable<XIntervalSeriesCollection>[] comparableArray0 = (Comparable<XIntervalSeriesCollection>[]) Array.newInstance(Comparable.class, 0);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[][] doubleArray0 = new double[4][9];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1325.258329531322);
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-1325.258329531322);
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = (-1325.258329531322);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = (-1325.258329531322);
      doubleArray2[3] = (-1874.9330806306);
      doubleArray2[4] = (-1.0);
      doubleArray2[5] = (-1.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-1325.258329531322);
      doubleArray3[1] = (-1874.9330806306);
      doubleArray3[2] = (-1325.258329531322);
      doubleArray3[3] = Double.NaN;
      doubleArray3[4] = (-1325.258329531322);
      doubleArray3[5] = (-1874.9330806306);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (-1325.258329531322);
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("c", ",j7t", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      assertNotNull(range0);
      assertEquals((-937.9665403153), range0.getCentralValue(), 0.01);
      assertEquals((-1874.9330806306), range0.getLowerBound(), 0.01);
      assertEquals(1873.9330806306, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals(4, doubleArray0.length);
      
      int int0 = 335;
      int int1 = (-1);
      // Undeclared exception!
      try { 
        MockInstant.parse("c");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text 'c' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Short short0 = new Short((short) (-1157));
      assertNotNull(short0);
      assertEquals((short) (-1157), (short)short0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((double) (short) (-1157), (double) (short) (-1157), (Comparable) short0, (Comparable) short0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) short0);
      assertNotNull(pieDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) short0, (double) (short) (-1157));
      assertNotNull(pieDataset1);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Short short0 = new Short((short) (-1290));
      assertNotNull(short0);
      assertEquals((short) (-1290), (short)short0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, (int) (short) (-1290));
      assertNotNull(defaultPieDataset0);
      
      defaultPieDataset0.setValue((Comparable) short0, (Number) null);
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) short0, (double) (short) (-1290), (int) (short) (-1290));
      assertNotNull(defaultPieDataset1);
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      
      defaultPieDataset1.clearSelection();
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset1);
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Short short0 = new Short((short)575);
      assertNotNull(short0);
      assertEquals((short)575, (short)short0);
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains((short)575));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Week week0 = new Week(0, 1652);
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(0, week0.getWeek());
      assertEquals(87556L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1652, week0.getYearValue());
      
      Week week1 = (Week)week0.previous();
      assertNotNull(week1);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertFalse(week1.equals((Object)week0));
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(0, week0.getWeek());
      assertEquals(87556L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1652, week0.getYearValue());
      assertEquals(1652, week1.getYearValue());
      assertEquals(87555L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals((-1), week1.getWeek());
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      
      Date[] dateArray0 = new Date[6];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      dateArray0[5] = (Date) mockDate0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1652;
      doubleArray0[1] = (double) (short)575;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(week1, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {1652.0, 575.0}, doubleArray0, 0.01);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(0, week0.getWeek());
      assertEquals(87556L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1652, week0.getYearValue());
      assertEquals(1652, week1.getYearValue());
      assertEquals(87555L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals((-1), week1.getWeek());
      assertEquals(6, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotNull(range0);
      assertArrayEquals(new double[] {1652.0, 575.0}, doubleArray0, 0.01);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(0, week0.getWeek());
      assertEquals(87556L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1652, week0.getYearValue());
      assertEquals(1652, week1.getYearValue());
      assertEquals(87555L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals((-1), week1.getWeek());
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals(6, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(0.0, (double) (short)5889, "=yDz`2gxx6;Y)7");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-0.5), range0.getLowerBound(), 0.01);
      assertEquals(0.5, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[][] doubleArray0 = new double[6][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The 'data' array must contain six arrays with equal length.", "The 'data' array must contain six arrays with equal length.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(6, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-1547));
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-1547), categoryToPieDataset0.getExtractIndex());
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(Double.NaN, Double.NaN, "4HynK86,sb%0B");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = categoryTableXYDataset0.getDomainBounds(false);
      assertNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertFalse(vector0.contains("4HynK86,sb%0B"));
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) vector0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add((double) (short)2126, (double) (short)2126, "k]y%4<1QCqP'uvl");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(2126.0, range0.getUpperBound(), 0.01);
      assertEquals(2126.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2126.0, range0.getLowerBound(), 0.01);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, (short)2126, 1);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(1, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(2126, slidingCategoryDataset0.getFirstCategoryIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((short)0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains((short)0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(arrayList0, short0, short0);
      assertTrue(arrayList0.contains((short)0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      assertNotNull(range0);
      assertTrue(arrayList0.contains((short)0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D((-0.6475503945119889), (-0.6475503945119889));
      assertNotNull(lineFunction2D0);
      assertEquals((-0.6475503945119889), lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-0.6475503945119889), lineFunction2D0.getSlope(), 0.01);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1711.7, Double.NaN, 1.0, 90.0, 2872.0529);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[9];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-494.9), 1.0, (-494.9), 2872.0529, (-1.7976931348623157E308));
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      oHLCDataItemArray0[7] = oHLCDataItem0;
      oHLCDataItemArray0[8] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(9, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertNotNull(number0);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1.0, number0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D((-0.6475503945119889), (-0.6475503945119889));
      assertNotNull(lineFunction2D0);
      assertEquals((-0.6475503945119889), lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-0.6475503945119889), lineFunction2D0.getSlope(), 0.01);
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(83);
      assertNotNull(spreadsheetDate0);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(23, spreadsheetDate0.getDayOfMonth());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(83, spreadsheetDate0.toSerial());
      assertEquals(3, spreadsheetDate0.getMonth());
      
      Date date0 = spreadsheetDate0.toDate();
      assertNotNull(date0);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(23, spreadsheetDate0.getDayOfMonth());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(83, spreadsheetDate0.toSerial());
      assertEquals(3, spreadsheetDate0.getMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, 3, 4, 83, spreadsheetDate0);
      assertNotNull(xYSeries0);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-0.6475503945119889), lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-0.6475503945119889), lineFunction2D0.getSlope(), 0.01);
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(23, spreadsheetDate0.getDayOfMonth());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(83, spreadsheetDate0.toSerial());
      assertEquals(3, spreadsheetDate0.getMonth());
      assertEquals(3.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(4.0, xYSeries0.getMaxX(), 0.01);
      assertEquals((-3.237751972559945), xYSeries0.getMinY(), 0.01);
      assertEquals((-2.5902015780479557), xYSeries0.getMaxY(), 0.01);
      assertEquals(83, xYSeries0.getItemCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 83, 4);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(83, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(4, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (double) (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Short short0 = new Short((short) (-1324));
      assertNotNull(short0);
      assertEquals((short) (-1324), (short)short0);
      
      Short short1 = Short.valueOf((short) (-1324));
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-1324), (short)short1);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((short) (-1324)));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Short short2 = new Short((short) (-1324));
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertEquals((short) (-1324), (short)short2);
      
      boolean boolean0 = arrayList0.add(short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertTrue(arrayList0.contains((short) (-1324)));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      Short short3 = new Short((short)1311);
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertEquals((short)1311, (short)short3);
      
      boolean boolean1 = arrayList0.add((Short) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList0.contains(short3));
      assertTrue(arrayList0.contains((short) (-1324)));
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(boolean1);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) arrayList0, (Comparable) short1, (Comparable) short3);
      assertTrue(short1.equals((Object)short2));
      assertTrue(short1.equals((Object)short0));
      assertFalse(short1.equals((Object)short3));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertFalse(arrayList0.contains(short3));
      assertTrue(arrayList0.contains((short) (-1324)));
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMaxRegularValue((Comparable) short2, (Comparable) short3);
      assertNotNull(number0);
      assertTrue(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short3));
      assertTrue(short2.equals((Object)short0));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertEquals((-1324.0), number0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Short short0 = new Short((short)1);
      assertNotNull(short0);
      assertEquals((short)1, (short)short0);
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      Short short1 = new Short((short) (-1));
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short) (-1), (short)short1);
      
      boolean boolean1 = arrayList0.add(short1);
      assertFalse(short1.equals((Object)short0));
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayList0.contains((short) (-1)));
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(boolean1);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) arrayList0, (Comparable) short1, (Comparable) short1);
      assertFalse(short1.equals((Object)short0));
      assertTrue(arrayList0.contains((short) (-1)));
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMaxRegularValue((Comparable) short1, (Comparable) short1);
      assertNotNull(number0);
      assertFalse(short1.equals((Object)short0));
      assertEquals(1.0, number0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "org.jfree.data.general.WaferMapDataset";
      Number[][] numberArray0 = new Number[3][4];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = (Number) null;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      numberArray2[1] = (Number) integer0;
      numberArray2[1] = (Number) null;
      numberArray2[2] = (Number) null;
      numberArray2[3] = (Number) null;
      numberArray0[1] = numberArray2;
      numberArray0[2] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, stringArray0.length);
      assertEquals(3, numberArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, stringArray0.length);
      assertEquals(3, numberArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[][] doubleArray0 = new double[6][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 2146474017);
      assertNotNull(categoryToPieDataset0);
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2146474017, categoryToPieDataset0.getExtractIndex());
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      defaultPieDataset0.setValue((Comparable) "{qZ9~w\"~h6", (-530.74823));
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "{qZ9~w\"~h6", (KeyedValues) defaultPieDataset0);
      assertNotNull(categoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add(1998.7234555, (-3092.972087640647), "D");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals((-3092.972087640647), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1.5882311655436592), (-1.5882311655436592));
      assertNotNull(lineFunction2D0);
      assertEquals((-1.5882311655436592), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-1.5882311655436592), lineFunction2D0.getIntercept(), 0.01);
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(88);
      assertNotNull(spreadsheetDate0);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(28, spreadsheetDate0.getDayOfMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(88, spreadsheetDate0.toSerial());
      assertEquals(3, spreadsheetDate0.getMonth());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      
      Comparable<DefaultStatisticalCategoryDataset>[] comparableArray0 = (Comparable<DefaultStatisticalCategoryDataset>[]) Array.newInstance(Comparable.class, 9);
      comparableArray0[0] = (Comparable<DefaultStatisticalCategoryDataset>) spreadsheetDate0;
      comparableArray0[1] = (Comparable<DefaultStatisticalCategoryDataset>) spreadsheetDate0;
      comparableArray0[2] = (Comparable<DefaultStatisticalCategoryDataset>) spreadsheetDate0;
      comparableArray0[3] = (Comparable<DefaultStatisticalCategoryDataset>) spreadsheetDate0;
      comparableArray0[4] = (Comparable<DefaultStatisticalCategoryDataset>) spreadsheetDate0;
      comparableArray0[5] = (Comparable<DefaultStatisticalCategoryDataset>) spreadsheetDate0;
      comparableArray0[6] = (Comparable<DefaultStatisticalCategoryDataset>) spreadsheetDate0;
      comparableArray0[7] = (Comparable<DefaultStatisticalCategoryDataset>) spreadsheetDate0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(comparableArray0, comparableArray0, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, comparableArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[][] doubleArray0 = new double[18][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(18, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(18, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(18, doubleArray0.length);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      short short0 = (short)60;
      Short short1 = new Short((short)60);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)60, (short)short1);
      
      boolean boolean0 = arrayList0.add(short1);
      assertTrue(short1.equals((Object)short0));
      assertTrue(arrayList0.contains(short1));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add(1.0, 3.4534073287E13, (Comparable) short1, (Comparable) short1);
      assertTrue(short1.equals((Object)short0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Short short0 = new Short((short) (-3622));
      assertNotNull(short0);
      assertEquals((short) (-3622), (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(short0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      Short short1 = new Short((short) (-3622));
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-3622), (short)short1);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[13];
      doubleArray0[7] = (double) (short) (-3622);
      doubleArray0[1] = (double) (short) (-3622);
      doubleArray0[3] = (double) (short) (-3622);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(dateArray0[0], dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(13, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotNull(range0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(13, doubleArray0.length);
      
      Range range1 = Range.combine(range0, range0);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(1, dateArray0.length);
      assertEquals(13, doubleArray0.length);
      
      Number[][] numberArray0 = new Number[3][2];
      Number[] numberArray1 = new Number[3];
      numberArray1[0] = (Number) (-3622.0);
      numberArray1[1] = (Number) short1;
      numberArray1[2] = (Number) (-3622.0);
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[3];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) short1;
      numberArray2[1] = (Number) (-3622.0);
      numberArray2[2] = (Number) short0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[6];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) (-3622.0);
      numberArray3[1] = (Number) (-3622.0);
      numberArray3[2] = (Number) (-3622.0);
      numberArray3[3] = (Number) short1;
      numberArray3[4] = (Number) (-3622.0);
      numberArray3[5] = (Number) short0;
      numberArray0[2] = numberArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Negative 'w' argument.", "Negative 'w' argument.", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, numberArray0.length);
      
      Range range2 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-3622.0), range2.getCentralValue(), 0.01);
      assertEquals((-3622.0), range2.getLowerBound(), 0.01);
      assertEquals((-3622.0), range2.getUpperBound(), 0.01);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(3, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Short short0 = new Short((short) (-3622));
      assertNotNull(short0);
      assertEquals((short) (-3622), (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(short0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains(short0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      Short short1 = new Short((short) (-3622));
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-3622), (short)short1);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[13];
      doubleArray0[7] = (double) (short) (-3622);
      doubleArray0[1] = (double) (short) (-3622);
      doubleArray0[3] = (double) (short) (-3622);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(dateArray0[0], dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(13, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotNull(range0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(13, doubleArray0.length);
      
      mockDate0.setTime((-505L));
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      
      Range range1 = Range.combine(range0, range0);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(1, dateArray0.length);
      assertEquals(13, doubleArray0.length);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) arrayList0, range1, true);
      assertNull(range2);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertTrue(arrayList0.contains((short) (-3622)));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(1, dateArray0.length);
      assertEquals(13, doubleArray0.length);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      assertNull(range3);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add((Short) null);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Duplicate items in 'rowKeys'.";
      stringArray0[1] = "org.jfree.data.general.WaferMapDataset";
      stringArray0[2] = "";
      Number[][] numberArray0 = new Number[3][4];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = (Number) null;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      numberArray2[0] = (Number) integer0;
      numberArray2[1] = (Number) null;
      numberArray2[2] = (Number) null;
      numberArray2[3] = (Number) null;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[6];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray3[0] = (Number) null;
      numberArray3[1] = (Number) integer0;
      numberArray3[2] = (Number) integer0;
      numberArray3[3] = (Number) null;
      numberArray3[4] = (Number) null;
      numberArray3[5] = (Number) integer0;
      numberArray0[2] = numberArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, stringArray0.length);
      assertEquals(3, numberArray0.length);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, stringArray0.length);
      assertEquals(3, numberArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(4838.595885845049, 4838.595885845049, "D");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(4838.595885845049, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(short0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains(short0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((double) (short)0, (double) (short)0, (Comparable) short0, (Comparable) short0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      assertNotNull(range0);
      assertTrue(arrayList0.contains(short0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Short short0 = new Short((short) (-3622));
      assertNotNull(short0);
      assertEquals((short) (-3622), (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((short) (-3622)));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains((short) (-3622)));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      Short short1 = new Short((short) (-3622));
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-3622), (short)short1);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short) (-3622);
      doubleArray0[1] = (double) (short) (-3622);
      doubleArray0[3] = (double) (short) (-3622);
      doubleArray0[2] = (double) (short) (-3622);
      doubleArray0[6] = (double) (short) (-3622);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(short0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {(-3622.0), (-3622.0), (-3622.0), (-3622.0), 0.0, 0.0, (-3622.0), 0.0}, doubleArray0, 0.01);
      assertTrue(short0.equals((Object)short1));
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotNull(range0);
      assertArrayEquals(new double[] {(-3622.0), (-3622.0), (-3622.0), (-3622.0), 0.0, 0.0, (-3622.0), 0.0}, doubleArray0, 0.01);
      assertTrue(short0.equals((Object)short1));
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) arrayList0, range0, false);
      assertNotNull(range1);
      assertArrayEquals(new double[] {(-3622.0), (-3622.0), (-3622.0), (-3622.0), 0.0, 0.0, (-3622.0), 0.0}, doubleArray0, 0.01);
      assertFalse(range1.equals((Object)range0));
      assertTrue(short0.equals((Object)short1));
      assertTrue(arrayList0.contains((short) (-3622)));
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-3622.0), range1.getLowerBound(), 0.01);
      assertEquals((-3622.0), range1.getUpperBound(), 0.01);
      assertEquals((-3622.0), range1.getCentralValue(), 0.01);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertNotSame(range0, range1);
      assertEquals(1, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, (int) (short) (-3622));
      assertNotNull(pieDataset0);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, false);
      assertNull(range2);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultHighLowDataset0);
      assertNotNull(intervalXYDelegate0);
      assertArrayEquals(new double[] {(-3622.0), (-3622.0), (-3622.0), (-3622.0), 0.0, 0.0, (-3622.0), 0.0}, doubleArray0, 0.01);
      assertTrue(short0.equals((Object)short1));
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      
      Range range3 = intervalXYDelegate0.getDomainBounds(false);
      assertNotNull(range3);
      assertArrayEquals(new double[] {(-3622.0), (-3622.0), (-3622.0), (-3622.0), 0.0, 0.0, (-3622.0), 0.0}, doubleArray0, 0.01);
      assertTrue(short0.equals((Object)short1));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range0));
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.39240928132E12, range3.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(1.39240928132E12, range3.getUpperBound(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertEquals(1, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      
      Range range4 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) arrayList0, range3, false);
      assertNotNull(range4);
      assertArrayEquals(new double[] {(-3622.0), (-3622.0), (-3622.0), (-3622.0), 0.0, 0.0, (-3622.0), 0.0}, doubleArray0, 0.01);
      assertTrue(short0.equals((Object)short1));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range3));
      assertTrue(arrayList0.contains((short) (-3622)));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.39240928132E12, range3.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(1.39240928132E12, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals((-3622.0), range4.getUpperBound(), 0.01);
      assertEquals((-3622.0), range4.getCentralValue(), 0.01);
      assertEquals((-3622.0), range4.getLowerBound(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotSame(range3, range1);
      assertNotSame(range3, range4);
      assertNotSame(range3, range0);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertNotSame(range4, range3);
      assertEquals(1, dateArray0.length);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(17);
      assertNotNull(spreadsheetDate0);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(3, spreadsheetDate0.getDayOfWeek());
      assertEquals(16, spreadsheetDate0.getDayOfMonth());
      assertEquals(17, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getMonth());
      
      SerialDate serialDate0 = SerialDate.addYears(17, spreadsheetDate0);
      assertNotNull(serialDate0);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertFalse(serialDate0.equals((Object)spreadsheetDate0));
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(3, spreadsheetDate0.getDayOfWeek());
      assertEquals(16, spreadsheetDate0.getDayOfMonth());
      assertEquals(17, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(16, serialDate0.getDayOfMonth());
      assertEquals(1, serialDate0.getMonth());
      assertEquals(6226, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals(3, serialDate0.getDayOfWeek());
      assertEquals(1917, serialDate0.getYYYY());
      assertNotSame(spreadsheetDate0, serialDate0);
      assertNotSame(serialDate0, spreadsheetDate0);
      
      Date date0 = serialDate0.toDate();
      assertNotNull(date0);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertFalse(spreadsheetDate0.equals((Object)serialDate0));
      assertFalse(serialDate0.equals((Object)spreadsheetDate0));
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(3, spreadsheetDate0.getDayOfWeek());
      assertEquals(16, spreadsheetDate0.getDayOfMonth());
      assertEquals(17, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(16, serialDate0.getDayOfMonth());
      assertEquals(1, serialDate0.getMonth());
      assertEquals(6226, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals(3, serialDate0.getDayOfWeek());
      assertEquals(1917, serialDate0.getYYYY());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotSame(spreadsheetDate0, serialDate0);
      assertNotSame(serialDate0, spreadsheetDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Month month0 = new Month(date0, timeZone0);
      assertNotNull(month0);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertFalse(spreadsheetDate0.equals((Object)serialDate0));
      assertFalse(serialDate0.equals((Object)spreadsheetDate0));
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(3, spreadsheetDate0.getDayOfWeek());
      assertEquals(16, spreadsheetDate0.getDayOfMonth());
      assertEquals(17, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(16, serialDate0.getDayOfMonth());
      assertEquals(1, serialDate0.getMonth());
      assertEquals(6226, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals(3, serialDate0.getDayOfWeek());
      assertEquals(1917, serialDate0.getYYYY());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(month0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertFalse(spreadsheetDate0.equals((Object)serialDate0));
      assertFalse(serialDate0.equals((Object)spreadsheetDate0));
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(3, spreadsheetDate0.getDayOfWeek());
      assertEquals(16, spreadsheetDate0.getDayOfMonth());
      assertEquals(17, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(16, serialDate0.getDayOfMonth());
      assertEquals(1, serialDate0.getMonth());
      assertEquals(6226, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals(3, serialDate0.getDayOfWeek());
      assertEquals(1917, serialDate0.getYYYY());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      Range range0 = new Range((-599.454985868001), (-292.570403324859));
      assertNotNull(range0);
      assertEquals(306.884582543142, range0.getLength(), 0.01);
      assertEquals((-292.570403324859), range0.getUpperBound(), 0.01);
      assertEquals((-446.01269459643004), range0.getCentralValue(), 0.01);
      assertEquals((-599.454985868001), range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, range0, true);
      assertNull(range1);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertFalse(spreadsheetDate0.equals((Object)serialDate0));
      assertFalse(serialDate0.equals((Object)spreadsheetDate0));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(3, spreadsheetDate0.getDayOfWeek());
      assertEquals(16, spreadsheetDate0.getDayOfMonth());
      assertEquals(17, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(16, serialDate0.getDayOfMonth());
      assertEquals(1, serialDate0.getMonth());
      assertEquals(6226, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals(3, serialDate0.getDayOfWeek());
      assertEquals(1917, serialDate0.getYYYY());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(306.884582543142, range0.getLength(), 0.01);
      assertEquals((-292.570403324859), range0.getUpperBound(), 0.01);
      assertEquals((-446.01269459643004), range0.getCentralValue(), 0.01);
      assertEquals((-599.454985868001), range0.getLowerBound(), 0.01);
      assertNotSame(spreadsheetDate0, serialDate0);
      assertNotSame(serialDate0, spreadsheetDate0);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, range0, true);
      assertNull(range2);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertFalse(spreadsheetDate0.equals((Object)serialDate0));
      assertFalse(serialDate0.equals((Object)spreadsheetDate0));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(3, spreadsheetDate0.getDayOfWeek());
      assertEquals(16, spreadsheetDate0.getDayOfMonth());
      assertEquals(17, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(16, serialDate0.getDayOfMonth());
      assertEquals(1, serialDate0.getMonth());
      assertEquals(6226, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals(3, serialDate0.getDayOfWeek());
      assertEquals(1917, serialDate0.getYYYY());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(306.884582543142, range0.getLength(), 0.01);
      assertEquals((-292.570403324859), range0.getUpperBound(), 0.01);
      assertEquals((-446.01269459643004), range0.getCentralValue(), 0.01);
      assertEquals((-599.454985868001), range0.getLowerBound(), 0.01);
      assertNotSame(spreadsheetDate0, serialDate0);
      assertNotSame(serialDate0, spreadsheetDate0);
      
      Number[][] numberArray0 = new Number[7][2];
      Number[] numberArray1 = new Number[5];
      numberArray1[0] = (Number) 6;
      numberArray1[1] = (Number) 0;
      numberArray1[2] = (Number) 2;
      numberArray1[3] = (Number) 6;
      numberArray1[4] = (Number) 1;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[6];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) (-1);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertNotNull(decimalFormat0);
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      
      ParsePosition parsePosition0 = new ParsePosition(5);
      assertNotNull(parsePosition0);
      assertEquals("java.text.ParsePosition[index=5,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(5, parsePosition0.getIndex());
      
      Number number0 = decimalFormat0.parse("", parsePosition0);
      assertNull(number0);
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(5, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=5,errorIndex=5]", parsePosition0.toString());
      assertEquals(5, parsePosition0.getErrorIndex());
      
      numberArray2[1] = null;
      numberArray2[2] = (Number) 4;
      numberArray2[3] = (Number) 2;
      numberArray2[4] = (Number) 9999;
      numberArray2[5] = (Number) 3;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[0];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[9];
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray3));
      
      numberArray4[0] = null;
      numberArray4[1] = (Number) 6;
      numberArray4[2] = (Number) 1900;
      numberArray4[3] = (Number) 1;
      numberArray4[4] = (Number) 9999;
      numberArray4[5] = (Number) 0;
      numberArray4[6] = (Number) 2;
      numberArray4[7] = (Number) 0;
      numberArray4[8] = (Number) 6;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[4];
      assertFalse(numberArray5.equals((Object)numberArray4));
      assertFalse(numberArray5.equals((Object)numberArray3));
      assertFalse(numberArray5.equals((Object)numberArray1));
      assertFalse(numberArray5.equals((Object)numberArray2));
      
      numberArray5[0] = (Number) 4;
      numberArray5[1] = (Number) 3;
      numberArray5[2] = (Number) 2958465;
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      numberArray5[3] = (Number) integer0;
      numberArray0[4] = numberArray5;
      Number[] numberArray6 = new Number[2];
      assertFalse(numberArray6.equals((Object)numberArray3));
      assertFalse(numberArray6.equals((Object)numberArray5));
      assertFalse(numberArray6.equals((Object)numberArray2));
      assertFalse(numberArray6.equals((Object)numberArray4));
      assertFalse(numberArray6.equals((Object)numberArray1));
      
      numberArray6[0] = (Number) 1900;
      numberArray6[1] = (Number) 3;
      numberArray0[5] = numberArray6;
      Number[] numberArray7 = new Number[1];
      assertFalse(numberArray7.equals((Object)numberArray4));
      assertFalse(numberArray7.equals((Object)numberArray5));
      assertFalse(numberArray7.equals((Object)numberArray6));
      assertFalse(numberArray7.equals((Object)numberArray1));
      assertFalse(numberArray7.equals((Object)numberArray2));
      assertFalse(numberArray7.equals((Object)numberArray3));
      
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(400, (int)integer1);
      
      numberArray7[0] = (Number) integer1;
      numberArray0[6] = numberArray7;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("<jf(\"VG]", "Null 'xRange' argument", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(7, numberArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 3);
      assertNotNull(pieDataset0);
      assertEquals(7, numberArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertEquals(7, numberArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Short short0 = new Short((short)12);
      assertNotNull(short0);
      assertEquals((short)12, (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(short0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      defaultStatisticalCategoryDataset0.add((double) (short)12, (double) (short)12, (Comparable) short0, (Comparable) short0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, (short)12, (short)12);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(12, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(12, slidingCategoryDataset0.getFirstCategoryIndex());
      
      Random.setNextRandom((short)12);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      List list0 = defaultStatisticalCategoryDataset0.getColumnKeys();
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(jDBCXYDataset0);
      assertNull(number0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) short0);
      assertNotNull(pieDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0);
      assertNull(range0);
      assertEquals(12, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(12, slidingCategoryDataset0.getFirstCategoryIndex());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 66);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, double0, 0.01);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("Can't evaluate the month.", 78, 66);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(66, matrixSeries0.getColumnsCount());
      assertEquals(5148, matrixSeries0.getItemCount());
      assertEquals(78, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      
      SynthToggleButtonUI synthToggleButtonUI0 = new SynthToggleButtonUI();
      assertNotNull(synthToggleButtonUI0);
      
      matrixSeries0.addPropertyChangeListener(synthToggleButtonUI0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(66, matrixSeries0.getColumnsCount());
      assertEquals(5148, matrixSeries0.getItemCount());
      assertEquals(78, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(66, matrixSeries0.getColumnsCount());
      assertEquals(5148, matrixSeries0.getItemCount());
      assertEquals(78, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNotNull(number0);
      assertTrue(number0.equals((Object)double0));
      assertTrue(matrixSeries0.getNotify());
      assertEquals(66, matrixSeries0.getColumnsCount());
      assertEquals(5148, matrixSeries0.getItemCount());
      assertEquals(78, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Short short0 = new Short((short)1);
      assertNotNull(short0);
      assertEquals((short)1, (short)short0);
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains((short)1));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      defaultStatisticalCategoryDataset0.add((double) (short)1, 2.694700511038959, (Comparable) short0, (Comparable) short0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      defaultBoxAndWhiskerCategoryDataset0.validateObject();
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertNotNull(range0);
      assertTrue(arrayList0.contains((short)1));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(5.389401022077918, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(3.694700511038959, range0.getUpperBound(), 0.01);
      assertEquals((-1.6947005110389588), range0.getLowerBound(), 0.01);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Short short0 = new Short((short)3);
      assertNotNull(short0);
      assertEquals((short)3, (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(short0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains(short0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      Short short1 = new Short((short)3);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)3, (short)short1);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)3;
      doubleArray0[1] = (double) (short)3;
      doubleArray0[3] = (double) (short)3;
      doubleArray0[2] = (double) (short)3;
      doubleArray0[6] = (double) (short)3;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(short0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {3.0, 3.0, 3.0, 3.0, 0.0, 0.0, 3.0, 0.0}, doubleArray0, 0.01);
      assertTrue(short0.equals((Object)short1));
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotNull(range0);
      assertArrayEquals(new double[] {3.0, 3.0, 3.0, 3.0, 0.0, 0.0, 3.0, 0.0}, doubleArray0, 0.01);
      assertTrue(short0.equals((Object)short1));
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      
      Range range1 = Range.combine(range0, range0);
      assertNotNull(range1);
      assertArrayEquals(new double[] {3.0, 3.0, 3.0, 3.0, 0.0, 0.0, 3.0, 0.0}, doubleArray0, 0.01);
      assertTrue(range1.equals((Object)range0));
      assertTrue(short0.equals((Object)short1));
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertNotSame(range0, range1);
      assertEquals(1, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection((short)3, (short)3);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) arrayList0, range0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[][] doubleArray0 = new double[5][9];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 2194.0;
      doubleArray1[1] = (-2002.0);
      doubleArray1[2] = 4505.860000000001;
      doubleArray1[3] = (-2530.778);
      doubleArray1[4] = 1301.7244638544;
      doubleArray1[5] = 2042.5811198092;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 4505.860000000001;
      doubleArray2[1] = 2194.0;
      doubleArray2[2] = 2194.0;
      doubleArray2[3] = 1301.7244638544;
      doubleArray2[4] = (-2002.0);
      doubleArray2[5] = 2194.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 2194.0;
      doubleArray4[1] = 2194.0;
      doubleArray4[2] = 2042.5811198092;
      doubleArray4[3] = 730.51661;
      doubleArray4[4] = 1301.7244638544;
      doubleArray4[5] = (-2002.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = (-1323.0);
      doubleArray5[1] = (-2002.0);
      doubleArray5[2] = 1301.7244638544;
      doubleArray5[3] = 730.51661;
      doubleArray5[4] = 4505.860000000001;
      doubleArray5[5] = 730.51661;
      doubleArray5[6] = (-2530.778);
      doubleArray5[7] = 2194.0;
      doubleArray5[8] = 2042.5811198092;
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Short short0 = new Short((short) (-1324));
      assertNotNull(short0);
      assertEquals((short) (-1324), (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(short0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      defaultMultiValueCategoryDataset0.add(stack0, short0, short0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, false);
      assertNull(range0);
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Short short0 = Short.valueOf((short)15);
      assertNotNull(short0);
      assertEquals((short)15, (short)short0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate((short)15, (short)15, (short)15, (short)15, (short)15);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (short)15, (short)15, (short)15, (short)15, (short)15);
      assertNotNull(oHLCDataItem0);
      assertEquals("Sat Apr 15 15:15:00 GMT 1916", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(short0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      DomainOrder domainOrder0 = defaultOHLCDataset0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertNotNull(number0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(15.0, number0);
      
      Double double0 = new Double((short)15);
      assertNotNull(double0);
      assertEquals((double)double0, (double)number0, 0.01);
      assertEquals(15.0, (double)double0, 0.01);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, (short)15, 73);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(15, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(73, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range range0 = new Range(4042.5816, 4042.5816);
      assertNotNull(range0);
      assertEquals(4042.5816, range0.getLowerBound(), 0.01);
      assertEquals(4042.5816, range0.getUpperBound(), 0.01);
      assertEquals(4042.5816, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[10];
      doubleArray1[0] = 4042.5816;
      doubleArray1[1] = 4042.5816;
      doubleArray1[2] = 4042.5816;
      doubleArray1[3] = 4042.5816;
      doubleArray1[4] = 4042.5816;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 4042.5816;
      doubleArray2[1] = 4042.5816;
      doubleArray1[2] = 4042.5816;
      doubleArray1[3] = 4042.5816;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 4042.5816;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Short short0 = new Short((short)2363);
      assertNotNull(short0);
      assertEquals((short)2363, (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((short)2363));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains((short)2363));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.remove((double) (short)163, "org.jfee.da!a.gantt.T7skSeriesColection");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(3.0, (double) (short)2363, "Overlapping bin");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) histogramDataset0, (List) arrayList0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Short short0 = Short.valueOf((short)13);
      assertNotNull(short0);
      assertEquals((short)13, (short)short0);
      
      ArrayList<Short> arrayList1 = new ArrayList<Short>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertFalse(arrayList1.contains(short0));
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      boolean boolean0 = arrayList0.add(short0);
      assertFalse(arrayList0.equals((Object)arrayList1));
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNotSame(arrayList0, arrayList1);
      assertTrue(boolean0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((-1.0), (-1.0), (Comparable) short0, (Comparable) short0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList1, true);
      assertNull(range0);
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertFalse(arrayList1.contains(short0));
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotSame(arrayList1, arrayList0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, false);
      assertNotNull(range1);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Short short0 = Short.valueOf((short)13);
      assertNotNull(short0);
      assertEquals((short)13, (short)short0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate((short)13, (short)13, (short)13, (-417), (short)13);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (short)13, (short)13, (short)13, (short)13, (short)13);
      assertNotNull(oHLCDataItem0);
      assertEquals("Mon Jan 26 15:13:00 GMT 1914", mockDate0.toString());
      
      mockDate0.setTime((short)13);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(short0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) (-417);
      doubleArray1[1] = 4690.222872;
      doubleArray1[2] = (double) (short)13;
      doubleArray1[3] = 4690.222872;
      doubleArray1[4] = (double) (short)13;
      doubleArray1[5] = 4690.222872;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 4690.222872;
      doubleArray2[1] = 4690.222872;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      String string0 = "Default Group";
      categoryTableXYDataset0.add(110.23995, 110.23995, "Default Group");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(114.1604496191, 114.1604496191, "S*A]bD");
      assertEquals(3.9204996191000134, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, false);
      assertNotNull(range0);
      assertEquals(3.9204996191000134, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(110.23995, range0.getLowerBound(), 0.01);
      assertEquals(3.9204996191000134, range0.getLength(), 0.01);
      assertEquals(112.20019980955, range0.getCentralValue(), 0.01);
      assertEquals(114.1604496191, range0.getUpperBound(), 0.01);
      
      String string1 = "";
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset("Default Group", "", "S*A]bD", "");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[][] doubleArray0 = new double[6][8];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-3176.4);
      doubleArray1[1] = 2383.237495;
      doubleArray1[2] = 0.8;
      doubleArray1[3] = 1896.2;
      doubleArray1[4] = (-871.8382068561);
      doubleArray1[5] = (-121.28);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-3176.4);
      doubleArray2[1] = 0.8;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-3176.4);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (-121.28);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = (-121.28);
      doubleArray5[1] = 902.36056439627;
      doubleArray5[2] = 1896.2;
      doubleArray5[3] = 0.8;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      
      doubleArray6[0] = 902.36056439627;
      doubleArray6[1] = (-871.8382068561);
      doubleArray6[2] = 2088.87735258097;
      doubleArray6[3] = 0.8;
      doubleArray6[4] = (-3176.4);
      doubleArray0[5] = doubleArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Short short0 = new Short((short) (-1324));
      assertNotNull(short0);
      assertEquals((short) (-1324), (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((short) (-1324)));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains((short) (-1324)));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((double) (short) (-1324), (double) (short) (-1324), (Comparable) short0, (Comparable) short0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      assertNotNull(range0);
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals((-1324.0), range0.getUpperBound(), 0.01);
      assertEquals((-1324.0), range0.getCentralValue(), 0.01);
      assertEquals((-1324.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertEquals((-1324.0), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1324.0), range1.getUpperBound(), 0.01);
      assertEquals((-1324.0), range1.getCentralValue(), 0.01);
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Short short0 = Short.valueOf((short)13);
      assertNotNull(short0);
      assertEquals((short)13, (short)short0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate((short)13, (short)13, (short)13, (-417), (short)13);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (short)13, (short)13, (short)13, (short)13, (short)13);
      assertNotNull(oHLCDataItem0);
      assertEquals("Mon Jan 26 15:13:00 GMT 1914", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(short0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add(4690.222872, (-398.79), "\"!@a R");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, true);
      assertNull(range0);
      assertFalse(arrayList0.contains(short0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, (-417));
      assertNotNull(pieDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) oHLCDataItem0, (KeyedValues) pieDataset0);
      assertNotNull(categoryDataset0);
      assertEquals("Mon Jan 26 15:13:00 GMT 1914", mockDate0.toString());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertNotNull(number0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals((-1.76501082E12), number0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Short short0 = new Short((short)60);
      assertNotNull(short0);
      assertEquals((short)60, (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(short0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Short short1 = new Short((short)60);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)60, (short)short1);
      
      boolean boolean1 = arrayList0.add(short1);
      assertTrue(short1.equals((Object)short0));
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(boolean1);
      
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset1.add(0.0, (double) (short)60, "N6eK-o\"3M");
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset1, arrayList0, false);
      assertNotNull(range0);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      
      Range range1 = categoryTableXYDataset1.getDomainBounds(false);
      assertNotNull(range1);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertTrue(range1.equals((Object)range0));
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertNotSame(range1, range0);
      
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset("tGK'O`?>b/7]?#x@", "N6eK-o\"3M", "org.jre.da!a.gast.T7skSeriesCll]ction", "N6eK-o\"3M");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Short short0 = new Short((short)2);
      assertNotNull(short0);
      assertEquals((short)2, (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(short0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add(Double.NaN, (double) (short)2, (Comparable) short0, (Comparable) short0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertNull(range0);
      assertTrue(arrayList0.contains((short)2));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(defaultStatisticalCategoryDataset0);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertTrue(boolean0);
      
      double[][] doubleArray0 = new double[5][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 2192.471609;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = 2247.187500644;
      doubleArray1[4] = (-1.0);
      doubleArray1[5] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.0;
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = 1.0;
      doubleArray2[3] = Double.NaN;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = 2247.187500644;
      doubleArray3[2] = 2247.187500644;
      doubleArray3[3] = Double.NaN;
      doubleArray3[4] = 2192.471609;
      doubleArray3[5] = Double.NaN;
      doubleArray3[6] = 1.0;
      doubleArray3[7] = 1.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = Double.POSITIVE_INFINITY;
      doubleArray4[1] = 2192.471609;
      doubleArray4[2] = 2247.187500644;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = (-1.0);
      doubleArray5[1] = Double.NaN;
      doubleArray0[4] = doubleArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("g809_a/]jC", "g809_a/]jC", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(5, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[4];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      double[] doubleArray0 = new double[2];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("_mtq#k(E", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(4, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      
      defaultHighLowDataset0.clearSelection();
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(4, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Short short0 = new Short((short) (-3622));
      assertNotNull(short0);
      assertEquals((short) (-3622), (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(short0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      Short short1 = new Short((short) (-3622));
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-3622), (short)short1);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) (short) (-3622);
      doubleArray0[3] = (double) (short) (-3622);
      doubleArray0[2] = (double) (short) (-3622);
      doubleArray0[6] = (double) (short) (-3622);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(short0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {0.0, (-3622.0), (-3622.0), (-3622.0), 0.0, 0.0, (-3622.0)}, doubleArray0, 0.01);
      assertTrue(short0.equals((Object)short1));
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotNull(range0);
      assertArrayEquals(new double[] {0.0, (-3622.0), (-3622.0), (-3622.0), 0.0, 0.0, (-3622.0)}, doubleArray0, 0.01);
      assertTrue(short0.equals((Object)short1));
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) arrayList0, range0, true);
      assertNotNull(range1);
      assertArrayEquals(new double[] {0.0, (-3622.0), (-3622.0), (-3622.0), 0.0, 0.0, (-3622.0)}, doubleArray0, 0.01);
      assertFalse(range1.equals((Object)range0));
      assertTrue(short0.equals((Object)short1));
      assertTrue(arrayList0.contains((short) (-3622)));
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertNotSame(range0, range1);
      assertEquals(1, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotNull(range2);
      assertArrayEquals(new double[] {0.0, (-3622.0), (-3622.0), (-3622.0), 0.0, 0.0, (-3622.0)}, doubleArray0, 0.01);
      assertTrue(short0.equals((Object)short1));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertEquals(1.39240928132E12, range2.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1.39240928132E12, range2.getLowerBound(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals(1, dateArray0.length);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Short short0 = new Short((short)67);
      assertNotNull(short0);
      assertEquals((short)67, (short)short0);
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains((short)67));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      Short short1 = new Short((short)67);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)67, (short)short1);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotNull(range0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(dateArray0[0]);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, dateArray0.length);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) arrayList0, range0, true);
      assertNull(range1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(arrayList0.contains((short)67));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, false);
      assertNull(range2);
      assertTrue(arrayList0.contains((short)67));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Short short0 = Short.valueOf((short)13);
      assertNotNull(short0);
      assertEquals((short)13, (short)short0);
      
      MockDate mockDate0 = new MockDate(1359, 0, 1359, 1359, 1);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1926.0), (-226.0), 1, (-1926.0), 300.2767239341981);
      assertNotNull(oHLCDataItem0);
      assertEquals("Wed Nov 15 15:01:00 GMT 3262", mockDate0.toString());
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, (OHLCDataItem[]) null);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Wed Nov 15 15:01:00 GMT 3262", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      double[][] doubleArray0 = new double[5][0];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1900.0;
      doubleArray1[1] = 3165.0;
      doubleArray1[2] = (-3540.39272);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-3540.39272);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-3540.39272);
      doubleArray3[1] = 3165.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 3165.0;
      doubleArray4[1] = 1900.0;
      doubleArray4[2] = (-3540.39272);
      doubleArray4[3] = (-3540.39272);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = (-3540.39272);
      doubleArray5[1] = (-3540.39272);
      doubleArray0[4] = doubleArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'rowKey' argument.", "Null 'rowKey' argument.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(5, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      assertNull(number0);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals(6705.39272, range0.getLength(), 0.01);
      assertEquals((-187.6963599999999), range0.getCentralValue(), 0.01);
      assertEquals(3165.0, range0.getUpperBound(), 0.01);
      assertEquals((-3540.39272), range0.getLowerBound(), 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[][] doubleArray0 = new double[5][1];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 4879.84058856664;
      doubleArray1[1] = (double) 99;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 4879.84058856664;
      doubleArray2[1] = 4879.84058856664;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 4879.84058856664;
      doubleArray3[1] = 4879.84058856664;
      doubleArray3[2] = (double) 99;
      doubleArray3[3] = (double) 99;
      doubleArray3[4] = (double) 99;
      doubleArray3[5] = (double) 99;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (double) 99;
      doubleArray4[1] = (double) 99;
      doubleArray4[2] = (double) 99;
      doubleArray4[3] = (double) 99;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = 4879.84058856664;
      doubleArray5[1] = (double) 99;
      doubleArray5[2] = (-2.147483648E9);
      doubleArray5[3] = 4879.84058856664;
      doubleArray5[4] = 4879.84058856664;
      doubleArray5[5] = (double) 99;
      doubleArray5[6] = (double) 99;
      doubleArray0[4] = doubleArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("*]@HG+i@lRhF2f>", "R?6_ZRAOPO)EVSPX.ji", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(5, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals((-1.0737393840797057E9), range0.getCentralValue(), 0.01);
      assertEquals((-2.147483648E9), range0.getLowerBound(), 0.01);
      assertEquals(2.1474885278405886E9, range0.getLength(), 0.01);
      assertEquals(4879.84058856664, range0.getUpperBound(), 0.01);
      assertEquals(5, doubleArray0.length);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Short short0 = new Short((short)163);
      assertNotNull(short0);
      assertEquals((short)163, (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(short0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      boolean boolean1 = arrayList0.add(short0);
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(boolean1);
      
      categoryTableXYDataset0.add((double) (short)163, (double) (short)163, "org.jfree.da!a.gantt.T7skSeriesCollection");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, arrayList0, true);
      assertNotNull(range0);
      assertTrue(arrayList0.contains((short)163));
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(162.5, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(163.5, range0.getUpperBound(), 0.01);
      assertEquals(163.0, range0.getCentralValue(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[4];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      double[] doubleArray0 = new double[2];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("_mtq#k(E", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(4, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      
      defaultHighLowDataset0.clearSelection();
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(4, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection((XYSeries) null);
      assertNotNull(xYSeriesCollection0);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      SeriesChangeType seriesChangeType0 = SeriesChangeType.CHANGE_KEY;
      assertNotNull(seriesChangeType0);
      assertEquals("SeriesChangeType.CHANGE_KEY", seriesChangeType0.toString());
      
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo(seriesChangeType0, (-1717986918), (-1717986918));
      assertNotNull(seriesChangeInfo0);
      assertEquals("SeriesChangeType.CHANGE_KEY", seriesChangeType0.toString());
      assertEquals((-1717986918), seriesChangeInfo0.getIndex1());
      assertEquals((-1717986918), seriesChangeInfo0.getIndex2());
      
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(xYSeriesCollection0, seriesChangeInfo0);
      assertNotNull(seriesChangeEvent0);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals("SeriesChangeType.CHANGE_KEY", seriesChangeType0.toString());
      assertEquals((-1717986918), seriesChangeInfo0.getIndex1());
      assertEquals((-1717986918), seriesChangeInfo0.getIndex2());
      
      defaultHighLowDataset0.seriesChanged(seriesChangeEvent0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals("SeriesChangeType.CHANGE_KEY", seriesChangeType0.toString());
      assertEquals((-1717986918), seriesChangeInfo0.getIndex1());
      assertEquals((-1717986918), seriesChangeInfo0.getIndex2());
      assertEquals(4, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
      assertNotNull(number0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(4, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(1.39240928132E12, number0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      Float float0 = new Float(Double.POSITIVE_INFINITY);
      assertNotNull(float0);
      assertEquals(Float.POSITIVE_INFINITY, (float)float0, 0.01F);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(boolean0);
      
      Number[][] numberArray0 = new Number[3][0];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[2];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) float0;
      numberArray2[1] = (Number) null;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[9];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray3[0] = (Number) null;
      numberArray3[1] = (Number) null;
      numberArray3[2] = (Number) null;
      numberArray3[3] = (Number) float0;
      numberArray3[4] = (Number) float0;
      numberArray3[5] = (Number) null;
      numberArray3[6] = (Number) null;
      numberArray3[7] = (Number) null;
      numberArray3[8] = (Number) float0;
      numberArray0[2] = numberArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("H@:)Mqv$h", "m71", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, numberArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-427));
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-427), categoryToPieDataset0.getExtractIndex());
      assertEquals(3, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Float float0 = new Float(1.5);
      assertNotNull(float0);
      assertEquals(1.5F, (float)float0, 0.01F);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) float0, (Number) float0);
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) float0, 1.7976931348623157E308, (-2521));
      assertNotNull(pieDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(1.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-3721.7983804643786);
      doubleArray1[1] = (-824.7744);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-824.7744);
      doubleArray2[1] = (-824.7744);
      doubleArray2[4] = 1518.0592278;
      doubleArray1[0] = 1.3;
      doubleArray2[4] = (-824.7744);
      doubleArray2[5] = (-3721.7983804643786);
      doubleArray2[6] = (-3721.7983804643786);
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals((-411.73720000000003), range0.getCentralValue(), 0.01);
      assertEquals((-824.7744), range0.getLowerBound(), 0.01);
      assertEquals(1.3, range0.getUpperBound(), 0.01);
      assertEquals(826.0744, range0.getLength(), 0.01);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Short short0 = new Short((short)1);
      assertNotNull(short0);
      assertEquals((short)1, (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((short)1));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Short short1 = new Short((short)3308);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)3308, (short)short1);
      
      Short short2 = new Short((short)5795);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertEquals((short)5795, (short)short2);
      
      ArrayList<Short> arrayList1 = new ArrayList<Short>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertFalse(arrayList1.contains((short)1));
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      Short short3 = new Short((short)195);
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertEquals((short)195, (short)short3);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((double) (short)3308, 0.0, (Comparable) short0, (Comparable) short0);
      assertFalse(short0.equals((Object)short2));
      assertFalse(short0.equals((Object)short1));
      assertFalse(short0.equals((Object)short3));
      
      Range range0 = new Range(5.0, 2296.51470464579);
      assertNotNull(range0);
      assertEquals(5.0, range0.getLowerBound(), 0.01);
      assertEquals(1150.757352322895, range0.getCentralValue(), 0.01);
      assertEquals(2291.51470464579, range0.getLength(), 0.01);
      assertEquals(2296.51470464579, range0.getUpperBound(), 0.01);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) short0);
      assertNotNull(pieDataset0);
      assertFalse(short0.equals((Object)short2));
      assertFalse(short0.equals((Object)short1));
      assertFalse(short0.equals((Object)short3));
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) short1, (double) (short)1);
      assertNotNull(pieDataset1);
      assertFalse(short0.equals((Object)short2));
      assertFalse(short0.equals((Object)short1));
      assertFalse(short0.equals((Object)short3));
      assertFalse(short1.equals((Object)short2));
      assertFalse(short1.equals((Object)short0));
      assertFalse(short1.equals((Object)short3));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Short short0 = new Short((short) (-5));
      assertNotNull(short0);
      assertEquals((short) (-5), (short)short0);
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains((short) (-5)));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      
      Short short1 = new Short((short) (-5));
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-5), (short)short1);
      
      boolean boolean1 = arrayList0.add(short1);
      assertTrue(short1.equals((Object)short0));
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayList0.contains((short) (-5)));
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(boolean1);
      
      categoryTableXYDataset0.remove((-550.7228887112229), "org.jfree.data.general.DatasetUtilities");
      assertTrue(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      
      categoryTableXYDataset1.add((double) (short)2143, (double) (short) (-5), "org.jfree.da!a.gantt.T7skSeriesCollection");
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) arrayList0, true);
      assertNull(range0);
      assertFalse(arrayList0.contains((short)2143));
      assertTrue(arrayList0.contains((short) (-5)));
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, false);
      assertNull(range1);
      assertFalse(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertFalse(arrayList0.contains((short)2143));
      assertTrue(arrayList0.contains((short) (-5)));
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal(categoryTableXYDataset1, (-2521));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Short short0 = new Short((short)163);
      assertNotNull(short0);
      assertEquals((short)163, (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((short)163));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add((-226.0), (-226.0), "E*,cmT2N7x'8bgwLK{");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, Double.NaN);
      assertNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[][] doubleArray0 = new double[9][5];
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      short short0 = (short)3993;
      Short short1 = new Short((short)3993);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)3993, (short)short1);
      
      boolean boolean0 = arrayList0.add(short1);
      assertTrue(short1.equals((Object)short0));
      assertTrue(arrayList0.contains((short)3993));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, doubleArray0.length);
      
      SynthToolBarUI synthToolBarUI0 = new SynthToolBarUI();
      assertNotNull(synthToolBarUI0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(9, doubleArray0.length);
      
      int int0 = (-1);
      Minute minute0 = null;
      try {
        minute0 = new Minute((-1), (-930), (short)3993, 1740, 1807);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("_mtq#k(`E-", "_mtq#k(`E-", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
      
      Comparable<DynamicTimeSeriesCollection>[] comparableArray0 = (Comparable<DynamicTimeSeriesCollection>[]) Array.newInstance(Comparable.class, 1);
      Year year0 = new Year(194);
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(194L, year0.getSerialIndex());
      assertEquals(194, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("194", year0.toString());
      
      comparableArray0[0] = (Comparable<DynamicTimeSeriesCollection>) year0;
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertNotNull(categoryDataset1);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotSame(categoryDataset1, categoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, comparableArray0.length);
      
      CategoryDataset categoryDataset2 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertNotNull(categoryDataset2);
      assertFalse(categoryDataset2.equals((Object)categoryDataset0));
      assertTrue(categoryDataset2.equals((Object)categoryDataset1));
      assertNotSame(categoryDataset2, categoryDataset1);
      assertNotSame(categoryDataset2, categoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, comparableArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset2);
      assertNotNull(range0);
      assertFalse(categoryDataset2.equals((Object)categoryDataset0));
      assertTrue(categoryDataset2.equals((Object)categoryDataset1));
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotSame(categoryDataset2, categoryDataset1);
      assertNotSame(categoryDataset2, categoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, comparableArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) "_mtq#k(`E-");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      int int0 = 3911;
      int int1 = 134;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 3911, 134);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(3911, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(134, slidingCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(slidingCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Short short0 = new Short((short)3);
      assertNotNull(short0);
      assertEquals((short)3, (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((short)3));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Short short1 = new Short((short)3);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)3, (short)short1);
      
      defaultStatisticalCategoryDataset0.add((double) (short)3, (double) (short)3, (Comparable) short0, (Comparable) short0);
      assertTrue(short0.equals((Object)short1));
      
      Range range0 = new Range((short)3, (short)3);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(3.0, range0.getLowerBound(), 0.01);
      assertEquals(3.0, range0.getUpperBound(), 0.01);
      assertEquals(3.0, range0.getCentralValue(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(3.0, number0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) short0);
      assertNotNull(pieDataset0);
      assertTrue(short0.equals((Object)short1));
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) short0, (double) (short)3);
      assertNotNull(pieDataset1);
      assertTrue(short0.equals((Object)short1));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      
      PieDataset pieDataset2 = DatasetUtilities.createConsolidatedPieDataset(pieDataset1, (Comparable) short0, 1722.283784769166, 4135);
      assertNotNull(pieDataset2);
      assertTrue(short0.equals((Object)short1));
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertTrue(pieDataset2.equals((Object)pieDataset0));
      assertTrue(pieDataset2.equals((Object)pieDataset1));
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset0, pieDataset2);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(pieDataset1, pieDataset2);
      assertNotSame(pieDataset2, pieDataset0);
      assertNotSame(pieDataset2, pieDataset1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Short short0 = new Short((short)163);
      assertNotNull(short0);
      assertEquals((short)163, (short)short0);
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains((short)163));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (short)163;
      doubleArray1[1] = (double) (short)163;
      doubleArray1[2] = (-2089.3583729);
      doubleArray1[3] = (double) (short)163;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (short)163;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) (short)163;
      doubleArray3[1] = (double) (short)163;
      doubleArray3[2] = (-2089.3583729);
      doubleArray3[3] = (double) (short)163;
      doubleArray3[4] = (double) (short)163;
      doubleArray3[5] = (double) (short)163;
      doubleArray3[6] = (-2089.3583729);
      doubleArray3[7] = (-2089.3583729);
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, doubleArray0.length);
      
      SynthToolBarUI synthToolBarUI0 = new SynthToolBarUI();
      assertNotNull(synthToolBarUI0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) arrayList0, true);
      assertNull(range0);
      assertTrue(arrayList0.contains((short)163));
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(53, 93, week0);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(92, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Short short0 = new Short((short) (-3657));
      assertNotNull(short0);
      assertEquals((short) (-3657), (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(short0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains(short0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      Short short1 = new Short((short) (-3657));
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-3657), (short)short1);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset1);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short) (-3657);
      doubleArray0[1] = (double) (short) (-3657);
      doubleArray0[3] = (double) (short) (-3657);
      doubleArray0[2] = (double) (short) (-3657);
      doubleArray0[6] = (double) (short) (-3657);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(short0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {(-3657.0), (-3657.0), (-3657.0), (-3657.0), 0.0, 0.0, (-3657.0)}, doubleArray0, 0.01);
      assertTrue(short0.equals((Object)short1));
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) (-3657.0));
      assertNotNull(pieDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotNull(range0);
      assertArrayEquals(new double[] {(-3657.0), (-3657.0), (-3657.0), (-3657.0), 0.0, 0.0, (-3657.0)}, doubleArray0, 0.01);
      assertTrue(short0.equals((Object)short1));
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      
      String string0 = range0.toString();
      assertNotNull(string0);
      assertArrayEquals(new double[] {(-3657.0), (-3657.0), (-3657.0), (-3657.0), 0.0, 0.0, (-3657.0)}, doubleArray0, 0.01);
      assertTrue(short0.equals((Object)short1));
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      assertEquals("Range[1.39240928132E12,1.39240928132E12]", string0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) arrayList0, range0, true);
      assertNotNull(range1);
      assertArrayEquals(new double[] {(-3657.0), (-3657.0), (-3657.0), (-3657.0), 0.0, 0.0, (-3657.0)}, doubleArray0, 0.01);
      assertTrue(short0.equals((Object)short1));
      assertFalse(range1.equals((Object)range0));
      assertTrue(arrayList0.contains(short0));
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-3657.0), range1.getUpperBound(), 0.01);
      assertEquals((-3657.0), range1.getLowerBound(), 0.01);
      assertEquals((-3657.0), range1.getCentralValue(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(1, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset1, (List) arrayList0, true);
      assertNull(range2);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertTrue(arrayList0.contains(short0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, false);
      assertNotNull(range3);
      assertArrayEquals(new double[] {(-3657.0), (-3657.0), (-3657.0), (-3657.0), 0.0, 0.0, (-3657.0)}, doubleArray0, 0.01);
      assertTrue(short0.equals((Object)short1));
      assertTrue(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertEquals((-3657.0), range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals((-3657.0), range3.getUpperBound(), 0.01);
      assertEquals((-3657.0), range3.getCentralValue(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertEquals(1, dateArray0.length);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Short short0 = new Short((short)146);
      assertNotNull(short0);
      assertEquals((short)146, (short)short0);
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(arrayList0, short0, short0);
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultMultiValueCategoryDataset0, tableOrder0, (-1));
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-1), categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) short0, (KeyedValues) categoryToPieDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Short short0 = Short.valueOf((short)13);
      assertNotNull(short0);
      assertEquals((short)13, (short)short0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate((short)13, (short)13, (short)13, (-421), (short)13);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (short)13, (short)13, 6.283185307179586, 6.283185307179586, 6.283185307179586);
      assertNotNull(oHLCDataItem0);
      assertEquals("Mon Jan 26 11:13:00 GMT 1914", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(short0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(short0);
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      defaultOHLCDataset0.setSelectionState(simpleHistogramDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertNotNull(number0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(13.0, number0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      assertNotNull(number1);
      assertFalse(number1.equals((Object)number0));
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(6.283185307179586, number1);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(6.716814692820414, range0.getLength(), 0.01);
      assertEquals(9.641592653589793, range0.getCentralValue(), 0.01);
      assertEquals(6.283185307179586, range0.getLowerBound(), 0.01);
      assertEquals(13.0, range0.getUpperBound(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(9.641592653589793, range1.getCentralValue(), 0.01);
      assertEquals(6.283185307179586, range1.getLowerBound(), 0.01);
      assertEquals(13.0, range1.getUpperBound(), 0.01);
      assertEquals(6.716814692820414, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertEquals(1, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Float float0 = new Float((-1.5882311655436592));
      assertNotNull(float0);
      assertEquals((-1.5882312F), (float)float0, 0.01F);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add((-1.5882311655436592), (-1.5882311655436592), "");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.setIntervalPositionFactor(0.0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Byte byte0 = new Byte((byte)5);
      assertNotNull(byte0);
      assertEquals((byte)5, (byte)byte0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      boolean boolean0 = vector0.add(byte0);
      assertTrue(vector0.contains((byte)5));
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[5]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(boolean0);
      
      Consumer<Byte> consumer0 = (Consumer<Byte>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      assertTrue(vector0.contains((byte)5));
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[5]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      Vector<Byte> vector1 = new Vector<Byte>(vector0);
      assertNotNull(vector1);
      assertTrue(vector1.equals((Object)vector0));
      assertTrue(vector0.contains((byte)5));
      assertTrue(vector1.contains((byte)5));
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[5]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector1.isEmpty());
      assertEquals("[5]", vector1.toString());
      assertEquals(1, vector1.size());
      assertEquals(1, vector1.capacity());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) vector0, true);
      assertNotNull(range0);
      assertTrue(vector0.equals((Object)vector1));
      assertTrue(vector0.contains((byte)5));
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[5]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals((-1.0882311655436592), range0.getCentralValue(), 0.01);
      assertEquals((-0.5882311655436592), range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals((-1.5882311655436592), range0.getLowerBound(), 0.01);
      assertNotSame(vector0, vector1);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      MockDate mockDate0 = new MockDate((-421), (-1178), 1438, 1438, (-1178));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1178), (-1178), (-421), (-1178), (-2663.4974166517754));
      assertNotNull(oHLCDataItem0);
      assertEquals("Tue Dec 06 02:22:00 GMT 1384", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-421), (-1178), (-844.6182137303), Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY);
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Tue Dec 06 02:22:00 GMT 1384", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem1;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Tue Dec 06 02:22:00 GMT 1384", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertNotNull(number0);
      assertEquals("Tue Dec 06 02:22:00 GMT 1384", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals((-1178.0), number0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      assertNotNull(number1);
      assertFalse(number1.equals((Object)number0));
      assertEquals("Tue Dec 06 02:22:00 GMT 1384", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals((-844.6182137303), number1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (-844.6182137303) <= upper (-1178.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Float float0 = new Float(1442.483423179095);
      assertNotNull(float0);
      assertEquals(1442.4834F, (float)float0, 0.01F);
      
      categoryTableXYDataset0.add(0.0, 0.0, "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.setIntervalPositionFactor(0.0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      Byte byte0 = new Byte((byte)5);
      assertNotNull(byte0);
      assertEquals((byte)5, (byte)byte0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      assertFalse(vector0.contains((byte)5));
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      Vector<Byte> vector1 = new Vector<Byte>(vector0);
      assertNotNull(vector1);
      assertTrue(vector1.equals((Object)vector0));
      assertFalse(vector0.contains((byte)5));
      assertFalse(vector1.contains((byte)5));
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector1.toString());
      assertEquals(0, vector1.size());
      assertTrue(vector1.isEmpty());
      assertEquals(0, vector1.capacity());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[][] doubleArray0 = new double[9][5];
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Short short0 = new Short((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      Short short1 = new Short((short) (-1));
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-1), (short)short1);
      
      boolean boolean1 = arrayList0.add(short1);
      assertTrue(short1.equals((Object)short0));
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayList0.contains((short) (-1)));
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean1);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (int) (short) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Short short0 = new Short((short) (-6));
      assertNotNull(short0);
      assertEquals((short) (-6), (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(short0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((double) (short) (-6), (double) (short) (-6), (Comparable) short0, (Comparable) short0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      assertNotNull(range0);
      assertTrue(arrayList0.contains((short) (-6)));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals((-6.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-6.0), range0.getUpperBound(), 0.01);
      assertEquals((-6.0), range0.getCentralValue(), 0.01);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(6.0, range1.getLength(), 0.01);
      assertEquals((-3.0), range1.getCentralValue(), 0.01);
      assertEquals((-6.0), range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Short short0 = new Short((short)1);
      assertNotNull(short0);
      assertEquals((short)1, (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(short0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Short short1 = new Short((short)3308);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)3308, (short)short1);
      
      boolean boolean0 = arrayList0.add(short1);
      assertFalse(short1.equals((Object)short0));
      assertFalse(arrayList0.contains(short0));
      assertTrue(arrayList0.contains(short1));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      Short short2 = new Short((short)1);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertEquals((short)1, (short)short2);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[6];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      dateArray0[5] = (Date) mockDate0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)3308;
      doubleArray0[1] = (double) (short)1;
      doubleArray0[2] = (double) (short)3308;
      doubleArray0[3] = (-6.0);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {3308.0, 1.0, 3308.0, (-6.0)}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(6, dateArray0.length);
      assertEquals(4, doubleArray0.length);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) 3308.0);
      assertNotNull(pieDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, false);
      assertNotNull(range0);
      assertArrayEquals(new double[] {3308.0, 1.0, 3308.0, (-6.0)}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(6, dateArray0.length);
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) arrayList0, range0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Short short0 = new Short((short) (-3657));
      assertNotNull(short0);
      assertEquals((short) (-3657), (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(short0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains(short0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      Short short1 = new Short((short) (-3657));
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-3657), (short)short1);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset1);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short) (-3657);
      doubleArray0[3] = (double) (short) (-3657);
      doubleArray0[2] = (double) (short) (-3657);
      doubleArray0[6] = (double) (short) (-3657);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(short0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {(-3657.0), 0.0, (-3657.0), (-3657.0), 0.0, 0.0, (-3657.0)}, doubleArray0, 0.01);
      assertTrue(short0.equals((Object)short1));
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) (-3657.0));
      assertNotNull(pieDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotNull(range0);
      assertArrayEquals(new double[] {(-3657.0), 0.0, (-3657.0), (-3657.0), 0.0, 0.0, (-3657.0)}, doubleArray0, 0.01);
      assertTrue(short0.equals((Object)short1));
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) arrayList0, range0, true);
      assertNotNull(range1);
      assertArrayEquals(new double[] {(-3657.0), 0.0, (-3657.0), (-3657.0), 0.0, 0.0, (-3657.0)}, doubleArray0, 0.01);
      assertFalse(range1.equals((Object)range0));
      assertTrue(short0.equals((Object)short1));
      assertTrue(arrayList0.contains((short) (-3657)));
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-3657.0), range1.getUpperBound(), 0.01);
      assertEquals((-3657.0), range1.getCentralValue(), 0.01);
      assertEquals((-3657.0), range1.getLowerBound(), 0.01);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(1, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
      assertNotNull(number0);
      assertArrayEquals(new double[] {(-3657.0), 0.0, (-3657.0), (-3657.0), 0.0, 0.0, (-3657.0)}, doubleArray0, 0.01);
      assertTrue(short0.equals((Object)short1));
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(1.39240928132E12, number0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertEquals(0.0, double0, 0.01);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertNull(range2);
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertTrue(arrayList0.contains((short) (-3657)));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      
      Range range3 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range3);
      assertArrayEquals(new double[] {(-3657.0), 0.0, (-3657.0), (-3657.0), 0.0, 0.0, (-3657.0)}, doubleArray0, 0.01);
      assertTrue(short0.equals((Object)short1));
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertEquals(1.39240928132E12, range3.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range3.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertEquals(1, dateArray0.length);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Quarter quarter0 = new Quarter();
      assertNotNull(quarter0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      
      defaultStatisticalCategoryDataset0.add((-67.525), 1.0, (Comparable) quarter0, (Comparable) "9~w\"~6");
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((-67.525)));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      assertNull(range0);
      assertFalse(arrayList0.contains((-67.525)));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, false);
      assertNotNull(range1);
      assertEquals((-67.525), range1.getUpperBound(), 0.01);
      assertEquals((-67.525), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-67.525), range1.getLowerBound(), 0.01);
      
      Range range2 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertNull(range2);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Float float0 = new Float(124.3676106);
      assertNotNull(float0);
      assertEquals(124.36761F, (float)float0, 0.01F);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(193, 193, 193, 193, 193);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=193,MONTH=193,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=193,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=193,HOUR_OF_DAY=193,MINUTE=193,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 124.3676106, Double.NEGATIVE_INFINITY, 193, 2142.5, Double.NEGATIVE_INFINITY);
      assertNotNull(oHLCDataItem0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=193,MONTH=193,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=193,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=193,HOUR_OF_DAY=193,MINUTE=193,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, (-1371.362654506928), Double.NEGATIVE_INFINITY, (-1371.362654506928), (-748.894251), Double.NEGATIVE_INFINITY);
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=193,MONTH=193,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=193,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=193,HOUR_OF_DAY=193,MINUTE=193,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(date0, 193, Double.NEGATIVE_INFINITY, (-748.894251), 2142.5, 124.3676106);
      assertNotNull(oHLCDataItem2);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=193,MONTH=193,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=193,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=193,HOUR_OF_DAY=193,MINUTE=193,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(float0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3, oHLCDataItemArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (-1371.362654506928) <= upper (-Infinity).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add((-226.0), (-226.0), "9~w\"~6");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertNotNull(number0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-226.0), number0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertNotNull(number1);
      assertTrue(number1.equals((Object)number0));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-226.0), number1);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-226.0), range0.getUpperBound(), 0.01);
      assertEquals((-226.0), range0.getCentralValue(), 0.01);
      assertEquals((-226.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Short short0 = new Short((short)2143);
      assertNotNull(short0);
      assertEquals((short)2143, (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(short0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate(0, 0, 0, 5, (-1363), 0);
      assertNotNull(mockDate0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      assertNotNull(fixedMillisecond0);
      assertEquals("Sat Dec 30 06:17:00 GMT 1899", mockDate0.toString());
      assertEquals((-2209138980000L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-2209138980000L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-2209138980000L), fixedMillisecond0.getSerialIndex());
      assertEquals((-2209138980000L), fixedMillisecond0.getFirstMillisecond());
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertNotNull(regularTimePeriod0);
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertEquals("Sat Dec 30 06:17:00 GMT 1899", mockDate0.toString());
      assertEquals((-2209138980000L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-2209138980000L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-2209138980000L), fixedMillisecond0.getSerialIndex());
      assertEquals((-2209138980000L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-2209138980001L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-2209138980001L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-2209138980001L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals((-2209138980001L), regularTimePeriod0.getSerialIndex());
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      
      Class<Object> class0 = Object.class;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertNotNull(timeZone0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("GMT", timeZone0.getID());
      
      RegularTimePeriod regularTimePeriod1 = RegularTimePeriod.createInstance(class0, mockDate0, timeZone0);
      assertNull(regularTimePeriod1);
      assertEquals("Sat Dec 30 06:17:00 GMT 1899", mockDate0.toString());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("GMT", timeZone0.getID());
      
      defaultStatisticalCategoryDataset0.add((Number) short0, (Number) short0, (Comparable) regularTimePeriod0, (Comparable) mockDate0);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertEquals("Sat Dec 30 06:17:00 GMT 1899", mockDate0.toString());
      assertEquals((-2209138980000L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-2209138980000L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-2209138980000L), fixedMillisecond0.getSerialIndex());
      assertEquals((-2209138980000L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-2209138980001L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-2209138980001L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-2209138980001L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals((-2209138980001L), regularTimePeriod0.getSerialIndex());
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      
      defaultStatisticalCategoryDataset0.add((double) (short)2143, 1.0, (Comparable) short0, (Comparable) short0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertNotNull(range0);
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(2.0, range0.getLength(), 0.01);
      assertEquals(2143.0, range0.getCentralValue(), 0.01);
      assertEquals(2142.0, range0.getLowerBound(), 0.01);
      assertEquals(2144.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Short short0 = Short.valueOf((short)13);
      assertNotNull(short0);
      assertEquals((short)13, (short)short0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate((short)13, (short)13, (short)13, (-421), (short)13);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (short)13, (short)13, 6.283185307179586, 6.283185307179586, 6.283185307179586);
      assertNotNull(oHLCDataItem0);
      assertEquals("Mon Jan 26 11:13:00 GMT 1914", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(short0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertNotNull(number0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(13.0, number0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      assertNotNull(number1);
      assertFalse(number1.equals((Object)number0));
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(6.283185307179586, number1);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(6.716814692820414, range0.getLength(), 0.01);
      assertEquals(13.0, range0.getUpperBound(), 0.01);
      assertEquals(9.641592653589793, range0.getCentralValue(), 0.01);
      assertEquals(6.283185307179586, range0.getLowerBound(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Float float0 = new Float(1442.483423179095);
      assertNotNull(float0);
      assertEquals(1442.4834F, (float)float0, 0.01F);
      
      categoryTableXYDataset0.add(0.0, 0.0, "");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.setIntervalPositionFactor(0.0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(categoryTableXYDataset0, true);
      assertNotNull(intervalXYDelegate0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      Byte byte0 = new Byte((byte)2);
      assertNotNull(byte0);
      assertEquals((byte)2, (byte)byte0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (byte)2, (byte)2);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(2, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      boolean boolean0 = vector0.add(byte0);
      assertTrue(vector0.contains(byte0));
      assertEquals("[2]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertTrue(boolean0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      assertTrue(vector0.contains(byte0));
      assertEquals("[2]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      
      List list0 = slidingGanttCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(2, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Vector<Byte> vector1 = new Vector<Byte>(vector0);
      assertNotNull(vector1);
      assertTrue(vector1.equals((Object)vector0));
      assertTrue(vector0.contains(byte0));
      assertTrue(vector1.contains(byte0));
      assertEquals("[2]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector1.capacity());
      assertEquals(1, vector1.size());
      assertEquals("[2]", vector1.toString());
      assertFalse(vector1.isEmpty());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) vector1, true);
      assertNotNull(range1);
      assertTrue(vector0.equals((Object)vector1));
      assertTrue(vector1.equals((Object)vector0));
      assertTrue(range1.equals((Object)range0));
      assertTrue(vector0.contains(byte0));
      assertTrue(vector1.contains(byte0));
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals("[2]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector1.capacity());
      assertEquals(1, vector1.size());
      assertEquals("[2]", vector1.toString());
      assertFalse(vector1.isEmpty());
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(0.5, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertNotSame(vector0, vector1);
      assertNotSame(vector1, vector0);
      assertNotSame(range1, range0);
      
      DatasetGroup datasetGroup0 = new DatasetGroup("Null 'item' argument.");
      assertNotNull(datasetGroup0);
      assertEquals("Null 'item' argument.", datasetGroup0.getID());
      
      taskSeriesCollection0.setGroup(datasetGroup0);
      assertEquals("Null 'item' argument.", datasetGroup0.getID());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
      assertNull(range2);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(2, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) vector0, true);
      assertNull(range3);
      assertTrue(vector0.equals((Object)vector1));
      assertTrue(vector0.contains(byte0));
      assertEquals("[2]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotSame(vector0, vector1);
      
      Range range4 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      assertNotNull(range4);
      assertTrue(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range1));
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, range4.getLength(), 0.01);
      assertEquals(1.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(0.5, range4.getCentralValue(), 0.01);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Short short0 = new Short((short)3);
      assertNotNull(short0);
      assertEquals((short)3, (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((short)3));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Short short1 = new Short((short)3);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)3, (short)short1);
      
      defaultStatisticalCategoryDataset0.add((double) (short)3, (double) (short)3, (Comparable) short0, (Comparable) short0);
      assertTrue(short0.equals((Object)short1));
      
      Range range0 = new Range((short)3, (short)3);
      assertNotNull(range0);
      assertEquals(3.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(3.0, range0.getLowerBound(), 0.01);
      assertEquals(3.0, range0.getUpperBound(), 0.01);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, (short)3, (short)3);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(3, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(3, slidingCategoryDataset0.getFirstCategoryIndex());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      assertEquals(3, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(3, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, (Comparable) short0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Float float0 = new Float((-1123.54));
      assertNotNull(float0);
      assertEquals((-1123.54F), (float)float0, 0.01F);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(float0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      Float float1 = new Float((-1123.54));
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1123.54F), (float)float1, 0.01F);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertTrue(boolean0);
      
      Number[][] numberArray0 = new Number[7][5];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = (Number) float1;
      numberArray1[1] = (Number) float1;
      numberArray1[2] = (Number) float1;
      numberArray1[3] = (Number) float0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[1];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) float0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[3];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) float1;
      numberArray3[1] = (Number) float0;
      numberArray3[2] = (Number) float0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[4];
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray1));
      
      numberArray4[0] = (Number) float1;
      numberArray4[1] = (Number) float1;
      numberArray4[2] = (Number) float1;
      numberArray4[3] = (Number) float1;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[7];
      assertFalse(numberArray5.equals((Object)numberArray2));
      assertFalse(numberArray5.equals((Object)numberArray4));
      assertFalse(numberArray5.equals((Object)numberArray1));
      assertFalse(numberArray5.equals((Object)numberArray3));
      
      numberArray5[0] = (Number) float0;
      numberArray5[1] = (Number) float0;
      numberArray5[2] = (Number) float0;
      numberArray5[3] = (Number) float1;
      numberArray5[4] = (Number) float0;
      numberArray5[5] = (Number) float0;
      numberArray5[6] = (Number) float0;
      numberArray0[4] = numberArray5;
      Number[] numberArray6 = new Number[1];
      assertFalse(numberArray6.equals((Object)numberArray4));
      assertFalse(numberArray6.equals((Object)numberArray2));
      assertFalse(numberArray6.equals((Object)numberArray3));
      assertFalse(numberArray6.equals((Object)numberArray5));
      assertFalse(numberArray6.equals((Object)numberArray1));
      
      numberArray6[0] = (Number) float1;
      numberArray0[5] = numberArray6;
      Number[] numberArray7 = new Number[7];
      assertFalse(numberArray7.equals((Object)numberArray4));
      assertFalse(numberArray7.equals((Object)numberArray3));
      assertFalse(numberArray7.equals((Object)numberArray6));
      assertFalse(numberArray7.equals((Object)numberArray5));
      assertFalse(numberArray7.equals((Object)numberArray2));
      assertFalse(numberArray7.equals((Object)numberArray1));
      
      numberArray7[0] = (Number) float0;
      numberArray7[1] = (Number) float0;
      numberArray7[2] = (Number) float1;
      numberArray7[3] = (Number) float0;
      numberArray7[4] = (Number) float0;
      numberArray7[5] = (Number) float0;
      numberArray7[6] = (Number) float1;
      numberArray0[6] = numberArray7;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Short short0 = new Short((short)2143);
      assertNotNull(short0);
      assertEquals((short)2143, (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((short)2143));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains((short)2143));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((double) (short)2143, 1.0, (Comparable) short0, (Comparable) short0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertNotNull(range0);
      assertTrue(arrayList0.contains((short)2143));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2142.0, range0.getLowerBound(), 0.01);
      assertEquals(2.0, range0.getLength(), 0.01);
      assertEquals(2144.0, range0.getUpperBound(), 0.01);
      assertEquals(2143.0, range0.getCentralValue(), 0.01);
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultWindDataset0);
      assertNull(range1);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultStatisticalCategoryDataset0, tableOrder0, (short)2143);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(2143, categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) short0, (KeyedValues) categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2143, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Float float0 = new Float((-3725.8567));
      assertNotNull(float0);
      assertEquals((-3725.8567F), (float)float0, 0.01F);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(float0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      Float float1 = new Float((-3725.8567));
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-3725.8567F), (float)float1, 0.01F);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertTrue(boolean0);
      
      double[][] doubleArray0 = new double[9][8];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-3725.8567);
      doubleArray1[1] = (-3725.8567);
      doubleArray1[2] = (-3725.8567);
      doubleArray1[3] = (-3725.8567);
      doubleArray1[4] = Double.POSITIVE_INFINITY;
      doubleArray1[5] = (-3725.8567);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-3725.8567);
      doubleArray2[1] = (-3725.8567);
      doubleArray2[2] = (-3725.8567);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-3725.8567);
      doubleArray3[1] = (-3725.8567);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = Double.POSITIVE_INFINITY;
      doubleArray4[1] = (-3725.8567);
      doubleArray4[2] = Double.POSITIVE_INFINITY;
      doubleArray4[3] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = Double.POSITIVE_INFINITY;
      doubleArray5[1] = Double.POSITIVE_INFINITY;
      doubleArray5[2] = (-3725.8567);
      doubleArray5[3] = Double.POSITIVE_INFINITY;
      doubleArray5[4] = Double.POSITIVE_INFINITY;
      doubleArray5[5] = (-3725.8567);
      doubleArray5[6] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray6[0] = (-3725.8567);
      doubleArray6[1] = Double.POSITIVE_INFINITY;
      doubleArray6[2] = (-3725.8567);
      doubleArray6[3] = Double.POSITIVE_INFINITY;
      doubleArray6[4] = Double.POSITIVE_INFINITY;
      doubleArray6[5] = (-3725.8567);
      doubleArray6[6] = (-3725.8567);
      doubleArray6[7] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[8];
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      
      doubleArray7[0] = 0.5;
      doubleArray7[1] = (-3725.8567);
      doubleArray7[2] = Double.POSITIVE_INFINITY;
      doubleArray7[3] = Double.POSITIVE_INFINITY;
      doubleArray7[4] = Double.POSITIVE_INFINITY;
      doubleArray7[5] = (-3725.8567);
      doubleArray7[6] = (-3725.8567);
      doubleArray7[7] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[4];
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      
      doubleArray8[0] = Double.POSITIVE_INFINITY;
      doubleArray8[1] = Double.POSITIVE_INFINITY;
      doubleArray8[2] = 0.5;
      doubleArray8[3] = (-3725.8567);
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[0];
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      
      doubleArray0[8] = doubleArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add((-3369.747154191), 0.0, "");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Float float0 = new Float((-3369.747154191));
      assertNotNull(float0);
      assertEquals((-3369.747F), (float)float0, 0.01F);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(float0));
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      stack0.addElement((Float) null);
      assertFalse(stack0.contains(float0));
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range0, true);
      assertNull(range1);
      assertFalse(stack0.contains(float0));
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 2267;
      doubleArray2[1] = (-1498.879852865542);
      doubleArray2[2] = (-2316.9279983490046);
      doubleArray2[3] = (double) 2267;
      doubleArray2[4] = 3457.976313;
      doubleArray2[5] = (double) 2267;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 3457.976313;
      doubleArray3[1] = (-2316.9279983490046);
      doubleArray3[2] = (double) 2267;
      doubleArray3[3] = (-2316.9279983490046);
      doubleArray3[4] = (-1498.879852865542);
      doubleArray3[5] = (-2316.9279983490046);
      doubleArray3[6] = 3457.976313;
      doubleArray3[7] = 3457.976313;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 3457.976313;
      doubleArray4[1] = 3457.976313;
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals(3457.976313, range0.getUpperBound(), 0.01);
      assertEquals((-2316.9279983490046), range0.getLowerBound(), 0.01);
      assertEquals(5774.904311349004, range0.getLength(), 0.01);
      assertEquals(570.5241573254978, range0.getCentralValue(), 0.01);
      assertEquals(4, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(4, doubleArray0.length);
      assertEquals(9182.952626, number0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 3457.976313);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(12640.928939000001, range1.getUpperBound(), 0.01);
      assertEquals(12998.760477214548, range1.getLength(), 0.01);
      assertEquals(6141.548700392727, range1.getCentralValue(), 0.01);
      assertEquals((-357.8315382145465), range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(372, 372, 0.0, 1041.0, 991.75263377827, 991.75263377827);
      assertNotNull(defaultHeatMapDataset0);
      assertEquals(372, defaultHeatMapDataset0.getYSampleCount());
      assertEquals(372, defaultHeatMapDataset0.getXSampleCount());
      assertEquals(991.75263377827, defaultHeatMapDataset0.getMinimumYValue(), 0.01);
      assertEquals(0.0, defaultHeatMapDataset0.getMinimumXValue(), 0.01);
      assertEquals(1041.0, defaultHeatMapDataset0.getMaximumXValue(), 0.01);
      assertEquals(991.75263377827, defaultHeatMapDataset0.getMaximumYValue(), 0.01);
      
      DatasetGroup datasetGroup0 = defaultHeatMapDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertEquals(372, defaultHeatMapDataset0.getYSampleCount());
      assertEquals(372, defaultHeatMapDataset0.getXSampleCount());
      assertEquals(991.75263377827, defaultHeatMapDataset0.getMinimumYValue(), 0.01);
      assertEquals(0.0, defaultHeatMapDataset0.getMinimumXValue(), 0.01);
      assertEquals(1041.0, defaultHeatMapDataset0.getMaximumXValue(), 0.01);
      assertEquals(991.75263377827, defaultHeatMapDataset0.getMaximumYValue(), 0.01);
      assertEquals("NOID", datasetGroup0.getID());
      
      categoryTableXYDataset0.setGroup(datasetGroup0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(372, defaultHeatMapDataset0.getYSampleCount());
      assertEquals(372, defaultHeatMapDataset0.getXSampleCount());
      assertEquals(991.75263377827, defaultHeatMapDataset0.getMinimumYValue(), 0.01);
      assertEquals(0.0, defaultHeatMapDataset0.getMinimumXValue(), 0.01);
      assertEquals(1041.0, defaultHeatMapDataset0.getMaximumXValue(), 0.01);
      assertEquals(991.75263377827, defaultHeatMapDataset0.getMaximumYValue(), 0.01);
      assertEquals("NOID", datasetGroup0.getID());
      
      categoryTableXYDataset0.add(0.0, 0.0, "");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Float float0 = new Float(Double.POSITIVE_INFINITY);
      assertNotNull(float0);
      assertEquals(Float.POSITIVE_INFINITY, (float)float0, 0.01F);
      
      double[][] doubleArray0 = new double[4][4];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray1[3] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = Double.POSITIVE_INFINITY;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = Double.POSITIVE_INFINITY;
      doubleArray4[3] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("s_8Uk_xfsN[Y`41gd", "s_8Uk_xfsN[Y`41gd", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(4, doubleArray0.length);
      assertEquals(Double.POSITIVE_INFINITY, number0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, (List) linkedList0, true);
      assertNull(range0);
      assertEquals(0, linkedList0.size());
      assertEquals(4, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds(categoryDataset0, true);
      assertNotNull(range1);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (-2733));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      double[][] doubleArray0 = new double[1][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("_mtq#k(`E-", "_mtq#k(`E-", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
      
      Comparable<TimeSeriesCollection>[] comparableArray0 = (Comparable<TimeSeriesCollection>[]) Array.newInstance(Comparable.class, 1);
      XYSeries xYSeries0 = new XYSeries("_mtq#k(`E-", false, false);
      assertNotNull(xYSeries0);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((-1851.69304187), 1037.7072237584443);
      assertNull(xYDataItem0);
      assertEquals(1037.7072237584443, xYSeries0.getMinY(), 0.01);
      assertEquals((-1851.69304187), xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-1851.69304187), xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1037.7072237584443, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      
      comparableArray0[0] = (Comparable<TimeSeriesCollection>) null;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1673.3;
      doubleArray1[1] = 1673.3;
      doubleArray1[2] = 1673.3;
      doubleArray1[3] = 1673.3;
      doubleArray1[4] = 1673.3;
      doubleArray1[5] = 1673.3;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-2063.73383);
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Short short0 = new Short((short) (-6));
      assertNotNull(short0);
      assertEquals((short) (-6), (short)short0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      String string0 = "";
      categoryTableXYDataset0.add((double) (short) (-6), (double) (short) (-6), "");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Float float0 = new Float((-1437.831105717));
      assertNotNull(float0);
      assertEquals((-1437.831F), (float)float0, 0.01F);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(float0));
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      Float float1 = new Float((float) (short) (-6));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-6.0F), (float)float1, 0.01F);
      
      boolean boolean0 = stack0.add(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(stack0.contains(float0));
      assertTrue(stack0.contains(float1));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[-6.0]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertTrue(boolean0);
      
      Stack<Float> stack1 = new Stack<Float>();
      assertNotNull(stack1);
      assertFalse(stack1.equals((Object)stack0));
      assertFalse(stack1.contains(float1));
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      
      stack1.addElement(float0);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertFalse(stack1.equals((Object)stack0));
      assertTrue(stack1.contains(float0));
      assertFalse(stack1.contains(float1));
      assertEquals(1, stack1.size());
      assertFalse(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.isEmpty());
      assertEquals("[-1437.831]", stack1.toString());
      assertNotSame(stack1, stack0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals((-6.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(6.0, range0.getLength(), 0.01);
      assertEquals((-3.0), range0.getCentralValue(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack1, range0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 2627.9671274892;
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = (-1241.157406114);
      doubleArray1[3] = 3080.0105871;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("o9~w\"Y6", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      int int0 = keyToGroupMap0.getGroupIndex(Double.NEGATIVE_INFINITY);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals((-1), int0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(3080.0105871, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(2, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, (-1241.157406114));
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(1838.853180986, range1.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertEquals(2, doubleArray0.length);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0);
      assertNull(range2);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Short short0 = new Short((short)163);
      assertNotNull(short0);
      assertEquals((short)163, (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((short)163));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains((short)163));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      boolean boolean1 = arrayList0.add(short0);
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayList0.contains((short)163));
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(boolean1);
      
      categoryTableXYDataset0.add((double) (short)163, (double) (short)163, "org.jfree.da!a.gantt.T7skSeriesCollection");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertNull(range0);
      assertTrue(arrayList0.contains((short)163));
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, false);
      assertNotNull(range1);
      assertTrue(arrayList0.contains((short)163));
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(163.0, range1.getUpperBound(), 0.01);
      assertEquals(163.0, range1.getCentralValue(), 0.01);
      assertEquals(163.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (short)163);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 163, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[4];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      double[] doubleArray0 = new double[2];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("_mtq#k(`E-", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(4, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      
      defaultHighLowDataset0.clearSelection();
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(4, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
      assertNotNull(number0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(4, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(1.39240928132E12, number0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(4, dateArray0.length);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double double0 = 4042.5816;
      Range range0 = new Range(4042.5816, 4042.5816);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4042.5816, range0.getLowerBound(), 0.01);
      assertEquals(4042.5816, range0.getUpperBound(), 0.01);
      assertEquals(4042.5816, range0.getCentralValue(), 0.01);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      double double1 = 1401.68799;
      Float float0 = new Float(1401.68799);
      assertNotNull(float0);
      assertEquals(1401.688F, (float)float0, 0.01F);
      
      stack0.addElement(float0);
      assertTrue(stack0.contains(float0));
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[1401.688]", stack0.toString());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(1401.68799, 1401.68799);
      assertNotNull(lineFunction2D0);
      assertEquals(1401.68799, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1401.68799, lineFunction2D0.getIntercept(), 0.01);
      
      double double2 = 1330.2368;
      int int0 = 1047;
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-1.7976931348623157E308), 1330.2368, 1047, float0);
      assertNotNull(xYSeries0);
      assertEquals(1401.68799, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1401.68799, lineFunction2D0.getIntercept(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1401.68799, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals((-1.7976931348623157E308), xYSeries0.getMinX(), 0.01);
      assertEquals(1047, xYSeries0.getItemCount());
      assertEquals(Double.NEGATIVE_INFINITY, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Comparable<DefaultOHLCDataset>[] comparableArray0 = (Comparable<DefaultOHLCDataset>[]) Array.newInstance(Comparable.class, 6);
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(0.0, 1401.68799, false, true);
      assertNotNull(simpleHistogramBin0);
      assertEquals(0.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(1401.68799, simpleHistogramBin0.getUpperBound(), 0.01);
      
      comparableArray0[0] = (Comparable<DefaultOHLCDataset>) simpleHistogramBin0;
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      double double3 = 0.0;
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 4042.5816, 0.0, 1047, (-1.7976931348623157E308), 0.0);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, Double.POSITIVE_INFINITY, 0.0, 0.0, 1401.68799, 1330.2368);
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      String string0 = "\"3YyvvCuJTFg";
      DateFormatSymbols dateFormatSymbols0 = SerialDate.DATE_FORMAT_SYMBOLS;
      assertNotNull(dateFormatSymbols0);
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("\"3YyvvCuJTFg", dateFormatSymbols0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'v'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Short short0 = new Short((short)3322);
      assertNotNull(short0);
      assertEquals((short)3322, (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((short)3322));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Short short1 = new Short((short) (-225));
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short) (-225), (short)short1);
      
      boolean boolean0 = arrayList0.add(short1);
      assertFalse(short1.equals((Object)short0));
      assertTrue(arrayList0.contains((short) (-225)));
      assertFalse(arrayList0.contains((short)3322));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      defaultMultiValueCategoryDataset0.add(arrayList0, short1, short1);
      assertFalse(short1.equals((Object)short0));
      assertTrue(arrayList0.contains((short) (-225)));
      assertFalse(arrayList0.contains((short)3322));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, false);
      assertNotNull(range0);
      assertTrue(arrayList0.contains((short) (-225)));
      assertFalse(arrayList0.contains((short)3322));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals((-225.0), range0.getCentralValue(), 0.01);
      assertEquals((-225.0), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-225.0), range0.getLowerBound(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1.5882311655436592), (-1.5882311655436592));
      assertNotNull(lineFunction2D0);
      assertEquals((-1.5882311655436592), lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-1.5882311655436592), lineFunction2D0.getSlope(), 0.01);
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(149);
      assertNotNull(spreadsheetDate0);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(149, spreadsheetDate0.toSerial());
      assertEquals(28, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate(0, 2, 4);
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      Date date0 = spreadsheetDate0.toDate();
      assertNotNull(date0);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(149, spreadsheetDate0.toSerial());
      assertEquals(28, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      dateArray0[1] = date0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 149;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (-1.5882311655436592);
      SerialDate serialDate0 = SerialDate.addDays(3, spreadsheetDate0);
      assertNotNull(serialDate0);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertFalse(serialDate0.equals((Object)spreadsheetDate0));
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(149, spreadsheetDate0.toSerial());
      assertEquals(28, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(152, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(31, serialDate0.getDayOfMonth());
      assertEquals(5, serialDate0.getMonth());
      assertNotSame(spreadsheetDate0, serialDate0);
      assertNotSame(serialDate0, spreadsheetDate0);
      
      boolean boolean0 = spreadsheetDate0.isInRange(serialDate0, serialDate0);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertFalse(spreadsheetDate0.equals((Object)serialDate0));
      assertFalse(serialDate0.equals((Object)spreadsheetDate0));
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(149, spreadsheetDate0.toSerial());
      assertEquals(28, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(152, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(31, serialDate0.getDayOfMonth());
      assertEquals(5, serialDate0.getMonth());
      assertNotSame(spreadsheetDate0, serialDate0);
      assertNotSame(serialDate0, spreadsheetDate0);
      assertFalse(boolean0);
      
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 6;
      doubleArray0[5] = (double) 4;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(spreadsheetDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {149.0, 3.0, (-1.5882311655436592), 2.0, 6.0, 4.0}, doubleArray0, 0.01);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertFalse(spreadsheetDate0.equals((Object)serialDate0));
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(149, spreadsheetDate0.toSerial());
      assertEquals(28, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      
      defaultHighLowDataset0.clearSelection();
      assertArrayEquals(new double[] {149.0, 3.0, (-1.5882311655436592), 2.0, 6.0, 4.0}, doubleArray0, 0.01);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertFalse(spreadsheetDate0.equals((Object)serialDate0));
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(149, spreadsheetDate0.toSerial());
      assertEquals(28, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertNotSame(spreadsheetDate0, serialDate0);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
      assertNotNull(number0);
      assertArrayEquals(new double[] {149.0, 3.0, (-1.5882311655436592), 2.0, 6.0, 4.0}, doubleArray0, 0.01);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertFalse(spreadsheetDate0.equals((Object)serialDate0));
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(149, spreadsheetDate0.toSerial());
      assertEquals(28, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertNotSame(spreadsheetDate0, serialDate0);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals((-2.203632E12), number0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertArrayEquals(new double[] {149.0, 3.0, (-1.5882311655436592), 2.0, 6.0, 4.0}, doubleArray0, 0.01);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertFalse(spreadsheetDate0.equals((Object)serialDate0));
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(149, spreadsheetDate0.toSerial());
      assertEquals(28, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals((-2.203632E12), range0.getLowerBound(), 0.01);
      assertEquals((-4.0561135934E11), range0.getCentralValue(), 0.01);
      assertEquals(3.59604128132E12, range0.getLength(), 0.01);
      assertNotSame(spreadsheetDate0, serialDate0);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Number[][] numberArray0 = new Number[3][0];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("a0.>zP`88?M", "a0.>zP`88?M", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, numberArray0.length);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Vector<Short> vector0 = new Vector<Short>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, (List) vector0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1.5882311655436592), (-1.5882311655436592));
      assertNotNull(lineFunction2D0);
      assertEquals((-1.5882311655436592), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-1.5882311655436592), lineFunction2D0.getIntercept(), 0.01);
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(149);
      assertNotNull(spreadsheetDate0);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(28, spreadsheetDate0.getDayOfMonth());
      assertEquals(149, spreadsheetDate0.toSerial());
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, 3, 4, 149, spreadsheetDate0);
      assertNotNull(xYSeries0);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals((-1.5882311655436592), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-1.5882311655436592), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(28, spreadsheetDate0.getDayOfMonth());
      assertEquals(149, spreadsheetDate0.toSerial());
      assertEquals(4.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals((-7.941155827718296), xYSeries0.getMinY(), 0.01);
      assertEquals((-6.352924662174637), xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(149, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(3.0, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      MatrixSeries matrixSeries0 = new MatrixSeries("", 4, 2);
      assertNotNull(matrixSeries0);
      assertEquals(8, matrixSeries0.getItemCount());
      assertEquals(4, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(8, matrixSeries0.getItemCount());
      assertEquals(4, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertEquals(8, matrixSeries0.getItemCount());
      assertEquals(4, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      
      String string0 = "";
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset((Connection) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // A connection must be supplied.
         //
         verifyException("org.jfree.data.jdbc.JDBCPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Short short0 = new Short((short) (-1110));
      assertNotNull(short0);
      assertEquals((short) (-1110), (short)short0);
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset1.remove(1407.0971554446232, "KnzydzGDI");
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      
      categoryTableXYDataset1.add((double) (short) (-1110), 1407.0971554446232, "] 'OxD'");
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(37, 37);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(36, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, (List) arrayList0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Short short0 = new Short((short)163);
      assertNotNull(short0);
      assertEquals((short)163, (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((short)163));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains((short)163));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset1);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short) (-3657);
      doubleArray0[1] = (double) (short) (-3657);
      doubleArray0[3] = (double) (short)163;
      doubleArray0[6] = (double) (short)163;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(short0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {(-3657.0), (-3657.0), 0.0, 163.0, 0.0, 0.0, 163.0}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) 163.0);
      assertNotNull(pieDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 141);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Short short0 = new Short((short)163);
      assertNotNull(short0);
      assertEquals((short)163, (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((short)163));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains((short)163));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add((double) (short)163, (double) (short)163, "org.jfree.da!a.gantt.T7skSeriesCollection");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertNull(range0);
      assertTrue(arrayList0.contains((short)163));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (short)163);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 163, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(0.0, 0.0, "aK8,-=#`f6>s^U6");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      assertNull(range0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (-3445.15);
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-3445.15);
      doubleArray3[1] = (-3445.15);
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = (-3445.15);
      doubleArray3[5] = 0.0;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, number0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Number number1 = DatasetUtilities.findMaximumDomainValue(categoryTableXYDataset0);
      assertNotNull(number1);
      assertFalse(number1.equals((Object)number0));
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, number1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      assertNotNull(date0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 993.1258821701, 993.1258821701, 993.1258821701, 993.1258821701, 1125.6121254305465);
      assertNotNull(oHLCDataItem0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertNotNull(number0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(993.1258821701, number0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertFalse(vector0.contains(993.1258821701));
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, vector0, false);
      assertNull(range0);
      assertFalse(vector0.contains(false));
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Object[][][] objectArray0 = new Object[0][1][8];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(objectArray0);
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals(0, objectArray0.length);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultWindDataset0);
      assertNull(number1);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals(0, objectArray0.length);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(defaultWindDataset0);
      assertNull(range1);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals(0, objectArray0.length);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0);
      assertNotNull(range2);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(993.1258821701, range2.getUpperBound(), 0.01);
      assertEquals(993.1258821701, range2.getCentralValue(), 0.01);
      assertEquals(993.1258821701, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Short short0 = new Short((short)3);
      assertNotNull(short0);
      assertEquals((short)3, (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((short)3));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains((short)3));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      defaultStatisticalCategoryDataset0.add(1851.5510032638, 1851.5510032638, (Comparable) short0, (Comparable) short0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertNotNull(range0);
      assertTrue(arrayList0.contains((short)3));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(3703.1020065276, range0.getUpperBound(), 0.01);
      assertEquals(1851.5510032638, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(3703.1020065276, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("aK8,-=#`f6>s^U6");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      MockDate mockDate0 = new MockDate(145, 145, 0, 2, 1);
      assertNotNull(mockDate0);
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(date0, mockDate0);
      assertNotNull(simpleTimePeriod0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals("Wed Jan 31 02:01:00 GMT 2057", mockDate0.toString());
      assertEquals(2748132060000L, simpleTimePeriod0.getEndMillis());
      assertEquals((-12219292800000L), simpleTimePeriod0.getStartMillis());
      
      defaultStatisticalCategoryDataset0.add(0.0, 2078.38, (Comparable) "aK8,-=#`f6>s^U6", (Comparable) simpleTimePeriod0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals("Wed Jan 31 02:01:00 GMT 2057", mockDate0.toString());
      assertEquals(2748132060000L, simpleTimePeriod0.getEndMillis());
      assertEquals((-12219292800000L), simpleTimePeriod0.getStartMillis());
      
      Range range0 = new Range(1, 2);
      assertNotNull(range0);
      assertEquals(1.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, (-2609), 139);
      assertNotNull(slidingCategoryDataset0);
      assertEquals((-2609), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(139, slidingCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(0.0, 0.0, "");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Float float0 = new Float((-280.3091));
      assertNotNull(float0);
      assertEquals((-280.3091F), (float)float0, 0.01F);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(float0));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Float float1 = new Float((-280.3091));
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-280.3091F), (float)float1, 0.01F);
      
      stack0.addElement(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertTrue(stack0.contains(float0));
      assertEquals("[-280.3091]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(float0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, false);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      
      Vector<YIntervalSeriesCollection> vector0 = new Vector<YIntervalSeriesCollection>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Short short0 = new Short((short)3);
      assertNotNull(short0);
      assertEquals((short)3, (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((short)3));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains((short)3));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      boolean boolean1 = arrayList0.add(short0);
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayList0.contains((short)3));
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(boolean1);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      defaultStatisticalCategoryDataset0.add((double) (short)3, 4.0, (Comparable) short0, (Comparable) short0);
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(3.0, range0.getUpperBound(), 0.01);
      assertEquals(3.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(3.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Short short0 = Short.valueOf((short)13);
      assertNotNull(short0);
      assertEquals((short)13, (short)short0);
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains((short)13));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate((short)13, (short)13, (short)13, (-421), (short)13);
      assertNotNull(mockDate0);
      
      boolean boolean1 = arrayList0.add(short0);
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayList0.contains((short)13));
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(boolean1);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (short)13, (short)13, 6.283185307179586, (-674.1), (-674.1));
      assertNotNull(oHLCDataItem0);
      assertEquals("Mon Jan 26 11:13:00 GMT 1914", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(short0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertNotNull(number0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(13.0, number0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, arrayList0, true);
      assertNotNull(range0);
      assertTrue(arrayList0.contains((short)13));
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.76502522E12), range0.getUpperBound(), 0.01);
      assertEquals((-1.76502522E12), range0.getCentralValue(), 0.01);
      assertEquals((-1.76502522E12), range0.getLowerBound(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      assertNotNull(number1);
      assertFalse(number1.equals((Object)number0));
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(6.283185307179586, number1);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      double double0 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 701);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, true);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertTrue(arrayList0.contains((short)13));
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.76502522E12), range0.getUpperBound(), 0.01);
      assertEquals((-1.76502522E12), range0.getCentralValue(), 0.01);
      assertEquals((-1.76502522E12), range0.getLowerBound(), 0.01);
      assertEquals(6.283185307179586, range1.getLowerBound(), 0.01);
      assertEquals(9.641592653589793, range1.getCentralValue(), 0.01);
      assertEquals(6.716814692820414, range1.getLength(), 0.01);
      assertEquals(13.0, range1.getUpperBound(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(1, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      mockDate0.setTime((-4L));
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      
      Date[] dateArray0 = new Date[4];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) (-4L);
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Instant instant0 = MockInstant.ofEpochSecond(0L, 0L);
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertNotNull(date0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("_mtq#k(`E-", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {0.0, (-4.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(4, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      defaultHighLowDataset0.clearSelection();
      assertArrayEquals(new double[] {0.0, (-4.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
      assertNotNull(number0);
      assertArrayEquals(new double[] {0.0, (-4.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals((-4.0), number0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[][] doubleArray0 = new double[6][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("9~w\"~6", "9~w\"~6", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(6, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(6, doubleArray0.length);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(91, 91);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(90, dynamicTimeSeriesCollection0.getNewestIndex());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, (double) 0);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertNotSame(range1, range0);
      assertEquals(6, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 2);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals(6, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "9~w\"~6", (double) 59L, 0);
      assertNotNull(pieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals(6, doubleArray0.length);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0);
      assertNotNull(range2);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(90, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range2.getLength(), 0.01);
      assertEquals(Double.NaN, range2.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range2.getCentralValue(), 0.01);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Short short0 = new Short((short)163);
      assertNotNull(short0);
      assertEquals((short)163, (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((short)163));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      defaultStatisticalCategoryDataset0.add((-218.421841), (-218.421841), (Comparable) short0, (Comparable) short0);
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains((short)163));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(short0);
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      int int0 = keyToGroupMap0.getGroupIndex(short0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0, int0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-218.421841), range0.getUpperBound(), 0.01);
      assertEquals((-218.421841), range0.getCentralValue(), 0.01);
      assertEquals((-218.421841), range0.getLowerBound(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Float float0 = new Float(1442.483423179095);
      assertNotNull(float0);
      assertEquals(1442.4834F, (float)float0, 0.01F);
      
      categoryTableXYDataset0.add(1442.483423179095, 1442.483423179095, "org.jfree.data.time.Day");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Float float1 = new Float(Double.POSITIVE_INFINITY);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, (float)float1, 0.01F);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(float0));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      
      boolean boolean0 = stack0.add((Float) null);
      assertFalse(stack0.contains(float0));
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[null]", stack0.toString());
      assertTrue(boolean0);
      
      stack0.addElement((Float) null);
      assertFalse(stack0.contains(float0));
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(2, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[null, null]", stack0.toString());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(721.2417115895475, range0.getCentralValue(), 0.01);
      assertEquals(1442.483423179095, range0.getUpperBound(), 0.01);
      assertEquals(1442.483423179095, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Short short0 = new Short((short)146);
      assertNotNull(short0);
      assertEquals((short)146, (short)short0);
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset1);
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      boolean boolean1 = defaultMultiValueCategoryDataset1.hasListener(timePeriodValuesCollection0);
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      assertFalse(boolean1);
      
      defaultMultiValueCategoryDataset1.add(arrayList0, short0, short0);
      assertFalse(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset1, (List) arrayList0, true);
      assertNotNull(range0);
      assertFalse(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(146.0, range0.getUpperBound(), 0.01);
      assertEquals(146.0, range0.getCentralValue(), 0.01);
      assertEquals(146.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(4367.0, 4367.0, "H6Pli7YD\">]4aDJ`Yf");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset1 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset1);
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      
      int int0 = defaultBoxAndWhiskerCategoryDataset1.getColumnCount();
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      assertNotSame(defaultBoxAndWhiskerCategoryDataset1, defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(0, int0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertTrue(boolean0);
      
      Double double0 = new Double(4367.0);
      assertNotNull(double0);
      assertEquals(4367.0, (double)double0, 0.01);
      
      Vector<XYSeriesCollection> vector0 = new Vector<XYSeriesCollection>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(4367.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4367.0, range0.getCentralValue(), 0.01);
      assertEquals(4367.0, range0.getLowerBound(), 0.01);
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getRowKey(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Short short0 = new Short((short)3);
      assertNotNull(short0);
      assertEquals((short)3, (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(short0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      boolean boolean1 = arrayList0.add(short0);
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(boolean1);
      
      defaultStatisticalCategoryDataset0.add((double) (short)3, 4.0, (Comparable) short0, (Comparable) short0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertNotNull(range0);
      assertTrue(arrayList0.contains((short)3));
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals(8.0, range0.getLength(), 0.01);
      assertEquals(3.0, range0.getCentralValue(), 0.01);
      assertEquals(7.0, range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, (short)3, (-2622));
      assertNotNull(slidingCategoryDataset0);
      assertEquals(3, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-2622), slidingCategoryDataset0.getMaximumCategoryCount());
      
      boolean boolean2 = DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(3, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-2622), slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(4367.0, 4367.0, "H6Pli7YD\">]4aDJ`Yf");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(4367.0));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-2338.97225971));
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-2338.97225971), range0.getLowerBound(), 0.01);
      assertEquals(4367.0, range0.getLength(), 0.01);
      assertEquals((-155.4722597099999), range0.getCentralValue(), 0.01);
      assertEquals(2028.02774029, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      int int0 = categoryTableXYDataset0.getSeriesCount();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0, int0);
      
      categoryTableXYDataset0.add((-226.0), (-226.0), "9~w\"~6");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, false);
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals((-226.0), range0.getUpperBound(), 0.01);
      assertEquals((-226.0), range0.getCentralValue(), 0.01);
      assertEquals((-226.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-226.0), range1.getLowerBound(), 0.01);
      assertEquals((-226.0), range1.getUpperBound(), 0.01);
      assertEquals((-226.0), range1.getCentralValue(), 0.01);
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Short short0 = new Short((short)163);
      assertNotNull(short0);
      assertEquals((short)163, (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(short0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset1);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short) (-3657);
      doubleArray0[1] = (double) (short) (-3657);
      doubleArray0[2] = 4.0;
      doubleArray0[3] = (double) (short)163;
      doubleArray0[4] = 4.0;
      doubleArray0[2] = (double) (short) (-3657);
      doubleArray0[6] = (double) (short)163;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(short0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {(-3657.0), (-3657.0), (-3657.0), 163.0, 4.0, 0.0, 163.0}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) 163.0);
      assertNotNull(pieDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, false);
      assertNotNull(range0);
      assertArrayEquals(new double[] {(-3657.0), (-3657.0), (-3657.0), 163.0, 4.0, 0.0, 163.0}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) arrayList0, range0, true);
      assertNotNull(range1);
      assertArrayEquals(new double[] {(-3657.0), (-3657.0), (-3657.0), 163.0, 4.0, 0.0, 163.0}, doubleArray0, 0.01);
      assertFalse(range1.equals((Object)range0));
      assertFalse(arrayList0.contains((short) (-3657)));
      assertTrue(arrayList0.contains((short)163));
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals((-3657.0), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-3657.0), range1.getLowerBound(), 0.01);
      assertEquals((-3657.0), range1.getUpperBound(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(1, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultHighLowDataset0);
      assertArrayEquals(new double[] {(-3657.0), (-3657.0), (-3657.0), 163.0, 4.0, 0.0, 163.0}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean1);
      
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      
      Range range3 = Range.expandToInclude(range0, 163.0);
      assertNotNull(range3);
      assertArrayEquals(new double[] {(-3657.0), (-3657.0), (-3657.0), 163.0, 4.0, 0.0, 163.0}, doubleArray0, 0.01);
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(6.962046407415E11, range3.getCentralValue(), 0.01);
      assertEquals(163.0, range3.getLowerBound(), 0.01);
      assertEquals(1.392409281157E12, range3.getLength(), 0.01);
      assertEquals(1.39240928132E12, range3.getUpperBound(), 0.01);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertEquals(1, dateArray0.length);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Short short0 = new Short((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains((short) (-1)));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(37);
      assertNotNull(spreadsheetDate0);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(37, spreadsheetDate0.toSerial());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(5, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      
      SerialDate serialDate0 = SerialDate.addDays(37, spreadsheetDate0);
      assertNotNull(serialDate0);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertFalse(serialDate0.equals((Object)spreadsheetDate0));
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(37, spreadsheetDate0.toSerial());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(5, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(14, serialDate0.getDayOfMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(4, serialDate0.getDayOfWeek());
      assertEquals(3, serialDate0.getMonth());
      assertEquals(74, serialDate0.toSerial());
      assertEquals(1900, serialDate0.getYYYY());
      assertNotSame(spreadsheetDate0, serialDate0);
      assertNotSame(serialDate0, spreadsheetDate0);
      
      Date date0 = serialDate0.toDate();
      assertNotNull(date0);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertFalse(spreadsheetDate0.equals((Object)serialDate0));
      assertFalse(serialDate0.equals((Object)spreadsheetDate0));
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(37, spreadsheetDate0.toSerial());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(5, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(14, serialDate0.getDayOfMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(4, serialDate0.getDayOfWeek());
      assertEquals(3, serialDate0.getMonth());
      assertEquals(74, serialDate0.toSerial());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotSame(spreadsheetDate0, serialDate0);
      assertNotSame(serialDate0, spreadsheetDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 6.283185307179586, 2958465, 3, 1854.42, 6.283185307179586);
      assertNotNull(oHLCDataItem0);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertFalse(spreadsheetDate0.equals((Object)serialDate0));
      assertFalse(serialDate0.equals((Object)spreadsheetDate0));
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(37, spreadsheetDate0.toSerial());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(5, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(14, serialDate0.getDayOfMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(4, serialDate0.getDayOfWeek());
      assertEquals(3, serialDate0.getMonth());
      assertEquals(74, serialDate0.toSerial());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, 4, 1673.3, (-3797.64529), 3091.6637478227076, 2);
      assertNotNull(oHLCDataItem1);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertFalse(spreadsheetDate0.equals((Object)serialDate0));
      assertFalse(serialDate0.equals((Object)spreadsheetDate0));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(37, spreadsheetDate0.toSerial());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(5, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(14, serialDate0.getDayOfMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(4, serialDate0.getDayOfWeek());
      assertEquals(3, serialDate0.getMonth());
      assertEquals(74, serialDate0.toSerial());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(date0, 4172.38040505997, 1900, 1854.42, 6.283185307179586, Double.POSITIVE_INFINITY);
      assertNotNull(oHLCDataItem2);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertFalse(spreadsheetDate0.equals((Object)serialDate0));
      assertFalse(serialDate0.equals((Object)spreadsheetDate0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(37, spreadsheetDate0.toSerial());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(5, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(14, serialDate0.getDayOfMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(4, serialDate0.getDayOfWeek());
      assertEquals(3, serialDate0.getMonth());
      assertEquals(74, serialDate0.toSerial());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(short0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertNotNull(number0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(2958465.0, number0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, arrayList0, true);
      assertNotNull(range0);
      assertTrue(arrayList0.contains((short) (-1)));
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) arrayList0, true);
      assertNull(range1);
      assertTrue(arrayList0.contains((short) (-1)));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      Instant instant0 = MockInstant.ofEpochMilli(0L);
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertNotNull(date0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      
      dateArray0[2] = date0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) 0L;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0L;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, doubleArray1.length);
      assertEquals(3, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) 0.0);
      assertNotNull(pieDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotNull(range0);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(6.9620464066E11, range0.getCentralValue(), 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray1.length);
      assertEquals(3, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(defaultHighLowDataset0));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultHighLowDataset0);
      assertNotNull(intervalXYDelegate0);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1, doubleArray1.length);
      assertEquals(3, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      
      Range range1 = intervalXYDelegate0.getDomainBounds(false);
      assertNotNull(range1);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(range1.equals((Object)range0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.39240928132E12, range1.getLength(), 0.01);
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(6.9620464066E11, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(range1, range0);
      assertEquals(1, doubleArray1.length);
      assertEquals(3, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      
      IntervalXYDelegate intervalXYDelegate1 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertNotNull(intervalXYDelegate1);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate1.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertEquals(1, doubleArray1.length);
      assertEquals(3, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range1, false);
      assertNull(range2);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(stack0.contains(defaultHighLowDataset0));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.39240928132E12, range1.getLength(), 0.01);
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(6.9620464066E11, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(range1, range0);
      assertEquals(1, doubleArray1.length);
      assertEquals(3, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultHighLowDataset0);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray1.length);
      assertEquals(3, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
      
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      Range range3 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertNotNull(range3);
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      
      Range range4 = DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0);
      assertNull(range4);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Short short0 = new Short((short)163);
      assertNotNull(short0);
      assertEquals((short)163, (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((short)163));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains((short)163));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add((-1.0), 1419.152067, "org.jfree.data.gantt.TaskSeriesCollection");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1419.152067, range0.getUpperBound(), 0.01);
      assertEquals(1419.152067, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1419.152067, range0.getCentralValue(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertNull(range1);
      assertTrue(arrayList0.contains((short)163));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(0.0, 0.0, "");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Float float0 = new Float(Double.POSITIVE_INFINITY);
      assertNotNull(float0);
      assertEquals(Float.POSITIVE_INFINITY, (float)float0, 0.01F);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(float0));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      
      boolean boolean0 = stack0.add((Float) null);
      assertFalse(stack0.contains(float0));
      assertEquals("[null]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertTrue(boolean0);
      
      stack0.addElement(float0);
      assertTrue(stack0.contains(float0));
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[null, Infinity]", stack0.toString());
      assertFalse(stack0.isEmpty());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Short short0 = new Short((short)163);
      assertNotNull(short0);
      assertEquals((short)163, (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(short0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset1);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)3;
      doubleArray0[1] = (double) (short)3;
      doubleArray0[2] = 4.0;
      doubleArray0[3] = (double) (short)163;
      doubleArray0[4] = 4.0;
      doubleArray0[5] = (double) (short)3;
      doubleArray0[6] = (double) (short)163;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(short0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {3.0, 3.0, 4.0, 163.0, 4.0, 3.0, 163.0}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) 163.0);
      assertNotNull(pieDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, false);
      assertNotNull(range0);
      assertArrayEquals(new double[] {3.0, 3.0, 4.0, 163.0, 4.0, 3.0, 163.0}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) arrayList0, range0, true);
      assertNotNull(range1);
      assertArrayEquals(new double[] {3.0, 3.0, 4.0, 163.0, 4.0, 3.0, 163.0}, doubleArray0, 0.01);
      assertFalse(range1.equals((Object)range0));
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.contains((short)3));
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(3.0, range1.getUpperBound(), 0.01);
      assertEquals(3.0, range1.getCentralValue(), 0.01);
      assertEquals(3.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(1, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultHighLowDataset0);
      assertArrayEquals(new double[] {3.0, 3.0, 4.0, 163.0, 4.0, 3.0, 163.0}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean1);
      
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      assertNotNull(jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range3);
      assertArrayEquals(new double[] {3.0, 3.0, 4.0, 163.0, 4.0, 3.0, 163.0}, doubleArray0, 0.01);
      assertTrue(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(3.0, range3.getUpperBound(), 0.01);
      assertEquals(3.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(3.0, range3.getLowerBound(), 0.01);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertEquals(1, dateArray0.length);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[][] doubleArray0 = new double[9][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("9~w\"~6", "9~w\"~6", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(9, doubleArray0.length);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Short short0 = new Short((short)3993);
      assertNotNull(short0);
      assertEquals((short)3993, (short)short0);
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains((short)3993));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      MockDate mockDate0 = new MockDate(831, 80, (-2510), 80, 1158);
      assertNotNull(mockDate0);
      
      long long0 = mockDate0.getTime();
      assertEquals("Tue Oct 21 03:18:00 GMT 2730", mockDate0.toString());
      assertEquals(24008584680000L, long0);
      
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-424.0);
      doubleArray1[1] = (double) 24008584680000L;
      doubleArray1[2] = (double) 24008584680000L;
      doubleArray1[3] = (double) 24008584680000L;
      doubleArray1[4] = (double) 80;
      doubleArray1[5] = (double) (-2510);
      doubleArray1[6] = (double) (short)3993;
      doubleArray1[7] = (double) 1158;
      doubleArray1[8] = (double) (-2510);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {(-424.0), 2.400858468E13, 2.400858468E13, 2.400858468E13, 80.0, (-2510.0), 3993.0, 1158.0, (-2510.0)}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Tue Oct 21 03:18:00 GMT 2730", mockDate0.toString());
      assertEquals(3, dateArray0.length);
      assertEquals(9, doubleArray1.length);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
      assertNotNull(number0);
      assertArrayEquals(new double[] {(-424.0), 2.400858468E13, 2.400858468E13, 2.400858468E13, 80.0, (-2510.0), 3993.0, 1158.0, (-2510.0)}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Tue Oct 21 03:18:00 GMT 2730", mockDate0.toString());
      assertEquals(3, dateArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(2.400858468E13, number0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) 2.400858468E13);
      assertNotNull(pieDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotNull(range0);
      assertArrayEquals(new double[] {(-424.0), 2.400858468E13, 2.400858468E13, 2.400858468E13, 80.0, (-2510.0), 3993.0, 1158.0, (-2510.0)}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Tue Oct 21 03:18:00 GMT 2730", mockDate0.toString());
      assertEquals(2.400858468E13, range0.getUpperBound(), 0.01);
      assertEquals(2.400858468E13, range0.getCentralValue(), 0.01);
      assertEquals(2.400858468E13, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(3, dateArray0.length);
      assertEquals(9, doubleArray1.length);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) arrayList0, range0, true);
      assertNotNull(range1);
      assertArrayEquals(new double[] {(-424.0), 2.400858468E13, 2.400858468E13, 2.400858468E13, 80.0, (-2510.0), 3993.0, 1158.0, (-2510.0)}, doubleArray1, 0.01);
      assertFalse(range1.equals((Object)range0));
      assertTrue(arrayList0.contains((short)3993));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Tue Oct 21 03:18:00 GMT 2730", mockDate0.toString());
      assertEquals(2.400858468E13, range0.getUpperBound(), 0.01);
      assertEquals(2.400858468E13, range0.getCentralValue(), 0.01);
      assertEquals(2.400858468E13, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2.4008584680424E13, range1.getLength(), 0.01);
      assertEquals(1.2004292339788E13, range1.getCentralValue(), 0.01);
      assertEquals((-424.0), range1.getLowerBound(), 0.01);
      assertEquals(2.400858468E13, range1.getUpperBound(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(3, dateArray0.length);
      assertEquals(9, doubleArray1.length);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotNull(range2);
      assertArrayEquals(new double[] {(-424.0), 2.400858468E13, 2.400858468E13, 2.400858468E13, 80.0, (-2510.0), 3993.0, 1158.0, (-2510.0)}, doubleArray1, 0.01);
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Tue Oct 21 03:18:00 GMT 2730", mockDate0.toString());
      assertEquals(2.400858468E13, range2.getUpperBound(), 0.01);
      assertEquals(2.4008584680424E13, range2.getLength(), 0.01);
      assertEquals(1.2004292339788E13, range2.getCentralValue(), 0.01);
      assertEquals((-424.0), range2.getLowerBound(), 0.01);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(3, dateArray0.length);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(0.0, (-226.0), "aK8,-=#`f6>s^U6");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-226.0), range0.getCentralValue(), 0.01);
      assertEquals((-226.0), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-226.0), range0.getLowerBound(), 0.01);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(1.0, 2093.4);
      assertNotNull(lineFunction2D0);
      assertEquals(1.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(2093.4, lineFunction2D0.getSlope(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, (-226.0), (-188.419022770528), 1061, "aK8,-=#`f6>s^U6");
      assertNotNull(xYSeriesCollection0);
      assertEquals(1.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(2093.4, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(1.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(2093.4, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals((-207.209511385264), range1.getCentralValue(), 0.01);
      assertEquals(38.58097722947201, range1.getLength(), 0.01);
      assertEquals((-226.5), range1.getLowerBound(), 0.01);
      assertEquals((-187.919022770528), range1.getUpperBound(), 0.01);
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add(0.0, Double.NaN, "3V^ticJ");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Short short0 = new Short((short)3);
      assertNotNull(short0);
      assertEquals((short)3, (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(short0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Short short1 = new Short((short)3);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)3, (short)short1);
      
      boolean boolean0 = arrayList0.add(short1);
      assertTrue(short1.equals((Object)short0));
      assertTrue(arrayList0.contains(short1));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(jDBCCategoryDataset0);
      assertNull(number0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((-1353.3233028898), (-2.147483648E9), (Comparable) short1, (Comparable) short0);
      assertTrue(short0.equals((Object)short1));
      assertTrue(short1.equals((Object)short0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      assertNotNull(range0);
      assertTrue(arrayList0.contains(short1));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1353.3233028898), range0.getLowerBound(), 0.01);
      assertEquals((-1353.3233028898), range0.getUpperBound(), 0.01);
      assertEquals((-1353.3233028898), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Short short0 = new Short((short)163);
      assertNotNull(short0);
      assertEquals((short)163, (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((short)163));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains((short)163));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset1);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      
      defaultStatisticalCategoryDataset0.add((double) (short)3, 4.0, (Comparable) short0, (Comparable) short0);
      assertFalse(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(range0);
      assertFalse(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertEquals(7.0, range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(8.0, range0.getLength(), 0.01);
      assertEquals(3.0, range0.getCentralValue(), 0.01);
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = new Range(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLowerBound(), 0.01);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Float float0 = new Float(Double.POSITIVE_INFINITY);
      assertNotNull(float0);
      assertEquals(Float.POSITIVE_INFINITY, (float)float0, 0.01F);
      
      stack0.addElement(float0);
      assertTrue(stack0.contains(float0));
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[Infinity]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(float0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, range0, true);
      assertNull(range1);
      assertTrue(stack0.contains(float0));
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[Infinity]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(boolean0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(boolean1);
      
      boolean boolean2 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add((-3010.570875705961), 2.694700511038959, "U>1kC#k^lqmCv3#;<");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(919.33969934114, (-631.181170657), "4eF`");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(3929.910575047101, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 1725.0);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(3929.910575047101, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(633.8758711680391, range0.getLength(), 0.01);
      assertEquals(1410.7567649270195, range0.getCentralValue(), 0.01);
      assertEquals(1727.694700511039, range0.getUpperBound(), 0.01);
      assertEquals(1093.8188293429998, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Short short0 = Short.valueOf((short)13);
      assertNotNull(short0);
      assertEquals((short)13, (short)short0);
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate((short)13, (short)13, (short)13, (-421), (short)13);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 2550.178618476, 2550.178618476, 6.283185307179586, (-674.1), (-674.1));
      assertNotNull(oHLCDataItem0);
      assertEquals("Mon Jan 26 11:13:00 GMT 1914", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(short0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, true);
      assertNull(range1);
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      double[][] doubleArray0 = new double[1][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Ty*W", "_mtq#k(`E-", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Vector<YIntervalSeriesCollection> vector0 = new Vector<YIntervalSeriesCollection>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, number0);
      
      Number[][] numberArray0 = new Number[5][9];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[2];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = number0;
      numberArray2[1] = number0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[0];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[7];
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray2));
      
      numberArray4[0] = number0;
      numberArray4[1] = number0;
      numberArray4[2] = number0;
      numberArray4[3] = number0;
      numberArray4[4] = number0;
      numberArray4[5] = number0;
      numberArray4[6] = number0;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[7];
      assertFalse(numberArray5.equals((Object)numberArray4));
      assertFalse(numberArray5.equals((Object)numberArray1));
      assertFalse(numberArray5.equals((Object)numberArray3));
      assertFalse(numberArray5.equals((Object)numberArray2));
      
      numberArray5[0] = number0;
      numberArray5[1] = number0;
      numberArray5[2] = number0;
      numberArray5[3] = number0;
      numberArray5[4] = number0;
      numberArray5[5] = number0;
      numberArray5[6] = number0;
      numberArray0[4] = numberArray5;
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("_mtq#k(`E-", "_mtq#k(`E-", numberArray0);
      assertNotNull(categoryDataset1);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotSame(categoryDataset1, categoryDataset0);
      assertEquals(5, numberArray0.length);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset1);
      assertNotNull(range1);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertTrue(range1.equals((Object)range0));
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertNotSame(range1, range0);
      assertEquals(5, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<DefaultHighLowDataset> class0 = DefaultHighLowDataset.class;
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("B%Mz!W]\"C");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      RegularTimePeriod regularTimePeriod0 = RegularTimePeriod.createInstance(class0, mockDate0, timeZone0);
      assertNull(regularTimePeriod0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) null, (KeyedValues) defaultPieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Float float0 = new Float(1442.483423179095);
      assertNotNull(float0);
      assertEquals(1442.4834F, (float)float0, 0.01F);
      
      categoryTableXYDataset0.remove((Number) float0, "", false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(0.0, 0.0, "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.setIntervalPositionFactor(0.0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(categoryTableXYDataset0, true);
      assertNotNull(intervalXYDelegate0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      Byte byte0 = new Byte((byte)2);
      assertNotNull(byte0);
      assertEquals((byte)2, (byte)byte0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (byte)2, 5);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(2, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(5, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(slidingGanttCategoryDataset0, true);
      assertNull(range1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(2, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(5, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      boolean boolean0 = vector0.add(byte0);
      assertTrue(vector0.contains((byte)2));
      assertEquals(1, vector0.size());
      assertEquals("[2]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertTrue(boolean0);
      
      Consumer<Byte> consumer0 = (Consumer<Byte>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      assertTrue(vector0.contains((byte)2));
      assertEquals(1, vector0.size());
      assertEquals("[2]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      
      Vector<Byte> vector1 = new Vector<Byte>(vector0);
      assertNotNull(vector1);
      assertTrue(vector1.equals((Object)vector0));
      assertTrue(vector0.contains((byte)2));
      assertTrue(vector1.contains((byte)2));
      assertEquals(1, vector0.size());
      assertEquals("[2]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector1.capacity());
      assertEquals(1, vector1.size());
      assertEquals("[2]", vector1.toString());
      assertFalse(vector1.isEmpty());
      
      Vector<Locale.LanguageRange> vector2 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector2);
      assertEquals("[]", vector2.toString());
      assertTrue(vector2.isEmpty());
      assertEquals(10, vector2.capacity());
      assertEquals(0, vector2.size());
      
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertNotNull(set0);
      assertFalse(set0.contains(""));
      assertFalse(set0.isEmpty());
      assertEquals(600, set0.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector2, (Collection<String>) set0, locale_FilteringMode0);
      assertNotNull(list0);
      assertFalse(set0.contains(""));
      assertFalse(list0.contains(""));
      assertEquals("[]", vector2.toString());
      assertTrue(vector2.isEmpty());
      assertEquals(10, vector2.capacity());
      assertEquals(0, vector2.size());
      assertFalse(set0.isEmpty());
      assertEquals(600, set0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) list0, false);
      assertNull(range2);
      assertFalse(set0.contains(""));
      assertFalse(list0.contains(""));
      assertEquals("[]", vector2.toString());
      assertTrue(vector2.isEmpty());
      assertEquals(10, vector2.capacity());
      assertEquals(0, vector2.size());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(set0.isEmpty());
      assertEquals(600, set0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertNotNull(number0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, number0);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(number0));
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      
      Range range3 = DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) list0, false);
      assertNull(range3);
      assertFalse(set0.contains(""));
      assertFalse(list0.contains(""));
      assertEquals("[]", vector2.toString());
      assertTrue(vector2.isEmpty());
      assertEquals(10, vector2.capacity());
      assertEquals(0, vector2.size());
      assertFalse(set0.isEmpty());
      assertEquals(600, set0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(2, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(5, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Range range4 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotNull(range4);
      assertFalse(range4.equals((Object)range0));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertNotSame(range4, range0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[][] doubleArray0 = new double[9][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("9~w\"~6", "9~w\"~6", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(9, doubleArray0.length);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Short short0 = new Short((short)3993);
      assertNotNull(short0);
      assertEquals((short)3993, (short)short0);
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      MockDate mockDate0 = new MockDate(831, 80, (-2510), 80, 1158);
      assertNotNull(mockDate0);
      
      long long0 = mockDate0.getTime();
      assertEquals("Tue Oct 21 03:18:00 GMT 2730", mockDate0.toString());
      assertEquals(24008584680000L, long0);
      
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-424.0);
      doubleArray1[1] = (double) 24008584680000L;
      doubleArray1[2] = (double) 24008584680000L;
      doubleArray1[3] = (double) 24008584680000L;
      doubleArray1[4] = (double) 80;
      doubleArray1[5] = (double) (-2510);
      doubleArray1[6] = (double) (short)3993;
      doubleArray1[7] = (double) 1158;
      doubleArray1[8] = (double) (-2510);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {(-424.0), 2.400858468E13, 2.400858468E13, 2.400858468E13, 80.0, (-2510.0), 3993.0, 1158.0, (-2510.0)}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Tue Oct 21 03:18:00 GMT 2730", mockDate0.toString());
      assertEquals(3, dateArray0.length);
      assertEquals(9, doubleArray1.length);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
      assertNotNull(number0);
      assertArrayEquals(new double[] {(-424.0), 2.400858468E13, 2.400858468E13, 2.400858468E13, 80.0, (-2510.0), 3993.0, 1158.0, (-2510.0)}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Tue Oct 21 03:18:00 GMT 2730", mockDate0.toString());
      assertEquals(3, dateArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(2.400858468E13, number0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) 2.400858468E13);
      assertNotNull(pieDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotNull(range0);
      assertArrayEquals(new double[] {(-424.0), 2.400858468E13, 2.400858468E13, 2.400858468E13, 80.0, (-2510.0), 3993.0, 1158.0, (-2510.0)}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Tue Oct 21 03:18:00 GMT 2730", mockDate0.toString());
      assertEquals(2.400858468E13, range0.getUpperBound(), 0.01);
      assertEquals(2.400858468E13, range0.getLowerBound(), 0.01);
      assertEquals(2.400858468E13, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(3, dateArray0.length);
      assertEquals(9, doubleArray1.length);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) arrayList0, range0, true);
      assertNotNull(range1);
      assertArrayEquals(new double[] {(-424.0), 2.400858468E13, 2.400858468E13, 2.400858468E13, 80.0, (-2510.0), 3993.0, 1158.0, (-2510.0)}, doubleArray1, 0.01);
      assertFalse(range1.equals((Object)range0));
      assertTrue(arrayList0.contains((short)3993));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Tue Oct 21 03:18:00 GMT 2730", mockDate0.toString());
      assertEquals(2.400858468E13, range0.getUpperBound(), 0.01);
      assertEquals(2.400858468E13, range0.getLowerBound(), 0.01);
      assertEquals(2.400858468E13, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2.4008584680424E13, range1.getLength(), 0.01);
      assertEquals((-424.0), range1.getLowerBound(), 0.01);
      assertEquals(2.400858468E13, range1.getUpperBound(), 0.01);
      assertEquals(1.2004292339788E13, range1.getCentralValue(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(3, dateArray0.length);
      assertEquals(9, doubleArray1.length);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultHighLowDataset0);
      assertArrayEquals(new double[] {(-424.0), 2.400858468E13, 2.400858468E13, 2.400858468E13, 80.0, (-2510.0), 3993.0, 1158.0, (-2510.0)}, doubleArray1, 0.01);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Tue Oct 21 03:18:00 GMT 2730", mockDate0.toString());
      assertEquals(3, dateArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = Double.NEGATIVE_INFINITY;
      doubleArray2[5] = (-392.617213317632);
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 0.0;
      doubleArray2[8] = 0.0;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("_<tFB053l$pYI", "_<tFB053l$pYI", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Comparable comparable0 = keyToGroupMap0.getGroup(0.0);
      assertNotNull(comparable0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals("Default Group", comparable0);
      
      boolean boolean0 = keyToGroupMap0.equals(xIntervalSeriesCollection0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertFalse(boolean0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      
      int int0 = defaultCategoryDataset0.getRowCount();
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertEquals(0, int0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertFalse(categoryDataset0.equals((Object)defaultCategoryDataset0));
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertNull(number0);
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) vectorSeriesCollection0);
      assertNull(number1);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) xIntervalSeriesCollection0, true);
      assertNull(range1);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(0.0, 0.0, "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      double[][] doubleArray0 = new double[5][6];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray0[4] = doubleArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(5, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(5, doubleArray0.length);
      
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(0.0));
      assertEquals(0, linkedList0.size());
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) vectorSeriesCollection0, (List) linkedList0, range1, true);
      assertNull(range2);
      assertTrue(range1.equals((Object)range0));
      assertFalse(linkedList0.contains(0.0));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add((-1.0), (-4802.783130893), "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Float float0 = new Float(1129.939178413638);
      assertNotNull(float0);
      assertEquals(1129.9392F, (float)float0, 0.01F);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(float0));
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      boolean boolean0 = stack0.add(float0);
      assertTrue(stack0.contains(float0));
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[1129.9392]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean0);
      
      stack0.addElement(float0);
      assertTrue(stack0.contains(float0));
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertEquals("[1129.9392, 1129.9392]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range0, true);
      assertNull(range1);
      assertTrue(stack0.contains(float0));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertEquals("[1129.9392, 1129.9392]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Range range2 = DatasetUtilities.findCumulativeRangeBounds(taskSeriesCollection0);
      assertNull(range2);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Float float0 = new Float(1442.483423179095);
      assertNotNull(float0);
      assertEquals(1442.4834F, (float)float0, 0.01F);
      
      categoryTableXYDataset0.remove((Number) float0, "", false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(0.0, 0.0, "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.setIntervalPositionFactor(0.0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(categoryTableXYDataset0, true);
      assertNotNull(intervalXYDelegate0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      Byte byte0 = new Byte((byte)2);
      assertNotNull(byte0);
      assertEquals((byte)2, (byte)byte0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (byte)2, (byte)2);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(2, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(2, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(slidingGanttCategoryDataset0, false);
      assertNull(range1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(2, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(2, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      boolean boolean0 = vector0.add(byte0);
      assertTrue(vector0.contains((byte)2));
      assertEquals("[2]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertTrue(boolean0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      assertTrue(vector0.contains((byte)2));
      assertEquals("[2]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      
      Vector<Byte> vector1 = new Vector<Byte>(vector0);
      assertNotNull(vector1);
      assertTrue(vector1.equals((Object)vector0));
      assertTrue(vector0.contains((byte)2));
      assertTrue(vector1.contains((byte)2));
      assertEquals("[2]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector1.size());
      assertFalse(vector1.isEmpty());
      assertEquals("[2]", vector1.toString());
      assertEquals(1, vector1.capacity());
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) vector1, true);
      assertNotNull(range2);
      assertTrue(range2.equals((Object)range0));
      assertTrue(vector0.equals((Object)vector1));
      assertTrue(vector1.equals((Object)vector0));
      assertTrue(vector0.contains((byte)2));
      assertTrue(vector1.contains((byte)2));
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.5, range2.getCentralValue(), 0.01);
      assertEquals(1.0, range2.getLength(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals("[2]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector1.size());
      assertFalse(vector1.isEmpty());
      assertEquals("[2]", vector1.toString());
      assertEquals(1, vector1.capacity());
      assertNotSame(range2, range0);
      assertNotSame(vector0, vector1);
      assertNotSame(vector1, vector0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((double) (byte)2, 1221.3667014, (Comparable) float0, (Comparable) byte0);
      Range range3 = DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) vector0, true);
      assertNull(range3);
      assertTrue(vector0.equals((Object)vector1));
      assertTrue(vector0.contains((byte)2));
      assertEquals("[2]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(2, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(2, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotSame(vector0, vector1);
      
      Range range4 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) vector0, false);
      assertNotNull(range4);
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range2));
      assertTrue(vector0.equals((Object)vector1));
      assertTrue(vector0.contains((byte)2));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals("[2]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertNotSame(vector0, vector1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Short short0 = new Short((short) (-1360));
      assertNotNull(short0);
      assertEquals((short) (-1360), (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((short) (-1360)));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Short short1 = new Short((short)14);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)14, (short)short1);
      
      boolean boolean0 = arrayList0.add(short1);
      assertFalse(short1.equals((Object)short0));
      assertTrue(arrayList0.contains((short)14));
      assertFalse(arrayList0.contains((short) (-1360)));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      boolean boolean1 = arrayList0.add(short0);
      assertFalse(short0.equals((Object)short1));
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayList0.contains((short)14));
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean1);
      
      categoryTableXYDataset0.add((double) (short)14, (-1578.6602), "org.jfree.da!a.gantt.T7skSeriesCollection");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) arrayList0, true);
      assertNull(range0);
      assertTrue(arrayList0.contains((short)14));
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, true);
      assertNotNull(range1);
      assertTrue(arrayList0.contains((short)14));
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals(14.5, range1.getUpperBound(), 0.01);
      assertEquals(14.0, range1.getCentralValue(), 0.01);
      assertEquals(13.5, range1.getLowerBound(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (short)163);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 163, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Float float0 = new Float(1442.483423179095);
      assertNotNull(float0);
      assertEquals(1442.4834F, (float)float0, 0.01F);
      
      categoryTableXYDataset0.remove((Number) float0, "", false);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add(0.0, 0.0, "");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.setIntervalPositionFactor(0.0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(categoryTableXYDataset0, true);
      assertNotNull(intervalXYDelegate0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Byte byte0 = new Byte((byte)2);
      assertNotNull(byte0);
      assertEquals((byte)2, (byte)byte0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (byte)2, (byte)2);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(2, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(slidingGanttCategoryDataset0, false);
      assertNull(range1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(2, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      boolean boolean0 = vector0.add(byte0);
      assertTrue(vector0.contains(byte0));
      assertFalse(vector0.isEmpty());
      assertEquals("[2]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(boolean0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      assertTrue(vector0.contains(byte0));
      assertFalse(vector0.isEmpty());
      assertEquals("[2]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Vector<Byte> vector1 = new Vector<Byte>(vector0);
      assertNotNull(vector1);
      assertTrue(vector1.equals((Object)vector0));
      assertTrue(vector0.contains(byte0));
      assertTrue(vector1.contains(byte0));
      assertFalse(vector0.isEmpty());
      assertEquals("[2]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector1.capacity());
      assertEquals("[2]", vector1.toString());
      assertFalse(vector1.isEmpty());
      assertEquals(1, vector1.size());
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) vector1, true);
      assertNotNull(range2);
      assertTrue(range2.equals((Object)range0));
      assertTrue(vector0.equals((Object)vector1));
      assertTrue(vector1.equals((Object)vector0));
      assertTrue(vector0.contains(byte0));
      assertTrue(vector1.contains(byte0));
      assertEquals(0.5, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(1.0, range2.getLength(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertFalse(vector0.isEmpty());
      assertEquals("[2]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector1.capacity());
      assertEquals("[2]", vector1.toString());
      assertFalse(vector1.isEmpty());
      assertEquals(1, vector1.size());
      assertNotSame(range2, range0);
      assertNotSame(vector0, vector1);
      assertNotSame(vector1, vector0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertNotNull(number0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, number0);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(number0));
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Short short0 = new Short((short)168);
      assertNotNull(short0);
      assertEquals((short)168, (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((short)168));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains((short)168));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset1);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      
      SynthToolBarUI synthToolBarUI0 = new SynthToolBarUI();
      assertNotNull(synthToolBarUI0);
      
      boolean boolean1 = defaultStatisticalCategoryDataset0.hasListener(synthToolBarUI0);
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertFalse(boolean1);
      
      defaultStatisticalCategoryDataset0.add((double) (short)3, 4.0, (Comparable) short0, (Comparable) short0);
      assertFalse(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertNotNull(range0);
      assertFalse(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.contains((short)3));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(7.0, range0.getUpperBound(), 0.01);
      assertEquals(8.0, range0.getLength(), 0.01);
      assertEquals(3.0, range0.getCentralValue(), 0.01);
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      assertNotNull(range1);
      assertFalse(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertFalse(range1.equals((Object)range0));
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.contains((short)3));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(3.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(3.0, range1.getUpperBound(), 0.01);
      assertEquals(3.0, range1.getCentralValue(), 0.01);
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      
      Float float0 = new Float(1.0);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      stack0.addElement(float0);
      assertTrue(stack0.contains(float0));
      assertEquals("[1.0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(float0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset1 = new DefaultBoxAndWhiskerXYDataset(float0);
      assertNotNull(defaultBoxAndWhiskerXYDataset1);
      assertTrue(defaultBoxAndWhiskerXYDataset1.equals((Object)defaultBoxAndWhiskerXYDataset0));
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset1.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset1.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset1.getOutlierCoefficient(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertNull(number0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Number[][] numberArray0 = new Number[2][9];
      Number[] numberArray1 = new Number[7];
      numberArray1[0] = (Number) float0;
      numberArray1[1] = (Number) float0;
      numberArray1[2] = (Number) float0;
      numberArray1[3] = (Number) float0;
      numberArray1[4] = null;
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      numberArray1[5] = (Number) integer0;
      numberArray1[6] = (Number) float0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[7];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) float0;
      numberArray2[1] = null;
      numberArray2[2] = (Number) integer0;
      numberArray2[3] = null;
      numberArray2[4] = (Number) integer0;
      numberArray2[5] = (Number) integer0;
      numberArray2[6] = (Number) integer0;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[][] doubleArray0 = new double[9][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("9~w\"~6", "9~w\"~6", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(9, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(9, doubleArray0.length);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(91, 91);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(90, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, (double) 0);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertEquals(9, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 2);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals(9, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "9~w\"~6", (double) 60L, 0);
      assertNotNull(pieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals(9, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1673.3;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1673.3, range0.getLowerBound(), 0.01);
      assertEquals(1673.3, range0.getUpperBound(), 0.01);
      assertEquals(1673.3, range0.getCentralValue(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      // Undeclared exception!
      try { 
        defaultTableXYDataset0.getSeries(1923);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.DefaultTableXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add(0.0, 0.0, "");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Float float0 = new Float(Double.POSITIVE_INFINITY);
      assertNotNull(float0);
      assertEquals(Float.POSITIVE_INFINITY, (float)float0, 0.01F);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(float0));
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      boolean boolean0 = stack0.add((Float) null);
      assertFalse(stack0.contains(float0));
      assertEquals(10, stack0.capacity());
      assertEquals("[null]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertTrue(boolean0);
      
      stack0.addElement(float0);
      assertTrue(stack0.contains(float0));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertEquals("[null, Infinity]", stack0.toString());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(float0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.validateObject();
      Short short0 = new Short((short)163);
      assertNotNull(short0);
      assertEquals((short)163, (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((short)163));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains((short)163));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset1);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      
      SynthToolBarUI synthToolBarUI0 = new SynthToolBarUI();
      assertNotNull(synthToolBarUI0);
      
      JRadioButton jRadioButton0 = new JRadioButton((String) null);
      assertNotNull(jRadioButton0);
      assertFalse(jRadioButton0.isFocusCycleRoot());
      assertFalse(jRadioButton0.getFocusTraversalKeysEnabled());
      assertFalse(jRadioButton0.isFocusTraversalPolicyProvider());
      assertFalse(jRadioButton0.isFocusTraversalPolicySet());
      assertFalse(jRadioButton0.getIgnoreRepaint());
      
      Dimension dimension0 = synthToolBarUI0.getMinimumSize(jRadioButton0);
      assertNull(dimension0);
      assertFalse(jRadioButton0.isFocusCycleRoot());
      assertFalse(jRadioButton0.getFocusTraversalKeysEnabled());
      assertFalse(jRadioButton0.isFocusTraversalPolicyProvider());
      assertFalse(jRadioButton0.isFocusTraversalPolicySet());
      assertFalse(jRadioButton0.getIgnoreRepaint());
      
      boolean boolean1 = defaultStatisticalCategoryDataset1.hasListener(synthToolBarUI0);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
      assertFalse(boolean1);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset2 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset2);
      assertTrue(defaultStatisticalCategoryDataset2.equals((Object)defaultStatisticalCategoryDataset1));
      assertTrue(defaultStatisticalCategoryDataset2.equals((Object)defaultStatisticalCategoryDataset0));
      
      defaultStatisticalCategoryDataset2.add((-1.0), 2729.215337329651, (Comparable) short0, (Comparable) short0);
      assertFalse(defaultStatisticalCategoryDataset2.equals((Object)defaultStatisticalCategoryDataset0));
      assertFalse(defaultStatisticalCategoryDataset2.equals((Object)defaultStatisticalCategoryDataset1));
      assertNotSame(defaultStatisticalCategoryDataset2, defaultStatisticalCategoryDataset0);
      assertNotSame(defaultStatisticalCategoryDataset2, defaultStatisticalCategoryDataset1);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset2, (List) arrayList0, true);
      assertNotNull(range0);
      assertFalse(defaultStatisticalCategoryDataset2.equals((Object)defaultStatisticalCategoryDataset0));
      assertFalse(defaultStatisticalCategoryDataset2.equals((Object)defaultStatisticalCategoryDataset1));
      assertTrue(arrayList0.contains((short)163));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals(5458.430674659302, range0.getLength(), 0.01);
      assertEquals(2728.215337329651, range0.getUpperBound(), 0.01);
      assertEquals((-2730.215337329651), range0.getLowerBound(), 0.01);
      assertNotSame(defaultStatisticalCategoryDataset2, defaultStatisticalCategoryDataset0);
      assertNotSame(defaultStatisticalCategoryDataset2, defaultStatisticalCategoryDataset1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[][] doubleArray0 = new double[9][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("9~w\"~6", "9~w\"~6", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(9, doubleArray0.length);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Short short0 = new Short((short)3993);
      assertNotNull(short0);
      assertEquals((short)3993, (short)short0);
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains((short)3993));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, number0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      SynthToolBarUI synthToolBarUI0 = new SynthToolBarUI();
      assertNotNull(synthToolBarUI0);
      
      boolean boolean1 = defaultStatisticalCategoryDataset0.hasListener(defaultIntervalCategoryDataset0);
      assertFalse(boolean1 == boolean0);
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean1);
      
      defaultStatisticalCategoryDataset0.add(4.0, Double.NEGATIVE_INFINITY, (Comparable) short0, (Comparable) "9~w\"~6");
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1.0), (-1.0));
      assertNotNull(lineFunction2D0);
      assertEquals((-1.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-1.0), lineFunction2D0.getIntercept(), 0.01);
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(170);
      assertNotNull(spreadsheetDate0);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(6, spreadsheetDate0.getMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(170, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(18, spreadsheetDate0.getDayOfMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, 3, 4, 170, spreadsheetDate0);
      assertNotNull(xYSeries0);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-1.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(6, spreadsheetDate0.getMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(170, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(18, spreadsheetDate0.getDayOfMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(3.0, xYSeries0.getMinX(), 0.01);
      assertEquals((-4.0), xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(170, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(4.0, xYSeries0.getMaxX(), 0.01);
      assertEquals((-5.0), xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-1.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(6, spreadsheetDate0.getMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(170, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(18, spreadsheetDate0.getDayOfMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(3.0, xYSeries0.getMinX(), 0.01);
      assertEquals((-4.0), xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(170, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(4.0, xYSeries0.getMaxX(), 0.01);
      assertEquals((-5.0), xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, false);
      assertNotNull(range0);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-1.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(6, spreadsheetDate0.getMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(170, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(18, spreadsheetDate0.getDayOfMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(3.0, xYSeries0.getMinX(), 0.01);
      assertEquals((-4.0), xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(170, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(4.0, xYSeries0.getMaxX(), 0.01);
      assertEquals((-5.0), xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(4.0, range0.getUpperBound(), 0.01);
      assertEquals(3.5, range0.getCentralValue(), 0.01);
      assertEquals(3.0, range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range1);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertFalse(range1.equals((Object)range0));
      assertEquals((-1.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-1.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(6, spreadsheetDate0.getMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(170, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(18, spreadsheetDate0.getDayOfMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(3.0, xYSeries0.getMinX(), 0.01);
      assertEquals((-4.0), xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(170, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(4.0, xYSeries0.getMaxX(), 0.01);
      assertEquals((-5.0), xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals((-4.0), range1.getUpperBound(), 0.01);
      assertEquals((-4.5), range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals((-5.0), range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Comparable<DefaultBoxAndWhiskerCategoryDataset> comparable0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Short short0 = new Short((short)3);
      assertNotNull(short0);
      assertEquals((short)3, (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(short0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      MockDate mockDate0 = new MockDate((short)3, (-1548), (-1548), (-1548), (-1237));
      assertNotNull(mockDate0);
      
      mockDate0.setTime((-1237));
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      
      Date[] dateArray0 = new Date[6];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate((-1494), (short)3, (-1494), (-2510), (short)3);
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      dateArray0[5] = (Date) mockDate1;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2510);
      long long0 = mockDate0.getTime();
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertNotSame(mockDate0, mockDate1);
      assertEquals((-1237L), long0);
      
      doubleArray0[1] = (double) (short)3;
      doubleArray0[2] = (double) (-2510);
      doubleArray0[3] = (double) (-1494);
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) (-1494);
      doubleArray0[6] = (double) (-2510);
      doubleArray0[7] = (double) (-2510);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {(-2510.0), 3.0, (-2510.0), (-1494.0), 0.0, (-1494.0), (-2510.0), (-2510.0)}, doubleArray0, 0.01);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(6, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
      assertNotNull(number0);
      assertArrayEquals(new double[] {(-2510.0), 3.0, (-2510.0), (-1494.0), 0.0, (-1494.0), (-2510.0), (-2510.0)}, doubleArray0, 0.01);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotSame(mockDate0, mockDate1);
      assertEquals(6, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertEquals((-4.948539102E13), number0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset1 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset1);
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset1, (Comparable) dateArray0[2]);
      assertNotNull(pieDataset0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      assertNotSame(defaultBoxAndWhiskerCategoryDataset1, defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(6, dateArray0.length);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotNull(range0);
      assertArrayEquals(new double[] {(-2510.0), 3.0, (-2510.0), (-1494.0), 0.0, (-1494.0), (-2510.0), (-2510.0)}, doubleArray0, 0.01);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-4.948539102E13), range0.getLowerBound(), 0.01);
      assertEquals((-1237.0), range0.getUpperBound(), 0.01);
      assertEquals(4.9485391018763E13, range0.getLength(), 0.01);
      assertEquals((-2.47426955106185E13), range0.getCentralValue(), 0.01);
      assertNotSame(mockDate0, mockDate1);
      assertEquals(6, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) arrayList0, range0, true);
      assertNull(range1);
      assertArrayEquals(new double[] {(-2510.0), 3.0, (-2510.0), (-1494.0), 0.0, (-1494.0), (-2510.0), (-2510.0)}, doubleArray0, 0.01);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(arrayList0.contains(short0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-4.948539102E13), range0.getLowerBound(), 0.01);
      assertEquals((-1237.0), range0.getUpperBound(), 0.01);
      assertEquals(4.9485391018763E13, range0.getLength(), 0.01);
      assertEquals((-2.47426955106185E13), range0.getCentralValue(), 0.01);
      assertNotSame(mockDate0, mockDate1);
      assertEquals(6, dateArray0.length);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      double double0 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 2308);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.0, double0, 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, Double.NEGATIVE_INFINITY);
      assertNotNull(range0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      
      LinkedList<DefaultStatisticalCategoryDataset> linkedList0 = new LinkedList<DefaultStatisticalCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(defaultTableXYDataset0));
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultTableXYDataset0, (List) stack0, range0, true);
      assertNull(range1);
      assertFalse(stack0.contains(defaultTableXYDataset0));
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Short short0 = new Short((short)163);
      assertNotNull(short0);
      assertEquals((short)163, (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((short)163));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains((short)163));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset1);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      
      SynthToolBarUI synthToolBarUI0 = new SynthToolBarUI();
      assertNotNull(synthToolBarUI0);
      
      boolean boolean1 = defaultStatisticalCategoryDataset0.hasListener(synthToolBarUI0);
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertFalse(boolean1);
      
      defaultStatisticalCategoryDataset0.add((double) (short)3, 4.0, (Comparable) short0, (Comparable) short0);
      assertFalse(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      assertNotNull(range0);
      assertFalse(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertTrue(arrayList0.contains((short)163));
      assertFalse(arrayList0.contains((short)3));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(3.0, range0.getUpperBound(), 0.01);
      assertEquals(3.0, range0.getLowerBound(), 0.01);
      assertEquals(3.0, range0.getCentralValue(), 0.01);
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(0.0, 0.0, "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.5, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals((-0.5), range0.getLowerBound(), 0.01);
      
      categoryTableXYDataset0.setIntervalWidth(0.0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(categoryTableXYDataset0, false);
      assertNotNull(intervalXYDelegate0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.setAutoWidth(true);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      
      XYSeries xYSeries0 = new XYSeries("", true, false);
      assertNotNull(xYSeries0);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertNotNull(range2);
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, false);
      assertNotNull(range3);
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.5;
      doubleArray1[1] = 1463.53789;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = (-1781.37066264975);
      doubleArray1[4] = 1.5;
      doubleArray1[5] = (-1.0);
      doubleArray1[7] = 2000.5006020648138;
      doubleArray1[8] = 0.0;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'visibleSeriesKeys' argument.", "Null 'visibleSeriesKeys' argument.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Byte byte0 = new Byte((byte)9);
      assertNotNull(byte0);
      assertEquals((byte)9, (byte)byte0);
      
      boolean boolean0 = keyToGroupMap0.equals(byte0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertFalse(boolean0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(1, doubleArray0.length);
      assertEquals(2000.5006020648138, number0);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(2000.5006020648138, range0.getUpperBound(), 0.01);
      assertEquals(3781.871264714564, range0.getLength(), 0.01);
      assertEquals(109.56496970753187, range0.getCentralValue(), 0.01);
      assertEquals((-1781.37066264975), range0.getLowerBound(), 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[][] doubleArray0 = new double[9][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("9~w\"~6", "9~w\"~6", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(9, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, "9~w\"~6");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, false);
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ArrayList<Short> arrayList1 = new ArrayList<Short>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      Short short0 = new Short((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      boolean boolean0 = arrayList1.add(short0);
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertTrue(arrayList1.contains(short0));
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertNotSame(arrayList1, arrayList0);
      assertTrue(boolean0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((short) (-1), (short) (-1));
      assertNotNull(lineFunction2D0);
      assertEquals((-1.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-1.0), lineFunction2D0.getSlope(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      double double0 = 0.0;
      categoryTableXYDataset0.add(0.0, 0.0, "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.5, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals((-0.5), range0.getLowerBound(), 0.01);
      
      boolean boolean0 = false;
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(categoryTableXYDataset0, false);
      assertNotNull(intervalXYDelegate0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      
      XYSeries xYSeries0 = new XYSeries("", true, false);
      assertNotNull(xYSeries0);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      Range range2 = xYSeriesCollection0.getRangeBounds(false);
      assertNull(range2);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      double double1 = 2207.6255247;
      // Undeclared exception!
      try { 
        Range.scale((Range) null, 2207.6255247);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[][] doubleArray0 = new double[9][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("}~wh6", "}~wh6", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(9, doubleArray0.length);
      
      System.setCurrentTimeMillis(60L);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(91, 91);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(90, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      
      TimeSeries timeSeries0 = new TimeSeries(2, "=YtAU6IM.|^)cEC", "=YtAU6IM.|^)cEC");
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("=YtAU6IM.|^)cEC", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("=YtAU6IM.|^)cEC", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      assertNotNull(number0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, number0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Short short0 = new Short((short)3);
      assertNotNull(short0);
      assertEquals((short)3, (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((short)3));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains((short)3));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset1);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      
      SynthToolBarUI synthToolBarUI0 = new SynthToolBarUI();
      assertNotNull(synthToolBarUI0);
      
      boolean boolean1 = defaultStatisticalCategoryDataset1.hasListener(synthToolBarUI0);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
      assertFalse(boolean1);
      
      defaultStatisticalCategoryDataset1.add((double) (short)3, Double.NEGATIVE_INFINITY, (Comparable) short0, (Comparable) short0);
      assertFalse(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
      
      ArrayList<Short> arrayList1 = new ArrayList<Short>();
      assertNotNull(arrayList1);
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertFalse(arrayList1.contains((short)3));
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset1, (List) arrayList1, true);
      assertNull(range0);
      assertFalse(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertFalse(arrayList1.contains((short)3));
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
      assertNotSame(arrayList1, arrayList0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      assertNull(range1);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      double[][] doubleArray0 = new double[5][6];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (short)3;
      doubleArray1[1] = (double) (short)3;
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = (double) (short)3;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-14.12079533599236);
      doubleArray3[1] = Double.NEGATIVE_INFINITY;
      doubleArray3[2] = Double.NEGATIVE_INFINITY;
      doubleArray3[3] = (double) (short)3;
      doubleArray3[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (double) (short)3;
      doubleArray4[1] = (double) (short)3;
      doubleArray4[2] = Double.NEGATIVE_INFINITY;
      doubleArray4[3] = Double.NEGATIVE_INFINITY;
      doubleArray4[4] = (-14.12079533599236);
      doubleArray4[5] = (-14.12079533599236);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = (-14.12079533599236);
      doubleArray5[1] = (-2714.24);
      doubleArray5[2] = (-14.12079533599236);
      doubleArray5[3] = (double) (short)3;
      doubleArray5[4] = (-14.12079533599236);
      doubleArray5[5] = (-14.12079533599236);
      doubleArray5[6] = (double) (short)3;
      doubleArray5[7] = Double.NEGATIVE_INFINITY;
      doubleArray5[8] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertTrue(boolean0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, (-1809));
      assertNotNull(pieDataset0);
      
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) (-1809);
      doubleArray1[1] = (double) (-1809);
      doubleArray1[2] = (-1.7976931348623157E308);
      doubleArray1[3] = (double) (-1809);
      doubleArray1[4] = (double) (-1809);
      doubleArray1[5] = (double) (-1809);
      doubleArray1[6] = (double) (-1809);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1.7976931348623157E308);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) (-1809);
      doubleArray3[1] = 439.7;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 439.7;
      doubleArray4[1] = (double) (-1809);
      doubleArray4[2] = (double) (-1809);
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Short short0 = new Short((short) (-3622));
      assertNotNull(short0);
      assertEquals((short) (-3622), (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(short0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains(short0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[19];
      doubleArray0[3] = (double) (short) (-3622);
      doubleArray0[2] = (double) (short) (-3622);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(dateArray0[0], dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(19, doubleArray0.length);
      
      Range range0 = new Range((short) (-3622), (short) (-3622));
      assertNotNull(range0);
      assertEquals((-3622.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-3622.0), range0.getUpperBound(), 0.01);
      assertEquals((-3622.0), range0.getCentralValue(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) arrayList0, range0, false);
      assertNull(range1);
      assertTrue(arrayList0.contains(short0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-3622.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-3622.0), range0.getUpperBound(), 0.01);
      assertEquals((-3622.0), range0.getCentralValue(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(19, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Short short0 = new Short((short)155);
      assertNotNull(short0);
      assertEquals((short)155, (short)short0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertNotNull(timeZone0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection((short)155, 2);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) dynamicTimeSeriesCollection0);
      assertNotNull(number0);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, number0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue(dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Short short0 = new Short((short)3);
      assertNotNull(short0);
      assertEquals((short)3, (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(short0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset1);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      
      SynthToolBarUI synthToolBarUI0 = new SynthToolBarUI();
      assertNotNull(synthToolBarUI0);
      
      boolean boolean1 = defaultStatisticalCategoryDataset1.hasListener(synthToolBarUI0);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
      assertFalse(boolean1);
      
      defaultStatisticalCategoryDataset1.add((double) (short)3, Double.NEGATIVE_INFINITY, (Comparable) short0, (Comparable) short0);
      assertFalse(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset1, (List) arrayList0, true);
      assertNull(range0);
      assertFalse(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ArrayList<Short> arrayList1 = new ArrayList<Short>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      Short short0 = new Short((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      boolean boolean0 = arrayList1.add(short0);
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertTrue(arrayList1.contains((short) (-1)));
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertNotSame(arrayList1, arrayList0);
      assertTrue(boolean0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) arrayList1, true);
      assertNull(range0);
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertTrue(arrayList1.contains((short) (-1)));
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotSame(arrayList1, arrayList0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((short) (-1), (short) (-1));
      assertNotNull(lineFunction2D0);
      assertEquals((-1.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-1.0), lineFunction2D0.getIntercept(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (short) (-1), (short) (-1), 113, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[][] doubleArray0 = new double[9][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("9~w\"~6", "9~w\"~6", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(9, doubleArray0.length);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Short short0 = new Short((short)411);
      assertNotNull(short0);
      assertEquals((short)411, (short)short0);
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertNotNull(timeZone0);
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("GMT", timeZone0.getID());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(334, (-544), timeZone0);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("GMT", timeZone0.getID());
      assertEquals((-545), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, arrayList0, true);
      assertNull(range0);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("GMT", timeZone0.getID());
      assertEquals((-545), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Short short0 = Short.valueOf((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains(short0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate((-4147), (-4147), (-4147), (-421), (-4147));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 999.0, 999.0, 6.283185307179586, (-674.1), (-674.1));
      assertNotNull(oHLCDataItem0);
      assertEquals("Thu Jan 01 13:53:00 GMT 2605", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(short0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertNotNull(number0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(999.0, number0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset1 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset1);
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset1, 432);
      assertNotNull(pieDataset0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      assertNotSame(defaultBoxAndWhiskerCategoryDataset1, defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, true);
      assertNotNull(range0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.4434333242E14), range0.getUpperBound(), 0.01);
      assertEquals((-1.4434333242E14), range0.getLowerBound(), 0.01);
      assertEquals((-1.4434333242E14), range0.getCentralValue(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(boolean0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      Short short0 = new Short((short)213);
      assertNotNull(short0);
      assertEquals((short)213, (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(short0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean1 = arrayList0.add(short0);
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayList0.contains(short0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean1);
      
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Short short0 = new Short((short)143);
      assertNotNull(short0);
      assertEquals((short)143, (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((short)143));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains((short)143));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      assertNull(range0);
      assertTrue(arrayList0.contains((short)143));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      double[][] doubleArray0 = new double[1][1];
      String string0 = "Ty*W";
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Ty*W", "-RO/BAtIlkx<r", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Short short0 = new Short((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      int int0 = ((DefaultCategoryDataset) categoryDataset0).getRowCount();
      assertEquals(1, doubleArray0.length);
      assertEquals(1, int0);
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains((short) (-1)));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, number0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = false;
      Range range1 = categoryTableXYDataset0.getDomainBounds(false);
      assertNull(range1);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      int int1 = (-2750);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (-2750));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Short short0 = new Short((short) (-1690));
      assertNotNull(short0);
      assertEquals((short) (-1690), (short)short0);
      
      Short short1 = new Short((short)155);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)155, (short)short1);
      
      boolean boolean0 = arrayList0.add(short0);
      assertFalse(short0.equals((Object)short1));
      assertFalse(arrayList0.contains((short)155));
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertNotNull(timeZone0);
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("GMT", timeZone0.getID());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, true);
      assertNull(range0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate(879L);
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)155;
      doubleArray0[1] = (double) (short)155;
      doubleArray0[2] = (double) (short) (-1690);
      doubleArray0[3] = (double) (short) (-1690);
      doubleArray0[4] = (double) (short) (-1690);
      doubleArray0[5] = (double) (short)155;
      doubleArray0[6] = (double) (short) (-1690);
      doubleArray0[7] = (double) (short)155;
      doubleArray0[8] = (double) 879L;
      mockDate0.setTime(879L);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(short1, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {155.0, 155.0, (-1690.0), (-1690.0), (-1690.0), 155.0, (-1690.0), 155.0, 879.0}, doubleArray0, 0.01);
      assertFalse(short1.equals((Object)short0));
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
      assertNotNull(number0);
      assertArrayEquals(new double[] {155.0, 155.0, (-1690.0), (-1690.0), (-1690.0), 155.0, (-1690.0), 155.0, 879.0}, doubleArray0, 0.01);
      assertFalse(short1.equals((Object)short0));
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      assertEquals(879.0, number0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (Comparable) (-1690.0));
      assertNotNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      short short0 = (short) (-1690);
      Short short1 = new Short((short) (-1690));
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-1690), (short)short1);
      
      Short short2 = new Short((short)155);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertEquals((short)155, (short)short2);
      
      ArrayList<Short> arrayList1 = new ArrayList<Short>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertFalse(arrayList1.contains((short) (-1690)));
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      Short short3 = new Short((short)3006);
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertEquals((short)3006, (short)short3);
      
      boolean boolean0 = arrayList0.add(short2);
      assertFalse(arrayList0.equals((Object)arrayList1));
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short3));
      assertFalse(arrayList0.contains(short1));
      assertTrue(arrayList0.contains(short2));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNotSame(arrayList0, arrayList1);
      assertTrue(boolean0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 0, (short) (-1690));
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1690), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      short short0 = (short) (-1);
      Short short1 = new Short((short) (-1));
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-1), (short)short1);
      
      boolean boolean0 = arrayList0.add(short1);
      assertTrue(short1.equals((Object)short0));
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      int int0 = 137;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(short1, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertTrue(short1.equals((Object)short0));
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      DefaultFormatter defaultFormatter0 = new DefaultFormatter();
      assertNotNull(defaultFormatter0);
      
      DefaultFormatterFactory defaultFormatterFactory0 = new DefaultFormatterFactory(defaultFormatter0, defaultFormatter0, defaultFormatter0);
      assertNotNull(defaultFormatterFactory0);
      
      JFormattedTextField jFormattedTextField0 = new JFormattedTextField((JFormattedTextField.AbstractFormatterFactory) defaultFormatterFactory0);
      assertNotNull(jFormattedTextField0);
      assertFalse(jFormattedTextField0.getIgnoreRepaint());
      assertFalse(jFormattedTextField0.isFocusTraversalPolicyProvider());
      assertFalse(jFormattedTextField0.isFocusCycleRoot());
      assertTrue(jFormattedTextField0.getFocusTraversalKeysEnabled());
      assertFalse(jFormattedTextField0.isFocusTraversalPolicySet());
      
      Action action0 = jFormattedTextField0.getAction();
      assertNull(action0);
      assertFalse(jFormattedTextField0.getIgnoreRepaint());
      assertFalse(jFormattedTextField0.isFocusTraversalPolicyProvider());
      assertFalse(jFormattedTextField0.isFocusCycleRoot());
      assertTrue(jFormattedTextField0.getFocusTraversalKeysEnabled());
      assertFalse(jFormattedTextField0.isFocusTraversalPolicySet());
      
      boolean boolean1 = defaultOHLCDataset0.hasListener((EventListener) null);
      assertTrue(short1.equals((Object)short0));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      double[][] doubleArray0 = new double[1][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Ty*W", "_mtq#k(`E-", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) (-1);
      doubleArray1[1] = (double) (-1);
      doubleArray1[2] = (double) (-1);
      doubleArray1[3] = (double) (-1671);
      doubleArray1[4] = (double) (-1671);
      doubleArray1[5] = (double) (-1671);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1671.0), (-1671.0), (-1671.0)}, doubleArray1, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(6, doubleArray1.length);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-474.9594), (-343.0), 158, (-1671.0));
      assertNotNull(xYSeries0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1671.0), (-1671.0), (-1671.0)}, doubleArray1, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(7.910113922961872E15, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals((-474.9594), xYSeries0.getMinX(), 0.01);
      assertEquals(4.0303751208614496E16, xYSeries0.getMaxY(), 0.01);
      assertEquals(158, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals((-343.0), xYSeries0.getMaxX(), 0.01);
      assertEquals(6, doubleArray1.length);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Short short0 = new Short((short) (-1690));
      assertNotNull(short0);
      assertEquals((short) (-1690), (short)short0);
      
      Short short1 = new Short((short)155);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)155, (short)short1);
      
      boolean boolean0 = arrayList0.add(short0);
      assertFalse(short0.equals((Object)short1));
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.contains((short)155));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertNotNull(timeZone0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(334, 2, timeZone0);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, arrayList0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      double[][] doubleArray0 = new double[9][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("9~w\"~6", "9~w\"~6", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(9, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      boolean boolean0 = keyToGroupMap0.equals("9~w\"~6");
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertFalse(boolean0);
      
      int int0 = ((DefaultCategoryDataset) categoryDataset0).getRowCount();
      assertEquals(9, doubleArray0.length);
      assertEquals(9, int0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(9, doubleArray0.length);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 300.5;
      doubleArray1[1] = (double) 0L;
      doubleArray1[2] = (double) 0L;
      doubleArray1[3] = (-254.92828700199);
      doubleArray1[4] = (double) 0L;
      doubleArray1[5] = (double) 0L;
      doubleArray1[6] = (double) 0L;
      doubleArray1[7] = (double) 0L;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0L;
      doubleArray2[1] = (-254.92828700199);
      doubleArray2[2] = (double) 0L;
      doubleArray2[3] = 300.5;
      doubleArray2[4] = (double) 0L;
      doubleArray2[5] = 300.5;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 0L;
      doubleArray3[1] = 300.5;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Nd*b Za@", "Nd*b Za@", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      assertNotNull(range0);
      assertEquals(555.4282870019899, range0.getLength(), 0.01);
      assertEquals(22.785856499005007, range0.getCentralValue(), 0.01);
      assertEquals((-254.92828700199), range0.getLowerBound(), 0.01);
      assertEquals(300.5, range0.getUpperBound(), 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      String string0 = "_mtq#k(`E-";
      double[][] doubleArray0 = new double[1][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Ty*W", "_mtq#k(`E-", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      int int0 = 3083;
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, 3083);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3083, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Short short0 = Short.valueOf((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate((-4147), (-4147), (-4147), (-421), 137);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 999.0, 999.0, 6.283185307179586, (-674.1), (-674.1));
      assertNotNull(oHLCDataItem0);
      assertEquals("Sun Jan 04 13:17:00 GMT 2605", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(short0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertNotNull(number0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(999.0, number0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, arrayList0, false);
      assertNotNull(range0);
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1.4434307538E14), range0.getUpperBound(), 0.01);
      assertEquals((-1.4434307538E14), range0.getCentralValue(), 0.01);
      assertEquals((-1.4434307538E14), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
      assertNull(range1);
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Ty*W", "_mtq#k(`E-", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 4.0);
      assertNotNull(range0);
      assertEquals(4.0, range0.getUpperBound(), 0.01);
      assertEquals(4.0, range0.getCentralValue(), 0.01);
      assertEquals(4.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      LinkedList<YIntervalSeriesCollection> linkedList0 = new LinkedList<YIntervalSeriesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-1671));
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-1671), categoryToPieDataset0.getExtractIndex());
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "Ty*W", (-1661.8534250755), (-859));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ArrayList<Short> arrayList1 = new ArrayList<Short>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      Short short0 = new Short((short)25);
      assertNotNull(short0);
      assertEquals((short)25, (short)short0);
      
      Short short1 = new Short((short)25);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)25, (short)short1);
      
      boolean boolean0 = arrayList1.add(short1);
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertTrue(short1.equals((Object)short0));
      assertTrue(arrayList1.contains(short0));
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertNotSame(arrayList1, arrayList0);
      assertTrue(boolean0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(short0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertTrue(short0.equals((Object)short1));
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertNotNull(double0);
      assertTrue(short0.equals((Object)short1));
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, arrayList1, true);
      assertNull(range0);
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertTrue(short0.equals((Object)short1));
      assertTrue(arrayList1.contains(short0));
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotSame(arrayList1, arrayList0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add(1029.348521343756, 0.0, (Comparable) double0, (Comparable) short0);
      assertTrue(short0.equals((Object)short1));
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList1, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Number[] numberArray0 = new Number[0];
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, true);
      assertNull(range0);
      assertFalse(arrayList0.contains(timeSeriesCollection0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Short short0 = Short.valueOf((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(short0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Short short1 = new Short((short)0);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)0, (short)short1);
      
      boolean boolean0 = arrayList0.add(short1);
      assertTrue(short1.equals((Object)short0));
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, true);
      assertNull(range0);
      assertEquals(0, linkedList0.size());
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range1 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      assertNotNull(range1);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ArrayList<Short> arrayList1 = new ArrayList<Short>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      Short short0 = new Short((short)25);
      assertNotNull(short0);
      assertEquals((short)25, (short)short0);
      
      Short short1 = new Short((short)25);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)25, (short)short1);
      
      boolean boolean0 = arrayList1.add(short1);
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertTrue(short1.equals((Object)short0));
      assertTrue(arrayList1.contains(short0));
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertNotSame(arrayList1, arrayList0);
      assertTrue(boolean0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(short0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertTrue(short0.equals((Object)short1));
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertNotNull(number0);
      assertTrue(short0.equals((Object)short1));
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(Double.NaN, number0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, arrayList1, true);
      assertNull(range0);
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertTrue(short0.equals((Object)short1));
      assertTrue(arrayList1.contains(short0));
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotSame(arrayList1, arrayList0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList1, true);
      assertNull(range1);
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertTrue(arrayList1.contains(short0));
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertNotSame(arrayList1, arrayList0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      double[][] doubleArray0 = new double[9][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("9~w\"~6", "9~w\"~6", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(9, doubleArray0.length);
      
      System.setCurrentTimeMillis(67L);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      boolean boolean0 = keyToGroupMap0.equals("9~w\"~6");
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertFalse(boolean0);
      
      int int0 = ((DefaultCategoryDataset) categoryDataset0).getRowCount();
      assertEquals(9, doubleArray0.length);
      assertEquals(9, int0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(9, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertNotSame(range1, range0);
      assertEquals(9, doubleArray0.length);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("9~w\"~6");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultBoxAndWhiskerXYDataset0);
      assertNull(number0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Number[][] numberArray0 = new Number[3][0];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("a0.>zP`88?M", "Null 'collection' argument.", numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(3, numberArray0.length);
      
      Byte byte0 = new Byte((byte)78);
      assertNotNull(byte0);
      assertEquals((byte)78, (byte)byte0);
      
      defaultCategoryDataset0.addValue((Number) byte0, (Comparable) byte0, (Comparable) "a0.>zP`88?M");
      assertEquals(3, numberArray0.length);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNotNull(range0);
      assertEquals(39.0, range0.getCentralValue(), 0.01);
      assertEquals(78.0, range0.getLength(), 0.01);
      assertEquals(78.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(3, numberArray0.length);
      
      Double double0 = (Double)DatasetUtilities.findMinimumStackedRangeValue(defaultCategoryDataset0);
      assertNotNull(double0);
      assertEquals(3, numberArray0.length);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = new Range((-203.4790978), 679.9904749404258);
      assertNotNull(range0);
      assertEquals((-203.4790978), range0.getLowerBound(), 0.01);
      assertEquals(679.9904749404258, range0.getUpperBound(), 0.01);
      assertEquals(238.2556885702129, range0.getCentralValue(), 0.01);
      assertEquals(883.4695727404257, range0.getLength(), 0.01);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      
      Float float0 = new Float(679.9904749404258);
      assertNotNull(float0);
      assertEquals(679.9905F, (float)float0, 0.01F);
      
      stack0.addElement(float0);
      assertTrue(stack0.contains(float0));
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals("[679.9905]", stack0.toString());
      
      Range range1 = Range.combine(range0, range0);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertEquals((-203.4790978), range0.getLowerBound(), 0.01);
      assertEquals(679.9904749404258, range0.getUpperBound(), 0.01);
      assertEquals(238.2556885702129, range0.getCentralValue(), 0.01);
      assertEquals(883.4695727404257, range0.getLength(), 0.01);
      assertEquals((-203.4790978), range1.getLowerBound(), 0.01);
      assertEquals(883.4695727404257, range1.getLength(), 0.01);
      assertEquals(679.9904749404258, range1.getUpperBound(), 0.01);
      assertEquals(238.2556885702129, range1.getCentralValue(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 679.9904749404258);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(679.9904749404258, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(679.9904749404258, range2.getCentralValue(), 0.01);
      assertEquals(679.9904749404258, range2.getLowerBound(), 0.01);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYTaskDataset0, true);
      assertNotNull(intervalXYDelegate0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      Vector<Byte> vector1 = new Vector<Byte>(vector0);
      assertNotNull(vector1);
      assertTrue(vector1.equals((Object)vector0));
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector1.toString());
      assertTrue(vector1.isEmpty());
      assertEquals(0, vector1.capacity());
      assertEquals(0, vector1.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) xYTaskDataset0, (List) stack0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.gantt.TaskSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      double[][] doubleArray0 = new double[9][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("9~w\"~6", "9~w\"~6", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(9, doubleArray0.length);
      
      System.setCurrentTimeMillis(67L);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      int int0 = ((DefaultCategoryDataset) categoryDataset0).getRowCount();
      assertEquals(9, doubleArray0.length);
      assertEquals(9, int0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) null, (List) null, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = new Range(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      Float float0 = new Float(300.5);
      assertNotNull(float0);
      assertEquals(300.5F, (float)float0, 0.01F);
      
      stack0.addElement(float0);
      assertTrue(stack0.contains(float0));
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[300.5]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(float0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, range0, true);
      assertNull(range1);
      assertTrue(stack0.contains(float0));
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[300.5]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getStartYValue(2, (-1747));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Comparable<XYIntervalSeriesCollection>[] comparableArray0 = (Comparable<XYIntervalSeriesCollection>[]) Array.newInstance(Comparable.class, 0);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(comparableArray0, comparableArray0, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, comparableArray0.length);
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, comparableArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Short short0 = Short.valueOf((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      TimeSeries timeSeries0 = new TimeSeries(short0);
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      ArrayList<TimeSeriesCollection> arrayList1 = new ArrayList<TimeSeriesCollection>();
      assertNotNull(arrayList1);
      assertFalse(arrayList1.contains(timeSeriesCollection0));
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      boolean boolean0 = arrayList1.add(timeSeriesCollection0);
      assertTrue(arrayList1.contains(timeSeriesCollection0));
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertTrue(boolean0);
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertNotNull(timeZone0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection1);
      assertTrue(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection1.getSeriesCount());
      
      ArrayList<TimeSeriesCollection> arrayList2 = new ArrayList<TimeSeriesCollection>();
      assertNotNull(arrayList2);
      assertFalse(arrayList2.equals((Object)arrayList1));
      assertFalse(arrayList2.contains(timeSeriesCollection0));
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      
      boolean boolean1 = arrayList2.add(timeSeriesCollection1);
      assertTrue(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      assertTrue(arrayList2.equals((Object)arrayList1));
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayList2.contains(timeSeriesCollection0));
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection1.getSeriesCount());
      assertFalse(arrayList2.isEmpty());
      assertEquals(1, arrayList2.size());
      assertNotSame(timeSeriesCollection1, timeSeriesCollection0);
      assertNotSame(arrayList2, arrayList1);
      assertTrue(boolean1);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
      assertNull(range0);
      assertTrue(timeSeriesCollection0.equals((Object)timeSeriesCollection1));
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotSame(timeSeriesCollection0, timeSeriesCollection1);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection1, (List) arrayList0, (Range) null, false);
      assertNull(range1);
      assertTrue(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      assertFalse(arrayList0.contains(short0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection1.getSeriesCount());
      assertNotSame(timeSeriesCollection1, timeSeriesCollection0);
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1823.33119762), 0.0);
      assertNotNull(lineFunction2D0);
      assertEquals(0.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-1823.33119762), lineFunction2D0.getIntercept(), 0.01);
      
      Range range2 = DatasetUtilities.iterateXYRangeBounds(timeSeriesCollection0);
      assertNull(range2);
      assertTrue(timeSeriesCollection0.equals((Object)timeSeriesCollection1));
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotSame(timeSeriesCollection0, timeSeriesCollection1);
      
      String string0 = "The number of categories does not match the data.";
      Number[][] numberArray0 = new Number[5][1];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = (Number) 53;
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        xIntervalSeriesCollection0.getStartY((short) (-1), 335);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add((-1.7976931348623157E308), 1846.2, "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, false);
      assertNotNull(range1);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1.7976931348623157E308), range1.getLowerBound(), 0.01);
      assertEquals((-1.7976931348623157E308), range1.getUpperBound(), 0.01);
      assertEquals((-1.7976931348623157E308), range1.getCentralValue(), 0.01);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(categoryTableXYDataset0, true);
      assertNotNull(intervalXYDelegate0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Vector<Byte> vector1 = new Vector<Byte>(vector0);
      assertNotNull(vector1);
      assertTrue(vector1.equals((Object)vector0));
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(0, vector1.size());
      assertEquals("[]", vector1.toString());
      assertTrue(vector1.isEmpty());
      assertEquals(0, vector1.capacity());
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) vector1, true);
      assertNull(range2);
      assertTrue(vector0.equals((Object)vector1));
      assertTrue(vector1.equals((Object)vector0));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(0, vector1.size());
      assertEquals("[]", vector1.toString());
      assertTrue(vector1.isEmpty());
      assertEquals(0, vector1.capacity());
      assertNotSame(vector0, vector1);
      assertNotSame(vector1, vector0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertNotNull(number0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1846.2, number0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((Comparable) "", (KeyedValues) defaultKeyedValues0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNull(range0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      Float float0 = new Float((-2390.729146));
      assertNotNull(float0);
      assertEquals((-2390.7292F), (float)float0, 0.01F);
      
      defaultCategoryDataset0.addValue((Number) float0, (Comparable) float0, (Comparable) "");
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      int int0 = defaultCategoryDataset0.getRowIndex("");
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, 3083);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3083, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Short short0 = Short.valueOf((short)2);
      assertNotNull(short0);
      assertEquals((short)2, (short)short0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      TaskSeries taskSeries0 = new TaskSeries("rqy?)ZaDAIh|");
      assertNotNull(taskSeries0);
      assertNull(taskSeries0.getDescription());
      assertTrue(taskSeries0.getNotify());
      assertEquals(0, taskSeries0.getItemCount());
      
      taskSeriesCollection0.add(taskSeries0);
      assertEquals(1, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(taskSeries0.getDescription());
      assertTrue(taskSeries0.getNotify());
      assertEquals(0, taskSeries0.getItemCount());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(taskSeriesCollection0, tableOrder0, (short)2);
      assertNotNull(categoryToPieDataset0);
      assertEquals(1, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) short0, 1000.4509, 170);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.gantt.TaskSeries cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      TimeSeries timeSeries0 = new TimeSeries("org.jfree.data.general.DatasetUtilitie8", "org.jfree.data.general.DatasetUtilitie8", "Null 'dataset' argument.");
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Null 'dataset' argument.", timeSeries0.getRangeDescription());
      assertEquals("org.jfree.data.general.DatasetUtilitie8", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      int int0 = categoryTableXYDataset0.getItemCount(165);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, int0);
      
      TimeSeries timeSeries1 = new TimeSeries("org.jfree.data.general.DatasetUtilitie8", "org.jfree.data.general.DatasetUtilitie8", (String) null);
      assertNotNull(timeSeries1);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(0, timeSeries1.getItemCount());
      assertNull(timeSeries1.getDescription());
      assertTrue(timeSeries1.getNotify());
      assertNull(timeSeries1.getRangeDescription());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("org.jfree.data.general.DatasetUtilitie8", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      assertNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      double[][] doubleArray0 = new double[9][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("9~w\"~6", "Null 'object' argument.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(9, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(9, doubleArray0.length);
      
      System.setCurrentTimeMillis(60L);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(153, 111);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(110, dynamicTimeSeriesCollection0.getNewestIndex());
      
      TimeSeries timeSeries0 = new TimeSeries("=YtAU6IM.|^)cEC", "bXxyB=_<j", "Null 'object' argument.");
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Null 'object' argument.", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals("bXxyB=_<j", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(xIntervalSeriesCollection0);
      assertNull(number0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, (-1899.5041359059746));
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals((-1899.5041359059746), range1.getUpperBound(), 0.01);
      assertEquals((-1899.5041359059746), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1899.5041359059746), range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertEquals(9, doubleArray0.length);
      
      LinkedList<YIntervalSeriesCollection> linkedList0 = new LinkedList<YIntervalSeriesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 2);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        SerialDate.createInstance(153, 2, (-784));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(4.0, 4.0, "H6Pli7YD\">]4aDJ`Yf");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(4.0, range0.getCentralValue(), 0.01);
      assertEquals(3.5, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(4.5, range0.getUpperBound(), 0.01);
      
      MockDate mockDate0 = new MockDate(10, 10, 10);
      assertNotNull(mockDate0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Vector<YIntervalSeriesCollection> vector0 = new Vector<YIntervalSeriesCollection>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(4.0, range1.getLength(), 0.01);
      assertEquals(4.0, range1.getUpperBound(), 0.01);
      assertEquals(2.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = vector0.add(yIntervalSeriesCollection0);
      assertTrue(vector0.contains(yIntervalSeriesCollection0));
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertTrue(boolean0);
      
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) vector0, range1, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.YIntervalSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      TaskSeries taskSeries0 = new TaskSeries("DefaultIntervalCategoryDataset.setValue: unrecognised category.");
      assertNotNull(taskSeries0);
      assertEquals(0, taskSeries0.getItemCount());
      assertTrue(taskSeries0.getNotify());
      assertNull(taskSeries0.getDescription());
      
      Short short0 = Short.valueOf((short)1308);
      assertNotNull(short0);
      assertEquals((short)1308, (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((short)1308));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Short short1 = new Short((short) (-1));
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short) (-1), (short)short1);
      
      boolean boolean0 = arrayList0.add((Short) null);
      assertFalse(arrayList0.contains((short) (-1)));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertNotNull(number0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(Double.NaN, number0);
      
      boolean boolean1 = defaultBoxAndWhiskerXYDataset0.hasListener(taskSeriesCollection0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, arrayList0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.AbstractSeriesDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Range range0 = new Range(150.0, 478.21446793);
      assertNotNull(range0);
      assertEquals(478.21446793, range0.getUpperBound(), 0.01);
      assertEquals(328.21446793, range0.getLength(), 0.01);
      assertEquals(314.107233965, range0.getCentralValue(), 0.01);
      assertEquals(150.0, range0.getLowerBound(), 0.01);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      Range range1 = Range.shift(range0, 478.21446793, true);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(478.21446793, range0.getUpperBound(), 0.01);
      assertEquals(328.21446793, range0.getLength(), 0.01);
      assertEquals(314.107233965, range0.getCentralValue(), 0.01);
      assertEquals(150.0, range0.getLowerBound(), 0.01);
      assertEquals(956.42893586, range1.getUpperBound(), 0.01);
      assertEquals(792.3217018949999, range1.getCentralValue(), 0.01);
      assertEquals(628.21446793, range1.getLowerBound(), 0.01);
      assertEquals(328.21446793000007, range1.getLength(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      Float float0 = new Float((-1.0));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      boolean boolean0 = stack0.add(float0);
      assertTrue(stack0.contains(float0));
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[-1.0]", stack0.toString());
      assertTrue(boolean0);
      
      Float float1 = new Float(1468.125927945438);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1468.126F, (float)float1, 0.01F);
      
      stack0.addElement(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertTrue(stack0.contains(float0));
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[-1.0, 1468.126]", stack0.toString());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, (List) null, range0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      double[][] doubleArray0 = new double[9][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("9~w\"~6", "9~w\"~6", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(9, doubleArray0.length);
      
      System.setCurrentTimeMillis(67L);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      boolean boolean0 = keyToGroupMap0.equals("9~w\"~6");
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertFalse(boolean0);
      
      int int0 = ((DefaultCategoryDataset) categoryDataset0).getRowCount();
      assertEquals(9, doubleArray0.length);
      assertEquals(9, int0);
      
      int int1 = keyToGroupMap0.getKeyCount("9~w\"~6");
      assertFalse(int1 == int0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0, int1);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(9, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertNotSame(range1, range0);
      assertEquals(9, doubleArray0.length);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("9~w\"~6");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) "9~w\"~6", 796.0349123865574);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add((-1241.0), 1047.81, "Null 'rowKeys' argument.");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(categoryTableXYDataset0, true);
      assertNotNull(intervalXYDelegate0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotNull(range1);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1047.81, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1047.81, range1.getUpperBound(), 0.01);
      assertEquals(1047.81, range1.getCentralValue(), 0.01);
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection1);
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1.0), (-1.0));
      assertNotNull(lineFunction2D0);
      assertEquals((-1.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-1.0), lineFunction2D0.getSlope(), 0.01);
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(170);
      assertNotNull(spreadsheetDate0);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(18, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(170, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(6, spreadsheetDate0.getMonth());
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, 3, 4, 170, spreadsheetDate0);
      assertNotNull(xYSeries0);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals((-1.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-1.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals(18, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(170, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(6, spreadsheetDate0.getMonth());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(170, xYSeries0.getItemCount());
      assertEquals((-4.0), xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(4.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(3.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals((-5.0), xYSeries0.getMinY(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, (KeyToGroupMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      double[][] doubleArray0 = new double[9][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("9~w\"~6", "9~w\"~6", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(9, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(9, doubleArray0.length);
      
      System.setCurrentTimeMillis(60L);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(91, 91);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(90, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      
      TimeSeries timeSeries0 = new TimeSeries(2, "=YtAU6IM.|^)cEC", "bXxyB=_<j");
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("=YtAU6IM.|^)cEC", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals("bXxyB=_<j", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      assertNotNull(number0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, number0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, (double) 0);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertEquals(9, doubleArray0.length);
      
      LinkedList<YIntervalSeriesCollection> linkedList0 = new LinkedList<YIntervalSeriesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 3903);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(3903, categoryToPieDataset0.getExtractIndex());
      assertEquals(9, doubleArray0.length);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(timeSeriesCollection0);
      assertNotNull(intervalXYDelegate0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      
      categoryToPieDataset0.removeChangeListener(intervalXYDelegate0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(3903, categoryToPieDataset0.getExtractIndex());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(9, doubleArray0.length);
      
      Number number1 = categoryToPieDataset0.getValue((Comparable) "9~w\"~6");
      assertNull(number1);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(3903, categoryToPieDataset0.getExtractIndex());
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3903, Size: 5
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      double[][] doubleArray0 = new double[9][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("9~w\"~6", "9~w\"~6", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(9, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(9, doubleArray0.length);
      
      System.setCurrentTimeMillis(60L);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(91, 91);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(90, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      
      TimeSeries timeSeries0 = new TimeSeries(2, "=YtAU6IM.|^)cEC", "bXxyB=_<j");
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("=YtAU6IM.|^)cEC", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("bXxyB=_<j", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      assertNotNull(number0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, number0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, (double) 0);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertEquals(9, doubleArray0.length);
      
      LinkedList<YIntervalSeriesCollection> linkedList0 = new LinkedList<YIntervalSeriesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 72);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(72, categoryToPieDataset0.getExtractIndex());
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "9~w\"~6", 1116.3971852373238, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 72, Size: 5
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      matrixSeriesCollection0.validateObject();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNull(number0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      double[][] doubleArray0 = new double[6][0];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-261.7310455);
      doubleArray2[1] = (-766.0);
      doubleArray2[2] = 1405.0;
      doubleArray2[3] = (-3115.0590968149313);
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-1.0);
      doubleArray2[6] = Double.POSITIVE_INFINITY;
      doubleArray2[7] = 1079.32335;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1405.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (-1.0);
      doubleArray4[1] = (-1.0);
      doubleArray4[2] = Double.POSITIVE_INFINITY;
      doubleArray4[3] = 1405.0;
      doubleArray4[4] = (-1.0);
      doubleArray4[5] = 0.0;
      doubleArray4[6] = 2488.030033;
      doubleArray4[7] = (-3115.0590968149313);
      doubleArray4[8] = (-261.7310455);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = 1405.0;
      doubleArray5[1] = 1335.74520887;
      doubleArray5[2] = 1079.32335;
      doubleArray5[3] = 1079.32335;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      
      doubleArray6[0] = 1079.32335;
      doubleArray0[5] = doubleArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, (-239));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      String string0 = "_mtq#k(`E-";
      double[][] doubleArray0 = new double[1][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Ty*W", "_mtq#k(`E-", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Short short0 = new Short((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains(short0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-1), 162);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals((-1), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(162, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = (SlidingGanttCategoryDataset)slidingGanttCategoryDataset0.clone();
      assertNotNull(slidingGanttCategoryDataset1);
      assertTrue(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals((-1), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(162, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(162, slidingGanttCategoryDataset1.getMaximumCategoryCount());
      assertEquals((-1), slidingGanttCategoryDataset1.getFirstCategoryIndex());
      assertNotSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset1);
      assertNotSame(slidingGanttCategoryDataset1, slidingGanttCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) arrayList0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      double[][] doubleArray0 = new double[1][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Ty*W", "_mtq#k(`E-", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Vector<YIntervalSeriesCollection> vector0 = new Vector<YIntervalSeriesCollection>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = vector0.add(yIntervalSeriesCollection0);
      assertTrue(vector0.contains(yIntervalSeriesCollection0));
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertTrue(boolean0);
      
      defaultStatisticalCategoryDataset0.add(Double.NEGATIVE_INFINITY, 386.36285631, (Comparable) "Ty*W", (Comparable) "Ty*W");
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds(categoryDataset0, (List) vector0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.YIntervalSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Range range0 = new Range((-203.4790978), 680.132267);
      assertNotNull(range0);
      assertEquals(883.6113647999999, range0.getLength(), 0.01);
      assertEquals(238.3265846, range0.getCentralValue(), 0.01);
      assertEquals((-203.4790978), range0.getLowerBound(), 0.01);
      assertEquals(680.132267, range0.getUpperBound(), 0.01);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      
      Float float0 = new Float(680.132267);
      assertNotNull(float0);
      assertEquals(680.13226F, (float)float0, 0.01F);
      
      stack0.addElement(float0);
      assertTrue(stack0.contains(float0));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[680.13226]", stack0.toString());
      
      Range range1 = Range.shift(range0, 102.001928930128, false);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(883.6113647999999, range0.getLength(), 0.01);
      assertEquals(238.3265846, range0.getCentralValue(), 0.01);
      assertEquals((-203.4790978), range0.getLowerBound(), 0.01);
      assertEquals(680.132267, range0.getUpperBound(), 0.01);
      assertEquals(782.1341959301279, range1.getUpperBound(), 0.01);
      assertEquals(883.6113647999999, range1.getLength(), 0.01);
      assertEquals(340.32851353012796, range1.getCentralValue(), 0.01);
      assertEquals((-101.477168869872), range1.getLowerBound(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range0, false);
      assertNull(range2);
      assertFalse(range0.equals((Object)range1));
      assertTrue(stack0.contains(float0));
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(883.6113647999999, range0.getLength(), 0.01);
      assertEquals(238.3265846, range0.getCentralValue(), 0.01);
      assertEquals((-203.4790978), range0.getLowerBound(), 0.01);
      assertEquals(680.132267, range0.getUpperBound(), 0.01);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[680.13226]", stack0.toString());
      assertNotSame(range0, range1);
      
      LinkedList<XYBarDataset> linkedList0 = new LinkedList<XYBarDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Number[][] numberArray0 = new Number[3][0];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[8];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) float0;
      numberArray2[1] = (Number) float0;
      numberArray2[2] = (Number) float0;
      numberArray2[3] = (Number) float0;
      numberArray2[4] = (Number) float0;
      numberArray2[5] = (Number) float0;
      numberArray2[6] = (Number) float0;
      numberArray2[7] = (Number) float0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[4];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) float0;
      numberArray3[1] = (Number) float0;
      numberArray3[2] = (Number) float0;
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range3 = defaultStatisticalCategoryDataset0.getRangeBounds(false);
      assertNull(range3);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range4 = DatasetUtilities.iterateCategoryRangeBounds(defaultMultiValueCategoryDataset0, true);
      assertNull(range4);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      double[][] doubleArray0 = new double[1][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Ty*W", "_mtq#k(`E-", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      categoryTableXYDataset0.add((-677.702253832407), (double) (-1671), "_mtq#k(`E-");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      MockDate mockDate0 = new MockDate((-1), (-1671), 668);
      assertNotNull(mockDate0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-1671.0), range0.getUpperBound(), 0.01);
      assertEquals((-1671.0), range0.getCentralValue(), 0.01);
      assertEquals((-1671.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-677.202253832407), range1.getUpperBound(), 0.01);
      assertEquals((-677.702253832407), range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals((-678.202253832407), range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 668);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 668, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, "9~w\"~6", "ZH@");
      assertNotNull(timeSeries0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals("ZH@", timeSeries0.getRangeDescription());
      assertEquals("9~w\"~6", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("1G[LMzu");
      assertNotNull(mockSimpleDateFormat0);
      
      TimeSeries timeSeries1 = new TimeSeries("ZH@", "1G[LMzu", "");
      assertNotNull(timeSeries1);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertNull(timeSeries1.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(0, timeSeries1.getItemCount());
      assertTrue(timeSeries1.getNotify());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("1G[LMzu", timeSeries1.getDomainDescription());
      assertEquals("", timeSeries1.getRangeDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries1);
      assertNotNull(timeSeriesCollection0);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertNull(timeSeries1.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(0, timeSeries1.getItemCount());
      assertTrue(timeSeries1.getNotify());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("1G[LMzu", timeSeries1.getDomainDescription());
      assertEquals("", timeSeries1.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(timeSeriesCollection0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add((TimeSeriesCollection) null);
      assertFalse(arrayList0.contains(timeSeriesCollection0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertFalse(set0.contains("ZH@"));
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      boolean boolean1 = arrayList0.removeAll(set0);
      assertFalse(boolean1 == boolean0);
      assertFalse(arrayList0.contains(timeSeriesCollection0));
      assertFalse(set0.contains("ZH@"));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(boolean1);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean2 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Range range0 = new Range((-203.4790978), 680.132267);
      assertNotNull(range0);
      assertEquals(680.132267, range0.getUpperBound(), 0.01);
      assertEquals(238.3265846, range0.getCentralValue(), 0.01);
      assertEquals(883.6113647999999, range0.getLength(), 0.01);
      assertEquals((-203.4790978), range0.getLowerBound(), 0.01);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      Float float0 = new Float(680.132267);
      assertNotNull(float0);
      assertEquals(680.13226F, (float)float0, 0.01F);
      
      stack0.addElement(float0);
      assertTrue(stack0.contains(float0));
      assertFalse(stack0.isEmpty());
      assertEquals("[680.13226]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      
      Range range1 = Range.shift(range0, 102.001928930128, false);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(680.132267, range0.getUpperBound(), 0.01);
      assertEquals(238.3265846, range0.getCentralValue(), 0.01);
      assertEquals(883.6113647999999, range0.getLength(), 0.01);
      assertEquals((-203.4790978), range0.getLowerBound(), 0.01);
      assertEquals(782.1341959301279, range1.getUpperBound(), 0.01);
      assertEquals(883.6113647999999, range1.getLength(), 0.01);
      assertEquals(340.32851353012796, range1.getCentralValue(), 0.01);
      assertEquals((-101.477168869872), range1.getLowerBound(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range0, true);
      assertNull(range2);
      assertFalse(range0.equals((Object)range1));
      assertTrue(stack0.contains(float0));
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(680.132267, range0.getUpperBound(), 0.01);
      assertEquals(238.3265846, range0.getCentralValue(), 0.01);
      assertEquals(883.6113647999999, range0.getLength(), 0.01);
      assertEquals((-203.4790978), range0.getLowerBound(), 0.01);
      assertFalse(stack0.isEmpty());
      assertEquals("[680.13226]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertNotSame(range0, range1);
      
      LinkedList<XYBarDataset> linkedList0 = new LinkedList<XYBarDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Number[][] numberArray0 = new Number[3][0];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[8];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) float0;
      numberArray2[1] = (Number) float0;
      numberArray2[2] = (Number) float0;
      numberArray2[3] = (Number) float0;
      numberArray2[4] = (Number) float0;
      numberArray2[5] = (Number) float0;
      numberArray2[6] = (Number) float0;
      numberArray2[7] = (Number) float0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[4];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) float0;
      numberArray3[1] = (Number) float0;
      numberArray3[2] = (Number) float0;
      Short short0 = new Short((short) (-1062));
      assertNotNull(short0);
      assertEquals((short) (-1062), (short)short0);
      
      numberArray3[3] = (Number) short0;
      numberArray0[2] = numberArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds(categoryDataset0, (List) stack0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(4.0, (-7.576071431985378), "Null 'dataset' argument.");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(categoryTableXYDataset0, true);
      assertNotNull(intervalXYDelegate0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, false);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-7.576071431985378), range0.getUpperBound(), 0.01);
      assertEquals((-7.576071431985378), range0.getCentralValue(), 0.01);
      assertEquals((-7.576071431985378), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1.0), (-1.0));
      assertNotNull(lineFunction2D0);
      assertEquals((-1.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-1.0), lineFunction2D0.getIntercept(), 0.01);
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(170);
      assertNotNull(spreadsheetDate0);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(18, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(6, spreadsheetDate0.getMonth());
      assertEquals(170, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, 3, 4, 170, spreadsheetDate0);
      assertNotNull(xYSeries0);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals((-1.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-1.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(18, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(6, spreadsheetDate0.getMonth());
      assertEquals(170, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(3.0, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(4.0, xYSeries0.getMaxX(), 0.01);
      assertEquals((-4.0), xYSeries0.getMaxY(), 0.01);
      assertEquals(170, xYSeries0.getItemCount());
      assertEquals((-5.0), xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Comparable<DefaultHighLowDataset>[] comparableArray0 = (Comparable<DefaultHighLowDataset>[]) Array.newInstance(Comparable.class, 1);
      comparableArray0[0] = (Comparable<DefaultHighLowDataset>) spreadsheetDate0;
      double[][] doubleArray0 = new double[8][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = 0.5;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 9999;
      doubleArray1[4] = (-281.0);
      doubleArray1[5] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 4;
      doubleArray2[1] = (double) 9999;
      doubleArray2[2] = (double) 1;
      doubleArray2[3] = (-1.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 4;
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = (double) 2958465;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (double) 0;
      doubleArray4[1] = (double) 0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = (double) 2958465;
      doubleArray5[1] = (double) 5;
      doubleArray5[2] = (double) 3;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      
      doubleArray7[0] = (double) 3;
      doubleArray7[1] = (double) (-1);
      doubleArray7[2] = (double) 1;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[1];
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      
      doubleArray8[0] = (double) 9999;
      doubleArray0[7] = doubleArray8;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add(4.0, (-7.576071431985378), "Null 'dataset' argument.");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(categoryTableXYDataset0, true);
      assertNotNull(intervalXYDelegate0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-7.576071431985378), range0.getLowerBound(), 0.01);
      assertEquals((-7.576071431985378), range0.getUpperBound(), 0.01);
      assertEquals((-7.576071431985378), range0.getCentralValue(), 0.01);
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Double double0 = new Double(1372.3);
      assertNotNull(double0);
      assertEquals(1372.3, (double)double0, 0.01);
      
      TimeSeries timeSeries0 = new TimeSeries("org.jfree.data.xy.MatrixSeriesCollection", "org.jfree.data.xy.MatrixSeriesCollection", "");
      assertNotNull(timeSeries0);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("org.jfree.data.xy.MatrixSeriesCollection", timeSeries0.getDomainDescription());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(4.0, 1.485742262192058, "H6Pli7YD\">]4aDJ`Yf");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(3.5, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(4.0, range0.getCentralValue(), 0.01);
      assertEquals(4.5, range0.getUpperBound(), 0.01);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Short short0 = new Short((short)2);
      assertNotNull(short0);
      assertEquals((short)2, (short)short0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertTrue(boolean0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertNotNull(number0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.485742262192058, number0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      double[][] doubleArray0 = new double[9][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("9~w\"~6", "9~w\"~6", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(9, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(9, doubleArray0.length);
      
      System.setCurrentTimeMillis(60L);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(91, 91);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(90, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      
      TimeSeries timeSeries0 = new TimeSeries(2, "=YtAU6IM.|^)cEC", "bXxyB=_<j");
      assertNotNull(timeSeries0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("=YtAU6IM.|^)cEC", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals("bXxyB=_<j", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      assertNotNull(number0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, number0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, (double) 0);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertNotSame(range1, range0);
      assertEquals(9, doubleArray0.length);
      
      LinkedList<YIntervalSeriesCollection> linkedList0 = new LinkedList<YIntervalSeriesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 2);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals(9, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "9~w\"~6", (double) 60L, 0);
      assertNotNull(pieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals(9, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Float float0 = new Float(1534.9968064);
      assertNotNull(float0);
      assertEquals(1534.9968F, (float)float0, 0.01F);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      Range range0 = new Range(1.0, 1832.571705102868);
      assertNotNull(range0);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1831.571705102868, range0.getLength(), 0.01);
      assertEquals(1832.571705102868, range0.getUpperBound(), 0.01);
      assertEquals(916.785852551434, range0.getCentralValue(), 0.01);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) matrixSeriesCollection0, (List) stack0, range0, false);
      assertNull(range1);
      assertFalse(stack0.contains(float0));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1831.571705102868, range0.getLength(), 0.01);
      assertEquals(1832.571705102868, range0.getUpperBound(), 0.01);
      assertEquals(916.785852551434, range0.getCentralValue(), 0.01);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertFalse(vector0.contains(1832.571705102868));
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) vector0, false);
      assertNull(range2);
      assertFalse(vector0.contains(false));
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range3 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      assertNotNull(range3);
      assertFalse(range3.equals((Object)range0));
      assertEquals(Double.NaN, range3.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range3.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range3.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range3.getLength(), 0.01);
      assertNotSame(range3, range0);
      
      Range range4 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      assertNotNull(range4);
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range0));
      assertEquals(Double.NaN, range4.getLength(), 0.01);
      assertEquals(Double.NaN, range4.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range4.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range4.getCentralValue(), 0.01);
      assertNotSame(range4, range3);
      assertNotSame(range4, range0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertNull(number0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Short short0 = Short.valueOf((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      ArrayList<Short> arrayList1 = new ArrayList<Short>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertFalse(arrayList1.contains((short) (-1)));
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) yIntervalSeriesCollection0, true);
      assertNull(range0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = new Short((short) (-1));
      assertEquals((short) (-1), int0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertTrue(boolean0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) yIntervalSeriesCollection0);
      assertNull(number0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      double[][] doubleArray0 = new double[9][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("9~w\"~6", "9~w\"~6", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(9, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(9, doubleArray0.length);
      
      System.setCurrentTimeMillis(60L);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(91, 91);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(90, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      
      TimeSeries timeSeries0 = new TimeSeries(2, "=YtAU6IM.|^)cEC", "(XxyB=_<j");
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("=YtAU6IM.|^)cEC", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("(XxyB=_<j", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      assertNotNull(number0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, number0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, (double) 0);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertNotSame(range1, range0);
      assertEquals(9, doubleArray0.length);
      
      LinkedList<YIntervalSeriesCollection> linkedList0 = new LinkedList<YIntervalSeriesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 2);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals(9, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "9~w\"~6", (double) 60L, 0);
      assertNotNull(pieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(0.0, 0.0, "");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, range0.getUpperBound(), 0.01);
      assertEquals((-0.5), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(categoryTableXYDataset0, true);
      assertNotNull(intervalXYDelegate0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      Vector<Byte> vector1 = new Vector<Byte>(vector0);
      assertNotNull(vector1);
      assertTrue(vector1.equals((Object)vector0));
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector1.size());
      assertEquals("[]", vector1.toString());
      assertTrue(vector1.isEmpty());
      assertEquals(0, vector1.capacity());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) vector1, true);
      assertNull(range1);
      assertTrue(vector0.equals((Object)vector1));
      assertTrue(vector1.equals((Object)vector0));
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector1.size());
      assertEquals("[]", vector1.toString());
      assertTrue(vector1.isEmpty());
      assertEquals(0, vector1.capacity());
      assertNotSame(vector0, vector1);
      assertNotSame(vector1, vector0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertNotNull(number0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(4.0, (-7.576071431985378), "Null 'dataset' argument.");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(categoryTableXYDataset0, true);
      assertNotNull(intervalXYDelegate0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(boolean0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-7.576071431985378), range0.getUpperBound(), 0.01);
      assertEquals((-7.576071431985378), range0.getCentralValue(), 0.01);
      assertEquals((-7.576071431985378), range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Short short0 = Short.valueOf((short)1735);
      assertNotNull(short0);
      assertEquals((short)1735, (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((short)1735));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Short short1 = new Short((short) (-21845));
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short) (-21845), (short)short1);
      
      boolean boolean0 = arrayList0.add(short1);
      assertFalse(short1.equals((Object)short0));
      assertTrue(arrayList0.contains(short1));
      assertFalse(arrayList0.contains((short)1735));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) short1, (KeyedValues) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowData' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      
      double[][] doubleArray0 = new double[1][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("04[D|[GKxq2ikPwH;f", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 777.368944);
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(777.368944, range0.getUpperBound(), 0.01);
      assertEquals(777.368944, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(777.368944, range0.getLowerBound(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      assertNull(range1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) millisecond0, (double) 999, 0);
      assertNotNull(pieDataset0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertFalse(pieDataset0.equals((Object)defaultPieDataset0));
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset((Comparable) millisecond0, (KeyedValues) pieDataset0);
      assertNotNull(categoryDataset1);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertFalse(defaultPieDataset0.equals((Object)pieDataset0));
      assertFalse(pieDataset0.equals((Object)defaultPieDataset0));
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(categoryDataset1, categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Short short0 = Short.valueOf((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      ArrayList<Short> arrayList1 = new ArrayList<Short>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertFalse(arrayList1.contains(short0));
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      Short short1 = new Short((short) (-1));
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-1), (short)short1);
      
      boolean boolean0 = arrayList1.add(short1);
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertTrue(short1.equals((Object)short0));
      assertTrue(arrayList1.contains(short0));
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertNotSame(arrayList1, arrayList0);
      assertTrue(boolean0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(short0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertTrue(short0.equals((Object)short1));
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertNotNull(number0);
      assertTrue(short0.equals((Object)short1));
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(Double.NaN, number0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset1 = (DefaultBoxAndWhiskerXYDataset)defaultBoxAndWhiskerXYDataset0.clone();
      assertNotNull(defaultBoxAndWhiskerXYDataset1);
      assertTrue(short0.equals((Object)short1));
      assertTrue(defaultBoxAndWhiskerXYDataset1.equals((Object)defaultBoxAndWhiskerXYDataset0));
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset1.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset1.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset1.getOutlierCoefficient(), 0.01);
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset1);
      assertNotSame(defaultBoxAndWhiskerXYDataset1, defaultBoxAndWhiskerXYDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, arrayList1, true);
      assertNull(range0);
      assertTrue(short0.equals((Object)short1));
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertTrue(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertTrue(arrayList1.contains(short0));
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotSame(arrayList1, arrayList0);
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset1);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertTrue(short0.equals((Object)short1));
      assertTrue(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertTrue(boolean1 == boolean0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset1);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Range range0 = new Range((-203.4790978), 679.9904749404258);
      assertNotNull(range0);
      assertEquals(679.9904749404258, range0.getUpperBound(), 0.01);
      assertEquals(238.2556885702129, range0.getCentralValue(), 0.01);
      assertEquals((-203.4790978), range0.getLowerBound(), 0.01);
      assertEquals(883.4695727404257, range0.getLength(), 0.01);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Float float0 = new Float(679.9904749404258);
      assertNotNull(float0);
      assertEquals(679.9905F, (float)float0, 0.01F);
      
      stack0.addElement(float0);
      assertTrue(stack0.contains(float0));
      assertEquals("[679.9905]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      
      Range range1 = Range.shift(range0, (-203.4790978));
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(679.9904749404258, range0.getUpperBound(), 0.01);
      assertEquals(238.2556885702129, range0.getCentralValue(), 0.01);
      assertEquals((-203.4790978), range0.getLowerBound(), 0.01);
      assertEquals(883.4695727404257, range0.getLength(), 0.01);
      assertEquals(883.4695727404257, range1.getLength(), 0.01);
      assertEquals((-406.9581956), range1.getLowerBound(), 0.01);
      assertEquals(476.5113771404258, range1.getUpperBound(), 0.01);
      assertEquals(34.77659077021289, range1.getCentralValue(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 679.9904749404258);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(679.9904749404258, range2.getUpperBound(), 0.01);
      assertEquals(679.9904749404258, range2.getCentralValue(), 0.01);
      assertEquals(679.9904749404258, range2.getLowerBound(), 0.01);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      
      boolean boolean0 = true;
      Comparable<CategoryTableXYDataset>[] comparableArray0 = (Comparable<CategoryTableXYDataset>[]) Array.newInstance(Comparable.class, 1);
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      
      Millisecond millisecond0 = new Millisecond(53, second0);
      assertNotNull(millisecond0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(53L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      comparableArray0[0] = (Comparable<CategoryTableXYDataset>) millisecond0;
      double[][] doubleArray0 = new double[1][5];
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of column keys does not match the number of columns in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      short short0 = (short) (-1);
      Short short1 = Short.valueOf((short) (-1));
      assertNotNull(short1);
      assertEquals((short) (-1), (short)short1);
      
      boolean boolean0 = arrayList0.add((Short) null);
      assertFalse(arrayList0.contains(short1));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      ArrayList<Short> arrayList1 = new ArrayList<Short>();
      assertNotNull(arrayList1);
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertFalse(arrayList1.contains(short1));
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      Short short2 = new Short((short) (-1));
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertEquals((short) (-1), (short)short2);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(91, 91);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(90, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      
      TimeSeries timeSeries0 = new TimeSeries(0, "(XxyB=_<j", "-dqKbPZ8E");
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("-dqKbPZ8E", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("(XxyB=_<j", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue(dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Short short0 = Short.valueOf((short) (-1875));
      assertNotNull(short0);
      assertEquals((short) (-1875), (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((short) (-1875)));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Short short1 = new Short((short) (-1));
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short) (-1), (short)short1);
      
      boolean boolean0 = arrayList0.add(short1);
      assertFalse(short1.equals((Object)short0));
      assertTrue(arrayList0.contains((short) (-1)));
      assertFalse(arrayList0.contains((short) (-1875)));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 87, (short) (-1));
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(87, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = (SlidingGanttCategoryDataset)slidingGanttCategoryDataset0.clone();
      assertNotNull(slidingGanttCategoryDataset1);
      assertTrue(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(87, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-1), slidingGanttCategoryDataset1.getMaximumCategoryCount());
      assertEquals(87, slidingGanttCategoryDataset1.getFirstCategoryIndex());
      assertNotSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset1);
      assertNotSame(slidingGanttCategoryDataset1, slidingGanttCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) arrayList0, false);
      assertNull(range0);
      assertTrue(arrayList0.contains((short) (-1)));
      assertFalse(arrayList0.contains((short) (-1875)));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(short0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertFalse(short0.equals((Object)short1));
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertNotNull(double0);
      assertFalse(short0.equals((Object)short1));
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, arrayList0, true);
      assertNull(range1);
      assertTrue(arrayList0.contains((short) (-1)));
      assertFalse(arrayList0.contains((short) (-1875)));
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Range range0 = new Range((-203.4790978), 679.9904749404258);
      assertNotNull(range0);
      assertEquals((-203.4790978), range0.getLowerBound(), 0.01);
      assertEquals(238.2556885702129, range0.getCentralValue(), 0.01);
      assertEquals(883.4695727404257, range0.getLength(), 0.01);
      assertEquals(679.9904749404258, range0.getUpperBound(), 0.01);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Float float0 = new Float(679.9904749404258);
      assertNotNull(float0);
      assertEquals(679.9905F, (float)float0, 0.01F);
      
      stack0.addElement(float0);
      assertTrue(stack0.contains(float0));
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[679.9905]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      
      Range range1 = Range.shift(range0, (-203.4790978));
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals((-203.4790978), range0.getLowerBound(), 0.01);
      assertEquals(238.2556885702129, range0.getCentralValue(), 0.01);
      assertEquals(883.4695727404257, range0.getLength(), 0.01);
      assertEquals(679.9904749404258, range0.getUpperBound(), 0.01);
      assertEquals(883.4695727404257, range1.getLength(), 0.01);
      assertEquals((-406.9581956), range1.getLowerBound(), 0.01);
      assertEquals(34.77659077021289, range1.getCentralValue(), 0.01);
      assertEquals(476.5113771404258, range1.getUpperBound(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 679.9904749404258);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(679.9904749404258, range2.getUpperBound(), 0.01);
      assertEquals(679.9904749404258, range2.getCentralValue(), 0.01);
      assertEquals(679.9904749404258, range2.getLowerBound(), 0.01);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      
      boolean boolean0 = true;
      Comparable<CategoryTableXYDataset>[] comparableArray0 = (Comparable<CategoryTableXYDataset>[]) Array.newInstance(Comparable.class, 1);
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      
      Millisecond millisecond0 = new Millisecond(53, second0);
      assertNotNull(millisecond0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(53L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      comparableArray0[0] = (Comparable<CategoryTableXYDataset>) millisecond0;
      double[][] doubleArray0 = new double[0][5];
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) null);
      assertTrue(boolean0);
      
      ArrayList<TimeSeriesCollection> arrayList1 = new ArrayList<TimeSeriesCollection>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) arrayList1, false);
      assertNull(range0);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries("ZH@", "ZH@", "ZH@");
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("ZH@", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals("ZH@", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat(",8h*");
      assertNotNull(mockSimpleDateFormat0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("ZH@", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals("ZH@", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Comparable<String>[] comparableArray0 = (Comparable<String>[]) Array.newInstance(Comparable.class, 1);
      Comparable<YIntervalSeriesCollection>[] comparableArray1 = (Comparable<YIntervalSeriesCollection>[]) Array.newInstance(Comparable.class, 2);
      comparableArray1[0] = (Comparable<YIntervalSeriesCollection>) millisecond0;
      comparableArray1[1] = (Comparable<YIntervalSeriesCollection>) millisecond0;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray1, (double[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'columnKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries("ZH@", "ZH@", "ZH@");
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("ZH@", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("ZH@", timeSeries0.getDomainDescription());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat(",8h*");
      assertNotNull(mockSimpleDateFormat0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("ZH@", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("ZH@", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertNotNull(timeZone0);
      assertEquals(",8h*", mockSimpleDateFormat0.toPattern());
      assertEquals(",8h*", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (-3615.2517602568932);
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 999;
      doubleArray1[6] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 999;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(",8h*", ",8h*", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals((-3615.2517602568932), range0.getLowerBound(), 0.01);
      assertEquals(4614.251760256893, range0.getLength(), 0.01);
      assertEquals((-1308.1258801284466), range0.getCentralValue(), 0.01);
      assertEquals(999.0, range0.getUpperBound(), 0.01);
      assertEquals(2, doubleArray0.length);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range1 = defaultStatisticalCategoryDataset0.getRangeBounds(true);
      assertNull(range1);
      
      Vector<Float> vector0 = new Vector<Float>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeSeriesCollection0, (List) vector0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries("ZH@", "ZH@", "ZH@");
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("ZH@", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("ZH@", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat(",8h*");
      assertNotNull(mockSimpleDateFormat0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("ZH@", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("ZH@", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Comparable<String>[] comparableArray0 = (Comparable<String>[]) Array.newInstance(Comparable.class, 1);
      comparableArray0[0] = (Comparable<String>) millisecond0;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1.0), (-1.0));
      assertNotNull(lineFunction2D0);
      assertEquals((-1.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-1.0), lineFunction2D0.getSlope(), 0.01);
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(137);
      assertNotNull(spreadsheetDate0);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(137, spreadsheetDate0.toSerial());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(16, spreadsheetDate0.getDayOfMonth());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, 3, 4, 170, spreadsheetDate0);
      assertNotNull(xYSeries0);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals((-1.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-1.0), lineFunction2D0.getSlope(), 0.01);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(137, spreadsheetDate0.toSerial());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(16, spreadsheetDate0.getDayOfMonth());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertEquals((-5.0), xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(170, xYSeries0.getItemCount());
      assertEquals(4.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(3.0, xYSeries0.getMinX(), 0.01);
      assertEquals((-4.0), xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Number[][] numberArray0 = new Number[3][0];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = categoryTableXYDataset0.getDomainBounds(false);
      assertNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Float float0 = new Float(1.0);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      boolean boolean0 = keyToGroupMap0.equals(float0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertFalse(boolean0);
      
      int int0 = keyToGroupMap0.getGroupIndex(float0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals((-1), int0);
      
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, keyToGroupMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Short short0 = Short.valueOf((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      ArrayList<Short> arrayList1 = new ArrayList<Short>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertFalse(arrayList1.contains((short) (-1)));
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      Short short1 = new Short((short) (-1));
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-1), (short)short1);
      
      boolean boolean0 = arrayList1.add(short1);
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertTrue(short1.equals((Object)short0));
      assertTrue(arrayList1.contains(short0));
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertNotSame(arrayList1, arrayList0);
      assertTrue(boolean0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (short) (-1), (short) (-1));
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals((-1), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = (SlidingGanttCategoryDataset)slidingGanttCategoryDataset0.clone();
      assertNotNull(slidingGanttCategoryDataset1);
      assertTrue(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals((-1), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-1), slidingGanttCategoryDataset1.getFirstCategoryIndex());
      assertEquals((-1), slidingGanttCategoryDataset1.getMaximumCategoryCount());
      assertNotSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset1);
      assertNotSame(slidingGanttCategoryDataset1, slidingGanttCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) arrayList1, true);
      assertNull(range0);
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertTrue(slidingGanttCategoryDataset0.equals((Object)slidingGanttCategoryDataset1));
      assertTrue(arrayList1.contains(short0));
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals((-1), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNotSame(arrayList1, arrayList0);
      assertNotSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset1);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(short0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertTrue(short0.equals((Object)short1));
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertNotNull(double0);
      assertTrue(short0.equals((Object)short1));
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, arrayList1, true);
      assertNull(range1);
      assertTrue(short0.equals((Object)short1));
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertTrue(arrayList1.contains(short0));
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotSame(arrayList1, arrayList0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      
      double[][] doubleArray0 = new double[1][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("04[D|[GKxq2ikPwH;f", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = categoryTableXYDataset0.getDomainBounds(true);
      assertNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      boolean boolean0 = keyToGroupMap0.equals(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertFalse(boolean0);
      
      int int0 = keyToGroupMap0.getGroupIndex("");
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals((-1), int0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range1);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      Range range2 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertNotNull(range2);
      assertTrue(range2.equals((Object)range1));
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotSame(range2, range1);
      assertEquals(1, doubleArray0.length);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      System.setCurrentTimeMillis(999);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) null, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Range range0 = new Range((-203.4790978), 679.9904749404258);
      assertNotNull(range0);
      assertEquals(238.2556885702129, range0.getCentralValue(), 0.01);
      assertEquals((-203.4790978), range0.getLowerBound(), 0.01);
      assertEquals(679.9904749404258, range0.getUpperBound(), 0.01);
      assertEquals(883.4695727404257, range0.getLength(), 0.01);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Float float0 = new Float(679.9904749404258);
      assertNotNull(float0);
      assertEquals(679.9905F, (float)float0, 0.01F);
      
      stack0.addElement(float0);
      assertTrue(stack0.contains(float0));
      assertEquals("[679.9905]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      boolean boolean0 = true;
      Range range1 = Range.shift(range0, (-203.4790978));
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(238.2556885702129, range0.getCentralValue(), 0.01);
      assertEquals((-203.4790978), range0.getLowerBound(), 0.01);
      assertEquals(679.9904749404258, range0.getUpperBound(), 0.01);
      assertEquals(883.4695727404257, range0.getLength(), 0.01);
      assertEquals((-406.9581956), range1.getLowerBound(), 0.01);
      assertEquals(34.77659077021289, range1.getCentralValue(), 0.01);
      assertEquals(476.5113771404258, range1.getUpperBound(), 0.01);
      assertEquals(883.4695727404257, range1.getLength(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 679.9904749404258);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(679.9904749404258, range2.getUpperBound(), 0.01);
      assertEquals(679.9904749404258, range2.getCentralValue(), 0.01);
      assertEquals(679.9904749404258, range2.getLowerBound(), 0.01);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYTaskDataset0, (List) stack0, range1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.gantt.TaskSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(1.0, 1.0, "Null 'dataset' argument.");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      assertTrue(boolean0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertNotNull(number0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, number0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.setIntervalWidth(0.0);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 0;
      doubleArray0[0] = doubleArray1;
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertNull(range0);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      assertTrue(boolean0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertNull(number0);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.setIntervalWidth(0.0);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      String string0 = "Null 'columnKeys' argument.";
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      Float float0 = new Float(3777.9976761022094);
      assertNotNull(float0);
      assertEquals(3777.9976F, (float)float0, 0.01F);
      
      stack0.addElement(float0);
      assertTrue(stack0.contains(float0));
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[3777.9976]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 0.8);
      assertNotNull(range0);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.8, range0.getUpperBound(), 0.01);
      assertEquals(0.8, range0.getCentralValue(), 0.01);
      assertEquals(0.8, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range0, true);
      assertNull(range1);
      assertTrue(stack0.contains(float0));
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[3777.9976]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(0.8, range0.getUpperBound(), 0.01);
      assertEquals(0.8, range0.getCentralValue(), 0.01);
      assertEquals(0.8, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range2 = Range.combine((Range) null, (Range) null);
      assertNull(range2);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) xYTaskDataset0, (List) stack0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Range range0 = new Range(680.132267, 680.132267);
      assertNotNull(range0);
      assertEquals(680.132267, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(680.132267, range0.getUpperBound(), 0.01);
      assertEquals(680.132267, range0.getCentralValue(), 0.01);
      
      Range range1 = Range.shift(range0, 2.0, true);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(680.132267, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(680.132267, range0.getUpperBound(), 0.01);
      assertEquals(680.132267, range0.getCentralValue(), 0.01);
      assertEquals(682.132267, range1.getUpperBound(), 0.01);
      assertEquals(682.132267, range1.getCentralValue(), 0.01);
      assertEquals(682.132267, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Float float0 = new Float(1618.497955001151);
      assertNotNull(float0);
      assertEquals(1618.4979F, (float)float0, 0.01F);
      
      Float float1 = new Float(Double.NEGATIVE_INFINITY);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, (float)float1, 0.01F);
      
      stack0.addElement(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertTrue(stack0.contains(float1));
      assertFalse(stack0.contains(float0));
      assertFalse(stack0.isEmpty());
      assertEquals("[-Infinity]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      Range range2 = Range.combine(range0, range0);
      assertNotNull(range2);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertEquals(680.132267, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(680.132267, range0.getUpperBound(), 0.01);
      assertEquals(680.132267, range0.getCentralValue(), 0.01);
      assertEquals(680.132267, range2.getUpperBound(), 0.01);
      assertEquals(680.132267, range2.getCentralValue(), 0.01);
      assertEquals(680.132267, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      double[][] doubleArray0 = new double[6][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.POSITIVE_INFINITY;
      doubleArray2[1] = Double.POSITIVE_INFINITY;
      doubleArray2[2] = Double.POSITIVE_INFINITY;
      doubleArray2[3] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = Double.POSITIVE_INFINITY;
      doubleArray3[1] = Double.POSITIVE_INFINITY;
      doubleArray3[2] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = Double.POSITIVE_INFINITY;
      doubleArray4[1] = Double.POSITIVE_INFINITY;
      doubleArray4[2] = Double.POSITIVE_INFINITY;
      doubleArray4[3] = 847.0532838277535;
      doubleArray4[4] = 2537.251084165;
      doubleArray4[5] = Double.POSITIVE_INFINITY;
      doubleArray4[6] = Double.POSITIVE_INFINITY;
      doubleArray4[7] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = (-744.1);
      doubleArray5[1] = Double.POSITIVE_INFINITY;
      doubleArray5[2] = 847.0532838277535;
      doubleArray5[3] = Double.POSITIVE_INFINITY;
      doubleArray5[4] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray6[0] = Double.POSITIVE_INFINITY;
      doubleArray6[1] = Double.POSITIVE_INFINITY;
      doubleArray6[2] = 2537.251084165;
      doubleArray6[3] = 847.0532838277535;
      doubleArray6[4] = (-744.1);
      doubleArray0[5] = doubleArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals((-744.1), range0.getLowerBound(), 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("ZH@");
      assertNotNull(mockSimpleDateFormat0);
      
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Float float0 = new Float(2235.99F);
      assertNotNull(float0);
      assertEquals(2235.99F, (float)float0, 0.01F);
      
      categoryTableXYDataset0.add((Number) float0, (Number) float0, "*]mw_JT`w-$gm", true);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2235.989990234375, range0.getUpperBound(), 0.01);
      assertEquals(2235.989990234375, range0.getCentralValue(), 0.01);
      assertEquals(2235.989990234375, range0.getLowerBound(), 0.01);
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection1 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection1);
      assertTrue(xYIntervalSeriesCollection1.equals((Object)xYIntervalSeriesCollection0));
      assertEquals(0, xYIntervalSeriesCollection1.getSeriesCount());
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      xYIntervalSeriesCollection1.addChangeListener(xYDatasetTableModel0);
      assertTrue(xYIntervalSeriesCollection1.equals((Object)xYIntervalSeriesCollection0));
      assertEquals(0, xYIntervalSeriesCollection1.getSeriesCount());
      assertNotSame(xYIntervalSeriesCollection1, xYIntervalSeriesCollection0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) xYIntervalSeriesCollection1, true);
      assertNull(range1);
      assertTrue(xYIntervalSeriesCollection1.equals((Object)xYIntervalSeriesCollection0));
      assertEquals(0, xYIntervalSeriesCollection1.getSeriesCount());
      assertNotSame(xYIntervalSeriesCollection1, xYIntervalSeriesCollection0);
      
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 2235.99F;
      doubleArray1[1] = (double) 2235.99F;
      doubleArray1[2] = (double) 2235.99F;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'rowKey' argument.", "{jN=G`Qm|hE]RXW7Js", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) arrayList0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Range range0 = new Range((-203.4790978), 680.132267);
      assertNotNull(range0);
      assertEquals(680.132267, range0.getUpperBound(), 0.01);
      assertEquals((-203.4790978), range0.getLowerBound(), 0.01);
      assertEquals(238.3265846, range0.getCentralValue(), 0.01);
      assertEquals(883.6113647999999, range0.getLength(), 0.01);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      Float float0 = new Float(680.132267);
      assertNotNull(float0);
      assertEquals(680.13226F, (float)float0, 0.01F);
      
      stack0.addElement(float0);
      assertTrue(stack0.contains(float0));
      assertEquals("[680.13226]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      
      boolean boolean0 = true;
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range0, true);
      assertNull(range1);
      assertTrue(stack0.contains(float0));
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(680.132267, range0.getUpperBound(), 0.01);
      assertEquals((-203.4790978), range0.getLowerBound(), 0.01);
      assertEquals(238.3265846, range0.getCentralValue(), 0.01);
      assertEquals(883.6113647999999, range0.getLength(), 0.01);
      assertEquals("[680.13226]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      
      boolean boolean1 = true;
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, true);
      assertNull(range2);
      assertTrue(stack0.contains(float0));
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals("[680.13226]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("R@d(*j9VUZA'w!^", "", (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      Range range0 = new Range(680.132267, 680.132267);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(680.132267, range0.getUpperBound(), 0.01);
      assertEquals(680.132267, range0.getCentralValue(), 0.01);
      assertEquals(680.132267, range0.getLowerBound(), 0.01);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      Range range1 = new Range(680.132267, 4401.20962330889);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(3721.0773563088896, range1.getLength(), 0.01);
      assertEquals(4401.20962330889, range1.getUpperBound(), 0.01);
      assertEquals(2540.670945154445, range1.getCentralValue(), 0.01);
      assertEquals(680.132267, range1.getLowerBound(), 0.01);
      
      Stack<Float> stack1 = new Stack<Float>();
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      
      Float float0 = new Float((-814.0));
      assertNotNull(float0);
      assertEquals((-814.0F), (float)float0, 0.01F);
      
      stack1.addElement(float0);
      assertFalse(stack1.equals((Object)stack0));
      assertTrue(stack1.contains(float0));
      assertEquals("[-814.0]", stack1.toString());
      assertFalse(stack1.isEmpty());
      assertEquals(1, stack1.size());
      assertFalse(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertNotSame(stack1, stack0);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, range1, true);
      assertNull(range2);
      assertFalse(stack0.equals((Object)stack1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(stack0.contains(float0));
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(3721.0773563088896, range1.getLength(), 0.01);
      assertEquals(4401.20962330889, range1.getUpperBound(), 0.01);
      assertEquals(2540.670945154445, range1.getCentralValue(), 0.01);
      assertEquals(680.132267, range1.getLowerBound(), 0.01);
      assertNotSame(stack0, stack1);
      assertNotSame(range1, range0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getStartYValue(1, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.setIntervalWidth(0.0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      double[][] doubleArray0 = new double[1][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'columnKeys' argument.", "Null 'columnKeys' argument.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2);
      assertNotNull(spreadsheetDate0);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(2958465, 9999);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(2958465.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(9999.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, 0, 3777.9976761022094, 2, millisecond0);
      assertNotNull(xYSeries0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(2958465.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(9999.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(3777.9976761022094, xYSeries0.getMaxX(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(yIntervalSeriesCollection0);
      assertNull(range0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertTrue(boolean0);
      
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2367.4045);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("9~w\"~6", (String) null, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range1);
      assertEquals(2367.4045, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals((-2367.4045), range1.getLowerBound(), 0.01);
      assertEquals((-1183.70225), range1.getCentralValue(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      System.setCurrentTimeMillis((-202L));
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(91, 5);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(4, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      
      TimeSeries timeSeries0 = new TimeSeries(0, "", "(XxyB=_<j");
      assertNotNull(timeSeries0);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("(XxyB=_<j", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("(XxyB=_<j", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(yIntervalSeriesCollection0);
      assertNull(number0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Range range2 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 3166.62176);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range1));
      assertEquals(3166.62176, range2.getUpperBound(), 0.01);
      assertEquals(799.2172599999999, range2.getLowerBound(), 0.01);
      assertEquals(2367.4045, range2.getLength(), 0.01);
      assertEquals(1982.91951, range2.getCentralValue(), 0.01);
      assertNotSame(range2, range1);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1.0), (-1.0));
      assertNotNull(lineFunction2D0);
      assertEquals((-1.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-1.0), lineFunction2D0.getIntercept(), 0.01);
      
      System.setCurrentTimeMillis(1408L);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(151, 170);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(169, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      
      SerialDate serialDate0 = SerialDate.createInstance(2);
      assertNotNull(serialDate0);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1900, serialDate0.getYYYY());
      assertNull(serialDate0.getDescription());
      assertEquals(1, serialDate0.getDayOfMonth());
      assertEquals(2, serialDate0.getDayOfWeek());
      assertEquals(2, serialDate0.toSerial());
      assertEquals(1, serialDate0.getMonth());
      
      TimeSeries timeSeries0 = new TimeSeries(serialDate0, "=YtAU6IM.|^)cEC", "");
      assertNotNull(timeSeries0);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1900, serialDate0.getYYYY());
      assertNull(serialDate0.getDescription());
      assertEquals(1, serialDate0.getDayOfMonth());
      assertEquals(2, serialDate0.getDayOfWeek());
      assertEquals(2, serialDate0.toSerial());
      assertEquals(1, serialDate0.getMonth());
      assertNull(timeSeries0.getDescription());
      assertEquals("=YtAU6IM.|^)cEC", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1900, serialDate0.getYYYY());
      assertNull(serialDate0.getDescription());
      assertEquals(1, serialDate0.getDayOfMonth());
      assertEquals(2, serialDate0.getDayOfWeek());
      assertEquals(2, serialDate0.toSerial());
      assertEquals(1, serialDate0.getMonth());
      assertNull(timeSeries0.getDescription());
      assertEquals("=YtAU6IM.|^)cEC", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertNull(number0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, (double) 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      double[][] doubleArray0 = new double[1][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("TyW", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "TyW", true);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(300.0, range0.getUpperBound(), 0.01);
      assertEquals(300.0, range0.getLowerBound(), 0.01);
      assertEquals(300.0, range0.getCentralValue(), 0.01);
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) xYIntervalSeriesCollection0, true);
      assertNull(range1);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("D_&vtKU!@", "D_&vtKU!@", doubleArray0);
      assertNotNull(categoryDataset1);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotSame(categoryDataset1, categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds(categoryDataset1, (List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      double[][] doubleArray0 = new double[1][1];
      String string0 = "Ty*W";
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Ty*W", "_mtq#k(`E-", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "Ty*W", true);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      MockDate mockDate0 = new MockDate((-1), (-1683), 668);
      assertNotNull(mockDate0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(300.0, range0.getUpperBound(), 0.01);
      assertEquals(300.0, range0.getCentralValue(), 0.01);
      assertEquals(300.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(299.5, range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals(300.5, range1.getUpperBound(), 0.01);
      assertEquals(300.0, range1.getCentralValue(), 0.01);
      assertNotSame(range1, range0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "_mtq#k(`E-", 1587.092791355, 2);
      assertNotNull(pieDataset0);
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, false);
      assertNotNull(range2);
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(300.0, range2.getUpperBound(), 0.01);
      assertEquals(300.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(300.0, range2.getLowerBound(), 0.01);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      
      Comparable<Byte>[] comparableArray0 = (Comparable<Byte>[]) Array.newInstance(Comparable.class, 5);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-2218), "W_u", (-2450), (-1), 153, 2, 2, 130, 131, 153);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -2450
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Comparable<XIntervalSeriesCollection>[] comparableArray0 = (Comparable<XIntervalSeriesCollection>[]) Array.newInstance(Comparable.class, 2);
      Quarter quarter0 = new Quarter();
      assertNotNull(quarter0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      
      comparableArray0[0] = (Comparable<XIntervalSeriesCollection>) quarter0;
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) quarter0, (Number) 4);
      assertNotNull(timeSeriesDataItem0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertFalse(timeSeriesDataItem0.isSelected());
      
      comparableArray0[1] = (Comparable<XIntervalSeriesCollection>) timeSeriesDataItem0;
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 4;
      doubleArray1[5] = (double) 1;
      doubleArray1[6] = (double) 4;
      doubleArray1[7] = (double) 4;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 4;
      doubleArray2[1] = (double) 1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 4;
      doubleArray3[1] = (-1.0);
      doubleArray3[2] = (double) 4;
      doubleArray0[2] = doubleArray3;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, (Comparable[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'columnKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal((PieDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      double[][] doubleArray0 = new double[1][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Ty*W", "_mtq#k(`E-", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "Ty*W", true);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      MockDate mockDate0 = new MockDate((-1), (-1683), 668);
      assertNotNull(mockDate0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(300.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(300.0, range0.getLowerBound(), 0.01);
      assertEquals(300.0, range0.getUpperBound(), 0.01);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(300.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals(300.5, range1.getUpperBound(), 0.01);
      assertEquals(299.5, range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) mockDate0, (double) (-1), 270);
      assertNotNull(pieDataset0);
      assertEquals("Tue Jul 29 00:00:00 GMT 1760", mockDate0.toString());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      categoryTableXYDataset0.add(0.0, 0.0, "Qz{NATVuEua^");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, false);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(0.0, 559.0);
      assertNotNull(powerFunction2D0);
      assertEquals(0.0, powerFunction2D0.getA(), 0.01);
      assertEquals(559.0, powerFunction2D0.getB(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(powerFunction2D0, 559.0, Double.POSITIVE_INFINITY, 0, "Qz{NATVuEua^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Number[][] numberArray0 = new Number[3][0];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = arrayList0.add(timeSeriesCollection0);
      assertTrue(arrayList0.contains(timeSeriesCollection0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertTrue(boolean0);
      
      boolean boolean1 = arrayList0.add(timeSeriesCollection0);
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayList0.contains(timeSeriesCollection0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertTrue(boolean1);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("a0.>zP`88?M", "Null 'collection' argument.", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.TimeSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(1.0, 1.0, "Null 'dataset' argument.");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, false);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertNotNull(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      boolean boolean0 = jDBCCategoryDataset0.equals(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertFalse(boolean0);
      
      jDBCCategoryDataset0.setGroup(datasetGroup0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals("NOID", datasetGroup0.getID());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) jDBCCategoryDataset0);
      assertFalse(boolean1 == boolean0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertTrue(boolean1);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertNotNull(number0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, number0);
      
      Vector<DefaultOHLCDataset> vector0 = new Vector<DefaultOHLCDataset>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, (List) vector0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(0.0, 0.0, "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.setIntervalPositionFactor(0.0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(categoryTableXYDataset0, true);
      assertNotNull(intervalXYDelegate0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Vector<Byte> vector1 = new Vector<Byte>(vector0);
      assertNotNull(vector1);
      assertTrue(vector1.equals((Object)vector0));
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector1.toString());
      assertEquals(0, vector1.size());
      assertTrue(vector1.isEmpty());
      assertEquals(0, vector1.capacity());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) vector1, true);
      assertNull(range1);
      assertTrue(vector0.equals((Object)vector1));
      assertTrue(vector1.equals((Object)vector0));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector1.toString());
      assertEquals(0, vector1.size());
      assertTrue(vector1.isEmpty());
      assertEquals(0, vector1.capacity());
      assertNotSame(vector0, vector1);
      assertNotSame(vector1, vector0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertNotNull(number0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, number0);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(number0));
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, (List) stack0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      double[][] doubleArray0 = new double[9][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[3] = 1.0;
      doubleArray2[1] = 0.0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("9~w\"~6", "9~w\"~6", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(9, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(9, doubleArray0.length);
      
      Range range1 = Range.shift(range0, (double) 60L);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(60.0, range1.getLowerBound(), 0.01);
      assertEquals(60.0, range1.getUpperBound(), 0.01);
      assertEquals(60.0, range1.getCentralValue(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(9, doubleArray0.length);
      
      System.setCurrentTimeMillis(60L);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(91, 91);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(90, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      
      Range range2 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 0.0);
      assertNotNull(range2);
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.getEndY(1095, 91);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1095
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.setIntervalWidth(0.0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      
      double[][] doubleArray0 = new double[1][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'columnKeys' argument.", "Null 'columnKeys' argument.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      MockDate mockDate0 = new MockDate(217, (-1578), 217);
      assertNotNull(mockDate0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, number0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      assertNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertNull(range1);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("Period:", "[", doubleArray0);
      assertNotNull(categoryDataset1);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotSame(categoryDataset1, categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds(categoryDataset1, (List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultBoxAndWhiskerXYDataset0);
      assertNull(number0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, false);
      assertNull(range0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      Double double0 = new Double(2527.351521747269);
      assertNotNull(double0);
      assertEquals(2527.351521747269, (double)double0, 0.01);
      
      TimeSeries timeSeries0 = new TimeSeries(double0, "Null 'rowKeys' argument.", "Null 'rowKeys' argument.");
      assertNotNull(timeSeries0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Null 'rowKeys' argument.", timeSeries0.getRangeDescription());
      assertEquals("Null 'rowKeys' argument.", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(defaultTableXYDataset0);
      assertNotNull(number1);
      assertFalse(number1.equals((Object)double0));
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(Double.NaN, number1);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Number number2 = DatasetUtilities.findMaximumDomainValue(defaultBoxAndWhiskerXYDataset0);
      assertNull(number2);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      double[][] doubleArray0 = new double[4][4];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 2527.351521747269;
      doubleArray1[1] = 2527.351521747269;
      doubleArray1[2] = 2527.351521747269;
      doubleArray1[3] = 2527.351521747269;
      doubleArray1[4] = 2527.351521747269;
      doubleArray1[5] = 2527.351521747269;
      doubleArray1[6] = (-653.3);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2527.351521747269;
      doubleArray2[1] = 2527.351521747269;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-653.3);
      doubleArray3[1] = 2527.351521747269;
      doubleArray3[2] = (-653.3);
      doubleArray3[3] = (-653.3);
      doubleArray3[4] = 2527.351521747269;
      doubleArray3[5] = 2527.351521747269;
      doubleArray3[6] = (-653.3);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 2527.351521747269;
      doubleArray4[1] = Double.POSITIVE_INFINITY;
      doubleArray4[2] = 2527.351521747269;
      doubleArray4[3] = (-653.3);
      doubleArray4[4] = (-653.3);
      doubleArray4[5] = (-653.3);
      doubleArray4[6] = (-653.3);
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'rowKeys' argument.", "Vhy:AH7x*EHCWZ7", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (Comparable) fixedMillisecond0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      double[][] doubleArray0 = new double[9][5];
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'columneys' argument.", "Null 'columneys' argument.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(9, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, number0);
      
      Number number1 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number1);
      assertTrue(number1.equals((Object)number0));
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, number1);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(9, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds(categoryDataset0, true);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertNotSame(range1, range0);
      assertEquals(9, doubleArray0.length);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Null 'columneys' argument.";
      stringArray0[1] = "Null 'columneys' argument.";
      stringArray0[2] = "Null 'columneys' argument.";
      stringArray0[3] = "Null 'columneys' argument.";
      stringArray0[4] = "";
      JList<String> jList0 = new JList<String>(stringArray0);
      assertNotNull(jList0);
      assertFalse(jList0.isFocusTraversalPolicySet());
      assertFalse(jList0.isFocusCycleRoot());
      assertFalse(jList0.isFocusTraversalPolicyProvider());
      assertTrue(jList0.getFocusTraversalKeysEnabled());
      assertFalse(jList0.getIgnoreRepaint());
      assertEquals(5, stringArray0.length);
      
      List<String> list0 = jList0.getSelectedValuesList();
      assertNotNull(list0);
      assertFalse(list0.contains(""));
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(jList0.isFocusTraversalPolicySet());
      assertFalse(jList0.isFocusCycleRoot());
      assertFalse(jList0.isFocusTraversalPolicyProvider());
      assertTrue(jList0.getFocusTraversalKeysEnabled());
      assertFalse(jList0.getIgnoreRepaint());
      assertEquals(5, stringArray0.length);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0, locale_FilteringMode0);
      assertNotNull(list1);
      assertTrue(list1.equals((Object)list0));
      assertFalse(list0.contains(""));
      assertFalse(list1.contains(""));
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(jList0.isFocusTraversalPolicySet());
      assertFalse(jList0.isFocusCycleRoot());
      assertFalse(jList0.isFocusTraversalPolicyProvider());
      assertTrue(jList0.getFocusTraversalKeysEnabled());
      assertFalse(jList0.getIgnoreRepaint());
      assertEquals(5, stringArray0.length);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) defaultXYDataset0, (List) list1, true);
      assertNull(range2);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertFalse(list0.contains(""));
      assertFalse(list1.contains(""));
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(jList0.isFocusTraversalPolicySet());
      assertFalse(jList0.isFocusCycleRoot());
      assertFalse(jList0.isFocusTraversalPolicyProvider());
      assertTrue(jList0.getFocusTraversalKeysEnabled());
      assertFalse(jList0.getIgnoreRepaint());
      assertEquals(5, stringArray0.length);
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) arrayList0, false);
      assertNull(range3);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      double[][] doubleArray0 = new double[9][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[3] = 1.0;
      doubleArray2[1] = 0.0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("9~w\"~6", "9~w\"~6", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(9, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(9, doubleArray0.length);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 7, 7);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(7, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(7, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(2851.0, 0.8);
      assertNotNull(lineFunction2D0);
      assertEquals(2851.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(0.8, lineFunction2D0.getSlope(), 0.01);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) 0.0, 0.0, 23);
      assertNotNull(pieDataset0);
      
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      double[][] doubleArray0 = new double[1][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("04[D|[GKxq2ikPwH;f", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = categoryTableXYDataset0.getDomainBounds(true);
      assertNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      boolean boolean0 = keyToGroupMap0.equals(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertFalse(boolean0);
      
      int int0 = keyToGroupMap0.getGroupIndex("");
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals((-1), int0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range1);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      Range range0 = new Range(680.132267, 680.132267);
      assertNotNull(range0);
      assertEquals(680.132267, range0.getLowerBound(), 0.01);
      assertEquals(680.132267, range0.getUpperBound(), 0.01);
      assertEquals(680.132267, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Float float0 = new Float(1618.497955001151);
      assertNotNull(float0);
      assertEquals(1618.4979F, (float)float0, 0.01F);
      
      Float float1 = new Float(Double.NEGATIVE_INFINITY);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, (float)float1, 0.01F);
      
      stack0.addElement(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(stack0.contains(float0));
      assertTrue(stack0.contains(float1));
      assertEquals("[-Infinity]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      Range range1 = Range.combine(range0, range0);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertEquals(680.132267, range0.getLowerBound(), 0.01);
      assertEquals(680.132267, range0.getUpperBound(), 0.01);
      assertEquals(680.132267, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(680.132267, range1.getUpperBound(), 0.01);
      assertEquals(680.132267, range1.getCentralValue(), 0.01);
      assertEquals(680.132267, range1.getLowerBound(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, range0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.AbstractSeriesDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.setIntervalWidth(0.0);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1534.9968064;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'columnKeys' argument.", "Null 'columnKeys' argument.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Comparable<DefaultBoxAndWhiskerCategoryDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerCategoryDataset>[]) Array.newInstance(Comparable.class, 7);
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) millisecond0;
      comparableArray0[1] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) millisecond0;
      comparableArray0[4] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) millisecond0;
      comparableArray0[5] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) millisecond0;
      LineFunction2D lineFunction2D0 = new LineFunction2D(2527.8514622871, 2.0);
      assertNotNull(lineFunction2D0);
      assertEquals(2.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(2527.8514622871, lineFunction2D0.getIntercept(), 0.01);
      
      // Undeclared exception!
      DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-1575.55), 1397.0, 1564, 1534.9968064);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultBoxAndWhiskerXYDataset0);
      assertNull(number0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      assertNotNull(defaultTableColumnModel0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultBoxAndWhiskerXYDataset0);
      assertNotNull(intervalXYDelegate0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      
      defaultBoxAndWhiskerXYDataset0.addChangeListener(intervalXYDelegate0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      
      JTableHeader jTableHeader0 = new JTableHeader(defaultTableColumnModel0);
      assertNotNull(jTableHeader0);
      assertFalse(jTableHeader0.getIgnoreRepaint());
      assertFalse(jTableHeader0.isFocusCycleRoot());
      assertFalse(jTableHeader0.isFocusTraversalPolicyProvider());
      assertFalse(jTableHeader0.isFocusTraversalPolicySet());
      assertTrue(jTableHeader0.getFocusTraversalKeysEnabled());
      
      boolean boolean0 = defaultBoxAndWhiskerXYDataset0.hasListener(jTableHeader0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertFalse(jTableHeader0.getIgnoreRepaint());
      assertFalse(jTableHeader0.isFocusCycleRoot());
      assertFalse(jTableHeader0.isFocusTraversalPolicyProvider());
      assertFalse(jTableHeader0.isFocusTraversalPolicySet());
      assertTrue(jTableHeader0.getFocusTraversalKeysEnabled());
      assertFalse(boolean0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, false);
      assertNull(range0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, (-2.147483648E9));
      assertNull(range1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, false);
      assertNull(range2);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(taskSeriesCollection0, tableOrder0, (-269));
      assertNotNull(categoryToPieDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-269), categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) null, 382.330356, (-1973));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("_mtq#k(`E-", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      boolean boolean0 = keyToGroupMap0.equals("");
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertFalse(boolean0);
      
      int int0 = keyToGroupMap0.getGroupIndex(0.0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals((-1), int0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertEquals(1, doubleArray0.length);
      
      Range range2 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertNotNull(range2);
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(1, doubleArray0.length);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      Range range3 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotNull(range3);
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultXYDataset0, true);
      assertNull(range0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(vectorSeriesCollection0);
      assertNull(range1);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      
      Range range2 = DatasetUtilities.iterateXYRangeBounds(vectorSeriesCollection0);
      assertNull(range2);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range3 = DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, true);
      assertNull(range3);
      
      ArrayList<XYSeriesCollection> arrayList0 = new ArrayList<XYSeriesCollection>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) vectorSeriesCollection0, (List) arrayList0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.setIntervalWidth(0.0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1534.9968064;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'columnKeys' argument.", "Null 'columnKeys' argument.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Comparable<DefaultBoxAndWhiskerCategoryDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerCategoryDataset>[]) Array.newInstance(Comparable.class, 7);
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) millisecond0;
      comparableArray0[1] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) millisecond0;
      comparableArray0[4] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) millisecond0;
      comparableArray0[5] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) millisecond0;
      MockDate mockDate0 = new MockDate(0, (-1), 2713);
      assertNotNull(mockDate0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1534.9968064, range0.getUpperBound(), 0.01);
      assertEquals(1534.9968064, range0.getCentralValue(), 0.01);
      assertEquals(1534.9968064, range0.getLowerBound(), 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.setIntervalWidth(0.0);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1534.9968064;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'columnKeys' argument.", "Null 'columnKeys' argument.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals(1534.9968064, range0.getLowerBound(), 0.01);
      assertEquals(1534.9968064, range0.getCentralValue(), 0.01);
      assertEquals(1534.9968064, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(992);
      assertNotNull(zoneOffset0);
      
      List list0 = keyToGroupMap0.getGroups();
      assertNotNull(list0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      MinguoDate minguoDate0 = MockMinguoDate.now((ZoneId) zoneOffset0);
      assertNotNull(minguoDate0);
      
      boolean boolean0 = keyToGroupMap0.equals(minguoDate0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertFalse(boolean0);
      
      int int0 = keyToGroupMap0.getGroupIndex((Comparable) null);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals((-1), int0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1534.9968064, range1.getUpperBound(), 0.01);
      assertEquals(767.4984032, range1.getCentralValue(), 0.01);
      assertEquals(1534.9968064, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertEquals(1, doubleArray0.length);
      
      Range range2 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1534.9968064, range2.getLowerBound(), 0.01);
      assertEquals(1534.9968064, range2.getUpperBound(), 0.01);
      assertEquals(1534.9968064, range2.getCentralValue(), 0.01);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(1, doubleArray0.length);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      double[][] doubleArray0 = new double[9][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[3] = 1.0;
      doubleArray2[1] = 0.0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("9~w\"~6", "9~w\"~6", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(9, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(9, doubleArray0.length);
      
      System.setCurrentTimeMillis(60L);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(91, 91);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(90, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      
      TimeSeries timeSeries0 = new TimeSeries(2, "=YtAU6IM.|^)cEC", "(XxyB=_<j");
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("(XxyB=_<j", timeSeries0.getRangeDescription());
      assertEquals("=YtAU6IM.|^)cEC", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("(XxyB=_<j", timeSeries0.getRangeDescription());
      assertEquals("=YtAU6IM.|^)cEC", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      timeSeriesCollection0.clearSelection();
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("(XxyB=_<j", timeSeries0.getRangeDescription());
      assertEquals("=YtAU6IM.|^)cEC", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      assertNotNull(number0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("(XxyB=_<j", timeSeries0.getRangeDescription());
      assertEquals("=YtAU6IM.|^)cEC", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, number0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 34.358);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(34.358, range1.getUpperBound(), 0.01);
      assertEquals(34.358, range1.getCentralValue(), 0.01);
      assertEquals(34.358, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertEquals(9, doubleArray0.length);
      
      Range range2 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertNotNull(range2);
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(9, doubleArray0.length);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, false);
      assertNull(range3);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("(XxyB=_<j", timeSeries0.getRangeDescription());
      assertEquals("=YtAU6IM.|^)cEC", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Number[][] numberArray0 = new Number[3][0];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.setIntervalWidth(0.0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1534.9968064;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'columnKeys' argument.", "Null 'columnKeys' argument.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Comparable<DefaultBoxAndWhiskerCategoryDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerCategoryDataset>[]) Array.newInstance(Comparable.class, 7);
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) millisecond0;
      comparableArray0[1] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) millisecond0;
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries((Function2D) null, 1269.0473989, 1508.639, 999, 1534.9968064);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.setIntervalWidth(0.0);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "", (KeyedValues) defaultKeyedValues0);
      assertNotNull(categoryDataset0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      BigInteger bigInteger0 = BigInteger.valueOf(0L);
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      defaultKeyedValues0.setValue((Comparable) "", (Number) bigInteger0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNull(range0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 1886);
      assertNotNull(pieDataset0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      Range range1 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertNull(range1);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNull(number0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      Range range2 = DatasetUtilities.findRangeBounds(categoryDataset0, (List) arrayList0, true);
      assertNull(range2);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(1, defaultKeyedValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      double[][] doubleArray0 = new double[9][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[3] = 1.0;
      doubleArray2[1] = 0.0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("9~w\"~6", "9~w\"~6", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(9, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(9, doubleArray0.length);
      
      System.setCurrentTimeMillis(60L);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(91, 91);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(90, dynamicTimeSeriesCollection0.getNewestIndex());
      
      TimeSeries timeSeries0 = new TimeSeries(2, "=YtAU6IM.|^)cEC", "(XxyB=_<j");
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("(XxyB=_<j", timeSeries0.getRangeDescription());
      assertEquals("=YtAU6IM.|^)cEC", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("(XxyB=_<j", timeSeries0.getRangeDescription());
      assertEquals("=YtAU6IM.|^)cEC", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      assertNotNull(number0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("(XxyB=_<j", timeSeries0.getRangeDescription());
      assertEquals("=YtAU6IM.|^)cEC", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, number0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 34.358);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(34.358, range1.getUpperBound(), 0.01);
      assertEquals(34.358, range1.getCentralValue(), 0.01);
      assertEquals(34.358, range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      boolean boolean0 = defaultTableXYDataset0.equals((Object) null);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(boolean0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, true);
      assertNull(range0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 1059, 2);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(1059, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2, slidingCategoryDataset0.getMaximumCategoryCount());
      
      MockDate mockDate0 = new MockDate(4461, (-1), 2, (-1), (-1), (-302));
      assertNotNull(mockDate0);
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      assertNotNull(mockSimpleDateFormat0);
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertNotNull(timeZone0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("GMT", timeZone0.getID());
      
      Quarter quarter0 = new Quarter(mockDate0, timeZone0);
      assertNotNull(quarter0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals("Thu Dec 01 22:53:58 GMT 6360", mockDate0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(138563996038000L, quarter0.getLastMillisecond());
      assertEquals(25444L, quarter0.getSerialIndex());
      assertEquals(6360, quarter0.getYearValue());
      assertEquals(4, quarter0.getQuarter());
      assertEquals(138563996038000L, quarter0.getFirstMillisecond());
      
      Quarter quarter1 = (Quarter)quarter0.next();
      assertNotNull(quarter1);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertFalse(quarter1.equals((Object)quarter0));
      assertEquals("Thu Dec 01 22:53:58 GMT 6360", mockDate0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(138563996038000L, quarter0.getLastMillisecond());
      assertEquals(25444L, quarter0.getSerialIndex());
      assertEquals(6360, quarter0.getYearValue());
      assertEquals(4, quarter0.getQuarter());
      assertEquals(138563996038000L, quarter0.getFirstMillisecond());
      assertEquals(1, quarter1.getQuarter());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(6361, quarter1.getYearValue());
      assertEquals(25445L, quarter1.getSerialIndex());
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingCategoryDataset0, (Comparable) quarter1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add((-2.147483648E9), (-1324.0), "~1ac");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add((-1324.0), (-1324.0), "");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(2.147482324E9, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertNotNull(number0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(2.147482324E9, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals((-1324.0), number0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "~1ac", (KeyedValues) defaultPieDataset0);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, (-2.147483648E9));
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(4.0, 1.485742262192058, "H6Pli7YD\">]4aDJ`Yf");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(boolean0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertNotNull(number0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.485742262192058, number0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Short short0 = Short.valueOf((short)13);
      assertNotNull(short0);
      assertEquals((short)13, (short)short0);
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate((short)13, (short)13, (short)13, (-421), (short)13);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (short)13, (short)13, 6.283185307179586, (-674.1), (-674.1));
      assertNotNull(oHLCDataItem0);
      assertEquals("Mon Jan 26 11:13:00 GMT 1914", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(short0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertNotNull(number0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(13.0, number0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, arrayList0, true);
      assertNotNull(range0);
      assertTrue(arrayList0.contains((short)13));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.76502522E12), range0.getLowerBound(), 0.01);
      assertEquals((-1.76502522E12), range0.getUpperBound(), 0.01);
      assertEquals((-1.76502522E12), range0.getCentralValue(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      assertNotNull(number1);
      assertFalse(number1.equals((Object)number0));
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(6.283185307179586, number1);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Short short0 = Short.valueOf((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains(short0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      boolean boolean1 = false;
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, false);
      assertNull(range0);
      assertTrue(arrayList0.contains(short0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      VectorSeries vectorSeries0 = new VectorSeries(short0, false, true);
      assertNotNull(vectorSeries0);
      assertTrue(vectorSeries0.getNotify());
      assertTrue(vectorSeries0.getAllowDuplicateXValues());
      assertNull(vectorSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, vectorSeries0.getMaximumItemCount());
      assertEquals(0, vectorSeries0.getItemCount());
      assertFalse(vectorSeries0.getAutoSort());
      
      vectorSeriesCollection0.addSeries(vectorSeries0);
      assertEquals(1, vectorSeriesCollection0.getSeriesCount());
      assertTrue(vectorSeries0.getNotify());
      assertTrue(vectorSeries0.getAllowDuplicateXValues());
      assertNull(vectorSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, vectorSeries0.getMaximumItemCount());
      assertEquals(0, vectorSeries0.getItemCount());
      assertFalse(vectorSeries0.getAutoSort());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      
      vectorSeriesCollection0.setSelectionState(xYSeriesCollection0);
      assertEquals(1, vectorSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(xYSeriesCollection0, arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.XYSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      double[][] doubleArray0 = new double[9][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      TimeSeries timeSeries0 = new TimeSeries("1MI\"D^y9t*+", "", "1MI\"D^y9t*+");
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("1MI\"D^y9t*+", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      assertNotNull(mockSimpleDateFormat0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("1MI\"D^y9t*+", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(timeSeriesCollection0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add(timeSeriesCollection0);
      assertTrue(arrayList0.contains(timeSeriesCollection0));
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("1MI\"D^y9t*+", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertNotNull(timeZone0);
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("GMT", timeZone0.getID());
      
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection(timeSeries0, timeZone0);
      assertNotNull(timeSeriesCollection1);
      assertTrue(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("1MI\"D^y9t*+", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, timeSeriesCollection1.getSeriesCount());
      
      boolean boolean1 = arrayList0.add(timeSeriesCollection0);
      assertTrue(timeSeriesCollection0.equals((Object)timeSeriesCollection1));
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayList0.contains(timeSeriesCollection1));
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("1MI\"D^y9t*+", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotSame(timeSeriesCollection0, timeSeriesCollection1);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Number[][] numberArray0 = new Number[0][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.general.DatasetUtilities", "#0x06$Q$I", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, numberArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (-5814));
      assertNotNull(pieDataset0);
      assertEquals(0, numberArray0.length);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(0, numberArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[][] doubleArray0 = new double[8][1];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (-5814);
      doubleArray1[1] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) (-5814);
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (double) (-5814);
      doubleArray3[4] = (double) (-5814);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (double) (-5814);
      doubleArray4[1] = (double) (-5814);
      doubleArray4[2] = 0.0;
      doubleArray4[3] = (-1369.200252);
      doubleArray4[4] = (double) (-5814);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = (-1369.200252);
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = (-1369.200252);
      doubleArray6[3] = 1.0;
      doubleArray6[4] = 0.0;
      doubleArray6[5] = (double) (-5814);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      
      doubleArray7[0] = (-1369.200252);
      doubleArray7[1] = (-1369.200252);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[7];
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      
      doubleArray8[0] = 1.0;
      doubleArray8[1] = (double) (-5814);
      doubleArray8[2] = 1.0;
      doubleArray8[3] = (double) (-5814);
      doubleArray8[4] = (double) (-5814);
      doubleArray8[5] = 0.0;
      doubleArray8[6] = 1.0;
      doubleArray0[7] = doubleArray8;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (-480.296463));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Short short0 = Short.valueOf((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, false);
      assertNull(range0);
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      VectorSeries vectorSeries0 = new VectorSeries(short0, false, true);
      assertNotNull(vectorSeries0);
      assertTrue(vectorSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, vectorSeries0.getMaximumItemCount());
      assertFalse(vectorSeries0.getAutoSort());
      assertNull(vectorSeries0.getDescription());
      assertTrue(vectorSeries0.getNotify());
      assertEquals(0, vectorSeries0.getItemCount());
      
      vectorSeriesCollection0.addSeries(vectorSeries0);
      assertEquals(1, vectorSeriesCollection0.getSeriesCount());
      assertTrue(vectorSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, vectorSeries0.getMaximumItemCount());
      assertFalse(vectorSeries0.getAutoSort());
      assertNull(vectorSeries0.getDescription());
      assertTrue(vectorSeries0.getNotify());
      assertEquals(0, vectorSeries0.getItemCount());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset1 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset1);
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      
      int int0 = defaultBoxAndWhiskerCategoryDataset1.getColumnCount();
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      assertNotSame(defaultBoxAndWhiskerCategoryDataset1, defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(0, int0);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(vectorSeriesCollection0);
      assertNull(range1);
      assertEquals(1, vectorSeriesCollection0.getSeriesCount());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.equals((Object)defaultBoxAndWhiskerCategoryDataset1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(defaultBoxAndWhiskerCategoryDataset0, defaultBoxAndWhiskerCategoryDataset1);
      assertTrue(boolean1);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) vectorSeriesCollection0);
      assertNull(number0);
      assertEquals(1, vectorSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 0.0);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.removeAll(set0);
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(boolean0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertNull(range1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range2 = defaultStatisticalCategoryDataset0.getRangeBounds(false);
      assertNull(range2);
      
      Range range3 = DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, false);
      assertNull(range3);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      double double0 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 2308);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      boolean boolean0 = false;
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = defaultStatisticalCategoryDataset0.getRangeBounds(false);
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, (List) null, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      double double0 = 0.0;
      categoryTableXYDataset0.setIntervalWidth(0.0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      
      double double1 = 4241.9717;
      Range range0 = new Range(999, 4241.9717);
      assertNotNull(range0);
      assertEquals(999.0, range0.getLowerBound(), 0.01);
      assertEquals(2620.48585, range0.getCentralValue(), 0.01);
      assertEquals(4241.9717, range0.getUpperBound(), 0.01);
      assertEquals(3242.9717, range0.getLength(), 0.01);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range0, false);
      assertNull(range1);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(999.0, range0.getLowerBound(), 0.01);
      assertEquals(2620.48585, range0.getCentralValue(), 0.01);
      assertEquals(4241.9717, range0.getUpperBound(), 0.01);
      assertEquals(3242.9717, range0.getLength(), 0.01);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      TaskSeries taskSeries0 = new TaskSeries("Requires 'start' < 'end'.");
      assertNotNull(taskSeries0);
      assertEquals(0, taskSeries0.getItemCount());
      assertNull(taskSeries0.getDescription());
      assertTrue(taskSeries0.getNotify());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      taskSeriesCollection0.add(taskSeries0);
      assertEquals(0, taskSeries0.getItemCount());
      assertNull(taskSeries0.getDescription());
      assertTrue(taskSeries0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1, taskSeriesCollection0.getRowCount());
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      assertNull(range2);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1, taskSeriesCollection0.getRowCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (Comparable) millisecond0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("_mtq#k(`E-", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      boolean boolean0 = keyToGroupMap0.equals("");
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertFalse(boolean0);
      
      int int0 = keyToGroupMap0.getGroupIndex(0.0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals((-1), int0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertEquals(1, doubleArray0.length);
      
      Range range2 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertNotNull(range2);
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals(1, doubleArray0.length);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      Range range3 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 0.0);
      assertNotNull(range3);
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range1));
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      TaskSeries taskSeries0 = new TaskSeries("DefaultIntervalCategoryDataset.setValue: unrecognised category.");
      assertNotNull(taskSeries0);
      assertEquals(0, taskSeries0.getItemCount());
      assertNull(taskSeries0.getDescription());
      assertTrue(taskSeries0.getNotify());
      
      boolean boolean0 = taskSeries0.isEmpty();
      assertEquals(0, taskSeries0.getItemCount());
      assertNull(taskSeries0.getDescription());
      assertTrue(taskSeries0.getNotify());
      assertTrue(boolean0);
      
      taskSeriesCollection0.add(taskSeries0);
      assertEquals(1, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeries0.getItemCount());
      assertNull(taskSeries0.getDescription());
      assertTrue(taskSeries0.getNotify());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, false);
      assertNull(range1);
      assertEquals(1, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, false);
      assertNull(range2);
      assertEquals(1, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(1, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (Comparable) "DefaultIntervalCategoryDataset.setValue: unrecognised category.");
      assertNotNull(pieDataset0);
      assertEquals(1, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertNull(number0);
      assertEquals(1, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.setIntervalWidth(0.0);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      Range range0 = new Range(999, 4241.9717);
      assertNotNull(range0);
      assertEquals(4241.9717, range0.getUpperBound(), 0.01);
      assertEquals(999.0, range0.getLowerBound(), 0.01);
      assertEquals(2620.48585, range0.getCentralValue(), 0.01);
      assertEquals(3242.9717, range0.getLength(), 0.01);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range0, false);
      assertNull(range1);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(4241.9717, range0.getUpperBound(), 0.01);
      assertEquals(999.0, range0.getLowerBound(), 0.01);
      assertEquals(2620.48585, range0.getCentralValue(), 0.01);
      assertEquals(3242.9717, range0.getLength(), 0.01);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      TaskSeries taskSeries0 = new TaskSeries("Requires 'start' < 'end'.");
      assertNotNull(taskSeries0);
      assertNull(taskSeries0.getDescription());
      assertTrue(taskSeries0.getNotify());
      assertEquals(0, taskSeries0.getItemCount());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      taskSeriesCollection0.add(taskSeries0);
      assertNull(taskSeries0.getDescription());
      assertTrue(taskSeries0.getNotify());
      assertEquals(0, taskSeries0.getItemCount());
      assertEquals(1, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(1, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, 92);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 92, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 0.0);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      categoryTableXYDataset0.add((-2.147483648E9), 1567.254883806, "Null 'seriesKey' argument.");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Double double0 = new Double(1452.58339784);
      assertNotNull(double0);
      assertEquals(1452.58339784, (double)double0, 0.01);
      
      TimeSeries timeSeries0 = new TimeSeries("(XxyB=_<j", "(XxyB=_<j", "(XxyB=_<j");
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals("(XxyB=_<j", timeSeries0.getRangeDescription());
      assertEquals("(XxyB=_<j", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(categoryTableXYDataset0);
      assertNotNull(number0);
      assertFalse(number0.equals((Object)double0));
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-2.1474836485E9), number0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(timeSeriesCollection0, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Short short0 = new Short((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      Short short1 = new Short((short)1657);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)1657, (short)short1);
      
      boolean boolean0 = arrayList0.add(short0);
      assertFalse(short0.equals((Object)short1));
      assertFalse(arrayList0.contains(short1));
      assertTrue(arrayList0.contains(short0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, (List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      TaskSeries taskSeries0 = new TaskSeries("");
      assertNotNull(taskSeries0);
      assertTrue(taskSeries0.getNotify());
      assertNull(taskSeries0.getDescription());
      assertEquals(0, taskSeries0.getItemCount());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      taskSeriesCollection0.add(taskSeries0);
      assertTrue(taskSeries0.getNotify());
      assertNull(taskSeries0.getDescription());
      assertEquals(0, taskSeries0.getItemCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1, taskSeriesCollection0.getRowCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1, taskSeriesCollection0.getRowCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      MockDate mockDate0 = new MockDate(0);
      assertNotNull(mockDate0);
      
      Quarter quarter0 = new Quarter(mockDate0);
      assertNotNull(quarter0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(7881L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(0L, quarter0.getLastMillisecond());
      assertEquals(0L, quarter0.getFirstMillisecond());
      assertEquals(1970, quarter0.getYearValue());
      
      Quarter quarter1 = (Quarter)quarter0.previous();
      assertNotNull(quarter1);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertFalse(quarter1.equals((Object)quarter0));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(7881L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(0L, quarter0.getLastMillisecond());
      assertEquals(0L, quarter0.getFirstMillisecond());
      assertEquals(1970, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(7880L, quarter1.getSerialIndex());
      assertEquals(4, quarter1.getQuarter());
      assertEquals(1969, quarter1.getYearValue());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("");
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0, quarter1, zoneInfo0);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(7881L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(0L, quarter0.getLastMillisecond());
      assertEquals(0L, quarter0.getFirstMillisecond());
      assertEquals(1970, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(7880L, quarter1.getSerialIndex());
      assertEquals(4, quarter1.getQuarter());
      assertEquals(1969, quarter1.getYearValue());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals((-1), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0, true);
      assertNotNull(range1);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(7881L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(0L, quarter0.getLastMillisecond());
      assertEquals(0L, quarter0.getFirstMillisecond());
      assertEquals(1970, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(7880L, quarter1.getSerialIndex());
      assertEquals(4, quarter1.getQuarter());
      assertEquals(1969, quarter1.getYearValue());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals((-1), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      assertNull(range2);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultXYDataset0, false);
      assertNull(range0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(vectorSeriesCollection0);
      assertNull(range1);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      Range range2 = DatasetUtilities.iterateXYRangeBounds(defaultWindDataset0);
      assertNull(range2);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(boolean0);
      
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(second0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertNotNull(number0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(4.0, 1.0, "Null 'dataset' argument.");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, false);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4.0, range0.getUpperBound(), 0.01);
      assertEquals(4.0, range0.getCentralValue(), 0.01);
      assertEquals(4.0, range0.getLowerBound(), 0.01);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(categoryTableXYDataset0, true);
      assertNotNull(intervalXYDelegate0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("_mtq#k(`E-", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      List list0 = keyToGroupMap0.getGroups();
      assertNotNull(list0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      int int0 = keyToGroupMap0.getGroupIndex(0.0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals((-1), int0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertNotSame(range1, range0);
      assertEquals(1, doubleArray0.length);
      
      Range range2 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertNotNull(range2);
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      Day day0 = new Day();
      assertNotNull(day0);
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, (Comparable) day0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries("ZH@", "ZH@", "ZH@");
      assertNotNull(timeSeries0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("ZH@", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("ZH@", timeSeries0.getRangeDescription());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat(",8h*");
      assertNotNull(mockSimpleDateFormat0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("ZH@", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("ZH@", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertNotNull(timeZone0);
      assertEquals(",8h*", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals(",8h*", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection(timeSeries0, timeZone0);
      assertNotNull(timeSeriesCollection1);
      assertTrue(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("ZH@", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("ZH@", timeSeries0.getRangeDescription());
      assertEquals(",8h*", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals(",8h*", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, timeSeriesCollection1.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number0);
      assertTrue(timeSeriesCollection0.equals((Object)timeSeriesCollection1));
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("ZH@", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("ZH@", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotSame(timeSeriesCollection0, timeSeriesCollection1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) "ZH@", (-2505.09467), 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Short short0 = Short.valueOf((short)2);
      assertNotNull(short0);
      assertEquals((short)2, (short)short0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      TaskSeries taskSeries0 = new TaskSeries("rqy?)ZaDAIh|");
      assertNotNull(taskSeries0);
      assertTrue(taskSeries0.getNotify());
      assertEquals(0, taskSeries0.getItemCount());
      assertNull(taskSeries0.getDescription());
      
      taskSeriesCollection0.add(taskSeries0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1, taskSeriesCollection0.getRowCount());
      assertTrue(taskSeries0.getNotify());
      assertEquals(0, taskSeries0.getItemCount());
      assertNull(taskSeries0.getDescription());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      assertNull(range1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1, taskSeriesCollection0.getRowCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) xYTaskDataset0, false);
      assertNull(range2);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, true);
      assertNull(range0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1.0), (-1.0));
      assertNotNull(lineFunction2D0);
      assertEquals((-1.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-1.0), lineFunction2D0.getSlope(), 0.01);
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(100);
      assertNotNull(spreadsheetDate0);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(9, spreadsheetDate0.getDayOfMonth());
      assertEquals(100, spreadsheetDate0.toSerial());
      assertEquals(4, spreadsheetDate0.getMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, Double.NEGATIVE_INFINITY, 4, 100, spreadsheetDate0);
      assertNotNull(xYSeries0);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals((-1.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-1.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals(9, spreadsheetDate0.getDayOfMonth());
      assertEquals(100, spreadsheetDate0.toSerial());
      assertEquals(4, spreadsheetDate0.getMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(100, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      
      Double double0 = new Double(2527.351521747269);
      assertNotNull(double0);
      assertEquals(2527.351521747269, (double)double0, 0.01);
      
      TimeSeries timeSeries0 = new TimeSeries(double0, "(XxyB=_<j", "org.jfree.data.xy.MatrixSeriesCollection");
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals("org.jfree.data.xy.MatrixSeriesCollection", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("(XxyB=_<j", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertNull(number0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries("ZH@", "ZH@", "ZH@");
      assertNotNull(timeSeries0);
      assertTrue(timeSeries0.getNotify());
      assertEquals("ZH@", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("ZH@", timeSeries0.getDomainDescription());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat(",8h*");
      assertNotNull(mockSimpleDateFormat0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertTrue(timeSeries0.getNotify());
      assertEquals("ZH@", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("ZH@", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertNotNull(timeZone0);
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals(",8h*", mockSimpleDateFormat0.toPattern());
      assertEquals(",8h*", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("GMT", timeZone0.getID());
      
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection(timeSeries0, timeZone0);
      assertNotNull(timeSeriesCollection1);
      assertTrue(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      assertTrue(timeSeries0.getNotify());
      assertEquals("ZH@", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("ZH@", timeSeries0.getDomainDescription());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals(",8h*", mockSimpleDateFormat0.toPattern());
      assertEquals(",8h*", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, timeSeriesCollection1.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number0);
      assertTrue(timeSeriesCollection0.equals((Object)timeSeriesCollection1));
      assertTrue(timeSeries0.getNotify());
      assertEquals("ZH@", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("ZH@", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotSame(timeSeriesCollection0, timeSeriesCollection1);
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(0, 999);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(999.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(0.0, normalDistributionFunction2D0.getMean(), 0.01);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "ZH@", (double) 999);
      assertNotNull(pieDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-561), 989);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(989, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-561), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(989, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-561), slidingGanttCategoryDataset0.getFirstCategoryIndex());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.setIntervalWidth(1995.916051914823);
      assertEquals(1995.916051914823, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-4294), 992);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals((-4294), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(992, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) xYTaskDataset0, false);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingGanttCategoryDataset0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(1.0, 4.0, "");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(0.5, range0.getLowerBound(), 0.01);
      assertEquals(1.5, range0.getUpperBound(), 0.01);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      int int0 = defaultMultiValueCategoryDataset0.getRowCount();
      assertEquals(0, int0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(categoryTableXYDataset0, true);
      assertNotNull(intervalXYDelegate0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      
      defaultMultiValueCategoryDataset0.addChangeListener(intervalXYDelegate0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNull(range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) yIntervalSeriesCollection0);
      assertNull(range0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Clock clock0 = MockClock.systemDefaultZone();
      assertNotNull(clock0);
      
      Instant instant0 = MockInstant.now(clock0);
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertNotNull(date0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 0.0, (-3377.625), 194.26, 0.0, (-3377.625));
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) yIntervalSeriesCollection0);
      assertNull(range1);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 2845, 7);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(2845, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(7, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(0.8, (-488.0));
      assertNotNull(lineFunction2D0);
      assertEquals((-488.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals(0.8, lineFunction2D0.getIntercept(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, 0.0, 0.8, 7, date0);
      assertNotNull(xYSeriesCollection0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals((-488.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals(0.8, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(yIntervalSeriesCollection0);
      assertNull(number0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Range range2 = xYSeriesCollection0.getRangeBounds(false);
      assertNotNull(range2);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals((-488.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals(0.8, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(390.40000000000003, range2.getLength(), 0.01);
      assertEquals((-194.4), range2.getCentralValue(), 0.01);
      assertEquals((-389.6), range2.getLowerBound(), 0.01);
      assertEquals(0.8, range2.getUpperBound(), 0.01);
      
      Double double0 = (Double)DatasetUtilities.findMinimumDomainValue(xYSeriesCollection0);
      assertNotNull(double0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals((-488.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals(0.8, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals((-0.5), (double)double0, 0.01);
      
      Double double1 = (Double)DatasetUtilities.findMaximumDomainValue(xYSeriesCollection0);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals((-488.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals(0.8, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.3, (double)double1, 0.01);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) date0, (-3802.95));
      assertNotNull(defaultPieDataset1);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.setIntervalWidth(1995.916051914823);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1995.916051914823, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      
      Short short0 = Short.valueOf((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(short0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) yIntervalSeriesCollection0);
      assertNull(range0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Clock clock0 = MockClock.systemDefaultZone();
      assertNotNull(clock0);
      
      Instant instant0 = MockInstant.now(clock0);
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertNotNull(date0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 0.0, (-3377.625), 0.0, (-3377.625), (-3377.625));
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) yIntervalSeriesCollection0);
      assertNull(range1);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 2845, 7);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(2845, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(7, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(0.8, (-488.0));
      assertNotNull(lineFunction2D0);
      assertEquals((-488.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals(0.8, lineFunction2D0.getIntercept(), 0.01);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) instant0, 0.8, (-2124953123));
      assertNotNull(pieDataset0);
      assertFalse(pieDataset0.equals((Object)defaultPieDataset0));
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) yIntervalSeriesCollection0);
      assertNull(number0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) yIntervalSeriesCollection0, false);
      assertNull(range2);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertFalse(defaultPieDataset0.equals((Object)pieDataset0));
      assertFalse(pieDataset0.equals((Object)defaultPieDataset0));
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("_mtq#k(`E-", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      int int0 = keyToGroupMap0.getGroupIndex(0.0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals((-1), int0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertEquals(1, doubleArray0.length);
      
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset("", "/5P", "/5P", "Invalid bounds; ");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(303);
      assertNotNull(spreadsheetDate0);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(10, spreadsheetDate0.getMonth());
      assertEquals(29, spreadsheetDate0.getDayOfMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(303, spreadsheetDate0.toSerial());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 999.0;
      doubleArray0[1] = (double) 2;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {999.0, 2.0}, doubleArray0, 0.01);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-1416.3674), 9999, (-1451), 999.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Short short0 = Short.valueOf((short)151);
      assertNotNull(short0);
      assertEquals((short)151, (short)short0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      TaskSeries taskSeries0 = new TaskSeries("?$HXZmx");
      assertNotNull(taskSeries0);
      assertTrue(taskSeries0.getNotify());
      assertNull(taskSeries0.getDescription());
      assertEquals(0, taskSeries0.getItemCount());
      
      taskSeriesCollection0.add(taskSeries0);
      assertEquals(1, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeries0.getNotify());
      assertNull(taskSeries0.getDescription());
      assertEquals(0, taskSeries0.getItemCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      assertNull(range1);
      assertEquals(1, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(1, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultXYDataset0, true);
      assertNull(range0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Short short0 = Short.valueOf((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((short) (-1)));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains((short) (-1)));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Short short1 = new Short((short)6);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)6, (short)short1);
      
      boolean boolean1 = arrayList0.add(short0);
      assertFalse(short0.equals((Object)short1));
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayList0.contains((short) (-1)));
      assertFalse(arrayList0.contains(short1));
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean1);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (short) (-1), (short) (-1));
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals((-1), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      ArrayList<DynamicTimeSeriesCollection> arrayList1 = new ArrayList<DynamicTimeSeriesCollection>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) arrayList1, true);
      assertNull(range1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals((-1), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range2 = DatasetUtilities.iterateXYRangeBounds(vectorSeriesCollection0);
      assertNull(range2);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range3 = DatasetUtilities.iterateCategoryRangeBounds(taskSeriesCollection0, true);
      assertNull(range3);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (Comparable) short1);
      assertNotNull(pieDataset0);
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertFalse(short1.equals((Object)short0));
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotSame(pieDataset0, defaultPieDataset0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      Range range0 = new Range(680.132267, 680.132267);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(680.132267, range0.getUpperBound(), 0.01);
      assertEquals(680.132267, range0.getCentralValue(), 0.01);
      assertEquals(680.132267, range0.getLowerBound(), 0.01);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      Float float0 = new Float(1618.497955001151);
      assertNotNull(float0);
      assertEquals(1618.4979F, (float)float0, 0.01F);
      
      Float float1 = new Float(Double.NEGATIVE_INFINITY);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, (float)float1, 0.01F);
      
      stack0.addElement(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(stack0.contains(float0));
      assertTrue(stack0.contains(float1));
      assertEquals("[-Infinity]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, range0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.AbstractSeriesDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      double double0 = Double.POSITIVE_INFINITY;
      categoryTableXYDataset0.add(4.0, Double.POSITIVE_INFINITY, "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(4.0, range0.getCentralValue(), 0.01);
      assertEquals(4.5, range0.getUpperBound(), 0.01);
      assertEquals(3.5, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      
      MockDate mockDate0 = new MockDate(38, 1, 38);
      assertNotNull(mockDate0);
      
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection1);
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      
      Vector<YIntervalSeriesCollection> vector0 = new Vector<YIntervalSeriesCollection>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(4.0, range2.getCentralValue(), 0.01);
      assertEquals(1.0, range2.getLength(), 0.01);
      assertEquals(3.5, range2.getLowerBound(), 0.01);
      assertEquals(4.5, range2.getUpperBound(), 0.01);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultXYDataset0, (List) vector0, range1, true);
      assertNull(range3);
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      
      String string0 = "eHmzW?'RYH";
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset((String) null, "eHmzW?'RYH", (String) null, "");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.setIntervalWidth(0.0);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      Range range0 = new Range(999, 4241.9717);
      assertNotNull(range0);
      assertEquals(999.0, range0.getLowerBound(), 0.01);
      assertEquals(4241.9717, range0.getUpperBound(), 0.01);
      assertEquals(2620.48585, range0.getCentralValue(), 0.01);
      assertEquals(3242.9717, range0.getLength(), 0.01);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range0, false);
      assertNull(range1);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(999.0, range0.getLowerBound(), 0.01);
      assertEquals(4241.9717, range0.getUpperBound(), 0.01);
      assertEquals(2620.48585, range0.getCentralValue(), 0.01);
      assertEquals(3242.9717, range0.getLength(), 0.01);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      Range range2 = Range.combine(range0, (Range) null);
      assertNotNull(range2);
      assertEquals(999.0, range0.getLowerBound(), 0.01);
      assertEquals(4241.9717, range0.getUpperBound(), 0.01);
      assertEquals(2620.48585, range0.getCentralValue(), 0.01);
      assertEquals(3242.9717, range0.getLength(), 0.01);
      assertEquals(999.0, range2.getLowerBound(), 0.01);
      assertEquals(3242.9717, range2.getLength(), 0.01);
      assertEquals(4241.9717, range2.getUpperBound(), 0.01);
      assertEquals(2620.48585, range2.getCentralValue(), 0.01);
      assertSame(range0, range2);
      assertSame(range2, range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      
      Range range3 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      assertNotNull(range3);
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertEquals(Double.NaN, range3.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range3.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range3.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range3.getLength(), 0.01);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range4 = DatasetUtilities.iterateXYRangeBounds(vectorSeriesCollection0);
      assertNull(range4);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range5 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertNull(range5);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(boolean0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertNull(number0);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Short short0 = Short.valueOf((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(short0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) arrayList0, true);
      assertNull(range0);
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(vectorSeriesCollection0);
      assertNull(range1);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      
      Range range2 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertNotNull(range2);
      assertEquals(Double.NaN, range2.getLength(), 0.01);
      assertEquals(Double.NaN, range2.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range2.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range2.getLowerBound(), 0.01);
      
      VectorSeriesCollection vectorSeriesCollection1 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection1);
      assertTrue(vectorSeriesCollection1.equals((Object)vectorSeriesCollection0));
      assertEquals(0, vectorSeriesCollection1.getSeriesCount());
      
      Range range3 = DatasetUtilities.iterateXYRangeBounds(vectorSeriesCollection0);
      assertNull(range3);
      assertTrue(vectorSeriesCollection0.equals((Object)vectorSeriesCollection1));
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNotSame(vectorSeriesCollection0, vectorSeriesCollection1);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) short0, (-1.0), 2146085543);
      assertNotNull(pieDataset0);
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultXYDataset0);
      assertNull(number0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null, 1534.9968064);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.setIntervalWidth(0.0);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries("ZH@", "ZH@", "ZH@");
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("ZH@", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("ZH@", timeSeries0.getRangeDescription());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat(",8h*");
      assertNotNull(mockSimpleDateFormat0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("ZH@", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("ZH@", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertNotNull(timeZone0);
      assertEquals(",8h*", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals(",8h*", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("GMT", timeZone0.getID());
      
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection(timeSeries0, timeZone0);
      assertNotNull(timeSeriesCollection1);
      assertTrue(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("ZH@", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("ZH@", timeSeries0.getRangeDescription());
      assertEquals(",8h*", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals(",8h*", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, timeSeriesCollection1.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number0);
      assertTrue(timeSeriesCollection0.equals((Object)timeSeriesCollection1));
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("ZH@", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("ZH@", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotSame(timeSeriesCollection0, timeSeriesCollection1);
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(604.9969596, 999);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(999.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(604.9969596, normalDistributionFunction2D0.getMean(), 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, true);
      assertNull(range0);
      assertTrue(timeSeriesCollection0.equals((Object)timeSeriesCollection1));
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("ZH@", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("ZH@", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotSame(timeSeriesCollection0, timeSeriesCollection1);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Short short0 = Short.valueOf((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains(short0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, false);
      assertNull(range0);
      assertTrue(arrayList0.contains(short0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      VectorSeries vectorSeries0 = new VectorSeries(short0, false, true);
      assertNotNull(vectorSeries0);
      assertTrue(vectorSeries0.getAllowDuplicateXValues());
      assertNull(vectorSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, vectorSeries0.getMaximumItemCount());
      assertTrue(vectorSeries0.getNotify());
      assertEquals(0, vectorSeries0.getItemCount());
      assertFalse(vectorSeries0.getAutoSort());
      
      vectorSeriesCollection0.addSeries(vectorSeries0);
      assertEquals(1, vectorSeriesCollection0.getSeriesCount());
      assertTrue(vectorSeries0.getAllowDuplicateXValues());
      assertNull(vectorSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, vectorSeries0.getMaximumItemCount());
      assertTrue(vectorSeries0.getNotify());
      assertEquals(0, vectorSeries0.getItemCount());
      assertFalse(vectorSeries0.getAutoSort());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      
      vectorSeriesCollection0.setSelectionState(xYSeriesCollection0);
      assertEquals(1, vectorSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(vectorSeriesCollection0, arrayList0, true);
      assertNull(range1);
      assertTrue(arrayList0.contains(short0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, vectorSeriesCollection0.getSeriesCount());
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Range range2 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      assertNotNull(range2);
      assertEquals(Double.NaN, range2.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range2.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range2.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range2.getLength(), 0.01);
      
      VectorSeriesCollection vectorSeriesCollection1 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection1);
      assertFalse(vectorSeriesCollection1.equals((Object)vectorSeriesCollection0));
      assertEquals(0, vectorSeriesCollection1.getSeriesCount());
      
      Range range3 = DatasetUtilities.iterateXYRangeBounds(vectorSeriesCollection1);
      assertNull(range3);
      assertFalse(vectorSeriesCollection1.equals((Object)vectorSeriesCollection0));
      assertEquals(0, vectorSeriesCollection1.getSeriesCount());
      assertNotSame(vectorSeriesCollection1, vectorSeriesCollection0);
      
      Range range4 = DatasetUtilities.iterateCategoryRangeBounds(defaultBoxAndWhiskerCategoryDataset0, false);
      assertNull(range4);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      double[][] doubleArray0 = new double[7][5];
      double[] doubleArray1 = new double[4];
      doubleArray1[2] = 3905.111;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      TaskSeries taskSeries0 = new TaskSeries("DefaultIntervalCategoryDataset.setValue: unrecognised category.");
      assertNotNull(taskSeries0);
      assertTrue(taskSeries0.getNotify());
      assertNull(taskSeries0.getDescription());
      assertEquals(0, taskSeries0.getItemCount());
      
      taskSeriesCollection0.add(taskSeries0);
      assertEquals(1, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeries0.getNotify());
      assertNull(taskSeries0.getDescription());
      assertEquals(0, taskSeries0.getItemCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, false);
      assertNull(range1);
      assertEquals(1, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(1, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1.0), (-1.0));
      assertNotNull(lineFunction2D0);
      assertEquals((-1.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-1.0), lineFunction2D0.getSlope(), 0.01);
      
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[9];
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      assertNotNull(dateFormatSymbols0);
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      assertNotNull(mockSimpleDateFormat0);
      
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      assertNotNull(calendar0);
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      
      long long0 = millisecond0.getLastMillisecond(calendar0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2014,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=14,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=?,DST_OFFSET=?]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1392409281320L, long0);
      
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = 1.0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = 1534.9968064;
      doubleArray1[7] = 1534.9968064;
      doubleArray1[8] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = (double) 999;
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = 1534.9968064;
      doubleArray2[4] = 1.0;
      doubleArray2[5] = 1.0;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("&f'T2FB~%x", "Null 'columnKeys' argument.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      MockDate mockDate0 = new MockDate(3623, 3623, 2);
      assertNotNull(mockDate0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1.0), number0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNull(range0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.setIntervalWidth(0.0);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(303);
      assertNotNull(spreadsheetDate0);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(29, spreadsheetDate0.getDayOfMonth());
      assertEquals(10, spreadsheetDate0.getMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(303, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(1584.3084, (-488.0));
      assertNotNull(lineFunction2D0);
      assertEquals((-488.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals(1584.3084, lineFunction2D0.getIntercept(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-858.18299158), 2132.7277799044, 2, spreadsheetDate0);
      assertNotNull(xYSeries0);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(29, spreadsheetDate0.getDayOfMonth());
      assertEquals(10, spreadsheetDate0.getMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(303, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals((-488.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals(1584.3084, lineFunction2D0.getIntercept(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2132.7277799044, xYSeries0.getMaxX(), 0.01);
      assertEquals((-1039186.8481933472), xYSeries0.getMinY(), 0.01);
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(420377.60829104, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals((-858.18299158), xYSeries0.getMinX(), 0.01);
      
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      DatasetGroup datasetGroup0 = new DatasetGroup("permitted.  Try using the addOrUpdate() method.");
      assertNotNull(datasetGroup0);
      assertEquals("permitted.  Try using the addOrUpdate() method.", datasetGroup0.getID());
      
      VectorSeriesCollection vectorSeriesCollection1 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection1);
      assertTrue(vectorSeriesCollection1.equals((Object)vectorSeriesCollection0));
      assertEquals(0, vectorSeriesCollection1.getSeriesCount());
      
      vectorSeriesCollection1.setGroup(datasetGroup0);
      assertTrue(vectorSeriesCollection1.equals((Object)vectorSeriesCollection0));
      assertEquals("permitted.  Try using the addOrUpdate() method.", datasetGroup0.getID());
      assertEquals(0, vectorSeriesCollection1.getSeriesCount());
      assertNotSame(vectorSeriesCollection1, vectorSeriesCollection0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      
      vectorSeriesCollection0.setSelectionState(xYSeriesCollection0);
      assertTrue(vectorSeriesCollection0.equals((Object)vectorSeriesCollection1));
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertNotSame(vectorSeriesCollection0, vectorSeriesCollection1);
      
      Stack<XYBarDataset> stack0 = new Stack<XYBarDataset>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(vectorSeriesCollection1, (-3216.0));
      assertNotNull(xYBarDataset0);
      assertTrue(vectorSeriesCollection1.equals((Object)vectorSeriesCollection0));
      assertEquals(0, vectorSeriesCollection1.getSeriesCount());
      assertEquals((-3216.0), xYBarDataset0.getBarWidth(), 0.01);
      
      boolean boolean0 = stack0.add(xYBarDataset0);
      assertTrue(vectorSeriesCollection1.equals((Object)vectorSeriesCollection0));
      assertTrue(stack0.contains(xYBarDataset0));
      assertEquals(0, vectorSeriesCollection1.getSeriesCount());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals((-3216.0), xYBarDataset0.getBarWidth(), 0.01);
      assertNotSame(vectorSeriesCollection1, vectorSeriesCollection0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(vectorSeriesCollection0, stack0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYBarDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) yIntervalSeriesCollection0);
      assertNull(range0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Clock clock0 = MockClock.systemDefaultZone();
      assertNotNull(clock0);
      
      Instant instant0 = MockInstant.now(clock0);
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertNotNull(date0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 0.0, (-3377.625), 194.26, 0.0, (-3377.625));
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) yIntervalSeriesCollection0);
      assertNull(range1);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 2845, 7);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(7, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(2845, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(0.8, (-488.0));
      assertNotNull(lineFunction2D0);
      assertEquals(0.8, lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-488.0), lineFunction2D0.getSlope(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, 0.0, 0.8, 7, date0);
      assertNotNull(xYSeriesCollection0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(0.8, lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-488.0), lineFunction2D0.getSlope(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(yIntervalSeriesCollection0);
      assertNull(number0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Double double0 = (Double)DatasetUtilities.findMinimumDomainValue(xYSeriesCollection0);
      assertNotNull(double0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(0.8, lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-488.0), lineFunction2D0.getSlope(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals((-0.5), (double)double0, 0.01);
      
      Double double1 = (Double)DatasetUtilities.findMaximumDomainValue(xYSeriesCollection0);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(0.8, lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-488.0), lineFunction2D0.getSlope(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.3, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Range range0 = new Range((-203.4790978), 680.132267);
      assertNotNull(range0);
      assertEquals(680.132267, range0.getUpperBound(), 0.01);
      assertEquals(883.6113647999999, range0.getLength(), 0.01);
      assertEquals(238.3265846, range0.getCentralValue(), 0.01);
      assertEquals((-203.4790978), range0.getLowerBound(), 0.01);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      
      Float float0 = new Float(Double.NEGATIVE_INFINITY);
      assertNotNull(float0);
      assertEquals(Float.NEGATIVE_INFINITY, (float)float0, 0.01F);
      
      stack0.addElement(float0);
      assertTrue(stack0.contains(float0));
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[-Infinity]", stack0.toString());
      assertFalse(stack0.isEmpty());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      boolean boolean0 = true;
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range0, true);
      assertNull(range1);
      assertTrue(stack0.contains(float0));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(680.132267, range0.getUpperBound(), 0.01);
      assertEquals(883.6113647999999, range0.getLength(), 0.01);
      assertEquals(238.3265846, range0.getCentralValue(), 0.01);
      assertEquals((-203.4790978), range0.getLowerBound(), 0.01);
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[-Infinity]", stack0.toString());
      assertFalse(stack0.isEmpty());
      
      Range range2 = Range.combine(range0, (Range) null);
      assertNotNull(range2);
      assertEquals(680.132267, range0.getUpperBound(), 0.01);
      assertEquals(883.6113647999999, range0.getLength(), 0.01);
      assertEquals(238.3265846, range0.getCentralValue(), 0.01);
      assertEquals((-203.4790978), range0.getLowerBound(), 0.01);
      assertEquals(238.3265846, range2.getCentralValue(), 0.01);
      assertEquals(883.6113647999999, range2.getLength(), 0.01);
      assertEquals((-203.4790978), range2.getLowerBound(), 0.01);
      assertEquals(680.132267, range2.getUpperBound(), 0.01);
      assertSame(range0, range2);
      assertSame(range2, range0);
      
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getStartYValue((-1805), (-1805));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.setIntervalWidth(216.63185091);
      assertEquals(216.63185091, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      Range range0 = new Range(0, 999);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(999.0, range0.getUpperBound(), 0.01);
      assertEquals(499.5, range0.getCentralValue(), 0.01);
      assertEquals(999.0, range0.getLength(), 0.01);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      Float float0 = new Float((-3906.03));
      assertNotNull(float0);
      assertEquals((-3906.03F), (float)float0, 0.01F);
      
      stack0.addElement(float0);
      assertTrue(stack0.contains(float0));
      assertEquals("[-3906.03]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) xYTaskDataset0, (List) stack0, range0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.gantt.TaskSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.setIntervalWidth(0.0);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.setIntervalWidth(0.0);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range0 = new Range(0.0, 0.0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, range0, true);
      assertNull(range1);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range2 = Range.combine((Range) null, range0);
      assertNotNull(range2);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertSame(range0, range2);
      assertSame(range2, range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      
      Range range3 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertNotNull(range3);
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertEquals(Double.NaN, range3.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range3.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range3.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range3.getLength(), 0.01);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range4 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertNull(range4);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(boolean0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      String string0 = "";
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset(connection0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.setIntervalWidth(0.0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.setIntervalWidth(0.0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range0 = new Range(0.0, 0.0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, range0, true);
      assertNull(range1);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      MockDate mockDate0 = new MockDate(151, 151, (-1));
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Minute minute0 = new Minute(mockDate0, timeZone0);
      assertNotNull(minute0);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals("Mon Jul 30 00:00:00 GMT 2063", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, minute0.getMinute());
      assertEquals(2952979200000L, minute0.getLastMillisecond());
      assertEquals(0, minute0.getHourValue());
      assertEquals(2952979200000L, minute0.getFirstMillisecond());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) minute0, (KeyedValues) defaultKeyedValues0);
      assertNotNull(categoryDataset0);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertEquals("Mon Jul 30 00:00:00 GMT 2063", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, minute0.getMinute());
      assertEquals(2952979200000L, minute0.getLastMillisecond());
      assertEquals(0, minute0.getHourValue());
      assertEquals(2952979200000L, minute0.getFirstMillisecond());
      
      Range range2 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNull(range2);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertEquals("Mon Jul 30 00:00:00 GMT 2063", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, minute0.getMinute());
      assertEquals(2952979200000L, minute0.getLastMillisecond());
      assertEquals(0, minute0.getHourValue());
      assertEquals(2952979200000L, minute0.getFirstMillisecond());
      
      LinkedList<XYBarDataset> linkedList0 = new LinkedList<XYBarDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range3 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, linkedList0, true);
      assertNull(range3);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0, linkedList0.size());
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      assertTrue(defaultCategoryDataset0.equals((Object)categoryDataset0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range4 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertNotNull(range4);
      assertFalse(range4.equals((Object)range0));
      assertEquals(Double.NaN, range4.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range4.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range4.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range4.getLength(), 0.01);
      assertNotSame(range4, range0);
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range5 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertNull(range5);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      
      Range range6 = DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, true);
      assertNull(range6);
      assertTrue(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Short short0 = Short.valueOf((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains((short) (-1)));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, false);
      assertNull(range0);
      assertTrue(arrayList0.contains((short) (-1)));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      vectorSeriesCollection0.setSelectionState(xYSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (-3527));
      assertNotNull(pieDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(range1);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, false);
      assertNull(range2);
      assertTrue(arrayList0.contains((short) (-1)));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertNull(range3);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.setIntervalWidth(0.0);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      
      CategoryDataset categoryDataset0 = null;
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) null, (List) linkedList0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.setIntervalWidth(0.0);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1534.9968064;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'columnKeys' argument.", "Null 'columnKeys' argument.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Comparable<DefaultBoxAndWhiskerCategoryDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerCategoryDataset>[]) Array.newInstance(Comparable.class, 7);
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) millisecond0;
      comparableArray0[1] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) millisecond0;
      comparableArray0[4] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) millisecond0;
      comparableArray0[5] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) millisecond0;
      MockDate mockDate0 = new MockDate(0, (-1), 2713);
      assertNotNull(mockDate0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1534.9968064, number0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      assertNull(range0);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Short short0 = Short.valueOf((short)151);
      assertNotNull(short0);
      assertEquals((short)151, (short)short0);
      
      ArrayList<Short> arrayList1 = new ArrayList<Short>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertFalse(arrayList1.contains(short0));
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      Short short1 = new Short((short)3372);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)3372, (short)short1);
      
      boolean boolean0 = arrayList1.add(short1);
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertFalse(short1.equals((Object)short0));
      assertTrue(arrayList1.contains(short1));
      assertFalse(arrayList1.contains(short0));
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertNotSame(arrayList1, arrayList0);
      assertTrue(boolean0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (short) (-1), (short)3372);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(3372, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-1), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) arrayList1, true);
      assertNull(range0);
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertTrue(arrayList1.contains((short)3372));
      assertFalse(arrayList1.contains(short0));
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(3372, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-1), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotSame(arrayList1, arrayList0);
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(vectorSeriesCollection0);
      assertNull(range1);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range2 = DatasetUtilities.iterateCategoryRangeBounds(taskSeriesCollection0, true);
      assertNull(range2);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.setIntervalWidth(0.0);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.setIntervalWidth(0.0);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      ArrayList<TimeSeriesCollection> arrayList1 = new ArrayList<TimeSeriesCollection>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertFalse(arrayList1.contains(timeSeriesCollection0));
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      boolean boolean0 = arrayList1.add(timeSeriesCollection0);
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertTrue(arrayList1.contains(timeSeriesCollection0));
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertNotSame(arrayList1, arrayList0);
      assertTrue(boolean0);
      
      Number[][] numberArray0 = new Number[2][4];
      Number[] numberArray1 = new Number[3];
      numberArray1[0] = (Number) 0;
      numberArray1[1] = (Number) 0;
      numberArray1[2] = (Number) 999;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[8];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) 0;
      numberArray2[1] = (Number) 0;
      numberArray2[2] = (Number) 999;
      numberArray2[3] = (Number) 999;
      numberArray2[4] = (Number) 0;
      numberArray2[5] = (Number) 0;
      numberArray2[6] = (Number) 0;
      numberArray2[7] = (Number) 999;
      numberArray0[1] = numberArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("^T3WOD3r[^t", "laW?%U_rb]E]~kO=W2", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, numberArray0.length);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) arrayList0, true);
      assertNull(range0);
      assertFalse(arrayList0.equals((Object)arrayList1));
      assertFalse(arrayList0.contains(timeSeriesCollection0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotSame(arrayList0, arrayList1);
      assertEquals(2, numberArray0.length);
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertNotNull(range1);
      assertEquals(499.5, range1.getCentralValue(), 0.01);
      assertEquals(999.0, range1.getUpperBound(), 0.01);
      assertEquals(999.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(2, numberArray0.length);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-980));
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Short short0 = Short.valueOf((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      TimeSeries timeSeries0 = new TimeSeries(short0);
      assertNotNull(timeSeries0);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertNotNull(timeZone0);
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("GMT", timeZone0.getID());
      
      TimeSeries timeSeries1 = new TimeSeries(short0, "", "");
      assertNotNull(timeSeries1);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertEquals("", timeSeries1.getRangeDescription());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(0, timeSeries1.getItemCount());
      assertTrue(timeSeries1.getNotify());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("", timeSeries1.getDomainDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection(timeSeries1, timeZone0);
      assertNotNull(timeSeriesCollection1);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", timeSeries1.getRangeDescription());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(0, timeSeries1.getItemCount());
      assertTrue(timeSeries1.getNotify());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("", timeSeries1.getDomainDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection1.getSeriesCount());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection((TimePeriodValues) null);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timePeriodValuesCollection0);
      assertNull(number0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (short) (-1), (short) (-1));
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals((-1), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-1), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset(slidingGanttCategoryDataset0, (-2147114347), (short) (-1));
      assertNotNull(slidingGanttCategoryDataset1);
      assertFalse(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals((-1), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-1), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1), slidingGanttCategoryDataset1.getMaximumCategoryCount());
      assertEquals((-2147114347), slidingGanttCategoryDataset1.getFirstCategoryIndex());
      
      Stack<TimePeriodValuesCollection> stack0 = new Stack<TimePeriodValuesCollection>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(timePeriodValuesCollection0));
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
      assertNull(range0);
      assertFalse(arrayList0.contains((short) (-1)));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(timeSeriesCollection0);
      assertNull(range1);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeriesCollection0.equals((Object)timeSeriesCollection1));
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeriesCollection0, timeSeriesCollection1);
      
      Range range2 = DatasetUtilities.iterateCategoryRangeBounds(defaultBoxAndWhiskerCategoryDataset0, true);
      assertNull(range2);
      
      Range range3 = DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
      assertNull(range3);
      assertFalse(slidingGanttCategoryDataset0.equals((Object)slidingGanttCategoryDataset1));
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals((-1), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-1), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset1);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) "", (double) (-2147114347), (int) (short) (-1));
      assertNotNull(pieDataset0);
      assertFalse(pieDataset0.equals((Object)defaultPieDataset0));
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      double[][] doubleArray0 = new double[7][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 3905.111;
      doubleArray2[3] = (-2505.09467);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("/5P", "_mtq#k(`E-", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(7, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, false);
      assertNotNull(range0);
      assertEquals((-2505.09467), range0.getLowerBound(), 0.01);
      assertEquals(3905.111, range0.getUpperBound(), 0.01);
      assertEquals(700.008165, range0.getCentralValue(), 0.01);
      assertEquals(6410.205669999999, range0.getLength(), 0.01);
      assertEquals(7, doubleArray0.length);
      
      Comparable comparable0 = ((DefaultCategoryDataset) categoryDataset0).getRowKey(2);
      assertNotNull(comparable0);
      assertEquals(7, doubleArray0.length);
      assertEquals("/5P4", comparable0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      int int0 = keyToGroupMap0.getGroupIndex("_mtq#k(`E-");
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals((-1), int0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals((-2505.09467), range1.getLowerBound(), 0.01);
      assertEquals(6410.205669999999, range1.getLength(), 0.01);
      assertEquals(3905.111, range1.getUpperBound(), 0.01);
      assertEquals(700.008165, range1.getCentralValue(), 0.01);
      assertNotSame(range1, range0);
      assertEquals(7, doubleArray0.length);
      
      Range range2 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertNotNull(range2);
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertEquals((-2505.09467), range2.getLowerBound(), 0.01);
      assertEquals(6410.205669999999, range2.getLength(), 0.01);
      assertEquals(3905.111, range2.getUpperBound(), 0.01);
      assertEquals(700.008165, range2.getCentralValue(), 0.01);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      double[][] doubleArray0 = new double[7][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 3905.111;
      doubleArray2[3] = (-2505.09467);
      doubleArray0[1] = doubleArray2;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, (-932), (-932));
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals((-932), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-932), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) yIntervalSeriesCollection0);
      assertNull(range0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Clock clock0 = MockClock.systemDefaultZone();
      assertNotNull(clock0);
      
      Instant instant0 = MockInstant.now(clock0);
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertNotNull(date0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 0.0, (-3377.625), 194.26, 0.0, (-3377.625));
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) oHLCDataItem0, (KeyedValues) defaultKeyedValues0);
      assertNotNull(categoryDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNull(range1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 1886);
      assertNotNull(pieDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1886;
      doubleArray0[1] = (-3377.625);
      doubleArray0[2] = 194.26;
      doubleArray0[3] = 194.26;
      doubleArray0[4] = 194.26;
      doubleArray0[5] = 604.968179656;
      doubleArray0[6] = (double) 1886;
      doubleArray0[7] = 0.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {1886.0, (-3377.625), 194.26, 194.26, 194.26, 604.968179656, 1886.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertEquals(8, doubleArray0.length);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-248.187668), 1397.0, 2, oHLCDataItem0);
      assertNotNull(xYSeriesCollection0);
      assertArrayEquals(new double[] {1886.0, (-3377.625), 194.26, 194.26, 194.26, 604.968179656, 1886.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(8, doubleArray0.length);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) yIntervalSeriesCollection0, true);
      assertNull(range2);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      assertNotNull(clock0);
      
      Instant instant0 = MockInstant.now(clock0);
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertNotNull(date0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 0.0, (-3377.625), 194.26, 0.0, (-3377.625));
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(0.8, (-488.0));
      assertNotNull(lineFunction2D0);
      assertEquals((-488.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals(0.8, lineFunction2D0.getIntercept(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, 0.0, 0.8, 7, date0);
      assertNotNull(xYSeriesCollection0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals((-488.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals(0.8, lineFunction2D0.getIntercept(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, 305);
      assertNotNull(defaultPieDataset1);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals((-488.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals(0.8, lineFunction2D0.getIntercept(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.setIntervalWidth(0.0);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.setIntervalWidth(0.0);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "", (KeyedValues) defaultKeyedValues0);
      assertNotNull(categoryDataset0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNull(range0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 1886);
      assertNotNull(pieDataset0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      Range range1 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertNull(range1);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) arrayList0, false);
      assertNull(range2);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNull(number0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      Range range3 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      assertNull(range3);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Short short0 = Short.valueOf((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
      assertNull(range0);
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (short) (-1), (short) (-1));
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals((-1), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      VectorSeriesCollection vectorSeriesCollection1 = (VectorSeriesCollection)vectorSeriesCollection0.clone();
      assertNotNull(vectorSeriesCollection1);
      assertTrue(vectorSeriesCollection1.equals((Object)vectorSeriesCollection0));
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertEquals(0, vectorSeriesCollection1.getSeriesCount());
      assertNotSame(vectorSeriesCollection0, vectorSeriesCollection1);
      assertNotSame(vectorSeriesCollection1, vectorSeriesCollection0);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(vectorSeriesCollection0);
      assertNull(range1);
      assertTrue(vectorSeriesCollection0.equals((Object)vectorSeriesCollection1));
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNotSame(vectorSeriesCollection0, vectorSeriesCollection1);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) vectorSeriesCollection0);
      assertNull(range2);
      assertTrue(vectorSeriesCollection0.equals((Object)vectorSeriesCollection1));
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNotSame(vectorSeriesCollection0, vectorSeriesCollection1);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1.0), (-1.0));
      assertNotNull(lineFunction2D0);
      assertEquals((-1.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-1.0), lineFunction2D0.getSlope(), 0.01);
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(303);
      assertNotNull(spreadsheetDate0);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(10, spreadsheetDate0.getMonth());
      assertEquals(303, spreadsheetDate0.toSerial());
      assertEquals(29, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, 3, 999.0, 2, spreadsheetDate0);
      assertNotNull(xYSeries0);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals((-1.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-1.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(10, spreadsheetDate0.getMonth());
      assertEquals(303, spreadsheetDate0.toSerial());
      assertEquals(29, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(999.0, xYSeries0.getMaxX(), 0.01);
      assertEquals((-4.0), xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(3.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-1000.0), xYSeries0.getMinY(), 0.01);
      
      Double double0 = new Double((-1659.757));
      assertNotNull(double0);
      assertEquals((-1659.757), (double)double0, 0.01);
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      DatasetGroup datasetGroup0 = new DatasetGroup("h$X:6");
      assertNotNull(datasetGroup0);
      assertEquals("h$X:6", datasetGroup0.getID());
      
      vectorSeriesCollection0.setGroup(datasetGroup0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertEquals("h$X:6", datasetGroup0.getID());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      vectorSeriesCollection0.setSelectionState(xYSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Stack<XYBarDataset> stack0 = new Stack<XYBarDataset>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(vectorSeriesCollection0, stack0, true);
      assertNull(range0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range1 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      assertNotNull(range1);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      
      defaultCategoryDataset0.addValue((-1675.030604), (Comparable) spreadsheetDate0, (Comparable) double0);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(10, spreadsheetDate0.getMonth());
      assertEquals(303, spreadsheetDate0.toSerial());
      assertEquals(29, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      
      VectorSeriesCollection vectorSeriesCollection1 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection1);
      assertTrue(vectorSeriesCollection1.equals((Object)vectorSeriesCollection0));
      assertEquals(0, vectorSeriesCollection1.getSeriesCount());
      
      Range range2 = DatasetUtilities.iterateXYRangeBounds(xYSeriesCollection0);
      assertNull(range2);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.setIntervalWidth(0.0);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, "ZH@", "ZH@");
      assertNotNull(timeSeries0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("ZH@", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("ZH@", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("ZH@");
      assertNotNull(mockSimpleDateFormat0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("ZH@", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("ZH@", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = arrayList0.add(timeSeriesCollection0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertTrue(arrayList0.contains(timeSeriesCollection0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("ZH@", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("ZH@", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertTrue(boolean0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-1094), 5);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(5, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-1094), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, false);
      assertNull(range1);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
      assertNotNull(range2);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 3058);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultXYDataset0, true);
      assertNull(range0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Short short0 = Short.valueOf((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((short) (-1)));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains((short) (-1)));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) arrayList0, true);
      assertNull(range1);
      assertTrue(arrayList0.contains((short) (-1)));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range2 = DatasetUtilities.iterateXYRangeBounds(vectorSeriesCollection0);
      assertNull(range2);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range3 = Range.combine((Range) null, (Range) null);
      assertNull(range3);
      
      MockDate mockDate0 = new MockDate((short) (-1), (short) (-1), 42, 42, 1, 691);
      assertNotNull(mockDate0);
      
      Month month0 = new Month(mockDate0);
      assertNotNull(month0);
      assertEquals("Thu Jan 12 18:12:31 GMT 1899", mockDate0.toString());
      assertEquals(1, month0.getMonth());
      assertEquals(1899, month0.getYearValue());
      assertEquals(22789L, month0.getSerialIndex());
      assertEquals((-2239508849000L), month0.getFirstMillisecond());
      assertEquals((-2239508849000L), month0.getLastMillisecond());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.setIntervalWidth(0.0);
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries("ZH@", "ZH@", "ZH@");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat(",8h*");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      arrayList0.add(timeSeriesCollection0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 2147072827, 0);
      LineFunction2D lineFunction2D0 = new LineFunction2D((-262.82503971076693), 999);
      DatasetUtilities.sampleFunction2D(lineFunction2D0, 999, 2147072827, 1087, ",8h*");
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, 0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(millisecond0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, keyToGroupMap0);
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.setIntervalWidth(0.0);
      Millisecond millisecond0 = new Millisecond();
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1534.9968064;
      doubleArray0[0] = doubleArray1;
      DatasetUtilities.createCategoryDataset("Null 'columnKeys' argument.", "Null 'columnKeys' argument.", doubleArray0);
      Comparable<DefaultBoxAndWhiskerCategoryDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerCategoryDataset>[]) Array.newInstance(Comparable.class, 7);
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) millisecond0;
      comparableArray0[1] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) millisecond0;
      comparableArray0[2] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) millisecond0;
      comparableArray0[3] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) millisecond0;
      comparableArray0[4] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) millisecond0;
      comparableArray0[5] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) millisecond0;
      MockDate mockDate0 = new MockDate(0, (-1), 2713);
      Day day0 = new Day(mockDate0);
      RegularTimePeriod regularTimePeriod0 = day0.previous();
      comparableArray0[6] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) regularTimePeriod0;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'rowKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      XYDataset xYDataset0 = null;
      List<DefaultBoxAndWhiskerCategoryDataset> list0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) yIntervalSeriesCollection0);
      Clock clock0 = MockClock.systemDefaultZone();
      Instant instant0 = MockInstant.now(clock0);
      Date date0 = Date.from(instant0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 0.0, (-3377.625), 194.26, 0.0, (-3377.625));
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      DatasetUtilities.findRangeBounds((XYDataset) yIntervalSeriesCollection0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 98, 1886);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (-2382.8970414484725));
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, true);
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1.2589021194470023), (-1.2589021194470023));
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(100);
      DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, Double.NEGATIVE_INFINITY, 4, 100, spreadsheetDate0);
      Double double0 = new Double(2527.351521747269);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      XYTaskDataset xYTaskDataset0 = null;
      try {
        xYTaskDataset0 = new XYTaskDataset((TaskSeriesCollection) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'tasks' argument.
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.setIntervalWidth(1913.701751846);
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      Millisecond millisecond0 = new Millisecond();
      MinguoEra minguoEra0 = MinguoEra.ROC;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-2297), 1041);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingGanttCategoryDataset0);
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      double[][] doubleArray0 = new double[7][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      LineFunction2D lineFunction2D0 = new LineFunction2D(4.0, (-1.0));
      int int0 = 274;
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(274);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 5, 1, (-1575), spreadsheetDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultXYDataset0, false);
      Short short0 = Short.valueOf((short) (-1));
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      arrayList0.add(short0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) arrayList0, true);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      DatasetUtilities.iterateXYRangeBounds(vectorSeriesCollection0);
      DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, true);
      MockDate mockDate0 = new MockDate((short) (-1), (short) (-1), 42, 42, 1, 691);
      Month month0 = new Month(mockDate0);
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) yIntervalSeriesCollection0);
      MockClock.systemDefaultZone();
      Instant instant0 = MockInstant.now();
      DatasetUtilities.iterateRangeBounds((XYDataset) yIntervalSeriesCollection0, false);
      LineFunction2D lineFunction2D0 = new LineFunction2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(100);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(2958465, Double.POSITIVE_INFINITY);
      DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, 0, 4, 3, spreadsheetDate0);
      Double double0 = new Double((-5814.0));
      Second second0 = new Second();
      second0.next();
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(lineFunction2D0, Double.POSITIVE_INFINITY, 0, 2958465, instant0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, true);
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1.0), (-1.0));
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(303);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, 3, 999.0, 2, spreadsheetDate0);
      assertEquals((-1000.0), xYSeries0.getMinY(), 0.01);
      assertEquals(2, xYSeries0.getItemCount());
      
      Double double0 = new Double((-1659.757));
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      vectorSeriesCollection0.setSelectionState(xYSeriesCollection0);
      Stack<XYBarDataset> stack0 = new Stack<XYBarDataset>();
      DatasetUtilities.iterateToFindDomainBounds(vectorSeriesCollection0, stack0, true);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      VectorSeriesCollection vectorSeriesCollection1 = new VectorSeriesCollection();
      DatasetUtilities.iterateXYRangeBounds(xYSeriesCollection0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.setIntervalWidth(0.0);
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      Millisecond millisecond0 = new Millisecond();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("ZH@");
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Number[][] numberArray0 = new Number[1][6];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = (Number) 0;
      numberArray1[1] = (Number) 999;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      DatasetUtilities.iterateXYRangeBounds(vectorSeriesCollection0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) vectorSeriesCollection0);
      DatasetUtilities.findMinimumDomainValue(categoryTableXYDataset0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (Comparable) "ZH@");
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Short short0 = Short.valueOf((short)80);
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      arrayList0.add(short0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) arrayList0, true);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      DatasetUtilities.iterateXYRangeBounds(vectorSeriesCollection0);
      DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, true);
      double[][] doubleArray0 = new double[7][2];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) (short)80;
      doubleArray1[1] = (double) (short)80;
      doubleArray1[2] = (double) (short)80;
      doubleArray1[3] = (double) (short)80;
      doubleArray1[4] = (double) (short)80;
      doubleArray1[5] = (double) (short)80;
      doubleArray1[6] = (double) (short)80;
      doubleArray1[7] = (double) (short)80;
      doubleArray1[8] = (double) (short)80;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) (short)80;
      doubleArray2[1] = (double) (short)80;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 1841.73589346784;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = (double) (short)80;
      doubleArray4[1] = 1841.73589346784;
      doubleArray4[2] = (double) (short)80;
      doubleArray4[3] = (-2214.747625432);
      doubleArray4[4] = 1841.73589346784;
      doubleArray4[5] = (double) (short)80;
      doubleArray4[6] = (double) (short)80;
      doubleArray4[7] = Double.NEGATIVE_INFINITY;
      doubleArray4[8] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = (-2214.747625432);
      doubleArray5[1] = 1990.905708559;
      doubleArray5[2] = Double.NEGATIVE_INFINITY;
      doubleArray5[3] = (-2214.747625432);
      doubleArray5[4] = (-2214.747625432);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = 3263.2045;
      doubleArray6[1] = (-2214.747625432);
      doubleArray6[2] = Double.NEGATIVE_INFINITY;
      doubleArray6[3] = (-2214.747625432);
      doubleArray6[4] = (double) (short)80;
      doubleArray6[5] = (double) (short)80;
      doubleArray6[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      doubleArray7[0] = 3263.2045;
      doubleArray7[1] = 1990.905708559;
      doubleArray7[2] = 1841.73589346784;
      doubleArray7[3] = 1841.73589346784;
      doubleArray0[6] = doubleArray7;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) null, (Comparable[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      Millisecond millisecond0 = new Millisecond();
      Locale locale0 = Locale.US;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      millisecond0.getMiddleMillisecond(calendar0);
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, "ZH@", "ZH@");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("ZH@");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      arrayList0.add(timeSeriesCollection0);
      Locale locale1 = Locale.CANADA;
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      arrayList0.removeAll(set0);
      mockSimpleDateFormat0.getTimeZone();
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection();
      arrayList0.add(timeSeriesCollection1);
      Number[][] numberArray0 = new Number[1][8];
      Number[] numberArray1 = new Number[7];
      numberArray1[0] = (Number) 999;
      numberArray1[1] = (Number) 0;
      numberArray1[2] = (Number) 999;
      numberArray1[3] = (Number) 0;
      numberArray1[4] = (Number) 999;
      numberArray1[5] = (Number) 0;
      numberArray1[6] = (Number) 0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("t_k9<1!`f+-", "]M,,eLC$", numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.TimeSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) yIntervalSeriesCollection0);
      Clock clock0 = MockClock.systemDefaultZone();
      Instant instant0 = MockInstant.now(clock0);
      Date date0 = Date.from(instant0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 0.0, (-3377.625), 194.26, 0.0, (-3377.625));
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) oHLCDataItem0, (KeyedValues) defaultKeyedValues0);
      DatasetUtilities.findRangeBounds((XYDataset) yIntervalSeriesCollection0);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 2845, 7);
      LineFunction2D lineFunction2D0 = new LineFunction2D(0.8, (-488.0));
      DatasetUtilities.sampleFunction2D(lineFunction2D0, 0.0, 0.8, 7, date0);
      Number number0 = DatasetUtilities.findMaximumDomainValue(yIntervalSeriesCollection0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      DatasetUtilities.isEmptyOrNull((XYDataset) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      double[][] doubleArray0 = new double[5][7];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 503;
      doubleArray1[1] = (double) 503;
      doubleArray1[2] = (double) 503;
      doubleArray1[3] = (double) 503;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 503;
      doubleArray2[1] = (double) 503;
      doubleArray2[2] = (double) 503;
      doubleArray2[3] = (double) 503;
      doubleArray2[4] = (double) 503;
      doubleArray2[5] = (double) 503;
      doubleArray2[6] = (double) 503;
      doubleArray2[7] = (double) 503;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("_mtq#k(`'Eq-", "The number of column keys does not match the number of columns in the data array.", doubleArray0);
      DatasetUtilities.findRangeBounds(categoryDataset0, true);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertEquals(1006.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("TL,qGC", "The number of column keys does not match the number of columns in the data array.", doubleArray0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      double[][] doubleArray0 = new double[7][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 3905.111;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("9~w\"~6", "9~w\"~6", doubleArray0);
      DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      System.setCurrentTimeMillis(60L);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(91, 91);
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.getDomainBounds(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, true);
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1.0), (-1.0));
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(340);
      DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, 3, 999.0, 2, spreadsheetDate0);
      Double double0 = new Double((-1659.757));
      int int0 = 2091;
      double double1 = (-1.0);
      Class<DefaultHighLowDataset> class0 = DefaultHighLowDataset.class;
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getXDate(3, 1091);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1091, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, true);
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1.0), (-1.0));
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(100);
      DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, Double.NEGATIVE_INFINITY, 4, 100, spreadsheetDate0);
      Double double0 = new Double(2527.351521747269);
      Second second0 = new Second();
      RegularTimePeriod regularTimePeriod0 = second0.next();
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(lineFunction2D0, 0, (-1), 1076, regularTimePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries("ZH@", "", "ZH@");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection(timeSeries0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.setIntervalWidth(0.0);
      Millisecond millisecond0 = new Millisecond();
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1534.9968064;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'columnKeys' argument.", "Null 'columnKeys' argument.", doubleArray0);
      DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      Range range0 = new Range(0.0, 0.0);
      Range range1 = DatasetUtilities.findRangeBounds(categoryDataset0, true);
      assertEquals(1534.9968064, range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Short short0 = Short.valueOf((short) (-1));
      arrayList0.add(short0);
      boolean boolean0 = false;
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, false);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      vectorSeriesCollection0.setSelectionState(xYSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(vectorSeriesCollection0, arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.VectorSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) yIntervalSeriesCollection0);
      Clock clock0 = MockClock.systemDefaultZone();
      MockInstant.now(clock0);
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.0, (-3376.654327734105), 162.06498565205044, 0.0, (-3376.654327734105));
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findRangeBounds((XYDataset) yIntervalSeriesCollection0);
      DatasetUtilities.findMaximumStackedRangeValue(defaultCategoryDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, 1886);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, false);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, false);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      DatasetUtilities.iterateXYRangeBounds(yIntervalSeriesCollection0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.iterateCategoryRangeBounds(defaultMultiValueCategoryDataset0, false);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, 1886);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultMultiValueCategoryDataset0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      Number[][] numberArray0 = new Number[3][0];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries("ZH@", "ZH@", "org.jfree.data.general.DatasetUtilitie8");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection();
      arrayList0.add(timeSeriesCollection1);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("a0.>zP`88?M", "Null 'collection' argument.", numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.TimeSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.setIntervalWidth(1913.701751846);
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      Millisecond millisecond0 = new Millisecond();
      MinguoEra minguoEra0 = MinguoEra.ROC;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-2297), 1041);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingGanttCategoryDataset0);
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, true);
      double double0 = Double.NaN;
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D((-1.0), Double.NaN);
      Week week0 = new Week();
      int int0 = (-567);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((-2297));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.setIntervalWidth(0.0);
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, "ZH@", "ZH@");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("ZH@");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      arrayList0.add(timeSeriesCollection0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, false);
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) xYTaskDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      double[][] doubleArray0 = new double[5][7];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 503;
      doubleArray1[1] = (double) 503;
      doubleArray1[2] = (double) 503;
      doubleArray1[3] = (double) 503;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 503;
      doubleArray2[2] = (double) 503;
      doubleArray2[3] = (double) 503;
      doubleArray2[4] = (double) 503;
      doubleArray2[5] = (double) 503;
      doubleArray2[6] = (double) 503;
      doubleArray2[7] = (double) 503;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = (double) 503;
      doubleArray4[1] = (double) 503;
      doubleArray4[2] = (double) 503;
      doubleArray4[3] = (double) 503;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) vector0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) yIntervalSeriesCollection0);
      Clock clock0 = MockClock.systemDefaultZone();
      Instant instant0 = MockInstant.now(clock0);
      Date date0 = Date.from(instant0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 0.0, (-3377.625), 194.26, 0.0, (-3377.625));
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) oHLCDataItem0, (KeyedValues) defaultKeyedValues0);
      DatasetUtilities.findRangeBounds((XYDataset) yIntervalSeriesCollection0);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 2845, 7);
      LineFunction2D lineFunction2D0 = new LineFunction2D(0.8, (-488.0));
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, 0.0, 0.8, 7, date0);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      double[][] doubleArray0 = new double[7][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 3905.111;
      doubleArray2[3] = (-2505.09467);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("/5P", "_mtq#k(`'Eq-", doubleArray0);
      DatasetUtilities.findRangeBounds(categoryDataset0, false);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertEquals(6410.205669999999, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("Null 'anchor' argument.", "", doubleArray0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      int int0 = 213;
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, 213);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      double[][] doubleArray0 = new double[5][7];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 503;
      doubleArray1[1] = (double) 503;
      doubleArray1[2] = (double) 503;
      doubleArray1[3] = (double) 503;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 503;
      doubleArray2[1] = (double) 503;
      doubleArray2[2] = (double) 503;
      doubleArray2[3] = (double) 503;
      doubleArray2[4] = (double) 503;
      doubleArray2[5] = (double) 503;
      doubleArray2[6] = (double) 503;
      doubleArray2[7] = (double) 503;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = (double) 503;
      doubleArray4[1] = (double) 503;
      doubleArray4[2] = (double) 503;
      doubleArray4[3] = (double) 503;
      doubleArray4[4] = (double) 503;
      doubleArray4[5] = (double) 503;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      doubleArray0[4] = doubleArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of column keys does not match the number of columns in the data array.", "", doubleArray0);
      DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      System.setCurrentTimeMillis(1151L);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(503, 503);
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.getDomainBounds(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("ZH@", "ZH@", "~pH~TU(`='F%");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat(",8h*");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      arrayList0.add(timeSeriesCollection0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-1061), (-1116));
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1061), 437.92556315155);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(lineFunction2D0, 1.0, 1.5, 2147072827, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-1306.4897475511);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 6.283185307179586;
      doubleArray0[0] = doubleArray1;
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) linkedList0, false);
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      TimeSeriesCollection timeSeriesCollection0 = null;
      arrayList0.add((TimeSeriesCollection) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds((XYDataset) null, arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      String string0 = "SeriesChangeType.ADD";
      TimeSeries timeSeries0 = new TimeSeries("ZH@", "SeriesChangeType.ADD", "ZH@");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("ZH@");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      arrayList0.add(timeSeriesCollection0);
      Locale locale0 = Locale.CANADA;
      locale0.getUnicodeLocaleKeys();
      ArrayList<TimeSeriesCollection> arrayList1 = new ArrayList<TimeSeriesCollection>();
      arrayList1.removeAll(arrayList0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection(timeSeries0, timeZone0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList1, false);
      arrayList1.add(timeSeriesCollection1);
      Vector<Byte> vector0 = new Vector<Byte>();
      DatasetUtilities.iterateToFindDomainBounds(timeSeriesCollection0, vector0, true);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection1);
      double double0 = (-857.4056004401153);
      NormalDistributionFunction2D normalDistributionFunction2D0 = null;
      try {
        normalDistributionFunction2D0 = new NormalDistributionFunction2D((-857.4056004401153), 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'std' > 0.
         //
         verifyException("org.jfree.data.function.NormalDistributionFunction2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      double double0 = 1913.701751846;
      categoryTableXYDataset0.setIntervalWidth(1913.701751846);
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      Millisecond millisecond0 = new Millisecond();
      MinguoEra minguoEra0 = MinguoEra.ROC;
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(minguoEra0);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      defaultIntervalCategoryDataset0.seriesChanged(seriesChangeEvent0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      int int0 = (-2297);
      int int1 = 1041;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-2297), 1041);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingGanttCategoryDataset0);
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset((Connection) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // A connection must be supplied.
         //
         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Short short0 = Short.valueOf((short) (-1));
      arrayList0.add(short0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, false);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      DatasetUtilities.iterateXYRangeBounds(vectorSeriesCollection0);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultBoxAndWhiskerCategoryDataset0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      int int0 = 2308;
      DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 2308);
      defaultTableXYDataset0.validateObject();
      int int1 = 0;
      // Undeclared exception!
      try { 
        defaultTableXYDataset0.getStartY(2308, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2308, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      double[][] doubleArray0 = new double[7][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 3905.111;
      doubleArray2[3] = (-2505.09467);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 1.0;
      doubleArray3[1] = 3905.111;
      doubleArray3[3] = 0.0;
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D((-902.679964786), 3905.111);
      Week week0 = new Week();
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, (-1.0), (-1.0), (-1362), 3905.111);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      int int0 = 2;
      ZoneOffset.ofTotalSeconds(2);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      timeTableXYDataset0.getDomainUpperBound(false);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.setIntervalWidth(0.0);
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, "ZH@", "ZH@");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("ZH@");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      arrayList0.add(timeSeriesCollection0);
      boolean boolean0 = true;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-1094), 5);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) arrayList0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.TimeSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.setIntervalWidth(0.0);
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries("ZH@", "ZH@", "ZH@");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat(",8h*");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      arrayList0.add(timeSeriesCollection0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 2147072827, 5);
      LineFunction2D lineFunction2D0 = new LineFunction2D(1264.0, 1.0);
      // Undeclared exception!
      DatasetUtilities.sampleFunction2D(lineFunction2D0, 999, 2270.311480999903, 1313, "ZH@");
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultKeyedValues2DDataset0, (-1431655765), 474);
      slidingCategoryDataset0.setMaximumCategoryCount(474);
      slidingCategoryDataset0.setMaximumCategoryCount(23);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingCategoryDataset0, (List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-1306.4897475511);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 6.283185307179586;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (-1306.4897475511);
      doubleArray2[1] = (-1306.4897475511);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(".rq", "I|%W", doubleArray0);
      DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("U", "I|%W", (Number[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.setIntervalWidth(0.0);
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      Millisecond millisecond0 = new Millisecond();
      String string0 = "ZH@";
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, "ZH@", "ZH@");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("ZH@");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      arrayList0.add(timeSeriesCollection0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection(timeSeries0, timeZone0);
      arrayList0.add(timeSeriesCollection1);
      DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection1, (List) arrayList0, (Range) null, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.TimeSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Short short0 = new Short((short)1064);
      Short short1 = new Short((short) (-4507));
      arrayList0.add(short1);
      arrayList0.add(short0);
      Short.valueOf((short) (-1));
      Short short2 = new Short((short) (-1));
      arrayList0.add(short2);
      Vector<DefaultIntervalCategoryDataset> vector0 = new Vector<DefaultIntervalCategoryDataset>();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      Number[][] numberArray0 = new Number[3][0];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries("ZH@", "", "org.jfree.data.general.DatasetUtilitie8");
      String string0 = "a0.>zP`88?M";
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection();
      arrayList0.add(timeSeriesCollection1);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      TimeSeriesCollection timeSeriesCollection2 = new TimeSeriesCollection(timeSeries0, timeZone0);
      arrayList0.add(timeSeriesCollection2);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(timeSeriesCollection1, arrayList0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.TimeSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      double double0 = 0.0;
      categoryTableXYDataset0.setIntervalWidth(0.0);
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, "ZH@", "ZH@");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("ZH@");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      arrayList0.add(timeSeriesCollection0);
      Locale locale0 = Locale.CANADA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      arrayList0.removeAll(set0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection(timeSeries0, timeZone0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.TimeSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.setIntervalWidth(0.0);
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries("ZH@", "ZH@", "ZH@");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat(",8h*");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection(timeSeries0, timeZone0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(604.9969596, 999);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D((Function2D) null, 668.651174774, 0, 999, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent("`1Bjp#)%A");
      defaultIntervalCategoryDataset0.seriesChanged(seriesChangeEvent0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((String) null, ">AcsQx3=26d'D", (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent("`1Bjp#)%A");
      defaultIntervalCategoryDataset0.seriesChanged(seriesChangeEvent0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 1474);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.setIntervalWidth(0.0);
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, "ZH@", "ZH@");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("ZH@");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection(timeSeries0, timeZone0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 999, 0);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset(slidingGanttCategoryDataset0, 999, (-2147114347));
      Stack<TimePeriodValuesCollection> stack0 = new Stack<TimePeriodValuesCollection>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) stack0, true);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      DatasetUtilities.iterateXYRangeBounds(timeSeriesCollection0);
      DatasetUtilities.iterateCategoryRangeBounds(slidingGanttCategoryDataset1, true);
      DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) "ZH@", 1356.0438521634, 52);
      assertNotSame(defaultPieDataset0, pieDataset0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, true);
      double double0 = (-1.0);
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1.0), (-1.0));
      int int0 = 340;
      SpreadsheetDate spreadsheetDate0 = null;
      try {
        spreadsheetDate0 = new SpreadsheetDate((-3807));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SpreadsheetDate: Serial must be in range 2 to 2958465.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.setIntervalWidth(0.0);
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, "ZH@", "ZH@");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("ZH@");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection(timeSeries0, timeZone0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      NormalDistributionFunction2D normalDistributionFunction2D0 = null;
      try {
        normalDistributionFunction2D0 = new NormalDistributionFunction2D(0.0, (-857.4056004401153));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'std' > 0.
         //
         verifyException("org.jfree.data.function.NormalDistributionFunction2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.setIntervalWidth(0.0);
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, "ZH@", "ZH@");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("ZH@");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      arrayList0.add(timeSeriesCollection0);
      boolean boolean0 = true;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-1094), 5);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.TimeSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Short short0 = Short.valueOf((short) (-1));
      arrayList0.add(short0);
      Short short1 = new Short((short) (-411));
      arrayList0.add(short1);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      DatasetUtilities.iterateXYRangeBounds(vectorSeriesCollection0);
      DatasetUtilities.iterateCategoryRangeBounds(defaultBoxAndWhiskerCategoryDataset0, true);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, true);
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) vectorSeriesCollection0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) yIntervalSeriesCollection0);
      Clock clock0 = MockClock.systemDefaultZone();
      Instant instant0 = MockInstant.now(clock0);
      Date.from(instant0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-3377.625);
      doubleArray0[3] = 194.26;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 194.26, 0.0, (-429), 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) yIntervalSeriesCollection0);
      Clock clock0 = MockClock.systemDefaultZone();
      Instant instant0 = MockInstant.now(clock0);
      Date date0 = Date.from(instant0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 0.0, (-3377.625), 194.26, 0.0, (-3377.625));
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) oHLCDataItem0, (KeyedValues) defaultKeyedValues0);
      DatasetUtilities.findRangeBounds((XYDataset) yIntervalSeriesCollection0);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      int int0 = 1886;
      DatasetUtilities.createPieDatasetForRow(categoryDataset0, 1886);
      DatasetUtilities.findRangeBounds(categoryDataset0);
      DatasetUtilities.findRangeBounds(categoryDataset0, false);
      DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      String string0 = "org.jfree.data.xy.XYBarDataset";
      String string1 = "";
      Number[][] numberArray0 = new Number[9][6];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = null;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[8];
      numberArray2[0] = null;
      numberArray2[1] = null;
      numberArray2[2] = null;
      numberArray2[3] = null;
      numberArray2[4] = null;
      numberArray2[5] = null;
      numberArray2[6] = null;
      XYTaskDataset xYTaskDataset0 = null;
      try {
        xYTaskDataset0 = new XYTaskDataset((TaskSeriesCollection) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'tasks' argument.
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      TableXYDataset tableXYDataset0 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal((TableXYDataset) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((-226.0), (-226.0), "9~w\"~6");
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-1578.6602));
      assertEquals(226.0, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(4.0, 4.0, "H6Pli7YD\">]4aDJ`Yf");
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotNull(range0);
      assertEquals(1.0, range0.getLength(), 0.01);
      
      MockDate mockDate0 = new MockDate(10, 10, 10);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 60, 60);
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) slidingGanttCategoryDataset0);
      assertNull(number0);
      
      Vector<YIntervalSeriesCollection> vector0 = new Vector<YIntervalSeriesCollection>();
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) vector0, range1, false);
      assertEquals(4.0, range1.getUpperBound(), 0.01);
      assertEquals(4.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.setIntervalWidth(0.0);
      Millisecond millisecond0 = new Millisecond();
      Calendar calendar0 = MockCalendar.getInstance();
      millisecond0.getLastMillisecond(calendar0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (double) 999);
      String string0 = "G;k`";
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset((Connection) null, "G;k`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // A connection must be supplied.
         //
         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 0.0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0, "G;k`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      String string0 = "`1Bjp#)%A";
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent("`1Bjp#)%A");
      defaultIntervalCategoryDataset0.seriesChanged(seriesChangeEvent0);
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetUtilities.iterateXYRangeBounds(yIntervalSeriesCollection0);
      DatasetUtilities.isEmptyOrNull((XYDataset) yIntervalSeriesCollection0);
      Comparable<DefaultMultiValueCategoryDataset>[] comparableArray0 = (Comparable<DefaultMultiValueCategoryDataset>[]) Array.newInstance(Comparable.class, 4);
      int int0 = 1;
      Date date0 = null;
      int int1 = (-2099);
      int int2 = 4269;
      int int3 = 597;
      int int4 = 1123;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-2099), "i+mK*yks=D#$", 1, 1, 4269, (-2099), (-2099), 1, 597, 1123);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start time -2099
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) yIntervalSeriesCollection0);
      Clock clock0 = MockClock.systemDefaultZone();
      Instant instant0 = MockInstant.now(clock0);
      Date date0 = Date.from(instant0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 0.0, (-3377.625), 194.26, 0.0, (-3377.625));
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) oHLCDataItem0, (KeyedValues) defaultKeyedValues0);
      DatasetUtilities.findRangeBounds((XYDataset) yIntervalSeriesCollection0);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      DatasetUtilities.createPieDatasetForRow(categoryDataset0, 1886);
      DatasetUtilities.findRangeBounds(categoryDataset0);
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(day0, "v4", "");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      Number number0 = DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      String string0 = "";
      Number[][] numberArray0 = new Number[0][1];
      DatasetUtilities.createCategoryDataset("[", "", numberArray0);
      int int0 = (-1406);
      Minute.parseMinute("[");
      int int1 = 0;
      int int2 = 422;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 59, (-1406), 0, 59, 422, 59, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start day of week 1406
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-3876.528129011507), (-1.0), (-429), (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      Number[][] numberArray0 = new Number[5][7];
      Number[] numberArray1 = new Number[1];
      BigInteger bigInteger0 = BigInteger.TEN;
      numberArray1[0] = (Number) bigInteger0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      numberArray2[0] = (Number) bigInteger0;
      numberArray2[1] = (Number) bigInteger0;
      numberArray2[2] = (Number) bigInteger0;
      numberArray2[3] = (Number) bigInteger0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[9];
      numberArray3[0] = (Number) bigInteger0;
      numberArray3[1] = (Number) bigInteger0;
      numberArray3[2] = (Number) bigInteger0;
      Integer integer0 = new Integer(3911);
      numberArray3[3] = (Number) integer0;
      numberArray3[4] = (Number) bigInteger0;
      numberArray3[5] = (Number) bigInteger0;
      numberArray3[6] = (Number) bigInteger0;
      numberArray3[7] = (Number) bigInteger0;
      numberArray3[8] = (Number) bigInteger0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[3];
      numberArray4[0] = (Number) bigInteger0;
      numberArray4[1] = (Number) integer0;
      numberArray4[2] = (Number) bigInteger0;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[4];
      numberArray5[0] = (Number) integer0;
      numberArray5[1] = (Number) bigInteger0;
      numberArray5[2] = (Number) integer0;
      numberArray5[3] = (Number) integer0;
      numberArray0[4] = numberArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      DatasetUtilities.isEmptyOrNull((XYDataset) null);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Comparable<TimeSeriesCollection> comparable0 = null;
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.getRowIndex((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      double[][] doubleArray0 = new double[7][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 3905.111;
      doubleArray2[3] = (-2505.09467);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 1.0;
      doubleArray3[1] = 3905.111;
      doubleArray3[2] = Double.POSITIVE_INFINITY;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 1.0;
      doubleArray3[5] = (-2505.09467);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = (-2505.09467);
      doubleArray4[1] = Double.POSITIVE_INFINITY;
      doubleArray4[2] = (-2505.09467);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = (-2505.09467);
      doubleArray5[1] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = 1727.62;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = 3905.111;
      doubleArray6[3] = 0.0;
      doubleArray6[4] = 1.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = 1727.62;
      doubleArray7[2] = 1.0;
      doubleArray7[3] = (-2505.09467);
      doubleArray7[4] = (-2505.09467);
      doubleArray7[5] = Double.POSITIVE_INFINITY;
      doubleArray7[6] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = doubleArray7;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'columnKeys' argument.", "Null 'columnKeys' argument.", doubleArray0);
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, true);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-1306.4897475511);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 6.283185307179586;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (-1306.4897475511);
      doubleArray2[1] = (-1306.4897475511);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(".rq", "I|%W", doubleArray0);
      DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      Number[][] numberArray0 = new Number[3][3];
      Number[] numberArray1 = new Number[2];
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      // Undeclared exception!
      try { 
        defaultXYDataset0.getY(96, 96);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 96, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Short short0 = Short.valueOf((short) (-1));
      arrayList0.add(short0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      DatasetUtilities.iterateXYRangeBounds(vectorSeriesCollection0);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultBoxAndWhiskerCategoryDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.KOREAN;
      Locale locale1 = locale0.stripExtensions();
      Locale.getISOLanguages();
      locale0.getDisplayLanguage();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale1);
      DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      ZoneOffset.ofTotalSeconds((-814));
      timeTableXYDataset0.getDomainUpperBound(false);
      DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, false);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, 0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) timeTableXYDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0);
      DatasetUtilities.findCumulativeRangeBounds(defaultStatisticalCategoryDataset0);
      String string0 = "";
      Number[][] numberArray0 = new Number[6][2];
      Number[] numberArray1 = new Number[7];
      numberArray1[0] = null;
      numberArray1[1] = null;
      numberArray1[2] = null;
      numberArray1[3] = null;
      numberArray1[4] = null;
      numberArray1[5] = null;
      numberArray1[6] = null;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[7];
      numberArray2[0] = null;
      numberArray2[1] = null;
      numberArray2[2] = null;
      numberArray2[3] = null;
      BigInteger bigInteger0 = BigInteger.ONE;
      numberArray2[4] = (Number) bigInteger0;
      numberArray2[5] = null;
      numberArray2[6] = null;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[4];
      numberArray3[0] = null;
      numberArray3[1] = null;
      numberArray3[2] = null;
      numberArray3[3] = (Number) bigInteger0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[3];
      XYBarDataset xYBarDataset0 = new XYBarDataset(timeTableXYDataset0, Double.NaN);
      // Undeclared exception!
      try { 
        xYBarDataset0.getStartY((-401), (-814));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetGroup datasetGroup0 = new DatasetGroup("z03jut5d27AF");
      categoryTableXYDataset0.setGroup(datasetGroup0);
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetUtilities.findDomainBounds((XYDataset) yIntervalSeriesCollection0, false);
      double double0 = (-1.0);
      NormalDistributionFunction2D normalDistributionFunction2D0 = null;
      try {
        normalDistributionFunction2D0 = new NormalDistributionFunction2D((-1.0), (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'std' > 0.
         //
         verifyException("org.jfree.data.function.NormalDistributionFunction2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      String string0 = "org.jfree.data.general.DatasetUtilities";
      String string1 = "]~@m9#l,1";
      Number[][] numberArray0 = new Number[3][0];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[9];
      Integer integer0 = new Integer(1);
      numberArray2[0] = (Number) integer0;
      short short0 = (short) (-2307);
      Short short1 = new Short((short) (-2307));
      numberArray2[1] = (Number) short1;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 0, 2329);
      int int0 = (-2439);
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getEndValue((Comparable) integer0, (Comparable) integer0, (-2439));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: 1
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      defaultTableXYDataset0.setAutoWidth(true);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultTableXYDataset0);
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(0.0, 2480.850451020445);
      double double0 = (-1828.9);
      double double1 = 115.9857;
      int int0 = 4;
      SerialDate serialDate0 = SerialDate.createInstance(4);
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(serialDate0, true, true);
      // Undeclared exception!
      try { 
        xYIntervalSeries0.getDataItem(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      double double0 = 0.0;
      categoryTableXYDataset0.setIntervalWidth(0.0);
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, "ZH@", "ZH@");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("ZH@");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      arrayList0.add(timeSeriesCollection0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection(timeSeries0, timeZone0);
      arrayList0.add(timeSeriesCollection1);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, arrayList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.TimeSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      String string0 = "";
      String string1 = "Null 'xRange' argument";
      Number[][] numberArray0 = new Number[8][7];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[1];
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      numberArray2[0] = (Number) integer0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[8];
      numberArray3[0] = (Number) integer0;
      numberArray3[1] = (Number) integer0;
      numberArray3[2] = (Number) integer0;
      numberArray3[3] = (Number) integer0;
      numberArray3[4] = (Number) integer0;
      numberArray3[5] = (Number) integer0;
      numberArray3[6] = (Number) integer0;
      numberArray3[7] = (Number) integer0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[9];
      numberArray4[0] = (Number) integer0;
      numberArray4[1] = (Number) integer0;
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      numberArray4[2] = null;
      numberArray4[3] = (Number) integer0;
      numberArray4[4] = (Number) integer0;
      numberArray4[5] = (Number) integer0;
      numberArray4[6] = (Number) integer0;
      numberArray4[7] = (Number) integer0;
      numberArray4[8] = (Number) integer0;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[7];
      numberArray5[0] = (Number) integer0;
      numberArray5[1] = (Number) integer0;
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      // Undeclared exception!
      try { 
        yIntervalSeriesCollection0.getStartX(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
