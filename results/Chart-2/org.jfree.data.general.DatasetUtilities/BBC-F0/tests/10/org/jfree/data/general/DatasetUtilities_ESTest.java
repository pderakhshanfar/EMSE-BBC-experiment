/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 14:29:49 GMT 2020
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.beans.PropertyChangeListener;
import java.lang.reflect.Array;
import java.math.BigInteger;
import java.sql.Connection;
import java.sql.Statement;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.EventListener;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeSet;
import java.util.Vector;
import javax.swing.JComponent;
import javax.swing.JLayeredPane;
import javax.swing.JTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.DefaultKeyedValues;
import org.jfree.data.KeyToGroupMap;
import org.jfree.data.KeyedValues;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.event.SeriesChangeEvent;
import org.jfree.data.function.Function2D;
import org.jfree.data.function.LineFunction2D;
import org.jfree.data.function.NormalDistributionFunction2D;
import org.jfree.data.function.PolynomialFunction2D;
import org.jfree.data.function.PowerFunction2D;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeries;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DatasetUtilities;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.SeriesChangeInfo;
import org.jfree.data.general.SeriesChangeType;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.pie.DefaultPieDataset;
import org.jfree.data.pie.PieDataset;
import org.jfree.data.statistics.BoxAndWhiskerItem;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.IntervalXYDelegate;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYDatasetTableModel;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DatasetUtilities_ESTest extends DatasetUtilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Hour hour0 = new Hour();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((double) 0, (-1.719081959E12), "R3g-y$,");
      Byte byte0 = new Byte((byte) (-46));
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      arrayList0.add((Byte) null);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, false);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, range0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Hour hour0 = new Hour();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      MatrixSeries matrixSeries0 = new MatrixSeries("yG+s'?RfV?", 23, 23);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Comparable<XYSeriesCollection>[] comparableArray0 = (Comparable<XYSeriesCollection>[]) Array.newInstance(Comparable.class, 1);
      comparableArray0[0] = (Comparable<XYSeriesCollection>) hour0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(comparableArray0, comparableArray0, (Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Float float0 = new Float((double) (-21.070484F));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.add(float0);
      XYSeries xYSeries0 = new XYSeries(float0, true);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      defaultCategoryDataset0.addValue((double) (-21.070484F), (Comparable) float0, (Comparable) float0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, 0);
      DatasetUtilities.isEmptyOrNull(pieDataset0);
      Random.setNextRandom(3831);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Hour hour0 = new Hour();
      String string0 = "";
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((double) 0, (double) 0, "");
      Range range0 = new Range(0, 23);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      DefaultPieDataset defaultPieDataset0 = null;
      try {
        defaultPieDataset0 = new DefaultPieDataset((KeyedValues) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'data' argument.
         //
         verifyException("org.jfree.data.pie.DefaultPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[][] doubleArray0 = new double[17][0];
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(Double.NEGATIVE_INFINITY, Double.NaN, "Requires 'std' > 0.");
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, Double.NEGATIVE_INFINITY);
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NaN, 4959.154468163835);
      Comparable<DefaultMultiValueCategoryDataset>[] comparableArray0 = (Comparable<DefaultMultiValueCategoryDataset>[]) Array.newInstance(Comparable.class, 2);
      comparableArray0[0] = (Comparable<DefaultMultiValueCategoryDataset>) simpleHistogramBin0;
      comparableArray0[1] = (Comparable<DefaultMultiValueCategoryDataset>) simpleHistogramBin0;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      Integer integer1 = JLayeredPane.PALETTE_LAYER;
      stack0.add(integer1);
      stack0.add((Integer) null);
      Number[][] numberArray0 = new Number[3][1];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = (Number) integer0;
      numberArray1[1] = (Number) integer0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[0];
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[8];
      numberArray3[0] = (Number) null;
      numberArray3[1] = (Number) integer0;
      numberArray3[2] = (Number) integer0;
      numberArray3[3] = (Number) integer0;
      numberArray3[4] = (Number) integer1;
      numberArray3[5] = (Number) null;
      numberArray3[6] = (Number) integer0;
      numberArray3[7] = (Number) integer1;
      numberArray0[2] = numberArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      MockDate mockDate0 = new MockDate();
      Short short0 = new Short((short) (-7));
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) null, short0, (Number) null, (Number) null, short0, short0, (Number) null, short0, (List) null);
      defaultBoxAndWhiskerXYDataset0.add(mockDate0, boxAndWhiskerItem0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Float float0 = new Float((double) (-21.070484F));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.add(float0);
      XYSeries xYSeries0 = new XYSeries(float0, true);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      defaultCategoryDataset0.addValue((double) (-21.070484F), (Comparable) float0, (Comparable) float0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Range range0 = new Range((-21.070484F), (-21.070484F));
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) yIntervalSeriesCollection0, (List) linkedList0, range1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.YIntervalSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Hour hour0 = new Hour();
      MockDate mockDate0 = new MockDate(23, 965, 0, 965, 989, 966);
      SerialDate.createInstance((Date) mockDate0);
      MockDate mockDate1 = new MockDate(1, 0, 0, 980, 2958465);
      Date[] dateArray0 = new Date[9];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate1;
      dateArray0[3] = (Date) mockDate1;
      dateArray0[4] = (Date) mockDate0;
      dateArray0[5] = (Date) mockDate1;
      dateArray0[6] = (Date) mockDate0;
      dateArray0[7] = (Date) mockDate1;
      dateArray0[8] = (Date) mockDate0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 7;
      mockDate0.getTime();
      doubleArray0[5] = (double) 4;
      doubleArray0[6] = (double) 6;
      doubleArray0[7] = (double) 0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate1, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockDate mockDate0 = new MockDate(14, 14, 14, 2885, 14, 1);
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      Date[] dateArray0 = new Date[6];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate((-1), 2885, (-431), 4, 1900);
      dateArray0[5] = (Date) mockDate1;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 14;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (double) 7;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(serialDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, true);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      double[][] doubleArray0 = new double[4][8];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 454.48026341554;
      doubleArray1[1] = 454.48026341554;
      doubleArray1[2] = 454.48026341554;
      doubleArray1[3] = 454.48026341554;
      doubleArray1[4] = (-2824.8);
      doubleArray1[5] = (-1910.75771);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 454.48026341554;
      doubleArray2[1] = (-2824.8);
      doubleArray2[2] = 454.48026341554;
      doubleArray2[3] = (-1910.75771);
      doubleArray2[4] = (-2824.8);
      doubleArray2[5] = 653.25489644362;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (-2824.8);
      doubleArray3[1] = (-1910.75771);
      doubleArray3[2] = 454.48026341554;
      doubleArray3[3] = (-2824.8);
      doubleArray3[4] = 653.25489644362;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = 454.48026341554;
      doubleArray4[1] = 454.48026341554;
      doubleArray4[2] = (-2824.8);
      doubleArray4[3] = 454.48026341554;
      doubleArray4[4] = (-1910.75771);
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = 2;
      MatrixSeries matrixSeries0 = new MatrixSeries("OK]jxB7M(npqp^Jm", 2, 2);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      Comparable<Short>[] comparableArray0 = (Comparable<Short>[]) Array.newInstance(Comparable.class, 1);
      int int1 = 305;
      int int2 = 491;
      MockDate mockDate0 = new MockDate(2, 305, 305, 305, 305, 491);
      int int3 = 29;
      int int4 = 334;
      int int5 = (-1674);
      int int6 = 514;
      int int7 = 819;
      int int8 = 487;
      int int9 = (-187);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(305, "OK]jxB7M(npqp^Jm", 29, 334, (-1674), 29, 514, 819, (-1674), 487, (-187));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 29
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      Double double0 = new Double(339.388988729);
      Number[][] numberArray0 = new Number[2][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("&", "&", numberArray0);
      defaultBoxAndWhiskerXYDataset0.validateObject();
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      Stack<DefaultBoxAndWhiskerCategoryDataset> stack0 = new Stack<DefaultBoxAndWhiskerCategoryDataset>();
      DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, range0, true);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 0);
      DatasetUtilities.isEmptyOrNull(pieDataset0);
      Random.setNextRandom(0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Float float0 = new Float((double) (-21.070484F));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.add(float0);
      XYSeries xYSeries0 = new XYSeries(float0, true);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      defaultCategoryDataset0.addValue((double) (-21.070484F), (Comparable) float0, (Comparable) float0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.getRowCount();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) linkedList0, false);
      Random.setNextRandom(0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      Double double0 = new Double(339.388988729);
      Number[][] numberArray0 = new Number[2][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("&", "&", numberArray0);
      defaultBoxAndWhiskerXYDataset0.validateObject();
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      Stack<DefaultBoxAndWhiskerCategoryDataset> stack0 = new Stack<DefaultBoxAndWhiskerCategoryDataset>();
      DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, range0, true);
      Range range1 = new Range(339.388988729, 339.388988729);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      stack0.add(defaultBoxAndWhiskerCategoryDataset0);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) yIntervalSeriesCollection0, (List) stack0, range1, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockDate mockDate0 = new MockDate(14, 14, 14, 2885, 14, 1);
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      Date[] dateArray0 = new Date[6];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate((-1), 2885, (-431), 4, (-1218));
      dateArray0[5] = (Date) mockDate1;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 14;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (double) 7;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(serialDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[][] doubleArray0 = new double[7][1];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-1232.0);
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = 1776.0;
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = (-1912.58);
      doubleArray1[5] = 400.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (-1912.58);
      doubleArray2[1] = Double.NaN;
      doubleArray2[2] = 589.0;
      doubleArray2[3] = (-1146.275);
      doubleArray2[4] = 1776.0;
      doubleArray2[5] = (-1912.58);
      doubleArray2[6] = (-1232.0);
      doubleArray2[7] = 400.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 589.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = Double.NEGATIVE_INFINITY;
      doubleArray4[1] = 400.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = Double.NEGATIVE_INFINITY;
      doubleArray6[1] = 400.0;
      doubleArray6[2] = 2547.524798398675;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      doubleArray7[0] = (-1232.0);
      doubleArray7[1] = 400.0;
      doubleArray7[2] = Double.NaN;
      doubleArray7[3] = Double.NaN;
      doubleArray7[4] = (-1232.0);
      doubleArray0[6] = doubleArray7;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = "&";
      Number[][] numberArray0 = new Number[2][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("&", "&", numberArray0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      int int0 = 3943;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 3943);
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3943, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Number[][] numberArray0 = new Number[2][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("&", "&", numberArray0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      DatasetUtilities.isEmptyOrNull(categoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      stack0.add(integer0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset1.getRangeBounds(true);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(454.48026341554, Double.NEGATIVE_INFINITY, "Requires 'std' > 0.");
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 2093.0);
      Comparable<DefaultOHLCDataset>[] comparableArray0 = (Comparable<DefaultOHLCDataset>[]) Array.newInstance(Comparable.class, 2);
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NEGATIVE_INFINITY, 2093.0);
      comparableArray0[0] = (Comparable<DefaultOHLCDataset>) simpleHistogramBin0;
      Quarter quarter0 = new Quarter();
      comparableArray0[1] = (Comparable<DefaultOHLCDataset>) quarter0;
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = (double) 4;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = 2093.0;
      doubleArray2[3] = 454.48026341554;
      doubleArray2[4] = 454.48026341554;
      doubleArray0[1] = doubleArray2;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of column keys does not match the number of columns in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Hour hour0 = new Hour();
      Number[][] numberArray0 = new Number[3][9];
      Number[] numberArray1 = new Number[8];
      numberArray1[0] = (Number) 23;
      numberArray1[1] = (Number) 23;
      numberArray1[2] = (Number) 23;
      numberArray1[3] = (Number) 0;
      numberArray1[4] = (Number) 0;
      numberArray1[5] = (Number) 23;
      numberArray1[6] = (Number) 0;
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      numberArray1[7] = (Number) integer0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      numberArray2[0] = (Number) 0;
      numberArray2[1] = (Number) integer0;
      numberArray2[2] = (Number) integer0;
      BigInteger bigInteger0 = BigInteger.ONE;
      numberArray2[3] = (Number) bigInteger0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[4];
      numberArray3[1] = (Number) bigInteger0;
      numberArray3[2] = (Number) 23;
      numberArray3[3] = (Number) 23;
      numberArray0[2] = numberArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Stack<YIntervalSeriesCollection> stack0 = new Stack<YIntervalSeriesCollection>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Hour hour0 = new Hour();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, "Requires 'std' > 0.");
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, Double.POSITIVE_INFINITY);
      Number[][] numberArray0 = new Number[5][2];
      Number[] numberArray1 = new Number[7];
      numberArray1[0] = (Number) 23;
      Short short0 = new Short((short) (-3118));
      numberArray1[1] = (Number) short0;
      numberArray1[2] = (Number) 0;
      numberArray1[3] = (Number) 0;
      numberArray1[4] = (Number) 23;
      numberArray1[5] = (Number) 0;
      numberArray1[6] = (Number) 0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      numberArray2[0] = (Number) 0;
      BigInteger bigInteger0 = BigInteger.ZERO;
      numberArray2[1] = (Number) bigInteger0;
      numberArray2[2] = (Number) 23;
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      numberArray2[3] = (Number) integer0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[1];
      numberArray3[0] = (Number) bigInteger0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[4];
      numberArray4[0] = (Number) 0;
      numberArray4[1] = (Number) 0;
      numberArray4[2] = (Number) short0;
      numberArray4[3] = (Number) bigInteger0;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[9];
      numberArray5[0] = (Number) 23;
      numberArray5[1] = (Number) bigInteger0;
      numberArray5[2] = (Number) short0;
      numberArray5[3] = (Number) short0;
      numberArray5[4] = (Number) bigInteger0;
      numberArray5[5] = (Number) bigInteger0;
      numberArray5[6] = (Number) bigInteger0;
      numberArray5[7] = (Number) short0;
      Double double0 = new Double(779.41);
      numberArray5[8] = (Number) double0;
      numberArray0[4] = numberArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Requires 'std' > 0.", "Requires 'std' > 0.", numberArray0);
      DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      double double0 = 339.388988729;
      Double double1 = new Double(339.388988729);
      Number[][] numberArray0 = new Number[2][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("U", "U", numberArray0);
      defaultBoxAndWhiskerXYDataset0.validateObject();
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      boolean boolean0 = true;
      Stack<DefaultBoxAndWhiskerCategoryDataset> stack0 = new Stack<DefaultBoxAndWhiskerCategoryDataset>();
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, (List) stack0, range0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Hour hour0 = new Hour();
      Range range0 = new Range(23, 23);
      range0.toString();
      Range.scale(range0, 23);
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(23, 23);
      DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, 0, 23, 670, hour0);
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-4171.3336);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-4171.3336);
      doubleArray2[1] = 3562.1;
      doubleArray2[2] = (double) 23;
      doubleArray2[3] = (-4171.3336);
      doubleArray2[4] = (double) 23;
      doubleArray2[5] = (-4171.3336);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 3562.1;
      doubleArray3[1] = (double) 670;
      doubleArray3[2] = (double) 670;
      doubleArray3[3] = 3562.1;
      doubleArray3[4] = (-4171.3336);
      doubleArray3[5] = 3562.1;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = (double) 23;
      doubleArray4[1] = 3562.1;
      doubleArray4[2] = Double.POSITIVE_INFINITY;
      doubleArray4[3] = (double) 0;
      doubleArray4[4] = (-771.908);
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      double double0 = 339.388988729;
      Double double1 = new Double(339.388988729);
      String string0 = "&";
      Number[][] numberArray0 = new Number[2][2];
      Number[] numberArray1 = new Number[2];
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("&", "&", numberArray0);
      DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Float float0 = new Float((double) (-14.818914F));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.add(float0);
      XYSeries xYSeries0 = new XYSeries(float0, true);
      Float float1 = new Float((-2999.44255924));
      linkedList0.add(float1);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      defaultCategoryDataset0.addValue((double) (-14.818914F), (Comparable) float0, (Comparable) float0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) linkedList0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[][] doubleArray0 = new double[5][0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 661.875817;
      doubleArray1[1] = (-1088.87);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 661.875817;
      doubleArray2[1] = 661.875817;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[1] = 661.875817;
      doubleArray3[2] = 661.875817;
      doubleArray3[3] = (-1088.87);
      doubleArray3[4] = (-1088.87);
      doubleArray3[5] = 661.875817;
      doubleArray3[6] = 661.875817;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = 21.3097723636188;
      doubleArray5[1] = (-1088.87);
      doubleArray5[2] = (-1088.87);
      doubleArray5[3] = 21.3097723636188;
      doubleArray5[4] = 21.3097723636188;
      doubleArray5[5] = 21.3097723636188;
      doubleArray5[6] = 661.875817;
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(0.5, 0.5, "f1BOn,CL%lLki-BkM'");
      Byte byte0 = new Byte((byte)0);
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      Byte.valueOf((byte) (-88));
      Byte byte1 = new Byte((byte) (-88));
      arrayList0.add(byte1);
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, true);
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      DatasetUtilities.findCumulativeRangeBounds(taskSeriesCollection0);
      ArrayList<Long> arrayList1 = new ArrayList<Long>();
      DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, arrayList0, true);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = 16;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 16, 16);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      slidingCategoryDataset0.setGroup(datasetGroup0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) slidingCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      Double double0 = new Double(339.388988729);
      Number[][] numberArray0 = new Number[2][2];
      Number[] numberArray1 = new Number[2];
      numberArray0[0] = numberArray1;
      defaultBoxAndWhiskerXYDataset0.validateObject();
      Stack<DefaultBoxAndWhiskerCategoryDataset> stack0 = new Stack<DefaultBoxAndWhiskerCategoryDataset>();
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(339.388988729, 339.388988729);
      DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, (-3806.35695583), (-300.6), 87, "&");
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 0.0F;
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = (double) 0.0F;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[1] = (double) 0.0F;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = (double) 0.0F;
      doubleArray3[1] = (double) 0.0F;
      doubleArray3[2] = (double) 0.0F;
      doubleArray3[3] = Double.NEGATIVE_INFINITY;
      doubleArray3[4] = (double) 0.0F;
      doubleArray3[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      KeyToGroupMap keyToGroupMap1 = new KeyToGroupMap(0.0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((-1.0), (-1313.924), ") <= upper (");
      double double0 = Double.POSITIVE_INFINITY;
      Range range0 = new Range((-613.698482), Double.POSITIVE_INFINITY);
      Range range1 = new Range((-1313.924), (-1.0));
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(") <= upper (");
      DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, true);
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, true);
      PolynomialFunction2D polynomialFunction2D0 = null;
      try {
        polynomialFunction2D0 = new PolynomialFunction2D((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'coefficients' argument
         //
         verifyException("org.jfree.data.function.PolynomialFunction2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Hour hour0 = new Hour();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      Byte byte0 = new Byte((byte)0);
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      arrayList0.add(byte0);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      boolean boolean0 = true;
      arrayList0.iterator();
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) histogramDataset0, (List) arrayList0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      stack0.add(integer0);
      Comparable<Short>[] comparableArray0 = (Comparable<Short>[]) Array.newInstance(Comparable.class, 3);
      Year year0 = new Year();
      comparableArray0[0] = (Comparable<Short>) year0;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      LineFunction2D lineFunction2D0 = new LineFunction2D((-817.54475), 10);
      DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-548.06823748), 10, 10, integer0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Number[][] numberArray0 = new Number[2][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("&", "&", numberArray0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      int int0 = 2146417899;
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, 2146417899);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2146417899, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1317.4651, 1317.4651);
      DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, (-228.5), 1.0, 10, "Cannot remove null series.");
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      MatrixSeries matrixSeries0 = new MatrixSeries("Cannot remove null series.", 10, 10);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      SeriesChangeType seriesChangeType0 = SeriesChangeType.UPDATE;
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo(seriesChangeType0, 10, 10);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(defaultIntervalXYDataset0, seriesChangeInfo0);
      matrixSeriesCollection0.seriesChanged(seriesChangeEvent0);
      DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.iterateXYRangeBounds(defaultBoxAndWhiskerXYDataset0);
      DatasetUtilities.findMinimumDomainValue(defaultBoxAndWhiskerXYDataset0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "IxRlx)w8qd3N_Z";
      stringArray0[2] = "'(ao&'OM3}v$POw";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      Stack<TimeSeriesCollection> stack0 = new Stack<TimeSeriesCollection>();
      stack0.iterator();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, false);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      String string0 = "Cannot remove null series.";
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(2168.35814095388, 2386.0937940785);
      DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-228.5), 0.0, 10, "Cannot remove null series.");
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      MatrixSeries matrixSeries0 = new MatrixSeries("7}I", 1009, 20);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      Hour hour0 = new Hour();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(hour0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) simpleHistogramDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((double) 0, 1207.243576699, "5Qq");
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.getRowCount();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, false);
      DatasetUtilities.isEmptyOrNull((XYDataset) categoryTableXYDataset0);
      DatasetUtilities.iterateCategoryRangeBounds(taskSeriesCollection0, false);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      defaultTableXYDataset0.clone();
      DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, false);
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>();
      DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, (List) arrayList0, false);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Hour hour0 = new Hour();
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, (Comparable) hour0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte) (-104);
      byteArray0[6] = (byte)49;
      byteArray0[7] = (byte) (-62);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      defaultPieDataset0.setValue((Comparable) hour0, (Number) bigInteger0);
      DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[][] doubleArray0 = new double[13][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(99.226469, (-151.9375554729781), "");
      Byte byte0 = new Byte((byte) (-38));
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-1.0));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Vector<DefaultBoxAndWhiskerXYDataset> vector0 = new Vector<DefaultBoxAndWhiskerXYDataset>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-0.8460996653631193), 2532.176036344, 2532.176036344, 152.479207, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 2532.176036344, (List) vector0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      MockDate mockDate0 = new MockDate();
      defaultBoxAndWhiskerXYDataset0.add(mockDate0, boxAndWhiskerItem0);
      DatasetUtilities.iterateXYRangeBounds(defaultBoxAndWhiskerXYDataset0);
      DatasetUtilities.findMinimumDomainValue(defaultBoxAndWhiskerXYDataset0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) vector0, false);
      DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      categoryTableXYDataset0.add(454.48026341554, 454.48026341554, "{fpv5(");
      Byte byte0 = new Byte((byte)0);
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (double) (byte)0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Hour hour0 = new Hour();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((double) 0, (double) 0, "");
      Range range0 = new Range(0, 23);
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, false);
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, true);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      double double0 = (-42.73526698600089);
      defaultBoxAndWhiskerXYDataset0.setOutlierCoefficient((-42.73526698600089));
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      boolean boolean0 = false;
      LinkedList<XYSeriesCollection> linkedList0 = new LinkedList<XYSeriesCollection>();
      DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) linkedList0, false);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
      boolean boolean1 = true;
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) linkedList0, range0, true);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
      Comparable<XYSeriesCollection>[] comparableArray0 = (Comparable<XYSeriesCollection>[]) Array.newInstance(Comparable.class, 5);
      int int0 = 396;
      Quarter quarter0 = null;
      try {
        quarter0 = new Quarter(396, (-2138167016));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Quarter outside valid range.
         //
         verifyException("org.jfree.data.time.Quarter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Hour hour0 = new Hour();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((double) 0, (double) 0, "");
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 23;
      doubleArray1[1] = (double) 23;
      doubleArray1[2] = (double) 23;
      doubleArray1[3] = (double) 23;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 23;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 23;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = (double) 23;
      doubleArray3[4] = (double) 23;
      doubleArray3[5] = (double) 23;
      doubleArray3[6] = (double) 23;
      doubleArray3[7] = (double) 0;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[][] doubleArray0 = new double[13][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultStatisticalCategoryDataset0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1007.330869282;
      doubleArray1[1] = 1612.9891186265404;
      doubleArray1[2] = (-1146.9040533951);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 46.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-1213.3149874612134), (-1.0), 422, (-1146.9040533951));
      DatasetUtilities.iterateDomainBounds(xYDataset0, true);
      DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      ArrayList<DefaultBoxAndWhiskerCategoryDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerCategoryDataset>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      arrayList0.add(defaultBoxAndWhiskerCategoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(xYDataset0, arrayList0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Float float0 = new Float((double) 0.0F);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      defaultCategoryDataset0.addValue((double) 0.0F, (Comparable) float0, (Comparable) float0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.getRowCount();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, 0);
      DatasetUtilities.isEmptyOrNull(pieDataset0);
      Random.setNextRandom(0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, (double) 0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      categoryTableXYDataset0.add(454.48026341554, 454.48026341554, "{fpv5(");
      Byte byte0 = new Byte((byte)0);
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      Byte byte1 = Byte.valueOf((byte)0);
      arrayList0.add(byte1);
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, true);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findCumulativeRangeBounds(taskSeriesCollection0);
      ArrayList<Long> arrayList1 = new ArrayList<Long>();
      DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, arrayList0, false);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Float float0 = new Float((double) 0.0F);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.add(float0);
      XYSeries xYSeries0 = new XYSeries(float0, true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      defaultCategoryDataset0.addValue((double) 0.0F, (Comparable) float0, (Comparable) float0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.getRowCount();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, false);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, 0);
      DatasetUtilities.isEmptyOrNull(pieDataset0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) linkedList0, false);
      Random.setNextRandom(0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float float1 = new Float((double) 0.0F);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.add(float1);
      MockDate mockDate0 = new MockDate((-1504L));
      TimeZone timeZone0 = TimeZone.getDefault();
      Hour hour0 = new Hour(mockDate0, timeZone0);
      Day day0 = new Day();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(23, (-1), day0);
      mockDate0.toInstant();
      DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, (List) linkedList0, true);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultStatisticalCategoryDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) dynamicTimeSeriesCollection0, true);
      DatasetUtilities.findCumulativeRangeBounds(defaultStatisticalCategoryDataset0);
      DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, linkedList0, true);
      DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float float1 = new Float((double) 0.0F);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.add(float1);
      MockDate mockDate0 = new MockDate((-1504L));
      TimeZone timeZone0 = TimeZone.getDefault();
      Hour hour0 = new Hour(mockDate0, timeZone0);
      Day day0 = new Day(mockDate0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(23, (-1), day0);
      mockDate0.toInstant();
      DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, (List) linkedList0, true);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultStatisticalCategoryDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) dynamicTimeSeriesCollection0, true);
      DatasetUtilities.findCumulativeRangeBounds(defaultStatisticalCategoryDataset0);
      DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, linkedList0, true);
      DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0, true);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) mockDate0, (-797.8), (-2056));
      DatasetUtilities.iterateRangeBounds((XYDataset) dynamicTimeSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      Stack<Integer> stack0 = new Stack<Integer>();
      stack0.add(integer0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      categoryTableXYDataset0.getDomainBounds(true);
      defaultCategoryDataset0.addValue(298.621030171615, (Comparable) integer0, (Comparable) integer0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.getRowCount();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      DatasetUtilities.iterateDomainBounds((XYDataset) xIntervalSeriesCollection0, true);
      DatasetUtilities.findCumulativeRangeBounds(defaultCategoryDataset0);
      DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack0, false);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      categoryTableXYDataset0.add(454.48026341554, 454.48026341554, "{fpv5(");
      Byte byte0 = new Byte((byte)0);
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      Byte.valueOf((byte)0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultStatisticalCategoryDataset0);
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      Range.expandToInclude(range0, 454.48026341554);
      TimeSeries timeSeries0 = new TimeSeries(integer0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      DatasetUtilities.iterateToFindDomainBounds(timeSeriesCollection0, arrayList0, true);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1317.4651, 1317.4651);
      DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, (-228.5), 1.0, 10, "Cannot remove null series.");
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      MatrixSeries matrixSeries0 = new MatrixSeries("Cannot remove null series.", 10, 10);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.iterateXYRangeBounds(timeTableXYDataset0);
      DatasetUtilities.findMinimumDomainValue(timeTableXYDataset0);
      DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = (-228.5);
      doubleArray1[6] = (double) 10;
      doubleArray1[7] = (double) 10;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 1.0;
      doubleArray3[1] = 1.0;
      doubleArray3[2] = 6.283185307179586;
      doubleArray3[3] = (-228.5);
      doubleArray3[4] = 1317.4651;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Hour hour0 = new Hour();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      categoryTableXYDataset0.add((double) 0, 1.5, ") <= upper (");
      Range range0 = new Range(23, 5808.235532313455);
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, false);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(hour0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, true);
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, true);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[][] doubleArray0 = new double[13][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      Stack<Integer> stack0 = new Stack<Integer>();
      stack0.add(integer0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      defaultCategoryDataset0.addValue(298.621030171615, (Comparable) integer0, (Comparable) integer0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.getRowCount();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      DatasetUtilities.iterateDomainBounds((XYDataset) xIntervalSeriesCollection0, true);
      DatasetUtilities.findCumulativeRangeBounds(defaultCategoryDataset0);
      DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack0, false);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      Hour hour0 = new Hour();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(hour0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) simpleHistogramDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Byte.valueOf((byte)4);
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      Byte byte0 = new Byte((byte)4);
      arrayList0.add(byte0);
      DatasetUtilities.findDomainBounds((XYDataset) simpleHistogramDataset0, (List) arrayList0, false);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) null, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, (-18), (-18));
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Float float0 = new Float((double) 0.0F);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.add(float0);
      XYSeries xYSeries0 = new XYSeries(float0, true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      defaultCategoryDataset0.addValue((double) 0.0F, (Comparable) float0, (Comparable) float0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.getRowCount();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, false);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, false);
      DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      DatasetUtilities.iterateToFindDomainBounds(xYSeriesCollection0, linkedList0, false);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Hour hour0 = new Hour();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((double) 0, (double) 0, "");
      Range range0 = new Range(0, 23);
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, true);
      double[][] doubleArray0 = new double[7][4];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 23;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (-1706.3352);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = (-1706.3352);
      doubleArray3[3] = (-3243.7);
      doubleArray3[4] = (double) 0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = (double) (byte)92;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = (double) 23;
      doubleArray5[1] = (-1706.3352);
      doubleArray5[2] = (-3243.7);
      doubleArray5[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[0];
      doubleArray0[6] = doubleArray7;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Float float0 = new Float((double) 0.0F);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.add(float0);
      XYSeries xYSeries0 = new XYSeries(float0, true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      defaultCategoryDataset0.addValue((double) 0.0F, (Comparable) float0, (Comparable) float0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.getRowCount();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, false);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      DatasetUtilities.isEmptyOrNull((XYDataset) histogramDataset0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, 0);
      DatasetUtilities.isEmptyOrNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.getRowCount();
      String[] stringArray0 = new String[0];
      Object[][][] objectArray0 = new Object[0][6][1];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultWindDataset0, false);
      DatasetUtilities.isEmptyOrNull((XYDataset) null);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond((-1661L));
      Date date0 = Date.from(instant0);
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Millisecond millisecond0 = new Millisecond(date0, timeZone0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) date0);
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) instant0, Double.NEGATIVE_INFINITY, 0);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) millisecond0, (KeyedValues) pieDataset1);
      timeZone0.setID("aVL!`avb0q Sj");
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(date0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, false);
      Random.setNextRandom(2812);
      DatasetUtilities.createConsolidatedPieDataset(pieDataset1, (Comparable) zoneOffset0, 1793.1007, 0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultTableXYDataset0);
      DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultStatisticalCategoryDataset0);
      DatasetUtilities.findRangeBounds(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(454.48026341554, (-42.23526698600089), "org.jfree.data.time.RegularTimePeriod");
      categoryTableXYDataset0.add((double) (byte)4, 454.48026341554, "org.jfree.data.time.RegularTimePeriod");
      Byte byte0 = new Byte((byte)4);
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      arrayList0.add(byte0);
      Vector<XYIntervalSeriesCollection> vector0 = new Vector<XYIntervalSeriesCollection>();
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) vector0, true);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      Vector<IntervalXYDelegate> vector1 = new Vector<IntervalXYDelegate>();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) vector1, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1317.4651, 1317.4651);
      DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, (-228.5), 1.0, 10, "Cannot remove null series.");
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      MatrixSeries matrixSeries0 = new MatrixSeries("Cannot remove null series.", 10, 10);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) jDBCCategoryDataset0, (Comparable) "Cannot remove null series.");
      DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, false);
      DatasetUtilities.isEmptyOrNull((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      Hour hour0 = new Hour();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-114), 23, 23, 0, 23, 0);
      hour0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((double) 0, (-42.23526698600089), "");
      Byte byte0 = new Byte((byte)4);
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1324.786678101805, 1324.786678101805);
      XYSeries xYSeries0 = new XYSeries("Cannot remove null series.", true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      defaultCategoryDataset0.addValue(1324.786678101805, (Comparable) "Cannot remove null series.", (Comparable) "Cannot remove null series.");
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.getRowCount();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, 0);
      DatasetUtilities.isEmptyOrNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      Hour hour0 = new Hour();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((double) 0, (-42.23526698600089), "");
      Byte byte0 = new Byte((byte)4);
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      arrayList0.add((Byte) null);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, true);
      DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      Range.expandToInclude(range0, (byte)4);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findMaximumDomainValue(defaultBoxAndWhiskerXYDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, true);
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultBoxAndWhiskerXYDataset0);
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      arrayList0.remove((Object) categoryTableXYDataset0);
      arrayList0.add((XYBarDataset) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, arrayList0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.AbstractSeriesDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      DatasetUtilities.findMinimumDomainValue(defaultTableXYDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0, true);
      double[][] doubleArray0 = new double[9][4];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-484.8228);
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-228.46927454074418);
      doubleArray1[3] = (-1949.169920418);
      doubleArray1[4] = (-4416.3);
      doubleArray1[5] = 2564.4356675666;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-4416.3);
      doubleArray2[1] = (-228.46927454074418);
      doubleArray2[2] = 2564.4356675666;
      doubleArray2[3] = Double.POSITIVE_INFINITY;
      doubleArray2[4] = (-42.2353);
      doubleArray2[5] = (-484.8228);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = (-228.46927454074418);
      doubleArray3[1] = 2564.4356675666;
      doubleArray3[2] = (-1.0);
      doubleArray3[3] = (-4416.3);
      doubleArray3[4] = (-484.8228);
      doubleArray3[5] = (-42.2353);
      doubleArray3[6] = (-484.8228);
      doubleArray3[7] = 357.626;
      doubleArray3[8] = (-1.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = (-1949.169920418);
      doubleArray4[1] = (-42.2353);
      doubleArray4[2] = 357.626;
      doubleArray4[3] = (-42.2353);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = (-4416.3);
      doubleArray5[1] = (-484.8228);
      doubleArray5[2] = (-228.46927454074418);
      doubleArray5[3] = (-42.2353);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = (-42.2353);
      doubleArray6[1] = 2564.4356675666;
      doubleArray6[2] = Double.POSITIVE_INFINITY;
      doubleArray6[3] = (-4416.3);
      doubleArray6[4] = 357.626;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      doubleArray7[0] = (-4416.3);
      doubleArray7[1] = 357.626;
      doubleArray7[2] = 2564.4356675666;
      doubleArray7[3] = Double.POSITIVE_INFINITY;
      doubleArray7[4] = Double.POSITIVE_INFINITY;
      doubleArray7[5] = (-228.46927454074418);
      doubleArray7[6] = 2564.4356675666;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[4];
      doubleArray8[0] = (-42.2353);
      doubleArray8[1] = 2564.4356675666;
      doubleArray8[2] = (-4416.3);
      doubleArray8[3] = (-4416.3);
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[3];
      doubleArray9[0] = (-484.8228);
      doubleArray9[1] = (-228.46927454074418);
      doubleArray9[2] = 646.414;
      doubleArray0[8] = doubleArray9;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.statistics.DefaultMultiValueCategoryDataset", "org.jfree.data.statistics.DefaultMultiValueCategoryDataset", doubleArray0);
      DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Hour hour0 = new Hour();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      hour0.getMiddleMillisecond();
      categoryTableXYDataset0.add((-42.23526698600089), (double) 0, "|l%_/XZlp!}~ iK32");
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      categoryTableXYDataset0.indexOf(hour0);
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, false);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[][] doubleArray0 = new double[13][0];
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      stack0.add(integer1);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "9Qi#.mKe(y}tuf/(", doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) stack0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, 894.53830012);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-656.1824031);
      doubleArray1[1] = 2193.0;
      doubleArray1[2] = 1789.2446355;
      doubleArray1[3] = 2212.5371974004;
      doubleArray1[4] = 457.06175904;
      doubleArray1[5] = 370.4972803396196;
      doubleArray1[6] = (-171.1417814706985);
      doubleArray1[7] = (-2180.5866);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      defaultIntervalCategoryDataset0.getColumnKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1317.4651, 1317.4651);
      XYSeries xYSeries0 = new XYSeries("Cannot remove null series.", true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      xYSeries0.getItems();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.getRowCount();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset1 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset1);
      DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal((PieDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[][] doubleArray0 = new double[13][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      defaultIntervalCategoryDataset0.getColumnKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Hour hour0 = new Hour();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((double) 0, (double) 0, "");
      Byte byte0 = new Byte((byte)0);
      Range range0 = new Range(0, 23);
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (byte)0);
      Range.expandToInclude(range1, (byte)0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      Hour hour0 = new Hour();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(2929.282185, 2929.282185, "");
      DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      CategoryTableXYDataset categoryTableXYDataset2 = new CategoryTableXYDataset();
      DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) list0, false);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float float1 = new Float((double) 0.0F);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.add(float1);
      MockDate mockDate0 = new MockDate((-1504L));
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(float0);
      simpleHistogramDataset0.fireSelectionEvent();
      DatasetUtilities.findMaximumRangeValue((XYDataset) simpleHistogramDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[][] doubleArray0 = new double[7][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      Stack<Integer> stack0 = new Stack<Integer>();
      stack0.add(integer0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      DatasetUtilities.findMaximumStackedRangeValue(defaultStatisticalCategoryDataset0);
      TimeSeries timeSeries0 = new TimeSeries(integer0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) stack0, (Range) null, true);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      Stack<Integer> stack0 = new Stack<Integer>();
      stack0.add(integer0);
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[6];
      double double0 = 23.0;
      doubleArray1[1] = 23.0;
      doubleArray1[2] = 894.53830012;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) stack0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Hour hour0 = new Hour();
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (Comparable) hour0);
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(hour0);
      Comparable<DefaultBoxAndWhiskerCategoryDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerCategoryDataset>[]) Array.newInstance(Comparable.class, 3);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[9];
      MockDate mockDate0 = new MockDate(0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 2794.9415036, (-3173.4), (-2.147483648E9), (-2.147483648E9), 23);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, Double.NaN, 2794.9415036, 1.0, 2794.9415036, (-3173.4));
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 1.0, Double.NaN, (-1259.963649), 1.0, (-3173.4));
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, (-1268.84), 0, (-1054.195825968812), 0, 318.19829456260265);
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, 23, Double.NEGATIVE_INFINITY, (-1259.963649), (-2380.661989812204), Double.NaN);
      oHLCDataItemArray0[4] = oHLCDataItem4;
      OHLCDataItem oHLCDataItem5 = new OHLCDataItem(mockDate0, 3495.4145, (-3173.4), 3495.4145, 318.19829456260265, 2794.9415036);
      oHLCDataItemArray0[5] = oHLCDataItem5;
      OHLCDataItem oHLCDataItem6 = new OHLCDataItem(mockDate0, (-188.506238637), 894.53830012, 894.53830012, Double.NaN, (-1203.815897));
      oHLCDataItemArray0[6] = oHLCDataItem6;
      OHLCDataItem oHLCDataItem7 = new OHLCDataItem(mockDate0, Double.POSITIVE_INFINITY, 1378.500733, (-1158.308136248002), (-1203.815897), 2794.9415036);
      oHLCDataItemArray0[7] = oHLCDataItem7;
      OHLCDataItem oHLCDataItem8 = new OHLCDataItem(mockDate0, 894.53830012, 0, 1.0, 937.95495451, 2514.699174505);
      oHLCDataItemArray0[8] = oHLCDataItem8;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(hour0, oHLCDataItemArray0);
      Date date0 = defaultOHLCDataset0.getXDate(0, 0);
      SerialDate serialDate0 = SerialDate.createInstance(date0);
      SerialDate serialDate1 = SerialDate.addYears(0, serialDate0);
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) serialDate1;
      comparableArray0[1] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) hour0;
      comparableArray0[2] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) hour0;
      double[][] doubleArray0 = new double[7][2];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 3;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = (double) 3;
      doubleArray1[4] = (-1268.84);
      doubleArray1[5] = (double) (-1);
      doubleArray1[6] = (-1268.84);
      doubleArray1[7] = 3765.467412;
      doubleArray1[8] = (double) 5;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 2514.699174505;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (-191.32314);
      doubleArray2[3] = (double) 2;
      doubleArray2[4] = (double) 3;
      doubleArray2[5] = (-0.5);
      doubleArray2[6] = 3495.4145;
      doubleArray2[7] = (double) 9999;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 318.19829456260265;
      doubleArray3[1] = (double) 4;
      doubleArray3[2] = (double) 1;
      doubleArray3[3] = (-1259.963649);
      doubleArray3[4] = Double.NEGATIVE_INFINITY;
      doubleArray3[5] = (double) 1900;
      doubleArray3[6] = (double) 1;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = 23.0;
      doubleArray4[1] = (double) 6;
      doubleArray4[2] = (double) 3;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = (double) 5;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = (-188.506238637);
      doubleArray6[1] = Double.POSITIVE_INFINITY;
      doubleArray6[2] = 318.19829456260265;
      doubleArray6[3] = (double) 2958465;
      doubleArray6[4] = 1378.500733;
      doubleArray6[5] = (-2874.5796417);
      doubleArray6[6] = (double) 1;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[0];
      doubleArray0[6] = doubleArray7;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) comparableArray0, (Comparable[]) oHLCDataItemArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'rowKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      Hour hour0 = new Hour();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 894.53830012;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      keyToGroupMap0.mapKeyToGroup("", ">,~SHWL");
      Long long0 = new Long(2579L);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      Comparable<DefaultBoxAndWhiskerCategoryDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerCategoryDataset>[]) Array.newInstance(Comparable.class, 1);
      MockDate mockDate0 = new MockDate((-6088L));
      Minute minute0 = new Minute(mockDate0);
      RegularTimePeriod regularTimePeriod0 = minute0.next();
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) regularTimePeriod0;
      double[][] doubleArray2 = new double[7][9];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray1;
      double[] doubleArray3 = new double[0];
      doubleArray2[4] = doubleArray3;
      doubleArray2[5] = doubleArray1;
      doubleArray2[6] = doubleArray1;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, (Comparable[]) null, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'columnKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((-2146.3174543), (-2146.3174543), "");
      Byte byte0 = new Byte((byte) (-68));
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      arrayList0.add((Byte) null);
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, true);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, range0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      Hour hour0 = new Hour();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(2929.282185, 2929.282185, "");
      Byte byte0 = new Byte((byte)0);
      Range range0 = new Range(0, 23);
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (byte)0);
      Range.expandToInclude(range1, (byte)0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      Hour hour0 = new Hour();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(hour0);
      simpleHistogramDataset0.fireSelectionEvent();
      DatasetUtilities.findMaximumRangeValue((XYDataset) simpleHistogramDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findMinimumRangeValue((XYDataset) simpleHistogramDataset0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((-2146.3174543), 23.0, "");
      Byte byte0 = new Byte((byte)37);
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[][] doubleArray0 = new double[7][9];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 2933.580842874;
      doubleArray1[1] = (-3057.6809573223);
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 0.5;
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = (-3057.6809573223);
      doubleArray2[3] = (-3057.6809573223);
      doubleArray2[4] = 2933.580842874;
      doubleArray2[5] = Double.NEGATIVE_INFINITY;
      doubleArray2[6] = 2933.580842874;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 0.5;
      doubleArray3[1] = 2933.580842874;
      doubleArray3[2] = Double.NEGATIVE_INFINITY;
      doubleArray3[3] = Double.NEGATIVE_INFINITY;
      doubleArray3[4] = 2933.580842874;
      doubleArray3[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = Double.NEGATIVE_INFINITY;
      doubleArray4[1] = 0.5;
      doubleArray4[2] = (-3999.7867249);
      doubleArray4[3] = 0.5;
      doubleArray4[4] = 2933.580842874;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = (-3057.6809573223);
      doubleArray5[1] = 2933.580842874;
      doubleArray5[2] = 991.91;
      doubleArray5[3] = (-3999.7867249);
      doubleArray5[4] = 2933.580842874;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = 2933.580842874;
      doubleArray6[1] = Double.NEGATIVE_INFINITY;
      doubleArray6[2] = 991.91;
      doubleArray6[3] = (-3999.7867249);
      doubleArray6[4] = 2933.580842874;
      doubleArray6[5] = (-3057.6809573223);
      doubleArray6[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[8];
      doubleArray7[0] = Double.NEGATIVE_INFINITY;
      doubleArray7[1] = 991.91;
      doubleArray7[2] = Double.NEGATIVE_INFINITY;
      doubleArray7[3] = (-3999.7867249);
      doubleArray7[4] = 991.91;
      doubleArray7[5] = Double.NaN;
      doubleArray7[6] = Double.NEGATIVE_INFINITY;
      doubleArray7[7] = (-3057.6809573223);
      doubleArray0[6] = doubleArray7;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("lhg>VzG/gYDHR>w", "lhg>VzG/gYDHR>w", doubleArray0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, (-1.0));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Float float0 = new Float((double) 0.0F);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(Double.NaN, Double.NaN, "0h");
      Byte byte0 = new Byte((byte) (-19));
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      arrayList0.add((Byte) null);
      Range range0 = new Range(0.0F, (byte)4);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, range0, true);
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      String string0 = "";
      Number[][] numberArray0 = new Number[3][8];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = null;
      numberArray1[1] = null;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[0];
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[1];
      numberArray3[0] = null;
      numberArray0[2] = numberArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 9976);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9976, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Float float0 = new Float((-42.23526698600089));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.add(float0);
      linkedList0.clone();
      MockDate mockDate0 = new MockDate((-1504L));
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer1 = JLayeredPane.FRAME_CONTENT_LAYER;
      stack0.add(integer1);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) linkedList0, true);
      DatasetUtilities.findMaximumStackedRangeValue(defaultMultiValueCategoryDataset0);
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      DatasetUtilities.isEmptyOrNull((XYDataset) xIntervalSeriesCollection0);
      DatasetUtilities.iterateCategoryRangeBounds(defaultMultiValueCategoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Hour hour0 = new Hour();
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (Comparable) hour0);
      double[][] doubleArray0 = new double[5][2];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 23;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 23;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = 1.7976931348623157E308;
      doubleArray1[6] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (double) 23;
      doubleArray3[1] = 1.7976931348623157E308;
      doubleArray3[2] = (double) 23;
      doubleArray3[3] = (double) 23;
      doubleArray3[4] = 1748.7;
      doubleArray3[5] = (-265.469);
      doubleArray3[6] = (double) 0;
      doubleArray3[7] = 1.7976931348623157E308;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = (double) 0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = 1.7976931348623157E308;
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      defaultIntervalCategoryDataset0.clone();
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Double double0 = new Double(339.388988729);
      Number[][] numberArray0 = new Number[2][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      DatasetUtilities.isEmptyOrNull(categoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Float float0 = new Float((double) 0.0F);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.add(float0);
      MockDate mockDate0 = new MockDate((-1504L));
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Date[] dateArray0 = new Date[7];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      Stack<Integer> stack0 = new Stack<Integer>();
      stack0.add(integer0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      DatasetUtilities.findMaximumStackedRangeValue(defaultMultiValueCategoryDataset0);
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      DatasetUtilities.isEmptyOrNull((XYDataset) xIntervalSeriesCollection0);
      DatasetUtilities.iterateCategoryRangeBounds(defaultMultiValueCategoryDataset0, false);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float float1 = new Float((double) 0.0F);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.add(float1);
      MockDate mockDate0 = new MockDate((-1504L));
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Date[] dateArray0 = new Date[7];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      dateArray0[5] = (Date) mockDate0;
      dateArray0[6] = (Date) mockDate0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1504L);
      doubleArray0[1] = 0.5;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) (-1504L);
      doubleArray0[4] = (-1649.330341573);
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (double) (-1504L);
      doubleArray0[7] = (double) (-1504L);
      doubleArray0[8] = (double) (-1504L);
      double[] doubleArray1 = new double[1];
      mockDate0.before(dateArray0[2]);
      doubleArray1[0] = (-1649.330341573);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(float1, dateArray0, doubleArray0, doubleArray1, doubleArray0, doubleArray0, doubleArray0);
      DatasetUtilities.findMaximumDomainValue(defaultHighLowDataset0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultHighLowDataset0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap((-1504.0));
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, keyToGroupMap0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Hour hour0 = new Hour();
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (Comparable) hour0);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (Comparable) hour0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(hour0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, keyToGroupMap0);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1681.43555, 1681.43555);
      // Undeclared exception!
      DatasetUtilities.sampleFunction2D(powerFunction2D0, (-2336.1611558636855), 0, 1174, hour0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      Hour hour0 = new Hour();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((-2146.3174543), (double) 23, "");
      Byte byte0 = new Byte((byte) (-68));
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      Byte byte1 = new Byte((byte)29);
      arrayList0.add(byte0);
      Range range0 = new Range((byte)29, 453.98026341554);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, range0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (byte) (-68));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      Hour hour0 = new Hour();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((double) 0, (-42.23526698600089), "");
      Byte byte0 = new Byte((byte)4);
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Number number0 = DatasetUtilities.findMinimumDomainValue(categoryTableXYDataset0);
      Number[][] numberArray0 = new Number[2][8];
      Number[] numberArray1 = new Number[6];
      numberArray1[0] = number0;
      numberArray1[1] = number0;
      numberArray1[2] = number0;
      numberArray1[3] = number0;
      numberArray1[4] = number0;
      numberArray1[5] = number0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[8];
      numberArray2[0] = number0;
      numberArray2[1] = number0;
      numberArray2[2] = number0;
      numberArray2[3] = number0;
      numberArray2[4] = number0;
      numberArray2[5] = number0;
      numberArray2[6] = number0;
      numberArray2[7] = number0;
      numberArray0[1] = numberArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, (-2744.1));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Vector<DefaultBoxAndWhiskerXYDataset> vector0 = new Vector<DefaultBoxAndWhiskerXYDataset>();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(156.69, 282.1, "org.jfree.data.general.DatasetUtilities");
      XYSeries xYSeries0 = new XYSeries("org.jfree.data.general.DatasetUtilities", true, false);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      XYDataItem xYDataItem0 = new XYDataItem(1681.43555, 1681.43555);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("org.jfree.data.general.DatasetUtilities");
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, false);
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, true);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Vector<DefaultBoxAndWhiskerXYDataset> vector0 = new Vector<DefaultBoxAndWhiskerXYDataset>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(0.0, 2532.176036344, 2532.176036344, 152.479207, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 2532.176036344, (List) vector0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      MockDate mockDate0 = new MockDate();
      defaultBoxAndWhiskerXYDataset0.add(mockDate0, boxAndWhiskerItem0);
      DatasetUtilities.iterateXYRangeBounds(defaultBoxAndWhiskerXYDataset0);
      DatasetUtilities.findMinimumDomainValue(defaultBoxAndWhiskerXYDataset0);
      CategoryDataset categoryDataset0 = null;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 366, 77);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, (-890), (-890));
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0, (double) (-890));
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      double[][] doubleArray0 = new double[4][7];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) (-890);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(">,~SHWL", "JlN[LkIxitIw9", doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      keyToGroupMap0.mapKeyToGroup("JlN[LkIxitIw9", 0.0);
      Long long0 = new Long((-4865L));
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) null, (Comparable[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      stack0.add(integer0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DatasetUtilities.iterateXYRangeBounds(defaultXYDataset0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, false);
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = 3.6817899117794;
      doubleArray1[2] = 3167.2;
      doubleArray1[3] = (-265.469);
      doubleArray1[4] = 0.5;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      keyToGroupMap0.mapKeyToGroup(Double.POSITIVE_INFINITY, (-265.469));
      Long long0 = new Long((-4865L));
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) null, (Comparable[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Vector<DefaultBoxAndWhiskerXYDataset> vector0 = new Vector<DefaultBoxAndWhiskerXYDataset>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(0.0, 2532.176036344, 2532.176036344, 152.479207, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 2532.176036344, (List) vector0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      MockDate mockDate0 = new MockDate();
      defaultBoxAndWhiskerXYDataset0.add(mockDate0, boxAndWhiskerItem0);
      DatasetUtilities.iterateXYRangeBounds(defaultBoxAndWhiskerXYDataset0);
      DatasetUtilities.findMinimumDomainValue(defaultBoxAndWhiskerXYDataset0);
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(400.0, (-42.23526698600089), "org.jfree.data.time.RegularTimePeriod");
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      double double0 = new Float((-42.23526698600089));
      DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, (Comparable) "org.jfree.data.time.RegularTimePeriod");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      TimeZone timeZone0 = TimeZone.getDefault();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Hour hour0 = new Hour(date0, timeZone0);
      Day day0 = new Day(date0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 9974, day0);
      MockDate mockDate0 = new MockDate(1, 23, (-2024), (-2024), (-2723));
      mockDate0.toInstant();
      Stack<IntervalXYDelegate> stack0 = new Stack<IntervalXYDelegate>();
      DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, false);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultStatisticalCategoryDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, false);
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) (-2723);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, stack0, true);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Double double0 = new Double(339.388988729);
      Number[][] numberArray0 = new Number[2][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      ((DefaultCategoryDataset) categoryDataset0).getRowCount();
      DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, 1.5);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Float float0 = new Float((-1038.0));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.add(float0);
      MockDate mockDate0 = new MockDate(0L);
      TimeZone timeZone0 = TimeZone.getDefault();
      Hour hour0 = new Hour(mockDate0, timeZone0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(23, 0);
      MockDate mockDate1 = new MockDate();
      mockDate1.toInstant();
      DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, (List) linkedList0, true);
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(454.48026341554, (-42.23526698600089), "org.jfree.data.time.RegularTimePeriod");
      Byte byte0 = new Byte((byte)4);
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      Byte byte1 = new Byte((byte)4);
      arrayList0.add(byte1);
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, false);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, range0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      Hour hour0 = new Hour();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((double) 0, (-42.23526698600089), "");
      Byte byte0 = new Byte((byte)4);
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      arrayList0.add((Byte) null);
      Range range0 = new Range((byte)4, Double.POSITIVE_INFINITY);
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, range1, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[13];
      doubleArray0[0] = doubleArray1;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 9984);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      Double double0 = new Double(339.388988729);
      CategoryDataset categoryDataset0 = null;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 9965, (-1009));
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(454.48026341554, (-42.23526698600089), "org.jfree.data.time.RegularTiePeriod");
      Byte byte0 = new Byte((byte)4);
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      Byte byte1 = new Byte((byte)4);
      arrayList0.add(byte1);
      Range range0 = new Range(454.48026341554, 454.48026341554);
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, range1, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (byte)4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(454.48026341554, (-42.23526698600089), "org.jfree.data.time.RegularTimePeriod");
      Byte byte0 = new Byte((byte)4);
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      Byte byte1 = new Byte((byte)4);
      arrayList0.add(byte1);
      Range range0 = new Range(454.48026341554, 454.48026341554);
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, range1, true);
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, keyToGroupMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      Hour hour0 = new Hour();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(hour0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) simpleHistogramDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, true);
      DatasetUtilities.findCumulativeRangeBounds(taskSeriesCollection0);
      hour0.next();
      hour0.previous();
      Stack<TimeSeriesCollection> stack0 = new Stack<TimeSeriesCollection>();
      DatasetUtilities.iterateToFindDomainBounds(simpleHistogramDataset0, stack0, true);
      DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, true);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      Stack<Integer> stack0 = new Stack<Integer>();
      stack0.add(integer0);
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-228.46927454074418);
      doubleArray1[1] = 23.0;
      doubleArray1[2] = 894.53830012;
      doubleArray1[3] = 0.8;
      doubleArray1[4] = (-1753.4747119436);
      doubleArray1[5] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (-228.46927454074418);
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = 0.8;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = 894.53830012;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      categoryTableXYDataset1.add(1.5, 1020.41, "org.jfree.data.general.DatasetUtilities");
      XYSeries xYSeries0 = new XYSeries("org.jfree.data.general.DatasetUtilities", true, true);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      XYDataItem xYDataItem0 = new XYDataItem(10.0, (-42.23526698600089));
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, true);
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset1, true);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(140.83563768256235);
      linkedList0.add(float0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      double double0 = (-42.23526698600089);
      categoryTableXYDataset0.add((-42.23526698600089), 1.5, "Third");
      XYSeries xYSeries0 = new XYSeries("Third", true);
      XYDataItem xYDataItem0 = new XYDataItem(140.83563768256235, 140.83563768256235);
      xYSeries0.add((Number) float0, (Number) float0);
      xYSeries0.addOrUpdate(xYDataItem0);
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) linkedList0, range0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      Double double0 = new Double(339.388988729);
      Number[][] numberArray0 = new Number[2][2];
      Number[] numberArray1 = new Number[2];
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("&", "&", numberArray0);
      defaultBoxAndWhiskerXYDataset0.validateObject();
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      Stack<DefaultBoxAndWhiskerCategoryDataset> stack0 = new Stack<DefaultBoxAndWhiskerCategoryDataset>();
      DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, range0, true);
      Range range1 = new Range(339.388988729, 339.388988729);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetUtilities.findRangeBounds((XYDataset) yIntervalSeriesCollection0, (List) stack0, range1, true);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, (-60.79933632531));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      Hour hour0 = new Hour();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((double) 0, (-42.23526698600089), "");
      Byte byte0 = new Byte((byte)4);
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      arrayList0.add((Byte) null);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, true);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, range0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findMaximumDomainValue(defaultBoxAndWhiskerXYDataset0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      defaultKeyedValues2DDataset0.getRowCount();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, true);
      DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      Stack<TimeSeriesCollection> stack0 = new Stack<TimeSeriesCollection>();
      DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, stack0, true);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float float1 = new Float((double) 0.0F);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.add(float1);
      MockDate mockDate0 = new MockDate((-1504L));
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "4}YHE.(a", "=aG[Z8B#)I");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      DatasetUtilities.findMaximumDomainValue(timeSeriesCollection0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      SerialDate serialDate0 = SerialDate.createInstance(2531);
      Date[] dateArray0 = new Date[6];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(334, 3, 1900, (-1313), 1768);
      dateArray0[3] = (Date) mockDate1;
      dateArray0[4] = (Date) mockDate0;
      dateArray0[5] = (Date) mockDate0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2531;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 2;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(serialDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultHighLowDataset0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Double double0 = new Double(339.388988729);
      Number[][] numberArray0 = new Number[2][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("&", "&", numberArray0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      DatasetUtilities.isEmptyOrNull(categoryDataset0);
      DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      Vector<DefaultStatisticalCategoryDataset> vector0 = new Vector<DefaultStatisticalCategoryDataset>();
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, (List) vector0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Double double0 = new Double(339.388988729);
      MockDate mockDate0 = new MockDate((-2267L));
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      defaultIntervalCategoryDataset0.validateObject();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeZone) null);
      DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      DatasetUtilities.findMinimumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(9988, 30);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue(dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1317.4651, 1317.4651);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, (-228.46927454074418), 1.0, 10, "Cannot remove null series.");
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, 1.0);
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("Cannot remove null series.");
      DatasetUtilities.findMaximumRangeValue((XYDataset) simpleHistogramDataset0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (double) 10);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      Byte byte0 = new Byte((byte)4);
      arrayList0.add(byte0);
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, false);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) simpleHistogramDataset0, (List) arrayList0, range0, false);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Comparable<DefaultStatisticalCategoryDataset> comparable0 = null;
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      String string0 = "}ZGRa#3IqMzE76DgAb>";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "}ZGRa#3IqMzE76DgAb>");
      Locale locale0 = JComponent.getDefaultLocale();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0, locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Vector<DefaultBoxAndWhiskerXYDataset> vector0 = new Vector<DefaultBoxAndWhiskerXYDataset>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(1.5, 3020.1839999, (-1.0), 1.5, (-3062.643695054), (-495.0), (double) 1, 1.5, (List) vector0);
      defaultBoxAndWhiskerXYDataset0.add(date0, boxAndWhiskerItem0);
      DatasetUtilities.iterateXYRangeBounds(defaultBoxAndWhiskerXYDataset0);
      DatasetUtilities.findMinimumDomainValue(defaultBoxAndWhiskerXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "}ZGRa#3IqMzE76DgAb>");
      Locale locale0 = JComponent.getDefaultLocale();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0, locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Vector<DefaultBoxAndWhiskerXYDataset> vector0 = new Vector<DefaultBoxAndWhiskerXYDataset>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(1.5, 3020.1839999, (-1.0), 1.5, (-3062.643695054), (-495.0), (double) 1, 1.5, (List) vector0);
      defaultBoxAndWhiskerXYDataset0.add(date0, boxAndWhiskerItem0);
      DatasetUtilities.iterateXYRangeBounds(defaultBoxAndWhiskerXYDataset0);
      DatasetUtilities.findMinimumDomainValue(defaultBoxAndWhiskerXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeZone) null);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      defaultIntervalCategoryDataset0.validateObject();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeZone) null);
      defaultIntervalCategoryDataset0.clone();
      DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (-2744.1));
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Hour hour0 = new Hour();
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (Comparable) hour0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      Hour hour0 = new Hour();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((double) 0, (-42.23526698600089), "");
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, true);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1317.4651, 1317.4651);
      String string0 = "Cannot remove null series.";
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, (-228.46927454074418), 1.0, 10, "Cannot remove null series.");
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 1, (-866));
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      categoryTableXYDataset1.add((-3173.4), 1.7976931348623157E308, "");
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset1, true);
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset1, false);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 876.1007931034;
      doubleArray1[1] = 1.7976931348623157E308;
      doubleArray1[2] = (-2336.1611558636855);
      doubleArray1[3] = (-359.0);
      doubleArray1[4] = 1328.91;
      doubleArray1[5] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 1328.91;
      doubleArray2[1] = (-2336.1611558636855);
      doubleArray2[3] = 1328.91;
      doubleArray2[4] = (-1038.0);
      doubleArray2[5] = 876.1007931034;
      doubleArray2[6] = 1328.91;
      doubleArray2[7] = 1.7976931348623157E308;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'seriesKey' argument.", "", doubleArray0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCXYDataset jDBCXYDataset0 = null;
      try {
        jDBCXYDataset0 = new JDBCXYDataset(connection0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Double double0 = new Double(339.388988729);
      MockDate mockDate0 = new MockDate((-2267L));
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) mockDate0, (double) (-2267L), (-1218));
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) mockDate0, 2016.73248161, (-1218));
      DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Double double0 = new Double(339.388988729);
      Number[][] numberArray0 = new Number[2][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("&", "&", numberArray0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      DatasetUtilities.isEmptyOrNull(categoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (-2270));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      defaultIntervalCategoryDataset0.validateObject();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeZone) null);
      DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getDomainBounds(true);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      // Undeclared exception!
      DatasetUtilities.findMaximumStackedRangeValue(slidingCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset1, true);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, (-2130440126), 1615);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Double double0 = new Double(339.388988729);
      String string0 = "&";
      Number[][] numberArray0 = new Number[2][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("&", "&", numberArray0);
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      ((DefaultCategoryDataset) categoryDataset0).getColumnKeys();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      linkedList0.add(defaultTableXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultTableXYDataset0, (List) linkedList0, range0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultTableXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Number[][] numberArray0 = new Number[2][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("&", "&", numberArray0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      double double0 = new Float(339.388988729);
      Stack<DefaultBoxAndWhiskerCategoryDataset> stack0 = new Stack<DefaultBoxAndWhiskerCategoryDataset>();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds((XYDataset) null, stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1317.4651, 1317.4651);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, (-228.46927454074418), 1.0, 10, "Cannot remove null series.");
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, 1.0);
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("Cannot remove null series.");
      DatasetUtilities.findMaximumRangeValue((XYDataset) simpleHistogramDataset0);
      double[][] doubleArray0 = new double[9][8];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 10;
      doubleArray1[1] = (double) 10;
      doubleArray1[2] = (-228.46927454074418);
      doubleArray1[3] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (-228.46927454074418);
      doubleArray2[1] = (-228.46927454074418);
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 1317.4651;
      doubleArray2[4] = (double) 10;
      doubleArray2[5] = (-228.46927454074418);
      doubleArray2[6] = (double) 10;
      doubleArray2[7] = (-228.46927454074418);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (double) 10;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = 1.0;
      doubleArray4[1] = 1317.4651;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = 1.5;
      doubleArray5[1] = 1.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      doubleArray6[0] = 1317.4651;
      doubleArray6[1] = 1317.4651;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[0];
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[8];
      doubleArray8[0] = 1.0;
      doubleArray8[1] = (-228.46927454074418);
      doubleArray8[2] = 1.0;
      doubleArray8[3] = (double) 10;
      doubleArray8[4] = 1.0;
      doubleArray8[5] = 1.5;
      doubleArray8[6] = 1317.4651;
      doubleArray8[7] = (double) 10;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[9];
      doubleArray9[0] = 1317.4651;
      doubleArray9[1] = 1.7976931348623157E308;
      doubleArray9[2] = 0.0;
      doubleArray9[3] = (-1607.4);
      doubleArray9[4] = (double) 10;
      doubleArray9[5] = 1.0;
      doubleArray9[6] = 1317.4651;
      doubleArray9[7] = 1.0;
      doubleArray9[8] = 1.0;
      doubleArray0[8] = doubleArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Number[][] numberArray0 = new Number[3][8];
      Number[] numberArray1 = new Number[6];
      Float float0 = new Float(0.0F);
      numberArray1[5] = (Number) float0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[0];
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[4];
      numberArray3[0] = (Number) float0;
      numberArray3[2] = (Number) float0;
      Byte byte0 = new Byte((byte)125);
      numberArray3[3] = (Number) byte0;
      numberArray0[0] = numberArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "b&", numberArray0);
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      XYSeries xYSeries0 = new XYSeries("b&", false);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, range0, true);
      DatasetUtilities.findRangeBounds(categoryDataset0);
      DatasetUtilities.findRangeBounds(categoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeZone) null);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Comparable<DefaultStatisticalCategoryDataset> comparable0 = null;
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      Double double0 = new Double(339.388988729);
      Number[] numberArray0 = new Number[2];
      numberArray0[1] = (Number) double0;
      Integer integer0 = new Integer((-125));
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, (Comparable) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-654.8766916125);
      doubleArray1[1] = 1654.5337103664542;
      doubleArray1[2] = 1022.35;
      doubleArray1[3] = 866.8934854;
      doubleArray1[4] = 471.391214356089;
      doubleArray1[5] = 571.698173;
      doubleArray1[6] = 465.9319779878216;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("a=^b", "", doubleArray0);
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) linkedList0, range0, false);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) linkedList0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[8];
      doubleArray1[2] = (-3358.3932604896);
      doubleArray1[4] = (-3358.3932604896);
      doubleArray1[5] = 1724.2104101449581;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "a=^b", doubleArray0);
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      linkedList0.add(defaultTableXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultXYDataset0, (List) linkedList0, range0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultTableXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findMaximumDomainValue(defaultBoxAndWhiskerXYDataset0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      stack0.add(integer0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) stack0, true);
      DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      TimeZone.getDefault();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float float1 = new Float((double) 0.0F);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.add(float1);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      double double0 = new Float(0.0F);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Double double0 = new Double(339.388988729);
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getDefault();
      Hour hour0 = new Hour(mockDate0, timeZone0);
      Day day0 = new Day(mockDate0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 1, day0);
      Instant instant0 = mockDate0.toInstant();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 339.388988729;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 23.0;
      doubleArray0[4] = (double) 23;
      doubleArray0[5] = 339.388988729;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-2744.1), 23.0, 23, instant0);
      Vector<XYBarDataset> vector0 = new Vector<XYBarDataset>(0);
      DatasetUtilities.findDomainBounds(xYDataset0, (List) vector0, false);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultStatisticalCategoryDataset0);
      Range range0 = new Range(1, 2);
      DatasetUtilities.findCumulativeRangeBounds(defaultStatisticalCategoryDataset0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(1, "", "T;_{");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(timePeriodValuesCollection0, (List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float float1 = new Float((double) 0.0F);
      MockDate mockDate0 = new MockDate((-1504L));
      TimeZone timeZone0 = TimeZone.getDefault();
      Hour hour0 = new Hour(mockDate0, timeZone0);
      Day day0 = new Day(mockDate0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(23, (-1), day0);
      mockDate0.toInstant();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      defaultStatisticalCategoryDataset0.validateObject();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultStatisticalCategoryDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) dynamicTimeSeriesCollection0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue(dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      double[][] doubleArray0 = new double[2][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "a=^b", doubleArray0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      Stack<DefaultBoxAndWhiskerCategoryDataset> stack0 = new Stack<DefaultBoxAndWhiskerCategoryDataset>();
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      Double double0 = new Double(339.388988729);
      Number[][] numberArray0 = new Number[2][2];
      Number[] numberArray1 = new Number[2];
      numberArray1[1] = (Number) double0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("&", "&", numberArray0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      DatasetUtilities.findMinimumRangeValue(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Number[][] numberArray0 = new Number[3][8];
      Number[] numberArray1 = new Number[6];
      Float float0 = new Float(0.0F);
      numberArray1[5] = (Number) float0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[0];
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[4];
      numberArray3[0] = (Number) float0;
      numberArray3[2] = (Number) float0;
      Byte byte0 = new Byte((byte)125);
      numberArray3[3] = (Number) byte0;
      numberArray0[2] = numberArray3;
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, (Comparable) "b&");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      Double double0 = new Double(339.388988729);
      Number[][] numberArray0 = new Number[2][2];
      Number[] numberArray1 = new Number[2];
      numberArray1[1] = (Number) double0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("&", "&", numberArray0);
      ((DefaultCategoryDataset) categoryDataset0).getRowIndex("&");
      DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null, 339.388988729);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getDomainBounds(false);
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 712.76;
      doubleArray1[1] = (-228.96927454074418);
      doubleArray1[2] = 1995.0;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Double double0 = new Double(339.388988729);
      Number[][] numberArray0 = new Number[2][2];
      Number[] numberArray1 = new Number[2];
      numberArray1[1] = (Number) double0;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 1048);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1869.76, 1347.0);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, 1.0, 1347.0, 10, "Cannot remove null series.");
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, Double.NEGATIVE_INFINITY);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (-1140));
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      Double double0 = new Double(339.388988729);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) double0, 1712.965155967446, (-3063));
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultXYDataset0);
      assertNull(range0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultXYDataset0, true);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultXYDataset0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[8];
      doubleArray1[2] = 1724.2104101449581;
      doubleArray1[4] = 1724.2104101449581;
      doubleArray1[5] = 1724.2104101449581;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "a=^b", doubleArray0);
      DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Number[][] numberArray0 = new Number[3][8];
      Number[] numberArray1 = new Number[6];
      Float float0 = new Float(0.0F);
      numberArray1[5] = (Number) float0;
      numberArray0[0] = numberArray1;
      Number[][] numberArray2 = new Number[6][5];
      Number[] numberArray3 = new Number[6];
      numberArray3[0] = (Number) float0;
      numberArray3[1] = (Number) float0;
      numberArray3[2] = (Number) float0;
      Float float1 = new Float((-2014.732601));
      numberArray3[3] = (Number) float1;
      numberArray3[4] = (Number) float0;
      numberArray3[5] = (Number) float0;
      numberArray2[0] = numberArray3;
      numberArray2[1] = numberArray1;
      numberArray2[2] = numberArray1;
      numberArray2[3] = numberArray1;
      numberArray2[4] = numberArray1;
      numberArray2[5] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("b&", "", numberArray2);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("b&");
      defaultBoxAndWhiskerXYDataset0.validateObject();
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      Stack<DefaultBoxAndWhiskerCategoryDataset> stack0 = new Stack<DefaultBoxAndWhiskerCategoryDataset>();
      DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, range0, true);
      DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      Double double0 = new Double(339.388988729);
      Number[][] numberArray0 = new Number[2][2];
      Number[] numberArray1 = new Number[2];
      numberArray1[1] = (Number) double0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("&", "&", numberArray0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      DatasetUtilities.isEmptyOrNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[8];
      doubleArray1[2] = (-3358.3932604896);
      doubleArray1[4] = (-3358.3932604896);
      doubleArray1[5] = 1724.2104101449581;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "a=^b", doubleArray0);
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultXYDataset0, (List) linkedList0, range0, true);
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset((-3358.3932604896));
      DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      Double double0 = new Double(339.388988729);
      ArrayList<YIntervalSeriesCollection> arrayList0 = new ArrayList<YIntervalSeriesCollection>();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      arrayList0.remove((Object) categoryTableXYDataset0);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      arrayList0.add(yIntervalSeriesCollection0);
      Comparable<Float>[] comparableArray0 = (Comparable<Float>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 339.388988729;
      doubleArray1[1] = 339.388988729;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 339.388988729;
      doubleArray2[1] = 339.388988729;
      doubleArray2[2] = 339.388988729;
      doubleArray2[3] = 339.388988729;
      doubleArray0[1] = doubleArray2;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1317.4651, 1317.4651);
      Float float0 = new Float(189.87429290378037);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float1 = new Float(189.87429290378037);
      linkedList0.add(float1);
      MockDate mockDate0 = new MockDate((-1504L));
      TimeZone timeZone0 = TimeZone.getDefault();
      Hour hour0 = new Hour(mockDate0, timeZone0);
      Day day0 = new Day(mockDate0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1400, 1400, hour0);
      mockDate0.toInstant();
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, (List) linkedList0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1317.4651, 1317.4651);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, (-228.46927454074418), 1.0, 10, "\"WwS7voaft~");
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1317.4651;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.iterateXYRangeBounds(defaultTableXYDataset0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) null, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1317.4651, 1317.4651);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, (-228.46927454074418), 1.0, 10, "Cannot remove null series.");
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, 1.0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      DatasetUtilities.iterateRangeBounds((XYDataset) xYBarDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) xYBarDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, 10);
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "Cannot remove null series.", 1317.4651, 10);
      DatasetUtilities.createCategoryDataset((Comparable) "Cannot remove null series.", (KeyedValues) pieDataset1);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      Double double0 = new Double(339.388988729);
      Number[][] numberArray0 = new Number[2][2];
      Number[] numberArray1 = new Number[2];
      numberArray1[1] = (Number) double0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("&", "&", numberArray0);
      defaultBoxAndWhiskerXYDataset0.validateObject();
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      Stack<DefaultBoxAndWhiskerCategoryDataset> stack0 = new Stack<DefaultBoxAndWhiskerCategoryDataset>();
      DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, range0, true);
      DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      defaultTableXYDataset0.clone();
      DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, false);
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>();
      DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, (List) arrayList0, false);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Hour hour0 = new Hour();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, (Comparable) hour0);
      DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      DatasetUtilities.findDomainBounds((XYDataset) defaultXYDataset0, (List) arrayList0, true);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = new DefaultMultiValueCategoryDataset();
      Hour hour0 = new Hour();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 23;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 23;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = (double) 23;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (double) 0;
      doubleArray3[4] = (-1372.0);
      doubleArray3[5] = (double) 23;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = (-1372.0);
      doubleArray4[1] = (double) 23;
      doubleArray4[2] = (double) 23;
      doubleArray4[3] = (double) 23;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = (double) 0;
      doubleArray5[1] = (-1984.807418);
      doubleArray5[2] = (double) 0;
      doubleArray5[3] = (double) 0;
      doubleArray5[4] = (-1372.0);
      doubleArray5[5] = (double) 23;
      doubleArray5[6] = (double) 0;
      doubleArray5[7] = (double) 23;
      doubleArray5[8] = 0.0;
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, (-266), (-302));
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, (-266));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1317.4651, 1317.4651);
      Double double0 = new Double(3042.2);
      Number[][] numberArray0 = new Number[3][8];
      Number[] numberArray1 = new Number[6];
      numberArray1[0] = (Number) double0;
      Float float0 = new Float(0.0F);
      numberArray1[1] = (Number) float0;
      numberArray1[2] = (Number) double0;
      numberArray1[3] = (Number) double0;
      numberArray1[4] = (Number) double0;
      numberArray1[5] = (Number) double0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[0];
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[4];
      numberArray3[0] = (Number) float0;
      numberArray3[1] = (Number) double0;
      numberArray3[2] = (Number) float0;
      Byte byte0 = new Byte((byte)125);
      numberArray3[3] = (Number) byte0;
      numberArray0[2] = numberArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "b&", numberArray0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      DatasetUtilities.findRangeBounds(categoryDataset0);
      DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      JDBCXYDataset jDBCXYDataset0 = null;
      try {
        jDBCXYDataset0 = new JDBCXYDataset("b&", (String) null, "taCQ2aBSf#5sx{!Oc7", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DatasetUtilities.findRangeBounds((XYDataset) defaultXYZDataset0);
      DatasetUtilities.iterateXYRangeBounds(defaultXYZDataset0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "el'o86*D";
      stringArray0[1] = "h]";
      stringArray0[2] = "";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(1.0);
      MockDate mockDate0 = new MockDate((-1079L));
      TimeZone timeZone0 = TimeZone.getDefault();
      Hour hour0 = new Hour(mockDate0, timeZone0);
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 23;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Ri|7W", "", doubleArray0);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      TimeZone timeZone0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1317.4651, 1317.4651);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, (-228.46927454074418), 1.0, 10, "\"WwS7voaft~");
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeries0.add(0.0, 1317.4651);
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, 1.0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      DatasetUtilities.findMinimumRangeValue((XYDataset) xYSeriesCollection0);
      DatasetUtilities.iterateXYRangeBounds(xYBarDataset0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      DatasetUtilities.iterateXYRangeBounds(defaultBoxAndWhiskerXYDataset0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, false);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      Double double0 = new Double(339.388988729);
      Number[][] numberArray0 = new Number[2][2];
      Number[] numberArray1 = new Number[2];
      numberArray1[1] = (Number) double0;
      numberArray0[1] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("&", "&", numberArray0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      DatasetUtilities.findRangeBounds(categoryDataset0);
      DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      DatasetUtilities.isEmptyOrNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(1.0);
      MockDate mockDate0 = new MockDate((-1079L));
      TimeZone timeZone0 = TimeZone.getDefault();
      Hour hour0 = new Hour(mockDate0, timeZone0);
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 23;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Ri|7W", "", doubleArray0);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCXYDataset jDBCXYDataset0 = null;
      try {
        jDBCXYDataset0 = new JDBCXYDataset(connection0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      Double double0 = new Double(339.388989);
      Number[][] numberArray0 = new Number[2][2];
      Number[] numberArray1 = new Number[2];
      numberArray1[1] = (Number) double0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("&", "&", numberArray0);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[8];
      doubleArray1[2] = (-3358.3932604896);
      doubleArray1[4] = (-3358.3932604896);
      doubleArray1[5] = 1724.2104101449581;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "a=^b", doubleArray0);
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      Range.shift(range0, (-3358.3932604896));
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultXYDataset0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Comparable<DefaultStatisticalCategoryDataset> comparable0 = null;
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      DatasetUtilities.iterateXYRangeBounds(defaultBoxAndWhiskerXYDataset0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      int int0 = (-1);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (-1));
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) null, (double) (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      double[][] doubleArray0 = new double[8][2];
      double[] doubleArray1 = new double[3];
      doubleArray1[1] = (-1192.20241963);
      doubleArray0[0] = doubleArray1;
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      double[][] doubleArray0 = new double[8][2];
      double[] doubleArray1 = new double[3];
      doubleArray1[1] = (-1192.20241963);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      doubleArray0[2] = doubleArray1;
      double[] doubleArray3 = new double[7];
      doubleArray3[1] = (-536.9982587);
      doubleArray3[3] = (-536.9982587);
      doubleArray3[5] = (-536.9982587);
      doubleArray3[6] = 1348.8499;
      doubleArray0[3] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[1] = (-536.9982587);
      doubleArray4[2] = 1348.8499;
      doubleArray0[4] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = (-1192.20241963);
      doubleArray5[3] = (-536.9982587);
      doubleArray5[4] = (-965.7833114477576);
      doubleArray5[5] = (-1192.20241963);
      doubleArray5[7] = (-536.9982587);
      doubleArray0[5] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      Double double0 = new Double(339.388988729);
      Number[][] numberArray0 = new Number[2][2];
      Number[] numberArray1 = new Number[2];
      numberArray1[1] = (Number) double0;
      numberArray0[1] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("&", "&", numberArray0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      DatasetUtilities.findRangeBounds(categoryDataset0);
      DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      DatasetUtilities.findMinimumDomainValue(defaultBoxAndWhiskerXYDataset0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      ArrayList<YIntervalSeriesCollection> arrayList0 = new ArrayList<YIntervalSeriesCollection>();
      Number[][] numberArrayArray0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("&", "", (Number[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findMaximumDomainValue(defaultBoxAndWhiskerXYDataset0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultBoxAndWhiskerXYDataset0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(1.0);
      Float float1 = new Float(436.92645F);
      linkedList0.add(float1);
      MockDate mockDate0 = new MockDate((-1079L));
      TimeZone timeZone0 = TimeZone.getDefault();
      Hour hour0 = new Hour(mockDate0, timeZone0);
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 23;
      double double0 = Double.POSITIVE_INFINITY;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Ri|7W", "", doubleArray0);
      DatasetUtilities.isEmptyOrNull(categoryDataset0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 2, hour0, timeZone0);
      DatasetUtilities.isEmptyOrNull((XYDataset) dynamicTimeSeriesCollection0);
      DatasetUtilities.findRangeBounds(categoryDataset0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      // Undeclared exception!
      try { 
        Month.parseMonth(" but the series already contains an observation");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the month.
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1317.4651, 1317.4651);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, (-228.46927454074418), 1.0, 10, "\"WwS7voaft~");
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, 1.0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) linkedList0, true);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList0, true);
      ArrayList<YIntervalSeriesCollection> arrayList0 = new ArrayList<YIntervalSeriesCollection>();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      arrayList0.add(yIntervalSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.YIntervalSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      ArrayList<YIntervalSeriesCollection> arrayList0 = new ArrayList<YIntervalSeriesCollection>();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      arrayList0.remove((Object) yIntervalSeriesCollection0);
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1414.0;
      doubleArray1[1] = 46.4802283778;
      doubleArray1[2] = (-1.7976931348623157E308);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 1904.7831;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-1.7976931348623157E308);
      doubleArray2[1] = 1904.7831;
      doubleArray2[2] = 1414.0;
      doubleArray2[3] = 1414.0;
      doubleArray2[4] = 46.4802283778;
      doubleArray2[5] = 1904.7831;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (-1.7976931348623157E308);
      doubleArray3[1] = 1904.7831;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (-1.7976931348623157E308);
      doubleArray3[4] = 46.4802283778;
      doubleArray3[5] = 1904.7831;
      doubleArray3[6] = 0.0;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("HFF", "HFF", doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) (-1.7976931348623157E308));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(1.0);
      Float float1 = new Float(436.92645F);
      linkedList0.add(float1);
      MockDate mockDate0 = new MockDate((-1079L));
      TimeZone timeZone0 = TimeZone.getDefault();
      Hour hour0 = new Hour(mockDate0, timeZone0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, 10, hour0);
      mockDate0.toInstant();
      dynamicTimeSeriesCollection0.getRangeBounds(true);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findMaximumStackedRangeValue(defaultMultiValueCategoryDataset0);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) linkedList0, true);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DatasetUtilities.findMinimumDomainValue(defaultXYDataset0);
      Short short0 = new Short((short)1063);
      Double double0 = new Double(Double.POSITIVE_INFINITY);
      Number[][] numberArray0 = new Number[3][5];
      Number[] numberArray1 = new Number[3];
      numberArray1[0] = (Number) double0;
      numberArray1[2] = null;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.category.DefaultIntervalCategoryDataset", "3lDa|(3NC7o;YMn`", numberArray0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      double[][] doubleArray0 = new double[10][0];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) (short)1063;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray1[2] = (double) (short)1063;
      doubleArray1[3] = (double) (short)1063;
      doubleArray1[4] = Double.POSITIVE_INFINITY;
      doubleArray1[5] = Double.POSITIVE_INFINITY;
      doubleArray1[6] = (double) (short)1063;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = Double.POSITIVE_INFINITY;
      doubleArray2[1] = Double.POSITIVE_INFINITY;
      doubleArray2[2] = (double) (short)1063;
      doubleArray2[3] = Double.POSITIVE_INFINITY;
      doubleArray2[4] = (double) (short)1063;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = Double.POSITIVE_INFINITY;
      doubleArray3[1] = (double) (short)1063;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultXYDataset0, false);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1317.4651, 1317.4651);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, (-228.46927454074418), 1.0, 10, "\"WwS7voaft~");
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, 1.0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ArrayList<YIntervalSeriesCollection> arrayList0 = new ArrayList<YIntervalSeriesCollection>();
      arrayList0.remove((Object) xYSeries0);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      arrayList0.add(yIntervalSeriesCollection0);
      YIntervalSeriesCollection yIntervalSeriesCollection1 = new YIntervalSeriesCollection();
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0, (List) arrayList0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.YIntervalSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.iterateXYRangeBounds(defaultTableXYDataset0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      Range.combine((Range) null, (Range) null);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      Double double0 = new Double(339.388988729);
      Number[][] numberArray0 = new Number[2][2];
      Number[] numberArray1 = new Number[2];
      numberArray1[1] = (Number) double0;
      numberArray0[1] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("&", "", numberArray0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      DatasetUtilities.findRangeBounds(categoryDataset0);
      DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      int int0 = 10;
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries((Function2D) null, 2.0, 0.0, 1941, "\"WwS7voaft~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1317.4651, 4704.4003245);
      int int0 = 1800;
      // Undeclared exception!
      DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, 1.0, 1654.5337103664542, 1800, "\"WwS7voaft~");
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-3358.3932604896);
      doubleArray1[1] = 976.000122;
      doubleArray1[2] = 976.000122;
      doubleArray1[4] = (-3358.3932604896);
      doubleArray1[5] = 1724.2104101449581;
      doubleArray1[6] = 976.000122;
      doubleArray1[7] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.chart.event.DatasetChangeInfo", "", doubleArray0);
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultXYDataset0, (List) linkedList0, range0, true);
      DatasetUtilities.findDomainBounds((XYDataset) defaultXYDataset0, false);
      DatasetUtilities.findRangeBounds(categoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      String string0 = "";
      DatasetGroup datasetGroup0 = new DatasetGroup("");
      defaultTableXYDataset0.setGroup(datasetGroup0);
      DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, (-3338));
      ArrayDeque<DefaultOHLCDataset> arrayDeque0 = new ArrayDeque<DefaultOHLCDataset>((-3338));
      ArrayList<TimePeriodValuesCollection> arrayList0 = new ArrayList<TimePeriodValuesCollection>();
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) "", (double) (-3338));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1317.4651, 1.0);
      DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, 1.0, 119.21848, 2, "\"WwS7voaft~");
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, 1);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ArrayList<YIntervalSeriesCollection> arrayList0 = new ArrayList<YIntervalSeriesCollection>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset1 = new DefaultBoxAndWhiskerCategoryDataset();
      arrayList0.remove((Object) defaultBoxAndWhiskerCategoryDataset1);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DatasetUtilities.iterateXYRangeBounds(xYBarDataset0);
      DatasetUtilities.isEmptyOrNull((XYDataset) xYBarDataset0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      DatasetUtilities.iterateXYRangeBounds(defaultBoxAndWhiskerXYDataset0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 345.3440230631013;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 345.3440230631013;
      doubleArray2[1] = 345.3440230631013;
      doubleArray2[2] = Double.NaN;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 345.3440230631013;
      doubleArray2[6] = 345.3440230631013;
      doubleArray2[7] = 0.0;
      doubleArray2[8] = (-2327.55);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.chart.event.DatasetChangeInfo", "org.jfree.chart.event.DatasetChangeInfo", doubleArray0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) linkedList0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, false);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      DatasetUtilities.findRangeBounds((XYDataset) defaultWindDataset0);
      DatasetUtilities.findMaximumDomainValue(defaultWindDataset0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(1.0);
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      Float float1 = new Float(436.92645F);
      linkedList1.add(float1);
      MockDate mockDate0 = new MockDate((-1079L));
      TimeZone timeZone0 = TimeZone.getDefault();
      Hour hour0 = new Hour(mockDate0, timeZone0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, 1415, hour0);
      mockDate0.toInstant();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, (List) linkedList1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      stack0.add(integer0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) stack0, true);
      DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null, "You are trying to add data where the time period class is ", "You are trying to add data where the time period class is ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultTableXYDataset0, 1060.6131254);
      defaultTableXYDataset0.equals(xYBarDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, true);
      DatasetUtilities.isEmptyOrNull((PieDataset) null);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      XYBarDataset xYBarDataset1 = new XYBarDataset(xYSeriesCollection0, 1060.6131254);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ArrayList<YIntervalSeriesCollection> arrayList0 = new ArrayList<YIntervalSeriesCollection>();
      ArrayList<YIntervalSeriesCollection> arrayList1 = new ArrayList<YIntervalSeriesCollection>();
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      arrayList1.remove((Object) xIntervalSeriesCollection0);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetUtilities.findDomainBounds((XYDataset) yIntervalSeriesCollection0, (List) arrayList1, true);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      stack0.add(defaultMultiValueCategoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultMultiValueCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      Week week0 = new Week();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(week0, "Null 'xRange' argument", "Null 'xRange' argument");
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(12, 3237);
      TimePeriodValues timePeriodValues2 = timePeriodValues1.createCopy((-1099), 12);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues2);
      timePeriodValues2.removePropertyChangeListener((PropertyChangeListener) null);
      DatasetUtilities.findRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      DatasetUtilities.findDomainBounds((XYDataset) timePeriodValuesCollection0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) "Null 'xRange' argument");
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) week0, 553.436);
      SpreadsheetDate spreadsheetDate0 = null;
      try {
        spreadsheetDate0 = new SpreadsheetDate(53, 1, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      DatasetUtilities.iterateXYRangeBounds(defaultBoxAndWhiskerXYDataset0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 1343);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      defaultBoxAndWhiskerCategoryDataset0.clone();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DatasetUtilities.findRangeBounds((XYDataset) defaultXYZDataset0);
      DatasetUtilities.findMaximumDomainValue(defaultXYZDataset0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(1.0);
      linkedList0.add(float0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultXYZDataset0, (List) linkedList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultXYZDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) "TAP&/3~iz_QO1");
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DatasetUtilities.iterateXYRangeBounds(defaultXYDataset0);
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) null, 781.4780632, 954437177);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DatasetUtilities.findMinimumDomainValue(defaultXYDataset0);
      Short short0 = new Short((short)1063);
      Double double0 = new Double(Double.POSITIVE_INFINITY);
      Number[][] numberArray0 = new Number[3][5];
      Number[] numberArray1 = new Number[3];
      numberArray1[0] = (Number) double0;
      numberArray1[1] = (Number) short0;
      numberArray1[2] = null;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[10];
      numberArray0[1] = numberArray2;
      ArrayList<YIntervalSeriesCollection> arrayList0 = new ArrayList<YIntervalSeriesCollection>();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      arrayList0.add(yIntervalSeriesCollection0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (int) (short)1063);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "org.jfree.data.category.DefaultIntervalCategoryDataset", (KeyedValues) pieDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds(categoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.YIntervalSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      Short short0 = new Short((short)1063);
      Double double0 = new Double(Double.POSITIVE_INFINITY);
      Number[][] numberArray0 = new Number[4][5];
      Number[] numberArray1 = new Number[9];
      numberArray1[0] = (Number) short0;
      numberArray1[1] = (Number) double0;
      numberArray1[2] = (Number) double0;
      numberArray1[3] = (Number) double0;
      numberArray1[4] = (Number) short0;
      numberArray1[5] = (Number) short0;
      numberArray1[6] = (Number) short0;
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      numberArray1[7] = (Number) integer0;
      numberArray1[8] = (Number) short0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[6];
      numberArray2[0] = (Number) double0;
      numberArray2[1] = (Number) short0;
      numberArray2[2] = (Number) double0;
      numberArray2[3] = (Number) short0;
      numberArray2[4] = (Number) double0;
      numberArray2[5] = (Number) short0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[3];
      numberArray3[0] = (Number) short0;
      numberArray3[1] = (Number) integer0;
      numberArray3[2] = (Number) short0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[0];
      numberArray0[3] = numberArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.category.DefaultIntervalCategoryDataset", "Requires 'samples' > 1", numberArray0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      Stack<Integer> stack0 = new Stack<Integer>();
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) null, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      Short short0 = new Short((short)1063);
      Double double0 = new Double(Double.POSITIVE_INFINITY);
      Number[] numberArray0 = new Number[3];
      numberArray0[1] = (Number) short0;
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) "&");
      DefaultXYDataset defaultXYDataset1 = new DefaultXYDataset();
      DatasetUtilities.iterateXYRangeBounds(defaultXYDataset1);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-228.46927454074418);
      doubleArray0[2] = (-228.46927454074418);
      LineFunction2D lineFunction2D0 = new LineFunction2D((-3121.438), 154.7);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-985.338), (-985.338), 2958465, 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, (-890), (-890));
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0, (double) (-890));
      Range.combine((Range) null, (Range) null);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      ArrayList<YIntervalSeriesCollection> arrayList0 = new ArrayList<YIntervalSeriesCollection>();
      arrayList0.remove((Object) xYSeriesCollection0);
      YIntervalSeriesCollection yIntervalSeriesCollection1 = new YIntervalSeriesCollection();
      arrayList0.add(yIntervalSeriesCollection1);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.YIntervalSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1317.4651, 1317.4651);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, (-228.46927454074418), 1.0, 10, "\"WwS7voaft~");
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, 1.0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ArrayList<YIntervalSeriesCollection> arrayList0 = new ArrayList<YIntervalSeriesCollection>();
      arrayList0.remove((Object) xYSeries0);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      arrayList0.add(yIntervalSeriesCollection0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset1 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset1);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(yIntervalSeriesCollection0, arrayList0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.YIntervalSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, (-890), (-890));
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0, (double) (-890));
      Range.combine((Range) null, (Range) null);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      ArrayList<YIntervalSeriesCollection> arrayList0 = new ArrayList<YIntervalSeriesCollection>();
      arrayList0.remove((Object) null);
      arrayList0.add(yIntervalSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.YIntervalSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DatasetUtilities.findRangeBounds((XYDataset) defaultXYZDataset0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      Week week0 = new Week(2172, 2172);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(week0, "Negative 'maximum' argument.", "Negative 'maximum' argument.");
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(2122113674, (-1099));
      timePeriodValues1.add((TimePeriod) week0, (double) 1);
      TimePeriodValues timePeriodValues2 = timePeriodValues0.createCopy(2172, 2122113674);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues2);
      DatasetUtilities.findRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      DatasetUtilities.findDomainBounds((XYDataset) defaultXYZDataset0);
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, (List) arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'columnKey' argument.
         //
         verifyException("org.jfree.data.gantt.TaskSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      DatasetUtilities.iterateXYRangeBounds(defaultBoxAndWhiskerXYDataset0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      DatasetUtilities.findMaximumDomainValue(defaultBoxAndWhiskerXYDataset0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 3030);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1317.4651, 1317.4651);
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-3358.3932604896);
      doubleArray1[1] = 1724.2104101449581;
      doubleArray1[2] = 1724.2104101449581;
      doubleArray1[3] = 1317.4651;
      doubleArray1[4] = 976.000122;
      doubleArray1[5] = 976.000122;
      doubleArray1[6] = 1060.6131254;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = Double.NEGATIVE_INFINITY;
      doubleArray3[1] = (-3358.3932604896);
      doubleArray3[2] = 1317.4651;
      doubleArray3[3] = 1317.4651;
      doubleArray3[4] = 1317.4651;
      doubleArray3[5] = 1317.4651;
      doubleArray3[6] = 3946.68702425179;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("\"WwS7voaft~", "\"WwS7voaft~", doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      keyToGroupMap0.mapKeyToGroup(1317.4651, 1317.4651);
      DatasetUtilities.createCategoryDataset("org.jfree.data.general.DefaultValueDataset", "org.jfree.data.general.DefaultValueDataset", doubleArray0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset((Connection) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // A connection must be supplied.
         //
         verifyException("org.jfree.data.jdbc.JDBCPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DatasetUtilities.findMinimumDomainValue(defaultXYDataset0);
      Short short0 = new Short((short)18);
      Double double0 = new Double(0.8);
      Number[][] numberArray0 = new Number[1][0];
      Number[] numberArray1 = new Number[9];
      numberArray1[0] = (Number) double0;
      numberArray1[1] = (Number) double0;
      numberArray1[2] = null;
      numberArray1[3] = null;
      numberArray1[4] = null;
      numberArray1[5] = (Number) double0;
      numberArray1[6] = (Number) short0;
      numberArray1[7] = null;
      numberArray1[8] = null;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "&", numberArray0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Comparable<DefaultStatisticalCategoryDataset> comparable0 = null;
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DatasetUtilities.findMinimumDomainValue(defaultXYDataset0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      DatasetUtilities.findMaximumDomainValue(defaultXYDataset0);
      DatasetUtilities.findCumulativeRangeBounds(defaultMultiValueCategoryDataset0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultXYDataset0, (List) arrayList0, true);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      DatasetUtilities.findRangeBounds((XYDataset) defaultIntervalXYDataset0, true);
      DatasetUtilities.findDomainBounds((XYDataset) defaultIntervalXYDataset0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      int int0 = (-99);
      int int1 = 763;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-99), 763);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      double[][] doubleArray0 = new double[4][8];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 2211.0;
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = 1.5;
      doubleArray1[3] = (-377.0);
      doubleArray1[4] = (-794.416518938662);
      doubleArray1[5] = (-1625.2430118519528);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-377.0);
      doubleArray2[1] = (-377.0);
      doubleArray2[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (-1625.2430118519528);
      doubleArray3[1] = (-1.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = 2211.0;
      doubleArray4[1] = 2211.0;
      doubleArray4[2] = Double.NEGATIVE_INFINITY;
      doubleArray4[3] = (-377.0);
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.event.DatasetChangeEvent", "org.jfree.data.event.DatasetChangeEvent", doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (Comparable) 2211.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DatasetUtilities.findRangeBounds((XYDataset) defaultXYZDataset0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      Week week0 = new Week(2172, 2172);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(week0, "Null 'xRange' argument", "Null 'xRange' argument");
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(2122113674, (-1099));
      timePeriodValues1.add((TimePeriod) week0, (double) 1);
      TimePeriodValues timePeriodValues2 = timePeriodValues0.createCopy(2172, 2122113674);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues2);
      DatasetUtilities.findRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      DatasetUtilities.findDomainBounds((XYDataset) defaultXYZDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal((TableXYDataset) null, 19);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Comparable<DefaultStatisticalCategoryDataset> comparable0 = null;
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      LineFunction2D lineFunction2D0 = new LineFunction2D(1.0, 1.0);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-1424.011), 1.0, (-2145073453), (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-228.46927454074418);
      doubleArray0[2] = (-228.46927454074418);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      int int0 = 1995;
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 84.646664890608, 1.0, 1995, (-228.46927454074418));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      double double0 = 1.0;
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 2, 2);
      DatasetUtilities.findMinimumDomainValue(xYSeriesCollection0);
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      DatasetUtilities.iterateToFindDomainBounds(xYSeriesCollection0, linkedList0, false);
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getStartValue((Comparable) "\"WwS7voaft~", (Comparable) "\"WwS7voaft~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: \"WwS7voaft~
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, true);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.getColumnCount();
      DatasetUtilities.findMinimumStackedRangeValue(defaultMultiValueCategoryDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (double) 0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      yIntervalSeriesCollection0.getDomainOrder();
      yIntervalSeriesCollection0.hasListener((EventListener) null);
      Number number0 = DatasetUtilities.findMinimumDomainValue(yIntervalSeriesCollection0);
      assertNull(number0);
      
      Number[][] numberArray0 = new Number[3][3];
      Number[] numberArray1 = new Number[7];
      numberArray1[0] = null;
      Byte byte0 = new Byte((byte) (-1));
      numberArray1[1] = (Number) byte0;
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      numberArray1[2] = (Number) integer0;
      numberArray1[3] = null;
      numberArray1[4] = null;
      Short short0 = new Short((byte) (-1));
      numberArray1[5] = (Number) short0;
      numberArray1[6] = null;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[5];
      numberArray2[0] = (Number) short0;
      numberArray2[1] = null;
      ArrayList<YIntervalSeriesCollection> arrayList0 = new ArrayList<YIntervalSeriesCollection>();
      arrayList0.add(yIntervalSeriesCollection0);
      GanttCategoryDataset ganttCategoryDataset0 = null;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, (-1709), (-1709));
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      Minute.parseMinute("#}Upk:pY:TY");
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("#}Upk:pY:TY");
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, true);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Comparable<DefaultIntervalXYDataset>[] comparableArray0 = (Comparable<DefaultIntervalXYDataset>[]) Array.newInstance(Comparable.class, 0);
      Comparable<IntervalXYDelegate>[] comparableArray1 = (Comparable<IntervalXYDelegate>[]) Array.newInstance(Comparable.class, 1);
      comparableArray1[0] = (Comparable<IntervalXYDelegate>) null;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray1, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) regularTimePeriod0, (KeyedValues) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowData' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, (-890), (-890));
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0, (double) (-890));
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      double[][] doubleArray0 = new double[4][7];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) (-890);
      doubleArray2[1] = (double) (-890);
      doubleArray2[2] = (double) (-890);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(">,~SHWL", "JlN[LkIxitIw9", doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      keyToGroupMap0.mapKeyToGroup("JlN[LkIxitIw9", (-890.0));
      Long long0 = new Long((-4865L));
      keyToGroupMap0.equals((Object) null);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) null, (Comparable[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1317.4651, 1317.4651);
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-3358.3932604896);
      doubleArray1[1] = (-3358.3932604896);
      doubleArray1[2] = 1724.2104101449581;
      doubleArray1[3] = 1317.4651;
      doubleArray1[4] = 976.000122;
      doubleArray1[5] = 976.000122;
      doubleArray1[6] = 1060.6131254;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = Double.NEGATIVE_INFINITY;
      doubleArray3[1] = (-3358.3932604896);
      doubleArray3[2] = 1317.4651;
      doubleArray3[3] = 1317.4651;
      doubleArray3[4] = 1317.4651;
      doubleArray3[5] = 1317.4651;
      doubleArray3[6] = 3946.68702425179;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("\"WwS7voaft~", "\"WwS7voaft~", doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      keyToGroupMap0.mapKeyToGroup(1317.4651, 1317.4651);
      DatasetUtilities.createCategoryDataset("org.jfree.data.general.DefaultValueDataset", "org.jfree.data.general.DefaultValueDataset", doubleArray0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset((Connection) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // A connection must be supplied.
         //
         verifyException("org.jfree.data.jdbc.JDBCPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, (-890), (-890));
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0, (double) (-890));
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      double[][] doubleArray0 = new double[4][7];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) (-890);
      doubleArray2[1] = (double) (-890);
      doubleArray2[2] = (double) (-890);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (double) (-890);
      defaultStatisticalCategoryDataset0.getColumnIndex((-890.0));
      doubleArray3[1] = (double) (-890);
      doubleArray3[2] = (double) (-890);
      doubleArray0[2] = doubleArray3;
      Long long0 = new Long((-890));
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      keyToGroupMap0.equals((Object) null);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0, keyToGroupMap0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) null, (Comparable[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      yIntervalSeriesCollection0.getDomainOrder();
      yIntervalSeriesCollection0.hasListener((EventListener) null);
      DatasetUtilities.findMinimumDomainValue(yIntervalSeriesCollection0);
      Number[][] numberArray0 = new Number[3][3];
      Number[] numberArray1 = new Number[7];
      numberArray1[0] = null;
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      numberArray1[2] = (Number) integer0;
      numberArray1[3] = null;
      numberArray1[4] = null;
      numberArray1[6] = null;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[5];
      numberArray2[1] = null;
      numberArray2[4] = null;
      numberArray0[1] = numberArray2;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DatasetUtilities.findMinimumDomainValue(defaultXYDataset0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      defaultMultiValueCategoryDataset0.removeChangeListener(xYTaskDataset0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      Double double0 = new Double(339.388988729);
      ArrayList<YIntervalSeriesCollection> arrayList0 = new ArrayList<YIntervalSeriesCollection>();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      arrayList0.add(yIntervalSeriesCollection0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      arrayList0.remove((Object) categoryTableXYDataset0);
      YIntervalSeriesCollection yIntervalSeriesCollection1 = new YIntervalSeriesCollection();
      arrayList0.add(yIntervalSeriesCollection1);
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 339.388988729;
      doubleArray1[1] = 339.388988729;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[11];
      doubleArray2[0] = 339.388988729;
      doubleArray2[1] = 339.388988729;
      doubleArray2[2] = 339.388988729;
      doubleArray2[3] = 339.388988729;
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      ArrayList<YIntervalSeriesCollection> arrayList0 = new ArrayList<YIntervalSeriesCollection>();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      arrayList0.remove((Object) yIntervalSeriesCollection0);
      arrayList0.add(yIntervalSeriesCollection0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (-244));
      DatasetUtilities.isEmptyOrNull(pieDataset0);
      DatasetUtilities.iterateXYRangeBounds(yIntervalSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, (KeyToGroupMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1317.4651, 1317.4651);
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-3358.3932604896);
      doubleArray1[1] = (-3358.3932604896);
      doubleArray1[2] = 1724.2104101449581;
      doubleArray1[3] = 1317.4651;
      doubleArray1[4] = 976.000122;
      doubleArray1[5] = 976.000122;
      doubleArray1[6] = 1060.6131254;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      ArrayList<TimePeriodValuesCollection> arrayList0 = new ArrayList<TimePeriodValuesCollection>();
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      arrayList0.add(timePeriodValuesCollection0);
      TimePeriodValuesCollection timePeriodValuesCollection1 = new TimePeriodValuesCollection();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(timePeriodValuesCollection1, (List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DatasetUtilities.findMinimumDomainValue(defaultXYDataset0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      DatasetUtilities.iterateToFindDomainBounds(defaultXYDataset0, arrayList0, true);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      Minute.parseMinute("&m.0)F6Xm^NYA`G-");
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, true);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Comparable<XYIntervalSeriesCollection>[] comparableArray0 = (Comparable<XYIntervalSeriesCollection>[]) Array.newInstance(Comparable.class, 3);
      comparableArray0[0] = (Comparable<XYIntervalSeriesCollection>) null;
      comparableArray0[1] = (Comparable<XYIntervalSeriesCollection>) null;
      comparableArray0[2] = (Comparable<XYIntervalSeriesCollection>) null;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1317.4651, 1317.4651);
      String string0 = "\"WwS7voaft~";
      double double0 = 1.0;
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, (-228.46927454074418), 1.0, 1, "\"WwS7voaft~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DatasetUtilities.findRangeBounds((XYDataset) defaultXYZDataset0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultXYZDataset0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DatasetUtilities.findMinimumDomainValue(defaultXYDataset0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-176), 2146939662);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingGanttCategoryDataset0, (-176));
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      DatasetUtilities.iterateXYRangeBounds(defaultXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultXYDataset0, (List) null, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      String string0 = "";
      DatasetGroup datasetGroup0 = new DatasetGroup("");
      defaultTableXYDataset0.setGroup(datasetGroup0);
      int int0 = (-3338);
      DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, (-3338));
      DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, true);
      ArrayDeque<DefaultOHLCDataset> arrayDeque0 = new ArrayDeque<DefaultOHLCDataset>((-3338));
      ArrayList<TimePeriodValuesCollection> arrayList0 = new ArrayList<TimePeriodValuesCollection>();
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      arrayList0.add(timePeriodValuesCollection0);
      TimePeriodValuesCollection timePeriodValuesCollection1 = new TimePeriodValuesCollection();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "", 0.0);
      DatasetUtilities.isEmptyOrNull(pieDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection1);
      Number[][] numberArray0 = new Number[9][6];
      Number[] numberArray1 = new Number[5];
      Date[] dateArray0 = new Date[7];
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("");
      int int1 = 0;
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getXDate((-3338), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DatasetUtilities.findMinimumDomainValue(defaultXYDataset0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      DatasetUtilities.iterateToFindDomainBounds(timePeriodValuesCollection0, arrayList0, false);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DatasetUtilities.findRangeBounds((XYDataset) defaultXYZDataset0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1L));
      xYSeriesCollection0.indexOf(fixedMillisecond0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, (-890), (-890));
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getDomainBounds(false);
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, true);
      DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 17);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0, false);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      ArrayList<YIntervalSeriesCollection> arrayList0 = new ArrayList<YIntervalSeriesCollection>();
      arrayList0.stream();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      arrayList0.add(yIntervalSeriesCollection0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      int int0 = 0;
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, 0);
      Vector<DefaultStatisticalCategoryDataset> vector0 = new Vector<DefaultStatisticalCategoryDataset>(0);
      vector0.trimToSize();
      Vector<DefaultStatisticalCategoryDataset> vector1 = new Vector<DefaultStatisticalCategoryDataset>(vector0);
      vector0.addAll((Collection<? extends DefaultStatisticalCategoryDataset>) vector1);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) vector0, false);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, false);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, true);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (double) 0);
      String string0 = "Rz";
      String string1 = "";
      JDBCXYDataset jDBCXYDataset0 = null;
      try {
        jDBCXYDataset0 = new JDBCXYDataset("Rz", "", "", "");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetGroup datasetGroup0 = new DatasetGroup("");
      defaultTableXYDataset0.setGroup(datasetGroup0);
      DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, (-3338));
      DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, true);
      ArrayDeque<DefaultOHLCDataset> arrayDeque0 = new ArrayDeque<DefaultOHLCDataset>((-3338));
      ArrayList<TimePeriodValuesCollection> arrayList0 = new ArrayList<TimePeriodValuesCollection>();
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      arrayList0.add(timePeriodValuesCollection0);
      TimePeriodValuesCollection timePeriodValuesCollection1 = new TimePeriodValuesCollection();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(timePeriodValuesCollection0, arrayList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.TimePeriodValuesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getDomainBounds(false);
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, true);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, true);
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      DatasetUtilities.isEmptyOrNull((PieDataset) jDBCPieDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[8];
      doubleArray1[2] = (-3358.3932604896);
      doubleArray1[4] = (-3358.3932604896);
      doubleArray1[5] = 1724.2104101449581;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "a=^b", doubleArray0);
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultXYDataset0, (List) linkedList0, range0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      double[][] doubleArray0 = new double[5][0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1060.6131254;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = 1724.2104101449581;
      doubleArray1[3] = 1724.2104101449581;
      doubleArray1[4] = 1060.6131254;
      doubleArray1[5] = (-3358.3932604896);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = 1060.6131254;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (-3358.3932604896);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = (-1.0);
      doubleArray4[1] = 1724.2104101449581;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = 1060.6131254;
      doubleArray0[4] = doubleArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'rowKeys' argument.", "", doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      keyToGroupMap0.getGroupIndex(1060.6131254);
      keyToGroupMap0.mapKeyToGroup(1724.2104101449581, "Null 'rowKeys' argument.");
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("#}Upk:pY:TY", "#}Upk:pY:TY", doubleArray0);
      DatasetUtilities.iterateRangeBounds(categoryDataset1, false);
      DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 2);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DatasetUtilities.findMinimumDomainValue(defaultXYDataset0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, 2402);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCXYDataset jDBCXYDataset0 = null;
      try {
        jDBCXYDataset0 = new JDBCXYDataset(connection0, "TAP&/3~iz_QO1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetGroup datasetGroup0 = new DatasetGroup("");
      defaultTableXYDataset0.setGroup(datasetGroup0);
      int int0 = (-3338);
      DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, (-3338));
      DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, true);
      ArrayDeque<DefaultOHLCDataset> arrayDeque0 = new ArrayDeque<DefaultOHLCDataset>();
      TimePeriodValuesCollection timePeriodValuesCollection0 = null;
      ArrayList<TimePeriodValuesCollection> arrayList0 = new ArrayList<TimePeriodValuesCollection>();
      TimePeriodValuesCollection timePeriodValuesCollection1 = new TimePeriodValuesCollection();
      arrayList0.add(timePeriodValuesCollection1);
      arrayList0.removeAll(arrayDeque0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getDomainLowerBound(false);
      timePeriodValuesCollection1.getDomainBounds(true);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.iterateCategoryRangeBounds(taskSeriesCollection0, false);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      DatasetUtilities.iterateDomainBounds((XYDataset) vectorSeriesCollection0);
      Float float0 = null;
      linkedList0.add((Float) null);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) vectorSeriesCollection0, (List) linkedList0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, (-890), 9999);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0, (double) 9999);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      double[][] doubleArray0 = new double[4][7];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 9999;
      doubleArray2[1] = (double) 9999;
      doubleArray2[2] = (double) 9999;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (double) (-890);
      doubleArray3[1] = (double) 9999;
      doubleArray3[2] = (double) (-890);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = (double) (-890);
      doubleArray4[1] = (double) 9999;
      doubleArray0[3] = doubleArray4;
      DatasetUtilities.createCategoryDataset("~raPKs^t- n'U", "qCPg.vh/X", doubleArray0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getDomainBounds(false);
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, true);
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal((TableXYDataset) null, 17);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getDomainOrder();
      categoryTableXYDataset0.getDomainBounds(false);
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, true);
      categoryTableXYDataset0.clone();
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      DatasetUtilities.iterateXYRangeBounds(defaultBoxAndWhiskerXYDataset0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-1829.985));
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      ArrayList<YIntervalSeriesCollection> arrayList0 = new ArrayList<YIntervalSeriesCollection>();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetUtilities.iterateXYRangeBounds(defaultXYDataset0);
      DatasetUtilities.findMaximumDomainValue(defaultXYDataset0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, false);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, true);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findMinimumStackedRangeValue(defaultMultiValueCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetGroup datasetGroup0 = new DatasetGroup("");
      defaultTableXYDataset0.setGroup(datasetGroup0);
      DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, (-3338));
      double[][] doubleArray0 = new double[9][8];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) (-3338);
      doubleArray2[1] = (double) (-3338);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = (double) (-3338);
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = (double) (-3338);
      doubleArray5[3] = (double) (-3338);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      doubleArray6[0] = (double) (-3338);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = 0.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[5];
      doubleArray8[0] = 0.0;
      doubleArray8[1] = (double) (-3338);
      doubleArray8[2] = 2278.956749479222;
      doubleArray8[3] = 0.0;
      doubleArray8[4] = (-2.0);
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[0];
      doubleArray0[8] = doubleArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultIntervalXYDataset0, 1317.4651);
      taskSeriesCollection0.removeChangeListener(xYBarDataset0);
      TaskSeries taskSeries0 = new TaskSeries("");
      taskSeriesCollection0.add(taskSeries0);
      DatasetUtilities.iterateCategoryRangeBounds(taskSeriesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DatasetUtilities.findMinimumDomainValue(defaultXYDataset0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, (-176));
      DatasetUtilities.isEmptyOrNull(pieDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultXYDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultXYDataset0, false);
      DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      int int0 = 273;
      ArrayList<TimePeriodValuesCollection> arrayList0 = new ArrayList<TimePeriodValuesCollection>(273);
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, false);
      double double0 = new Integer(273);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getDomainBounds(false);
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, true);
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.remove((Number) null, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, 2146238881);
      MockDate mockDate0 = new MockDate(2146238881, 2, 1);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("org.jfree.data.general.DatasetUtilities", "", (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      DatasetUtilities.findMaximumDomainValue(xYSeriesCollection0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Byte byte0 = new Byte((byte) (-117));
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      Short short0 = new Short((byte) (-1));
      Double double0 = new Double((byte) (-1));
      Number[][] numberArray0 = new Number[0][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "", numberArray0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1317.4651, 712.76);
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-3358.3932604896);
      doubleArray1[1] = (-3358.3932604896);
      doubleArray1[2] = 1724.2104101449581;
      doubleArray1[3] = 712.76;
      doubleArray1[4] = 976.000122;
      doubleArray1[5] = 976.000122;
      doubleArray1[6] = 1060.6131254;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = Double.NEGATIVE_INFINITY;
      doubleArray3[1] = (-3358.3932604896);
      doubleArray3[2] = 712.76;
      doubleArray3[3] = 1317.4651;
      doubleArray3[4] = 1317.4651;
      doubleArray3[5] = 1317.4651;
      doubleArray3[6] = 3946.68702425179;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("\"WwS7voaft~", "\"WwS7voaft~", doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      keyToGroupMap0.mapKeyToGroup(1317.4651, 1317.4651);
      Long long0 = new Long((-4865L));
      keyToGroupMap0.equals(long0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) null, (Comparable[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Stack<Integer> stack0 = new Stack<Integer>();
      boolean boolean0 = true;
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) stack0, true);
      String string0 = ";cM(\\OW{:f~%";
      Number[][] numberArray0 = new Number[3][3];
      Number[] numberArray1 = new Number[7];
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getMeanValue(0, 1636);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1636, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1317.4651, 1317.4651);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, (-228.46927454074418), 1.0, 10, "\"WwS7voaft~");
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, 1.0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 10, 299);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(slidingGanttCategoryDataset0, tableOrder0, 10);
      DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYBarDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) xYBarDataset0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DatasetUtilities.findMinimumDomainValue(defaultXYDataset0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      ArrayList<YIntervalSeriesCollection> arrayList0 = new ArrayList<YIntervalSeriesCollection>();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, (-176));
      DatasetUtilities.isEmptyOrNull(pieDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultXYDataset0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      int int0 = 273;
      ArrayList<TimePeriodValuesCollection> arrayList0 = new ArrayList<TimePeriodValuesCollection>(273);
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      DatasetUtilities.isEmptyOrNull((XYDataset) categoryTableXYDataset0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      TreeSet<TimePeriodValuesCollection> treeSet0 = new TreeSet<TimePeriodValuesCollection>();
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      int int1 = 2028;
      DatasetUtilities.iterateDomainBounds((XYDataset) timePeriodValuesCollection0);
      Range range0 = Range.expandToInclude((Range) null, 273);
      Range.combine(range0, (Range) null);
      int int2 = 2144474956;
      int int3 = (-1063);
      Year year0 = new Year();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2144474956, (-1063), year0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, 2146238881);
      int int0 = 2;
      MockDate mockDate0 = new MockDate(2146238881, 2, 1);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(1, "", (-1), 147, (-1715), (-1715), 2, 0, 435, (-872), 435, 2146238881, (-2143922315));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -1
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      yIntervalSeriesCollection0.getDomainOrder();
      yIntervalSeriesCollection0.hasListener((EventListener) null);
      DatasetUtilities.findMinimumDomainValue(yIntervalSeriesCollection0);
      Number[][] numberArray0 = new Number[3][3];
      Number[] numberArray1 = new Number[7];
      numberArray1[0] = null;
      Byte byte0 = new Byte((byte) (-1));
      numberArray1[1] = (Number) byte0;
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      numberArray1[2] = (Number) integer0;
      numberArray1[3] = null;
      numberArray1[4] = null;
      Short short0 = new Short((byte) (-1));
      numberArray1[5] = (Number) short0;
      numberArray1[6] = null;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[5];
      numberArray2[0] = (Number) short0;
      numberArray2[1] = null;
      numberArray2[2] = (Number) short0;
      numberArray2[3] = (Number) short0;
      numberArray2[4] = null;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[7];
      numberArray3[0] = null;
      numberArray3[1] = (Number) byte0;
      numberArray3[2] = (Number) integer0;
      numberArray3[3] = (Number) short0;
      Double double0 = new Double(345.3440230631013);
      numberArray3[4] = (Number) double0;
      numberArray3[5] = (Number) byte0;
      numberArray3[6] = null;
      numberArray0[2] = numberArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("P2ureK", "P2ureK", numberArray0);
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertEquals(299.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DatasetUtilities.findMinimumDomainValue(defaultXYDataset0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      int int0 = (-176);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      ArrayList<YIntervalSeriesCollection> arrayList0 = new ArrayList<YIntervalSeriesCollection>();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      arrayList0.add(yIntervalSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) arrayList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.YIntervalSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      int int0 = 273;
      ArrayList<TimePeriodValuesCollection> arrayList0 = new ArrayList<TimePeriodValuesCollection>(273);
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      DatasetUtilities.isEmptyOrNull((XYDataset) categoryTableXYDataset0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      Comparable<Short> comparable0 = null;
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'columnKey' argument.
         //
         verifyException("org.jfree.data.gantt.TaskSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      timeSeriesCollection0.hasListener(xYDatasetTableModel0);
      timeSeriesCollection0.removeChangeListener(xYDatasetTableModel0);
      JTable jTable0 = new JTable(2, 2);
      xYDatasetTableModel0.addTableModelListener(jTable0);
      DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0);
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DatasetUtilities.findMinimumDomainValue(defaultXYDataset0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(timePeriodValuesCollection0, arrayList0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) null, (KeyedValues) defaultKeyedValues0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      boolean boolean0 = true;
      DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, true);
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, true);
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds((CategoryDataset) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DatasetUtilities.findMinimumDomainValue(defaultXYDataset0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(taskSeriesCollection0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNull(range0);
      
      double double0 = 753.98658153617;
      double double1 = 0.0;
      NormalDistributionFunction2D normalDistributionFunction2D0 = null;
      try {
        normalDistributionFunction2D0 = new NormalDistributionFunction2D(753.98658153617, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'std' > 0.
         //
         verifyException("org.jfree.data.function.NormalDistributionFunction2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Stack<Integer> stack0 = new Stack<Integer>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) stack0, false);
      String string0 = ";$cM(\\OW{:f~%";
      String string1 = null;
      Number[][] numberArray0 = new Number[3][3];
      Number[] numberArray1 = new Number[7];
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      int int0 = 0;
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getMeanValue(0, 1636);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1636, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      timeTableXYDataset0.getItemCount((-1));
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      timeTableXYDataset0.setSelectionState(xYSeriesCollection0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, 1698.0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) xYSeriesCollection0);
      double[][] doubleArray0 = new double[9][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (-1);
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 1698.0;
      doubleArray1[3] = (double) (-1);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 1698.0;
      doubleArray2[1] = 1698.0;
      doubleArray2[2] = 1698.0;
      doubleArray2[3] = (double) (-1);
      doubleArray2[4] = 1698.0;
      doubleArray2[5] = (double) (-1);
      doubleArray2[6] = (-962.770140139657);
      doubleArray2[7] = 1698.0;
      doubleArray2[8] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = 1698.0;
      doubleArray3[2] = 502.0670558594;
      doubleArray3[3] = 1698.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = (double) (-1);
      doubleArray4[1] = (-962.770140139657);
      doubleArray4[2] = (double) (-1);
      doubleArray4[3] = (-962.770140139657);
      doubleArray4[4] = 502.0670558594;
      doubleArray4[5] = (-962.770140139657);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = 502.0670558594;
      doubleArray5[1] = 935.31;
      doubleArray5[2] = 1698.0;
      doubleArray5[3] = 502.0670558594;
      doubleArray5[4] = 1698.0;
      doubleArray5[5] = 1698.0;
      doubleArray5[6] = (double) 0;
      doubleArray5[7] = (-962.770140139657);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = (double) 0;
      doubleArray6[1] = 502.0670558594;
      doubleArray6[2] = 1698.0;
      doubleArray6[3] = 502.0670558594;
      doubleArray6[4] = 502.0670558594;
      doubleArray6[5] = (double) 0;
      doubleArray6[6] = (-962.770140139657);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      doubleArray7[0] = (double) 0;
      doubleArray7[1] = 502.0670558594;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[9];
      doubleArray8[0] = (-962.770140139657);
      doubleArray8[1] = 935.31;
      doubleArray8[2] = (double) 0;
      doubleArray8[3] = 502.0670558594;
      doubleArray8[4] = (double) (-1);
      doubleArray8[5] = 502.0670558594;
      doubleArray8[6] = 1698.0;
      doubleArray8[7] = 935.31;
      doubleArray8[8] = 502.0670558594;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[8];
      doubleArray9[0] = (double) (-1);
      doubleArray9[1] = 1698.0;
      doubleArray9[2] = 0.0;
      doubleArray9[3] = 1496.7670315;
      doubleArray9[4] = (-1.0);
      doubleArray9[5] = (double) 0;
      doubleArray9[6] = (double) (-1);
      doubleArray9[7] = 1698.0;
      doubleArray0[8] = doubleArray9;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "}z7<ibn04=L)E", doubleArray0);
      assertNotNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      int int0 = (-1);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(taskSeriesCollection0, (-1470), (-1470));
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(slidingCategoryDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      double[][] doubleArray0 = new double[8][8];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 671.0;
      doubleArray1[3] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 671.0;
      doubleArray2[2] = (-293.5615);
      doubleArray2[3] = 671.0;
      doubleArray2[4] = Double.NaN;
      doubleArray2[5] = Double.NEGATIVE_INFINITY;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = Double.NaN;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 236.0;
      doubleArray3[1] = Double.NaN;
      doubleArray3[2] = 671.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = 236.0;
      doubleArray4[1] = 0.5;
      doubleArray4[2] = Double.NaN;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = Double.NaN;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = Double.NaN;
      doubleArray5[1] = 0.5;
      doubleArray5[2] = 671.0;
      doubleArray5[3] = (-339.5362179);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = 236.0;
      doubleArray6[1] = (-293.5615);
      doubleArray6[2] = 671.0;
      doubleArray6[3] = (-339.5362179);
      doubleArray6[4] = 0.0;
      doubleArray6[5] = Double.NEGATIVE_INFINITY;
      doubleArray6[6] = 0.5;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = Double.NEGATIVE_INFINITY;
      doubleArray7[2] = 0.0;
      doubleArray7[3] = 671.0;
      doubleArray7[4] = Double.NaN;
      doubleArray7[5] = Double.NaN;
      doubleArray7[6] = Double.NaN;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[4];
      doubleArray8[0] = 0.0;
      doubleArray8[1] = 0.0;
      doubleArray8[2] = 0.5;
      doubleArray8[3] = (-293.5615);
      doubleArray0[7] = doubleArray8;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("'mcFlR$", "'mcFlR$", doubleArray0);
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      double[][] doubleArray0 = new double[8][2];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = (-1192.20241963);
      doubleArray1[2] = (-536.9982587);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (-536.9982587);
      doubleArray3[1] = (-1192.20241963);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = Double.POSITIVE_INFINITY;
      doubleArray4[1] = (-536.9982587);
      doubleArray4[2] = (-536.9982587);
      doubleArray4[3] = (-536.9982587);
      doubleArray4[4] = Double.POSITIVE_INFINITY;
      doubleArray4[5] = (-536.9982587);
      doubleArray4[6] = 1348.8499;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = Double.POSITIVE_INFINITY;
      doubleArray5[1] = (-536.9982587);
      doubleArray5[2] = 1348.8499;
      doubleArray5[3] = Double.POSITIVE_INFINITY;
      doubleArray5[4] = (-1192.20241963);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      doubleArray6[0] = (-1192.20241963);
      doubleArray6[1] = Double.POSITIVE_INFINITY;
      doubleArray6[2] = Double.POSITIVE_INFINITY;
      doubleArray6[3] = (-536.9982587);
      doubleArray6[4] = (-965.584266);
      doubleArray6[5] = (-1192.20241963);
      doubleArray6[6] = Double.POSITIVE_INFINITY;
      doubleArray6[7] = (-536.9982587);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      doubleArray7[0] = (-965.584266);
      doubleArray7[1] = (-1192.20241963);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[7];
      doubleArray8[0] = (-1.0);
      doubleArray8[1] = (-965.584266);
      doubleArray8[2] = (-536.9982587);
      doubleArray8[3] = (-965.584266);
      doubleArray8[4] = (-1729.0646556);
      doubleArray8[5] = (-962.0);
      doubleArray8[6] = (-965.584266);
      doubleArray0[7] = doubleArray8;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      int int0 = 273;
      ArrayList<TimePeriodValuesCollection> arrayList0 = new ArrayList<TimePeriodValuesCollection>(273);
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, true);
      categoryTableXYDataset0.getDomainLowerBound(true);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      int int0 = 96;
      Hour hour0 = new Hour();
      Date[] dateArray0 = new Date[9];
      // Undeclared exception!
      try { 
        SerialDate.addDays(585, (SerialDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1317.4651, 712.76);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, 712.76, 3946.68702425179, (-4), (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      int int0 = (-274);
      // Undeclared exception!
      try { 
        taskSeriesCollection0.getSeries((-274));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.gantt.TaskSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      DatasetUtilities.findMaximumDomainValue(xYSeriesCollection0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      int int0 = (-1);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-1), (-1));
      int int1 = 2;
      SpreadsheetDate spreadsheetDate0 = null;
      try {
        spreadsheetDate0 = new SpreadsheetDate(2061, 5489, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      double[][] doubleArray0 = new double[9][2];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.5;
      doubleArray1[1] = 1.7976931348623157E308;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 1.5;
      doubleArray1[4] = 976.000122;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 1.7976931348623157E308;
      doubleArray2[1] = 1.5;
      doubleArray2[2] = Double.NEGATIVE_INFINITY;
      doubleArray2[3] = 0.5;
      doubleArray2[4] = 1.5;
      doubleArray2[5] = 1.0;
      doubleArray2[6] = 976.000122;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = Double.NEGATIVE_INFINITY;
      doubleArray3[1] = 1060.6131254;
      doubleArray3[2] = 976.000122;
      doubleArray3[3] = 1.0;
      doubleArray3[4] = 1.5;
      doubleArray3[5] = 1.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = 1.5;
      doubleArray5[1] = 1.0;
      doubleArray5[2] = 1060.6131254;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      doubleArray6[0] = 1.5;
      doubleArray6[1] = 0.5;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = 1.7976931348623157E308;
      doubleArray6[4] = 1724.2104101449581;
      doubleArray6[5] = Double.NEGATIVE_INFINITY;
      doubleArray6[6] = 1.7976931348623157E308;
      doubleArray6[7] = 1060.6131254;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      doubleArray7[0] = 0.5;
      doubleArray7[1] = 1.5;
      doubleArray7[2] = 1060.6131254;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[6];
      doubleArray8[0] = 1060.6131254;
      doubleArray8[1] = (-3358.3932604896);
      doubleArray8[2] = 976.000122;
      doubleArray8[3] = 976.000122;
      doubleArray8[4] = 1724.2104101449581;
      doubleArray8[5] = 1724.2104101449581;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[1];
      doubleArray9[0] = 1.0;
      doubleArray0[8] = doubleArray9;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      boolean boolean0 = true;
      arrayList0.stream();
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, (List) arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }
}
