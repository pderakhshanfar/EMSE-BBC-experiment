/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 16 20:36:40 GMT 2020
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.math.BigInteger;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.ParsePosition;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.time.format.FormatStyle;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeSet;
import java.util.Vector;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JLayeredPane;
import javax.swing.plaf.metal.MetalLabelUI;
import javax.swing.plaf.metal.MetalRootPaneUI;
import javax.swing.plaf.synth.SynthCheckBoxUI;
import javax.swing.plaf.synth.SynthDesktopIconUI;
import javax.swing.plaf.synth.SynthMenuItemUI;
import javax.swing.plaf.synth.SynthTableHeaderUI;
import javax.swing.table.JTableHeader;
import javax.swing.text.Segment;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.KeyToGroupMap;
import org.jfree.data.KeyedValues;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.function.Function2D;
import org.jfree.data.function.LineFunction2D;
import org.jfree.data.function.NormalDistributionFunction2D;
import org.jfree.data.function.PolynomialFunction2D;
import org.jfree.data.function.PowerFunction2D;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DatasetUtilities;
import org.jfree.data.general.DefaultHeatMapDataset;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.pie.DefaultPieDataset;
import org.jfree.data.pie.PieDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.IntervalXYDelegate;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYDatasetTableModel;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DatasetUtilities_ESTest extends DatasetUtilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0, "Null 'anchor' argument.", "Null 'anchor' argument.");
      timeSeries0.add((RegularTimePeriod) second0, (double) 59);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
      MockDate mockDate0 = new MockDate();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DatasetUtilities.iterateDomainBounds((XYDataset) jDBCXYDataset0, false);
      DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.findCumulativeRangeBounds(defaultBoxAndWhiskerCategoryDataset0);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) "Null 'anchor' argument.");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, true, false);
      second0.getMinute();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeries0.add((double) 59, 0.0);
      xYSeriesCollection0.getSeries();
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, true);
      TimeSeries timeSeries0 = new TimeSeries(second0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 59, 59);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockDate mockDate0 = new MockDate(658, 658, 658, (-3831), (-3831), 14);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 473.69556444415707, 2.0, (-3831), 2036.1315492756892, (-3831));
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[7];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, false);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) oHLCDataItem0);
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) oHLCDataItem0, (-1254.0657253881118), (-1209));
      DatasetUtilities.createConsolidatedPieDataset(pieDataset1, (Comparable) oHLCDataItem0, 473.69556444415707);
      DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Second second0 = new Second();
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 59;
      doubleArray1[1] = 999.0;
      doubleArray1[2] = 59.0;
      doubleArray1[3] = (double) 59;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 999.0;
      doubleArray3[1] = 999.0;
      doubleArray3[2] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      defaultIntervalCategoryDataset0.getColumnKeys();
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      arrayList0.add(integer0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
      SynthMenuItemUI synthMenuItemUI0 = new SynthMenuItemUI();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
      MatrixSeries matrixSeries0 = null;
      try {
        matrixSeries0 = new MatrixSeries("", (-2145890078), (-2145890078));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.MatrixSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      arrayList0.add(integer0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, arrayList0, false);
      Number[][] numberArray0 = new Number[3][9];
      Number[] numberArray1 = new Number[8];
      BigInteger bigInteger0 = BigInteger.ZERO;
      numberArray1[0] = (Number) bigInteger0;
      numberArray1[1] = (Number) integer0;
      numberArray1[2] = (Number) integer0;
      numberArray1[3] = (Number) integer0;
      numberArray1[4] = (Number) integer0;
      numberArray1[5] = (Number) integer0;
      numberArray1[6] = (Number) integer0;
      numberArray1[7] = (Number) integer0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[3];
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      numberArray2[0] = (Number) integer1;
      numberArray2[1] = (Number) bigInteger0;
      numberArray2[2] = (Number) bigInteger0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[6];
      numberArray3[0] = (Number) bigInteger0;
      numberArray3[1] = (Number) integer1;
      numberArray3[2] = (Number) bigInteger0;
      numberArray3[3] = (Number) bigInteger0;
      numberArray3[4] = (Number) integer1;
      numberArray3[5] = (Number) integer1;
      numberArray0[2] = numberArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      String string0 = null;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      int int0 = (-2611);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, (-2611), (-2611));
      DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, (-260));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[][] doubleArray0 = new double[5][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Millisecond millisecond0 = new Millisecond();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      defaultPieDataset0.insertValue(0, (Comparable) millisecond0, (double) 999);
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to org.jfree.data.SelectableValue
         //
         verifyException("org.jfree.data.pie.DefaultPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      Vector<XYIntervalSeriesCollection> vector0 = new Vector<XYIntervalSeriesCollection>(arrayList0);
      String[] stringArray0 = new String[0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) vector0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (-188));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[][] doubleArray0 = new double[3][1];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 3069.04513;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[2] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("953Oz`w!SwBv", "J^D1", doubleArray0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, (-2611), 174);
      slidingCategoryDataset0.validateObject();
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      arrayList0.clone();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      arrayList0.add(integer0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][7];
      DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockDate mockDate0 = new MockDate(13, (-1157), (-1157), 13, (-1157), 334);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 334, (-4356.73467367), 13, (-1.0), (-1.0));
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (13.0) <= upper (-4356.73467367).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-4846), "");
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0);
      Number number0 = DatasetUtilities.findMinimumDomainValue(timeTableXYDataset0);
      Number[][] numberArray0 = new Number[3][0];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      numberArray2[0] = number0;
      numberArray2[1] = number0;
      numberArray2[2] = number0;
      numberArray2[3] = number0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[7];
      Integer integer0 = new Integer((-5));
      numberArray3[0] = (Number) integer0;
      numberArray3[1] = number0;
      numberArray3[2] = number0;
      numberArray3[3] = number0;
      numberArray3[4] = number0;
      numberArray3[5] = number0;
      numberArray3[6] = number0;
      numberArray0[2] = numberArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeries0.add(0.0, (-3218.998748));
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, true);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      TimeSeries timeSeries1 = new TimeSeries(fixedMillisecond0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries1);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      arrayList0.add(integer0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      TimeSeries timeSeries0 = new TimeSeries(integer0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, true);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.isEmptyOrNull((XYDataset) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-226), 86);
      Integer integer0 = new Integer((-226));
      SerialDate serialDate0 = SerialDate.createInstance(86);
      LineFunction2D lineFunction2D0 = new LineFunction2D(0, 86);
      // Undeclared exception!
      DatasetUtilities.sampleFunction2D(lineFunction2D0, 1.0, 441.9728756700792, 2000, serialDate0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-216), 90);
      MatrixSeries matrixSeries0 = new MatrixSeries("r\"xxh Ol", 2, 1076);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, true);
      MockDate mockDate0 = new MockDate(2);
      Year year0 = new Year(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(year0);
      matrixSeries0.removeChangeListener(taskSeriesCollection0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      long long0 = 0L;
      MockDate mockDate0 = new MockDate(0L);
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(dateArray0[0]);
      defaultHighLowDataset0.setSelectionState(simpleHistogramDataset0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      arrayList0.add(integer0);
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.CHINESE;
      locale0.clone();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      timeTableXYDataset0.getDomainBounds(true);
      MockDate mockDate0 = new MockDate((-1769));
      Week week0 = new Week(mockDate0);
      Integer integer1 = JLayeredPane.PALETTE_LAYER;
      arrayList0.add(integer1);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1327, (-1769), week0);
      DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, arrayList0, true);
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.getDomainBounds(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer.getInteger("");
      arrayList0.add((Integer) null);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) arrayList0, true);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      SynthMenuItemUI synthMenuItemUI0 = new SynthMenuItemUI();
      defaultPieDataset0.hasListener(synthMenuItemUI0);
      TimeSeries timeSeries0 = new TimeSeries("", "=]s^1R", "=]s^1R");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      timeSeriesCollection0.fireSelectionEvent();
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, (Range) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[][] doubleArray1 = new double[5][3];
      doubleArray1[2] = doubleArray0;
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, (-1932));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, true, false);
      Minute minute0 = second0.getMinute();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeries0.add((double) 59, 0.0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, true);
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.add((RegularTimePeriod) minute0, 0.0, true);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, 96);
      DatasetUtilities.findMaximumDomainValue(xYSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Second second0 = new Second();
      Integer integer0 = new Integer(0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer1 = JLayeredPane.DEFAULT_LAYER;
      arrayList0.add(integer1);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      JTableHeader jTableHeader0 = new JTableHeader();
      defaultPieDataset0.hasListener(jTableHeader0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset();
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset1);
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.5;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) (-226);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("$0S", "k~bm#l3A$2tTJFQ", doubleArray0);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("$0S");
      DatasetUtilities.findMaximumDomainValue(defaultBoxAndWhiskerXYDataset0);
      DatasetUtilities.findRangeBounds(categoryDataset0, false);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockDate mockDate0 = new MockDate(13, (-1157), (-1157), 13, 72, 334);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 334, (-4356.73467367), 72, (-1.0), (-1.0));
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, false);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) oHLCDataItem0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("Range(double, double): require lower (", true, false);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeries0.add(1397.6359114107954, 1397.6359114107954);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, (-2652.0));
      Range range0 = new Range(1397.6359114107954, 1397.6359114107954);
      TimeSeries timeSeries0 = new TimeSeries("Range(double, double): require lower (");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer.getInteger("");
      arrayList0.add((Integer) null);
      Comparable<Integer>[] comparableArray0 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 8);
      Instant instant0 = MockInstant.ofEpochSecond(0L, 0L);
      Date date0 = Date.from(instant0);
      Week week0 = new Week(date0);
      comparableArray0[0] = (Comparable<Integer>) week0;
      comparableArray0[1] = (Comparable<Integer>) null;
      comparableArray0[2] = (Comparable<Integer>) null;
      comparableArray0[3] = (Comparable<Integer>) null;
      comparableArray0[4] = (Comparable<Integer>) null;
      comparableArray0[5] = (Comparable<Integer>) null;
      comparableArray0[6] = (Comparable<Integer>) null;
      comparableArray0[7] = (Comparable<Integer>) null;
      Comparable<Integer>[] comparableArray1 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 7);
      comparableArray1[0] = (Comparable<Integer>) week0;
      comparableArray1[1] = (Comparable<Integer>) week0;
      comparableArray1[2] = (Comparable<Integer>) null;
      comparableArray1[3] = (Comparable<Integer>) week0;
      comparableArray1[4] = (Comparable<Integer>) null;
      comparableArray1[5] = (Comparable<Integer>) week0;
      comparableArray1[6] = (Comparable<Integer>) null;
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0L;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 1361.7404939;
      doubleArray0[2] = doubleArray3;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'columnKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[5][3];
      doubleArray1[2] = doubleArray0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("", (OHLCDataItem[]) null);
      Millisecond millisecond0 = new Millisecond();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0, "z4", "z4");
      timeSeries0.add((RegularTimePeriod) second0, 4868.72358);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      timeSeries0.setMaximumItemAge(0);
      DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
      DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer.getInteger("");
      arrayList0.add((Integer) null);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[5][3];
      doubleArray1[1] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray1);
      TimeSeries timeSeries0 = new TimeSeries("");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      ArrayList<XIntervalSeriesCollection> arrayList0 = new ArrayList<XIntervalSeriesCollection>();
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, range0, false);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      ArrayList<Quarter> arrayList0 = new ArrayList<Quarter>();
      Week week0 = new Week((-2142059257), (-2142059257));
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(week0, oHLCDataItemArray0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
      Millisecond millisecond0 = new Millisecond();
      DefaultOHLCDataset defaultOHLCDataset1 = new DefaultOHLCDataset(millisecond0, oHLCDataItemArray0);
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset1);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Second second0 = new Second();
      Integer integer0 = new Integer(0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer1 = JLayeredPane.DEFAULT_LAYER;
      arrayList0.add(integer1);
      arrayList0.add(integer1);
      Integer integer2 = JLayeredPane.DEFAULT_LAYER;
      Number[][] numberArray0 = new Number[2][0];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[1];
      numberArray2[0] = (Number) integer0;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) arrayList0, true);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      SynthMenuItemUI synthMenuItemUI0 = new SynthMenuItemUI();
      defaultPieDataset0.hasListener(synthMenuItemUI0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      DatasetUtilities.isEmptyOrNull((PieDataset) jDBCPieDataset0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) arrayList0, true);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[][] doubleArray0 = new double[6][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(")a6j", ")a6j", doubleArray0);
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(set0);
      DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DatasetUtilities.isEmptyOrNull((XYDataset) null);
      Comparable<YIntervalSeriesCollection>[] comparableArray0 = (Comparable<YIntervalSeriesCollection>[]) Array.newInstance(Comparable.class, 5);
      Minute minute0 = new Minute();
      comparableArray0[0] = (Comparable<YIntervalSeriesCollection>) minute0;
      Year year0 = new Year();
      comparableArray0[1] = (Comparable<YIntervalSeriesCollection>) year0;
      Month month0 = null;
      try {
        month0 = new Month(9999, year0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Month outside valid range.
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MockDate mockDate0 = new MockDate(0L);
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Number[][] numberArray0 = new Number[3][1];
      Number[] numberArray1 = new Number[3];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[5];
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[5];
      numberArray0[2] = numberArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, numberArray0);
      DatasetUtilities.isEmptyOrNull(categoryDataset0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0);
      DatasetUtilities.isEmptyOrNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0, "Null 'anchor' argument.", "");
      timeSeries0.add((RegularTimePeriod) second0, 4151.856696444765);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = 4151.856696444765;
      doubleArray1[3] = (double) 59;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "", doubleArray0);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      MockDate mockDate0 = new MockDate();
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockDate mockDate0 = new MockDate(13, (-1157), (-1157), 13, 64, 1717);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1717, (-4356.73467367), 64, (-1.0), (-1.0));
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      Millisecond millisecond0 = new Millisecond();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, false);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0, "Null 'anchor' argument.", "");
      timeSeries0.add((RegularTimePeriod) second0, 4151.856696444765);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
      Date date0 = second0.getEnd();
      Double double0 = (Double)DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, false);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) jDBCCategoryDataset0, (Comparable) date0);
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) "Null 'anchor' argument.", (-738.5540757637716));
      DefaultPieDataset defaultPieDataset2 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset1, (Comparable) double0, (-5025.776), 59);
      DatasetUtilities.createCategoryDataset((Comparable) "Null 'anchor' argument.", (KeyedValues) defaultPieDataset2);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[][] doubleArray0 = new double[5][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Range(double, double): require lower (", "Range(double, double): require lower (", doubleArray0);
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("Range(double, double): require lower (");
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(double0, (OHLCDataItem[]) null);
      Millisecond millisecond0 = new Millisecond();
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2648L);
      SerialDate.createInstance((Date) mockDate0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1900, 745.65, 3, (-180.7687942041311), (-2.147483648E9));
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 0.8, 4, (-1.0), (-180.7687942041311), 2);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, false);
      DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0);
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 2648L;
      doubleArray1[1] = (-180.7687942041311);
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 2;
      doubleArray1[4] = (double) 1;
      doubleArray1[5] = (double) 3;
      doubleArray1[6] = (double) 4;
      doubleArray1[7] = (double) 2648L;
      doubleArray0[0] = doubleArray1;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) oHLCDataItemArray0, (Comparable[]) oHLCDataItemArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Second second0 = new Second();
      Integer integer0 = new Integer(0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer1 = JLayeredPane.DEFAULT_LAYER;
      arrayList0.add(integer1);
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 59;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) 534;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = (double) 534;
      doubleArray3[1] = (double) 534;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = Double.POSITIVE_INFINITY;
      doubleArray3[4] = (double) 0;
      doubleArray3[5] = (double) 0;
      doubleArray3[6] = (double) 59;
      doubleArray3[7] = (double) 0;
      doubleArray3[8] = (double) 59;
      doubleArray0[2] = doubleArray3;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(72, 59);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue(dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0, "Null 'anchor' argument.", "");
      timeSeries0.add((RegularTimePeriod) second0, 4151.856696444765);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
      DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[][] doubleArray0 = new double[5][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Range(double, double): require lower (", "Range(double, double): require lower (", doubleArray0);
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("Range(double, double): require lower (");
      DatasetUtilities.iterateToFindDomainBounds(simpleHistogramDataset0, stack0, false);
      DatasetUtilities.findDomainBounds((XYDataset) simpleHistogramDataset0, false);
      DatasetUtilities.findRangeBounds((XYDataset) simpleHistogramDataset0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, 0.0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      stack0.setSize(2780);
      Month month0 = new Month();
      Year year0 = new Year(2780);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      DatasetUtilities.findMaximumStackedRangeValue(defaultMultiValueCategoryDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, (List) stack0, range0, false);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = new Range(300.0, 300.0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      jDBCXYDataset0.getDomainOrder();
      Range.shift(range0, (-693.12429));
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      arrayList0.add((DefaultBoxAndWhiskerXYDataset) null);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) jDBCXYDataset0, (List) arrayList0, range0, true);
      DatasetUtilities.findMinimumDomainValue(jDBCXYDataset0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      stack0.setSize(2748);
      Month month0 = new Month();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      stack0.add(defaultMultiValueCategoryDataset0);
      Year year0 = new Year(2748);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = new DefaultMultiValueCategoryDataset();
      defaultTableXYDataset0.equals(year0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset1);
      Range.expandToInclude(range0, 9999);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, (List) stack0, range0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultMultiValueCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      MockDate mockDate1 = new MockDate(334, 334, 334, 334, 334, 334);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 3063.00206362, 334, (-4.941423774E12), 3063.00206362, 0L);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[9];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      oHLCDataItemArray0[7] = oHLCDataItem0;
      oHLCDataItemArray0[8] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
      Millisecond millisecond0 = new Millisecond();
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, true);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer(534);
      arrayList0.add(integer0);
      arrayList0.add(integer0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, false);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      SynthMenuItemUI synthMenuItemUI0 = new SynthMenuItemUI();
      defaultPieDataset0.hasListener(synthMenuItemUI0);
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, false);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[][] doubleArray0 = new double[7][4];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-2539.0964733);
      doubleArray1[1] = 2.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 2.0;
      doubleArray3[1] = 2.0;
      doubleArray3[2] = (-2539.0964733);
      doubleArray3[3] = (-4147.2314619415);
      doubleArray3[4] = 2.0;
      doubleArray3[5] = (-2539.0964733);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = (-948.3138);
      doubleArray5[1] = (-2539.0964733);
      doubleArray5[2] = (-2539.0964733);
      doubleArray5[3] = 2.0;
      doubleArray5[4] = (-2539.0964733);
      doubleArray5[5] = 960.465050741;
      doubleArray5[6] = (-4147.2314619415);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = 2.0;
      doubleArray6[1] = (-948.3138);
      doubleArray6[2] = (-948.3138);
      doubleArray6[3] = 2.0;
      doubleArray6[4] = 2.0;
      doubleArray6[5] = (-629.5943511234);
      doubleArray6[6] = 1.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      doubleArray7[0] = (-4147.2314619415);
      doubleArray7[1] = 2.0;
      doubleArray7[2] = (-629.5943511234);
      doubleArray7[3] = (-948.3138);
      doubleArray7[4] = 960.465050741;
      doubleArray0[6] = doubleArray7;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      arrayList0.addAll((Collection<? extends Integer>) linkedHashSet0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      arrayList0.add(integer0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, arrayList0, false);
      DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, false);
      DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      arrayList0.add(integer0);
      timeTableXYDataset0.getDomainBounds(true);
      DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, arrayList0, false);
      DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, false);
      DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries("", "", "");
      timeSeries0.add((RegularTimePeriod) week0, (double) 53);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 53);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Second second0 = new Second();
      double[] doubleArray0 = new double[1];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      Year year0 = new Year(13);
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-2699.84430396), 1341.5999715, 13, year0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[5][3];
      doubleArray1[1] = doubleArray0;
      MockDate mockDate0 = new MockDate(13, (-1157), (-1157), 13, 72, 334);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      SynthDesktopIconUI synthDesktopIconUI0 = new SynthDesktopIconUI();
      defaultMultiValueCategoryDataset0.hasListener(synthDesktopIconUI0);
      Stack<DefaultBoxAndWhiskerCategoryDataset> stack0 = new Stack<DefaultBoxAndWhiskerCategoryDataset>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MockDate mockDate0 = new MockDate(675, 72, (-1157), (-389), 1, 1890);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-4352.0773683689595), 4055.0747621797, (-196.302915823), 334, (-693.12429));
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
      Millisecond millisecond0 = new Millisecond();
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, false);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[5][3];
      doubleArray1[1] = doubleArray0;
      MockDate mockDate0 = new MockDate(13, (-1157), (-1157), 13, 72, 334);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      SynthDesktopIconUI synthDesktopIconUI0 = new SynthDesktopIconUI();
      defaultMultiValueCategoryDataset0.hasListener(synthDesktopIconUI0);
      Stack<DefaultBoxAndWhiskerCategoryDataset> stack0 = new Stack<DefaultBoxAndWhiskerCategoryDataset>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      defaultMultiValueCategoryDataset0.hasListener(synthDesktopIconUI0);
      stack0.add(defaultBoxAndWhiskerCategoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      stack0.setSize(2748);
      Month month0 = new Month();
      Year year0 = new Year(2748);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      Range range1 = Range.expand(range0, 3034.0, (-9999));
      Range.expandToInclude(range1, (-9999));
      Range.scale(range0, 2748);
      DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, (List) stack0, range1, true);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findMinimumDomainValue(defaultTableXYDataset0);
      DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack0, true);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(year0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, keyToGroupMap0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      stack0.setSize(2785);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      arrayList0.addAll((Collection<? extends Integer>) hashSet0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.getRowKeys();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      Integer integer1 = JLayeredPane.DEFAULT_LAYER;
      arrayList0.add(integer1);
      boolean boolean0 = true;
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      arrayList0.addAll((Collection<? extends Integer>) linkedHashSet0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      arrayList0.add(integer0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, arrayList0, true);
      DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, true);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[][] doubleArray0 = new double[5][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Rangedouble, double): require lower (", "Rangedouble, double): require lower (", doubleArray0);
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Integer integer0 = new Integer((-3158));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>(linkedList0);
      arrayList0.add((Integer) null);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      DatasetUtilities.findRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) linkedList0, true);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      DatasetUtilities.iterateToFindDomainBounds(xYTaskDataset0, linkedList0, false);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer(534);
      arrayList0.add(integer0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, false);
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds((XYDataset) null, arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      arrayList0.add(integer0);
      Integer integer1 = new Integer(534);
      arrayList0.add(integer1);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, false);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds((XYDataset) null, arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Stack<YIntervalSeriesCollection> stack0 = new Stack<YIntervalSeriesCollection>();
      stack0.listIterator();
      stack0.add((YIntervalSeriesCollection) null);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) null, (List) stack0, range0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      boolean boolean0 = true;
      MetalRootPaneUI metalRootPaneUI0 = new MetalRootPaneUI();
      defaultXYZDataset0.hasListener(metalRootPaneUI0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultXYZDataset0, true);
      GanttCategoryDataset ganttCategoryDataset0 = null;
      int int0 = 740;
      int int1 = 10;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 740, 10);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Stack<YIntervalSeriesCollection> stack0 = new Stack<YIntervalSeriesCollection>();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      stack0.add(yIntervalSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((XYDataset) yIntervalSeriesCollection0, true);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      defaultCategoryDataset0.clear();
      LinkedList<XIntervalSeriesCollection> linkedList0 = new LinkedList<XIntervalSeriesCollection>();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.YIntervalSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1.7976931348623157E308;
      doubleArray1[1] = 1.7976931348623157E308;
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray1[3] = (-136.1441);
      doubleArray1[4] = (-981.8);
      doubleArray1[5] = Double.NaN;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      DatasetGroup datasetGroup0 = new DatasetGroup();
      Quarter quarter0 = new Quarter();
      jDBCPieDataset0.setValue((Comparable) quarter0, (double) 1);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) quarter0, (double) 4);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Stack<YIntervalSeriesCollection> stack0 = new Stack<YIntervalSeriesCollection>();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = null;
      PriorityQueue<YIntervalSeriesCollection> priorityQueue0 = new PriorityQueue<YIntervalSeriesCollection>();
      stack0.addAll((Collection<? extends YIntervalSeriesCollection>) priorityQueue0);
      stack0.add((YIntervalSeriesCollection) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-198.23);
      doubleArray1[1] = 1302.683;
      doubleArray1[2] = 386.8974265538376;
      doubleArray1[3] = 1563.93361197;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (-198.23);
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 386.8974265538376;
      doubleArray2[3] = 1563.93361197;
      doubleArray2[4] = (-2995.2263028361);
      doubleArray2[5] = 1672.0;
      doubleArray2[6] = 1563.93361197;
      doubleArray2[7] = 386.8974265538376;
      doubleArray2[8] = (-198.23);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = (-2995.2263028361);
      doubleArray3[1] = (-2995.2263028361);
      doubleArray3[2] = 1672.0;
      doubleArray3[3] = (-2995.2263028361);
      doubleArray3[4] = 386.8974265538376;
      doubleArray3[5] = (-198.23);
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      MockDate mockDate0 = new MockDate(0L);
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      double[][] doubleArray1 = new double[8][6];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 0L;
      doubleArray2[1] = (double) 0L;
      doubleArray2[2] = (double) 0L;
      doubleArray2[3] = (double) 0L;
      doubleArray2[4] = (double) 0L;
      doubleArray1[1] = doubleArray2;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "FeqVX", doubleArray1);
      DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(0.0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, false);
      DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      MockDate mockDate0 = new MockDate(0L);
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, false);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray1 = new double[3][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 256, 256);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, true);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Date[] dateArray0 = new Date[3];
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TimeZone.getDefault();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      int int0 = 1990;
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      stack0.setSize(1990);
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0, "PieDatasetChangeType.ADD", "PieDatasetChangeType.ADD");
      timeSeries0.add((RegularTimePeriod) month0, (-1157.4118708));
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset("Qg&>Vj_Rxj5C-/<", "PieDatasetChangeType.ADD", "", "*VL!<&+83a&7im0;");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Stack<YIntervalSeriesCollection> stack0 = new Stack<YIntervalSeriesCollection>();
      stack0.add((YIntervalSeriesCollection) null);
      stack0.add((YIntervalSeriesCollection) null);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, true, false);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeries0.add((double) 59, 0.0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, true);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      long long0 = 0L;
      MockDate mockDate0 = new MockDate(0L);
      double double0 = 1547.942571190606;
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, false);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0, "Second");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 3671, 3671);
      Stack<YIntervalSeriesCollection> stack0 = new Stack<YIntervalSeriesCollection>();
      PriorityQueue<YIntervalSeriesCollection> priorityQueue0 = new PriorityQueue<YIntervalSeriesCollection>();
      stack0.addAll((Collection<? extends YIntervalSeriesCollection>) priorityQueue0);
      stack0.add((YIntervalSeriesCollection) null);
      stack0.add((YIntervalSeriesCollection) null);
      stack0.add((YIntervalSeriesCollection) null);
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1291.4;
      doubleArray1[1] = Double.NaN;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("=e8uY-j1(|3?#`:7~JV", "", doubleArray0);
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(set0);
      Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) linkedHashSet0);
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) set0);
      DatasetUtilities.findRangeBounds(categoryDataset0, list0, false);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[5][3];
      doubleArray1[1] = doubleArray0;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("soC-N?RCk3", "o`", doubleArray1);
      defaultCategoryDataset0.addValue((-1907.465), (Comparable) "o`", (Comparable) "o`");
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, 79, 79);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, false);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[][] doubleArray0 = new double[5][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Range(double, double): require lower (", "Range(double, double): require lower (", doubleArray0);
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(set0);
      Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) set0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, 1082);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1082, Size: 5
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = "Range(double, double): require lower (";
      double[][] doubleArray0 = new double[5][3];
      ArrayList<Quarter> arrayList0 = new ArrayList<Quarter>();
      boolean boolean0 = true;
      Number[][] numberArray0 = new Number[1][4];
      Number[] numberArray1 = new Number[6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      int int0 = 1060;
      int int1 = 854;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 1060, 854);
      Second.parseSecond(":$xKZbm(5*_wyx&c2");
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingCategoryDataset0, (Comparable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[5][3];
      doubleArray1[1] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("soC-N?RCk3", "o`", doubleArray1);
      int int0 = 79;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 79, 79);
      boolean boolean0 = false;
      DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      LinkedList<XYBarDataset> linkedList0 = new LinkedList<XYBarDataset>();
      int int1 = (-653);
      Week week0 = new Week((-653), (-653));
      // Undeclared exception!
      try { 
        ZoneOffset.ofHours(79);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Zone offset hours not in valid range: value 79 is not in the range -18 to 18
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[5][3];
      doubleArray1[1] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray1);
      DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[][] doubleArray0 = new double[5][3];
      DatasetUtilities.createCategoryDataset("Range(double, double): require lower (", "Range(double, double): require lower (", doubleArray0);
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "Range(double, double): require lower (", doubleArray0);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-4.941423746E12), 2671.363);
      Stack<Locale.LanguageRange> stack1 = new Stack<Locale.LanguageRange>();
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(set0);
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack1, (Collection<String>) linkedHashSet0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) stack1, (Collection<String>) list0);
      DatasetUtilities.findRangeBounds(categoryDataset0, list1, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1, 1);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset(slidingGanttCategoryDataset0, 1, 275);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      Stack<YIntervalSeriesCollection> stack0 = new Stack<YIntervalSeriesCollection>();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      stack0.add(yIntervalSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.YIntervalSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[5][3];
      doubleArray1[1] = doubleArray0;
      MockDate mockDate0 = new MockDate(13, (-1157), (-1157), 13, 72, 334);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 230.0, (-4356.73467367), 72, (-1.0), (-1.0));
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
      Millisecond millisecond0 = new Millisecond();
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (72.0) <= upper (-4356.73467367).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      ArrayList<Quarter> arrayList0 = new ArrayList<Quarter>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      DatasetGroup datasetGroup0 = new DatasetGroup("org.jfree.data.general.DatasetUtilities");
      jDBCPieDataset0.setGroup(datasetGroup0);
      Quarter quarter0 = new Quarter();
      quarter0.getEnd();
      jDBCPieDataset0.setValue((Comparable) quarter0, (double) 1);
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) quarter0, (double) 4);
      DatasetUtilities.createCategoryDataset((Comparable) quarter0, (KeyedValues) pieDataset0);
      DatasetUtilities.isEmptyOrNull(pieDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0);
      DatasetUtilities.calculatePieDatasetTotal(jDBCPieDataset0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      Quarter quarter0 = new Quarter();
      jDBCPieDataset0.setValue((Comparable) quarter0, (double) 4);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) quarter0, (KeyedValues) jDBCPieDataset0);
      DatasetUtilities.iterateXYRangeBounds(xYTaskDataset0);
      ((DefaultCategoryDataset) categoryDataset0).getColumnKeys();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(quarter0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) quarter0, (double) 4);
      DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[][] doubleArray0 = new double[6][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Range(double, double): require lower (", "Range(double, double): require lower (", doubleArray0);
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      Calendar.getAvailableCalendarTypes();
      DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      Minute minute0 = new Minute();
      Day day0 = minute0.getDay();
      defaultKeyedValues2DDataset0.addValue((Number) integer0, (Comparable) integer0, (Comparable) day0);
      DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[][] doubleArray0 = new double[5][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Range(double, double): require lower (", "Range(double, double): require lower (", doubleArray0);
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("", "Range(double, double): require lower (", doubleArray0);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-4.941423746E12), 2671.363);
      Stack<Locale.LanguageRange> stack1 = new Stack<Locale.LanguageRange>();
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(set0);
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack1, (Collection<String>) linkedHashSet0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) stack1, (Collection<String>) list0);
      DatasetUtilities.findRangeBounds(categoryDataset1, list1, true);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      DatasetGroup datasetGroup0 = new DatasetGroup("org.jfree.data.general.DatasetUtilities");
      jDBCPieDataset0.setGroup(datasetGroup0);
      Quarter quarter0 = new Quarter();
      jDBCPieDataset0.setValue((Comparable) quarter0, (double) 1);
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) quarter0, (double) 4);
      DatasetUtilities.createCategoryDataset((Comparable) quarter0, (KeyedValues) pieDataset0);
      DatasetUtilities.isEmptyOrNull(pieDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = "Range(double, double): require lower (";
      double[][] doubleArray0 = new double[4][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Range(double, double): require lower (", "Range(double, double): require lower (", doubleArray0);
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      Number[][] numberArray0 = new Number[1][9];
      Number[] numberArray1 = new Number[5];
      numberArray1[0] = (Number) double0;
      numberArray1[1] = (Number) double0;
      numberArray1[2] = (Number) double0;
      numberArray1[3] = (Number) double0;
      numberArray1[4] = (Number) double0;
      numberArray0[0] = numberArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("Range(double, double): require lower (", "Range(double, double): require lower (", numberArray0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, 784);
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 784, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 90);
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      DatasetUtilities.isEmptyOrNull((PieDataset) jDBCPieDataset0);
      Number[][] numberArray0 = new Number[4][7];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      Float float0 = new Float((double) 90);
      numberArray2[0] = (Number) float0;
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      numberArray2[1] = (Number) integer0;
      Short short0 = new Short((short) (-1997));
      numberArray2[2] = (Number) short0;
      Integer integer1 = JLayeredPane.DEFAULT_LAYER;
      numberArray2[3] = (Number) integer1;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[5];
      numberArray3[0] = (Number) integer0;
      numberArray3[1] = (Number) integer0;
      numberArray3[2] = (Number) short0;
      numberArray3[3] = (Number) short0;
      numberArray3[4] = (Number) integer1;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[9];
      numberArray4[0] = (Number) float0;
      numberArray4[1] = (Number) integer1;
      numberArray4[2] = (Number) integer0;
      numberArray4[3] = (Number) short0;
      numberArray4[4] = (Number) short0;
      numberArray4[5] = (Number) short0;
      numberArray4[6] = (Number) integer1;
      numberArray4[7] = (Number) short0;
      Integer integer2 = JLayeredPane.MODAL_LAYER;
      numberArray4[8] = (Number) integer2;
      numberArray0[3] = numberArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[5][3];
      doubleArray1[1] = doubleArray0;
      String string0 = "o`";
      String string1 = "soC-N?RCk3";
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("soC-N?RCk3", "o`", doubleArray1);
      DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) "soC-N?RCk3");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-653.0672208);
      doubleArray1[1] = 234.5018629663;
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = (-913.1477);
      doubleArray1[4] = 1902.8031814850199;
      doubleArray1[5] = (-595.309761775);
      doubleArray1[6] = (-1120.3);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (-1120.3);
      doubleArray2[1] = (-595.309761775);
      doubleArray2[2] = Double.NEGATIVE_INFINITY;
      doubleArray2[3] = 234.5018629663;
      doubleArray2[4] = 234.5018629663;
      doubleArray2[5] = 234.5018629663;
      doubleArray2[6] = 234.5018629663;
      doubleArray2[1] = (-653.0672208);
      doubleArray2[8] = (-653.0672208);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("C&;Mf_{MRoN", "<uZOAckN%#R", doubleArray0);
      DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) (-653.0672208));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[5][3];
      doubleArray1[1] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Range(double, double): require lower (", "Range(double, double): require lower (", doubleArray1);
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 3671, 3671);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset(slidingGanttCategoryDataset0, 46, 2);
      DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      Quarter quarter0 = new Quarter();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      TimeTableXYDataset timeTableXYDataset1 = new TimeTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, 1900.0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      Millisecond millisecond0 = new Millisecond();
      DatasetUtilities.isEmptyOrNull((XYDataset) timeTableXYDataset0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[3][3];
      doubleArray1[1] = doubleArray0;
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries("", "", "");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.iterateXYRangeBounds(timeTableXYDataset0);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (double) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Stack<DefaultIntervalCategoryDataset> stack0 = new Stack<DefaultIntervalCategoryDataset>();
      Locale locale0 = Locale.CHINESE;
      Locale locale1 = locale0.stripExtensions();
      locale1.getDisplayVariant();
      double double0 = (-1.0);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(255.16, (-1.0));
      int int0 = 1;
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, 0.0, Double.POSITIVE_INFINITY, 1, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Range range0 = new Range(3168, 3168);
      Week week0 = new Week();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      Quarter quarter0 = new Quarter();
      jDBCPieDataset0.setValue((Comparable) week0, (double) 1);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) quarter0, (-1842.950587130272), (-2144550778));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      Quarter quarter0 = new Quarter();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      TimeTableXYDataset timeTableXYDataset1 = new TimeTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, 1900.0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      DatasetUtilities.findMinimumStackedRangeValue(defaultMultiValueCategoryDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      TimeTableXYDataset timeTableXYDataset1 = new TimeTableXYDataset();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection((XYSeries) null);
      DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, true);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Second second0 = new Second();
      double[] doubleArray0 = new double[1];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, 5042.46218476115);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.clone();
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      DatasetUtilities.findMinimumStackedRangeValue(defaultMultiValueCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((XYDataset) timeTableXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal((PieDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      Quarter quarter0 = new Quarter();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 73, 400);
      DatasetUtilities.findCumulativeRangeBounds(slidingGanttCategoryDataset0);
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection1);
      jDBCCategoryDataset0.validateObject();
      DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, true);
      Connection connection2 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection2);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) jDBCCategoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal((PieDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 3671, 3671);
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 3671;
      doubleArray1[1] = (-1842.950587130272);
      doubleArray1[2] = (double) 3671;
      doubleArray1[3] = (double) 3671;
      doubleArray1[4] = (double) 3671;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-1842.950587130272);
      doubleArray2[1] = (double) 3671;
      doubleArray2[2] = (double) 3671;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = (-1842.950587130272);
      doubleArray3[1] = (-1842.950587130272);
      doubleArray3[2] = (double) 3671;
      doubleArray3[3] = (double) 3671;
      doubleArray3[4] = (-1842.950587130272);
      doubleArray3[5] = (-1842.950587130272);
      doubleArray3[6] = (-1842.950587130272);
      doubleArray3[7] = (-1842.950587130272);
      doubleArray3[8] = (-1842.950587130272);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (-6356.98083));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Second second0 = new Second();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 59;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Comparable<DefaultOHLCDataset>[] comparableArray0 = (Comparable<DefaultOHLCDataset>[]) Array.newInstance(Comparable.class, 2);
      comparableArray0[0] = (Comparable<DefaultOHLCDataset>) second0;
      comparableArray0[1] = (Comparable<DefaultOHLCDataset>) second0;
      defaultIntervalCategoryDataset0.setCategoryKeys(comparableArray0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 1328.18807515346);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2648L);
      SerialDate.createInstance((Date) mockDate0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.8, 4, (-1.0), 1748.59123, 2);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0L, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, (-232.4172659483716), Double.NEGATIVE_INFINITY);
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1023.00727213864, 9999, (-1.0), 723.3068912781, 3);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[9];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem1, oHLCDataItemArray0);
      Date date0 = defaultOHLCDataset0.getXDate(60, 1);
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(date0, 709.0, 2313.3761878281416, 4.0, 1.7976931348623157E308, 9999);
      oHLCDataItemArray0[2] = oHLCDataItem2;
      oHLCDataItemArray0[3] = oHLCDataItem1;
      oHLCDataItemArray0[4] = oHLCDataItem1;
      oHLCDataItemArray0[5] = oHLCDataItem1;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      oHLCDataItemArray0[7] = oHLCDataItem1;
      oHLCDataItemArray0[8] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset1 = new DefaultOHLCDataset(serialDate0, oHLCDataItemArray0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
      Millisecond millisecond0 = new Millisecond();
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[5][3];
      doubleArray1[1] = doubleArray0;
      String string0 = "o`";
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Vector<XYIntervalSeriesCollection> vector0 = new Vector<XYIntervalSeriesCollection>();
      Range range0 = new Range(3168, 3168);
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      Second second0 = new Second();
      RegularTimePeriod regularTimePeriod0 = second0.next();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(regularTimePeriod0);
      simpleHistogramDataset0.setAdjustForBinSize(false);
      DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, true);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, keyToGroupMap0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[5][3];
      doubleArray1[1] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      Stack<YIntervalSeriesCollection> stack0 = new Stack<YIntervalSeriesCollection>();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      stack0.add(yIntervalSeriesCollection0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      keyToGroupMap0.getGroups();
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, keyToGroupMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Vector<XYIntervalSeriesCollection> vector0 = new Vector<XYIntervalSeriesCollection>();
      Range range0 = new Range(3168, 3168);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      MockDate mockDate0 = new MockDate(3168);
      SerialDate.createInstance((Date) mockDate0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1, (-899.64902), 4, 0.0, 0);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) (-1);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(oHLCDataItem0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      defaultHighLowDataset0.indexOf((-1.0));
      DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, false);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      MockDate mockDate0 = new MockDate(0L);
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0, (-394.894));
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Vector<XYIntervalSeriesCollection> vector0 = new Vector<XYIntervalSeriesCollection>();
      Range range0 = new Range(3168, 3168);
      MockDate mockDate0 = new MockDate(3168);
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0, 1, (-1.0), Double.NEGATIVE_INFINITY, 4.0);
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(serialDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[][] doubleArray0 = new double[5][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Range(double, double): require lower (", "Range(double, double): require lower (", doubleArray0);
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      Locale locale0 = Locale.GERMAN;
      TreeSet<XIntervalSeriesCollection> treeSet0 = new TreeSet<XIntervalSeriesCollection>();
      locale0.getDisplayName();
      stack0.removeAll(treeSet0);
      locale0.getDisplayVariant();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(double0);
      DatasetUtilities.iterateToFindDomainBounds(simpleHistogramDataset0, stack0, true);
      System.setCurrentTimeMillis(4689L);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 90);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 90, Size: 3
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Vector<XYIntervalSeriesCollection> vector0 = new Vector<XYIntervalSeriesCollection>();
      Range range0 = new Range(3168, 3168);
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 3168;
      doubleArray1[1] = (-226.0);
      doubleArray1[2] = (double) 3168;
      doubleArray1[3] = (double) 3168;
      doubleArray1[4] = (double) 3168;
      doubleArray1[5] = 1.0;
      doubleArray1[6] = (double) 3168;
      doubleArray0[0] = doubleArray1;
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("VT8", "", doubleArray0);
      DatasetUtilities.findRangeBounds(categoryDataset0, true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[5][3];
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("Range(double, double): require lower (", "Range(double, double): require lower (", doubleArray1);
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      DefaultCategoryDataset defaultCategoryDataset1 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("X-value already exists.", "Null 'seriesKey' argument.", doubleArray1);
      Double double0 = new Double(2779.558);
      defaultCategoryDataset0.addValue((Number) double0, (Comparable) double0, (Comparable) "X-value already exists.");
      DatasetUtilities.findCumulativeRangeBounds(defaultCategoryDataset1);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Second second0 = new Second();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 1328.18807515346);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, true, false);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeries0.add((double) 59, 0.0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 86, (-2935));
      DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, true);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[5][3];
      doubleArray1[1] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray1);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 79, 79);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      DatasetUtilities.isEmptyOrNull((XYDataset) vectorSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (-1580));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[5][3];
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Range(double, double): require lower (", "Range(double, double): require lower (", doubleArray1);
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("", "Range(double, double): require lower (", doubleArray1);
      DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      DatasetUtilities.findRangeBounds(categoryDataset0, true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset1, (-695));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0, true);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (-1880.5298508267288));
      double[][] doubleArray0 = new double[0][7];
      DatasetUtilities.createCategoryDataset("Invalid series index: ", "org.jfree.data.xy.XIntervalSeriesCollection", doubleArray0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[3][3];
      doubleArray1[1] = doubleArray0;
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries("", "", "");
      timeSeries0.add((RegularTimePeriod) week0, (-3403.56755));
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset("", "", "I]Y{pVMJiwI(x", "");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Vector<XYIntervalSeriesCollection> vector0 = new Vector<XYIntervalSeriesCollection>();
      Range range0 = new Range(3168, 3168);
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0, "SCALE_AREA_TO_1", "SCALE_AREA_TO_1");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
      DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      Quarter quarter0 = new Quarter();
      jDBCPieDataset0.setValue((Comparable) quarter0, (double) 4);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) quarter0, (double) 1, 78);
      DatasetUtilities.findMaximumDomainValue(xYTaskDataset0);
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D((-2111.3), 2622.98095072);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, 2.0, (-2.147483648E9), 1, quarter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[][] doubleArray0 = new double[5][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Range(double, double): require lower (", "Range(double, double): require lower (", doubleArray0);
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("Range(double, double): require lower (");
      DatasetUtilities.findMaximumDomainValue(defaultBoxAndWhiskerXYDataset0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      TimeZone.getDefault();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      String string0 = "org.jfree.data.xy.DefaultXYDataset";
      double[][] doubleArray0 = new double[0][3];
      DatasetUtilities.createCategoryDataset("org.jfree.data.xy.DefaultXYDataset", "y5>E{J#M}|:h4.", doubleArray0);
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      DatasetUtilities.findMaximumDomainValue(defaultIntervalXYDataset0);
      NormalDistributionFunction2D normalDistributionFunction2D0 = null;
      try {
        normalDistributionFunction2D0 = new NormalDistributionFunction2D((-175.35661746836), (-175.35661746836));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'std' > 0.
         //
         verifyException("org.jfree.data.function.NormalDistributionFunction2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Vector<XYIntervalSeriesCollection> vector0 = new Vector<XYIntervalSeriesCollection>();
      Range range0 = new Range(3168, 3168);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      MockDate mockDate0 = new MockDate(3168);
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1, (-899.64902), 4, 0.0, 0);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1, 2, 5, Double.POSITIVE_INFINITY, 709.0);
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(serialDate0, oHLCDataItemArray0);
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
      Range.shift(range1, (double) 3);
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      jDBCXYDataset0.getDomainOrder();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) jDBCXYDataset0, (List) vector0, range0, true);
      DatasetUtilities.findMinimumDomainValue(jDBCXYDataset0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[5][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Range(double, double): require lower (", "Range(double, double): require lower (", doubleArray1);
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(double0);
      DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, false);
      DatasetUtilities.findMaximumRangeValue(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[5][3];
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Range(double, double): require lower (", "Range(double, double): require lower (", doubleArray1);
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("", "Range(double, double): require lower (", doubleArray1);
      DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      DatasetUtilities.findRangeBounds(categoryDataset0, true);
      DatasetUtilities.findStackedRangeBounds(categoryDataset1, 1328.18807515346);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[5][3];
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Range(double, double): require lower (", "Range(double, double): require lower (", doubleArray1);
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      DatasetUtilities.createCategoryDataset("", "Range(double, double): require lower (", doubleArray1);
      DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      DatasetUtilities.findRangeBounds(categoryDataset0, true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, (-986.7489714));
      DatasetUtilities.createCategoryDataset("Invalid series index: ", "R\"Bp;#Xwao", doubleArray1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      Quarter quarter0 = new Quarter();
      jDBCPieDataset0.setValue((Comparable) quarter0, (double) 1);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) quarter0, 2695.942709, 3367);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[5][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Range(double, double): require lower (", "Range(double, double): require lower (", doubleArray1);
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      Year year0 = new Year(13);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries((Function2D) null, (-9999), 9999, 13, "Range(double, double): require lower (");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1842.950587130272);
      doubleArray0[3] = 0.0;
      doubleArray0[5] = (-1550.4178851188);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Number[][] numberArray0 = new Number[6][4];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(";y(", ";y(", numberArray0);
      ((DefaultCategoryDataset) categoryDataset0).getRowKeys();
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (Comparable) (-1842.950587130272));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Second second0 = new Second();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      Year year0 = new Year(13);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-2699.84430396), (-1968.884495085366), 13, year0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      Quarter quarter0 = new Quarter();
      jDBCPieDataset0.setValue((Comparable) quarter0, (double) 1);
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) quarter0, (double) 4);
      DatasetUtilities.createCategoryDataset((Comparable) quarter0, (KeyedValues) pieDataset0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("");
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      XYSeries xYSeries0 = new XYSeries("");
      xYSeries0.createCopy((-1260), (-340));
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) null, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[5][3];
      doubleArray1[1] = doubleArray0;
      Stack<YIntervalSeriesCollection> stack0 = new Stack<YIntervalSeriesCollection>();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      YIntervalSeriesCollection yIntervalSeriesCollection1 = new YIntervalSeriesCollection();
      stack0.add(yIntervalSeriesCollection1);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      Float float0 = new Float(0.0F);
      defaultPieDataset0.setValue((Comparable) "soC-N?RCk3", (Number) float0);
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) "soC-N?RCk3", 1.0, 2958465);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "soC-N?RCk3", (KeyedValues) pieDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds(categoryDataset0, (List) stack0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.YIntervalSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, true, false);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeries0.add((double) 59, 0.0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 86, (-2935));
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      TimeZone.getDefault();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-226), 90);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, keyToGroupMap0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(taskSeriesCollection0, tableOrder0, (-226));
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) null, (double) 1877, (-226));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(taskSeriesCollection0, 2, 2237);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'columnKey' argument.
         //
         verifyException("org.jfree.data.gantt.TaskSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[5][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Range(double, double): require lower (", "Range(double, double): require lower (", doubleArray1);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 891, 918);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, false);
      xYSeries0.createCopy(59, 59);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeries0.add((double) 0, 1186.03);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1087, 28);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, false);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Second second0 = new Second();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      second0.previous();
      Year year0 = new Year(13);
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-2699.84430396), (-1968.884495085366), 13, year0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[][] doubleArray0 = new double[9][1];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1.7976931348623157E308;
      doubleArray1[1] = 1590.06786193855;
      doubleArray1[2] = (-1889.556);
      doubleArray1[3] = (-2490.7782);
      doubleArray1[4] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = Double.POSITIVE_INFINITY;
      doubleArray2[1] = 1590.06786193855;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (-3602.8567897637954);
      doubleArray3[1] = (-2490.7782);
      doubleArray3[2] = (-2490.7782);
      doubleArray3[3] = 1.7976931348623157E308;
      doubleArray3[4] = (-1889.556);
      doubleArray3[5] = 1.7976931348623157E308;
      doubleArray3[6] = (-2490.7782);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = 1.7976931348623157E308;
      doubleArray4[1] = Double.POSITIVE_INFINITY;
      doubleArray4[2] = 1.7976931348623157E308;
      doubleArray4[3] = (-663.5437346419756);
      doubleArray4[4] = (-3602.8567897637954);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = (-3602.8567897637954);
      doubleArray5[1] = (-663.5437346419756);
      doubleArray5[2] = 1.7976931348623157E308;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      doubleArray6[0] = (-1889.556);
      doubleArray6[1] = 1.7976931348623157E308;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      doubleArray7[0] = 1.7976931348623157E308;
      doubleArray7[1] = 1.7976931348623157E308;
      doubleArray7[2] = (-3602.8567897637954);
      doubleArray7[3] = (-2490.7782);
      doubleArray7[4] = (-3602.8567897637954);
      doubleArray7[5] = (-1889.556);
      doubleArray7[6] = (-663.5437346419756);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[1];
      doubleArray8[0] = 1.7976931348623157E308;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[1];
      doubleArray9[0] = 1.7976931348623157E308;
      doubleArray0[8] = doubleArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(double0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      int int0 = (-1260);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      XYSeries xYSeries0 = new XYSeries(regularTimePeriod0, false);
      XYSeries xYSeries1 = xYSeries0.createCopy((-1260), (-1260));
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries1);
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection1);
      DatasetUtilities.findMinimumRangeValue((XYDataset) xYSeriesCollection0);
      DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, false);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection1);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      String string0 = "";
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset(connection0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 3112, 8);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      Stack<YIntervalSeriesCollection> stack0 = new Stack<YIntervalSeriesCollection>();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      stack0.add(yIntervalSeriesCollection0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, keyToGroupMap0);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (Comparable) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) yIntervalSeriesCollection0, (List) stack0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.YIntervalSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      String string0 = "Range(double, double): require lower (";
      double[][] doubleArray1 = new double[5][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Range(double, double): require lower (", "Range(double, double): require lower (", doubleArray1);
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      String string1 = "\\";
      DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      LineFunction2D lineFunction2D0 = new LineFunction2D((-3328.912565), (-3328.912565));
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(lineFunction2D0, (-899.64902), (-899.64902), (-1298), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, false);
      XYSeries xYSeries1 = xYSeries0.createCopy(59, 59);
      second0.previous();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      xYSeries1.createCopy(45, 0);
      XYSeriesCollection xYSeriesCollection1 = new XYSeriesCollection(xYSeries0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.validateObject();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      DatasetUtilities.findMaximumDomainValue(categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Second second0 = new Second();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      Stack<YIntervalSeriesCollection> stack0 = new Stack<YIntervalSeriesCollection>();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      stack0.add(yIntervalSeriesCollection0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      Number[][] numberArray0 = new Number[4][5];
      Number[] numberArray1 = new Number[6];
      numberArray1[0] = (Number) 59;
      numberArray1[1] = (Number) 0.0;
      numberArray1[2] = (Number) 59;
      Long long0 = new Long(709L);
      numberArray1[3] = (Number) long0;
      numberArray1[4] = (Number) 0.0;
      numberArray1[5] = (Number) 0.0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      numberArray2[0] = (Number) long0;
      numberArray2[1] = (Number) 0.0;
      numberArray2[2] = (Number) 0.0;
      numberArray2[3] = (Number) 59;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[1];
      numberArray3[0] = (Number) long0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[0];
      numberArray0[3] = numberArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "]xofEEP", numberArray0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[5][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Range(double, double): require lower (", "Range(double, double): require lower (", doubleArray1);
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      DatasetUtilities.createCategoryDataset("", "Range(double, double): require lower (", doubleArray1);
      DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds(categoryDataset0, (KeyToGroupMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Second second0 = new Second();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 59;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 59;
      doubleArray0[5] = (double) 0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      Year year0 = new Year(13);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-865.4865733), 3112.0, 13, year0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      ArrayList<CategoryTableXYDataset> arrayList0 = new ArrayList<CategoryTableXYDataset>();
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Stack<TimeSeriesCollection> stack0 = new Stack<TimeSeriesCollection>();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      stack0.add(timeSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.TimeSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      TimeZone.getDefault();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Locale locale0 = Locale.forLanguageTag("Overlapping bin");
      TimeZone timeZone0 = TimeZone.getTimeZone("ep");
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      XYSeries xYSeries0 = new XYSeries("ep");
      xYSeries0.createCopy(4, 3802);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) timeTableXYDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, true);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries(month0, true);
      xYSeries0.getItems();
      xYSeries0.createCopy(554, 2000);
      XYSeries xYSeries1 = xYSeries0.createCopy(554, (-3041));
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries1);
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      vector0.clear();
      vector0.setSize(1218);
      vector0.listIterator();
      month0.getYear();
      TimeZone timeZone0 = TimeZone.getDefault();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      XYBarDataset xYBarDataset0 = new XYBarDataset(timeSeriesCollection0, 1218);
      DatasetUtilities.iterateXYRangeBounds(xYBarDataset0);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) month0, (-758.367));
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 3671;
      doubleArray1[1] = (double) 3671;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      Comparable<DefaultBoxAndWhiskerCategoryDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerCategoryDataset>[]) Array.newInstance(Comparable.class, 1);
      double[][] doubleArray0 = new double[6][3];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (-1842.950587130272);
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = (-1842.950587130272);
      doubleArray4[1] = (-1842.950587130272);
      doubleArray4[2] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = (-1476.525);
      doubleArray6[1] = Double.POSITIVE_INFINITY;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = 0.0;
      doubleArray6[4] = 0.0;
      doubleArray6[5] = (-1842.950587130272);
      doubleArray6[6] = (-1842.950587130272);
      doubleArray0[5] = doubleArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, true);
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      ArrayList<CategoryTableXYDataset> arrayList0 = new ArrayList<CategoryTableXYDataset>();
      DatasetUtilities.iterateToFindDomainBounds(jDBCXYDataset0, stack0, false);
      jDBCXYDataset0.getRangeBounds(true);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = "Rangedouble, double): require lower (";
      double[][] doubleArray0 = new double[5][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Rangedouble, double): require lower (", "Rangedouble, double): require lower (", doubleArray0);
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      ((DefaultCategoryDataset) categoryDataset0).getRowCount();
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      ArrayList<CategoryTableXYDataset> arrayList0 = new ArrayList<CategoryTableXYDataset>();
      jDBCXYDataset0.getRangeBounds(true);
      DatasetUtilities.iterateDomainBounds((XYDataset) jDBCXYDataset0, true);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Stack<YIntervalSeriesCollection> stack0 = new Stack<YIntervalSeriesCollection>();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, (-1700));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, false);
      xYSeries0.createCopy(59, 59);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeries0.add(Double.NEGATIVE_INFINITY, 1186.03);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1116, 28);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, false);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("");
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      XYSeries xYSeries0 = new XYSeries("");
      Stack<YIntervalSeriesCollection> stack0 = new Stack<YIntervalSeriesCollection>();
      TimeTableXYDataset timeTableXYDataset1 = new TimeTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset1, (double) (-446));
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("");
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-154), (-154), (-154), (-154), (-154), (-154));
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar1.getGregorianChange();
      Quarter quarter0 = new Quarter(date0);
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(mockGregorianCalendar0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(4, (-2003));
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue(dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[5][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Range(double, double): require lower (", "Range(double, double): require lower (", doubleArray1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(matrixSeriesCollection0);
      categoryDataset0.addChangeListener(intervalXYDelegate0);
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      DatasetUtilities.createCategoryDataset("", "Range(double, double): require lower (", doubleArray1);
      DatasetUtilities.findRangeBounds(categoryDataset0, true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("),", "", doubleArray1);
      DatasetUtilities.findMinimumRangeValue(categoryDataset1);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[][] doubleArray0 = new double[5][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Range(double, double): require lower (", "Range(double, double): require lower (", doubleArray0);
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(set0);
      DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 298.327778;
      doubleArray1[1] = 0.5;
      doubleArray1[2] = (-653.0672208);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 298.327778;
      doubleArray2[1] = 298.327778;
      doubleArray2[2] = (-653.0672208);
      doubleArray2[3] = 2673.05810486107;
      doubleArray2[4] = 298.327778;
      doubleArray2[5] = 2038.1556257713999;
      doubleArray2[6] = 298.327778;
      doubleArray2[7] = 298.327778;
      doubleArray2[8] = (-653.0672208);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "Pd", doubleArray0);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      System.setCurrentTimeMillis((-87L));
      DatasetUtilities.findMinimumRangeValue(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      TimeZone.getDefault();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Vector<XYIntervalSeriesCollection> vector0 = new Vector<XYIntervalSeriesCollection>();
      Range range0 = new Range(3154, 3154);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      jDBCXYDataset0.close();
      jDBCXYDataset0.getDomainOrder();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) jDBCXYDataset0, (List) vector0, range0, true);
      DatasetUtilities.findMinimumDomainValue(jDBCXYDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0, false);
      LineFunction2D lineFunction2D0 = new LineFunction2D(3154, 3154);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(lineFunction2D0, (-1.0), (-1.0), (-3437), (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      timeTableXYDataset0.getDomainOrder();
      timeTableXYDataset0.getDomainBounds(true);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (-1679));
      LineFunction2D lineFunction2D0 = new LineFunction2D(1168.5, Double.POSITIVE_INFINITY);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(lineFunction2D0, 1168.5, (-943.185621349883), (-1), (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Second second0 = new Second();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      double[][] doubleArray1 = new double[18][0];
      doubleArray1[8] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("m|,j5/>", "o`", doubleArray1);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, (-2835), 0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-346));
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) 0.0, (KeyedValues) categoryToPieDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      TimeZone.getDefault();
      Locale.forLanguageTag("yAiPewC@?Hp<r3'");
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      jDBCPieDataset0.setValue((Comparable) "yAiPewC@?Hp<r3'", (double) (-226));
      DatasetUtilities.createCategoryDataset((Comparable) "yAiPewC@?Hp<r3'", (KeyedValues) jDBCPieDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) null, (KeyedValues) jDBCPieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      boolean boolean0 = true;
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      stack0.add(defaultTableXYDataset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      ArrayList<CategoryTableXYDataset> arrayList0 = new ArrayList<CategoryTableXYDataset>();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(jDBCXYDataset0, stack0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultTableXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Stack<YIntervalSeriesCollection> stack0 = new Stack<YIntervalSeriesCollection>();
      stack0.add((YIntervalSeriesCollection) null);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      stack0.add(yIntervalSeriesCollection0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1, 1);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, keyToGroupMap0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) yIntervalSeriesCollection0, (List) stack0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.YIntervalSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 3112, 8);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingGanttCategoryDataset0, 3112);
      // Undeclared exception!
      try { 
        taskSeriesCollection0.getEndValue(3112, 1382);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3112, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1842.950587130272);
      doubleArray0[3] = 0.0;
      doubleArray0[5] = (-1550.4178851188);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Number[][] numberArray0 = new Number[6][4];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(";y(", ";y(", numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) (-1842.950587130272));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[5][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Range(double, double): require lower (", "Range(double, double): require lower (", doubleArray1);
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("", "Range(double, double): require lower (", doubleArray1);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset1);
      Range.scale(range0, 300.428200105411);
      DatasetUtilities.findRangeBounds(categoryDataset0, true);
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) jDBCXYDataset0, (List) stack0, range0, false);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("org.jfree.data.xy.VectorDataItem", 4, 4);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.iterateXYRangeBounds(matrixSeriesCollection0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("org.jfree.data.xy.VectorDataItem");
      Stack<Object> stack0 = new Stack<Object>();
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, true);
      range0.toString();
      DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, range0, false);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[3][3];
      doubleArray1[0] = doubleArray0;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, (-2312), (-2312));
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset(slidingGanttCategoryDataset0, (-2312), (-2312));
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (double) (-2312));
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      String string0 = "Range(double, double): require lower (";
      double[][] doubleArray1 = new double[5][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Range(double, double): require lower (", "Range(double, double): require lower (", doubleArray1);
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      DatasetUtilities.createCategoryDataset("", "Range(double, double): require lower (", doubleArray1);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      DatasetUtilities.findRangeBounds(categoryDataset0, true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      stack0.trimToSize();
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) jDBCXYDataset0, (List) stack0, range0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) "", 3112.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      TimeZone.getDefault();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      DatasetUtilities.findRangeBounds((XYDataset) xYTaskDataset0, true);
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      ArrayList<CategoryTableXYDataset> arrayList0 = new ArrayList<CategoryTableXYDataset>();
      DatasetUtilities.iterateToFindDomainBounds(xYTaskDataset0, arrayList0, true);
      jDBCXYDataset0.getRangeBounds(true);
      DatasetUtilities.findRangeBounds((XYDataset) xYTaskDataset0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1842.950587130272);
      doubleArray0[0] = (-1082.052);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1945.972077);
      doubleArray0[5] = (-1550.4178851188);
      XYSeries xYSeries0 = new XYSeries((-1550.4178851188), false);
      MetalLabelUI metalLabelUI0 = new MetalLabelUI();
      xYSeries0.addPropertyChangeListener(metalLabelUI0);
      xYSeries0.createCopy(1116, 520);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      double[][] doubleArray1 = new double[7][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      double[] doubleArray2 = new double[0];
      doubleArray1[1] = doubleArray2;
      doubleArray1[6] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray1);
      Vector<Byte> vector0 = new Vector<Byte>();
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) vector0, range0, true);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("");
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      XYSeries xYSeries0 = new XYSeries("");
      xYSeries0.createCopy((-446), 879);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) xYSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1842.950587130272);
      doubleArray0[1] = (-1842.950587130272);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1945.972077);
      doubleArray0[5] = (-1550.4178851188);
      XYSeries xYSeries0 = new XYSeries((-1550.4178851188), false);
      xYSeries0.createCopy(1116, 1116);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeries0.clone();
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Number[][] numberArray0 = new Number[6][4];
      DatasetUtilities.createCategoryDataset(";y(", ";y(", numberArray0);
      Number[][] numberArray1 = new Number[9][7];
      Number[] numberArray2 = new Number[2];
      numberArray2[0] = (Number) 0.0;
      numberArray2[1] = (Number) (-1842.950587130272);
      numberArray1[0] = numberArray2;
      Number[] numberArray3 = new Number[3];
      numberArray3[0] = (Number) (-1550.4178851188);
      numberArray3[1] = (Number) (-1945.972077);
      numberArray3[2] = (Number) 0.0;
      numberArray1[1] = numberArray3;
      Number[] numberArray4 = new Number[7];
      numberArray4[0] = (Number) 0.0;
      Integer integer0 = new Integer(1116);
      numberArray4[1] = (Number) integer0;
      numberArray4[2] = (Number) (-1945.972077);
      numberArray4[3] = (Number) (-1842.950587130272);
      numberArray4[4] = (Number) 0.0;
      numberArray4[5] = (Number) (-1550.4178851188);
      numberArray4[6] = (Number) (-1550.4178851188);
      numberArray1[2] = numberArray4;
      Number[] numberArray5 = new Number[2];
      numberArray5[0] = (Number) integer0;
      numberArray5[1] = (Number) 0.0;
      numberArray1[3] = numberArray5;
      Number[] numberArray6 = new Number[9];
      numberArray6[0] = (Number) (-1842.950587130272);
      numberArray6[1] = (Number) (-1945.972077);
      numberArray6[2] = (Number) 0.0;
      numberArray6[3] = (Number) (-1945.972077);
      numberArray6[4] = (Number) (-1842.950587130272);
      numberArray6[5] = (Number) (-1842.950587130272);
      numberArray6[6] = (Number) (-1945.972077);
      numberArray6[7] = (Number) (-1550.4178851188);
      Integer integer1 = JLayeredPane.FRAME_CONTENT_LAYER;
      numberArray6[8] = (Number) integer1;
      numberArray1[4] = numberArray6;
      Number[] numberArray7 = new Number[2];
      numberArray7[0] = (Number) (-1945.972077);
      numberArray7[1] = (Number) 0.0;
      numberArray1[5] = numberArray7;
      Number[] numberArray8 = new Number[5];
      numberArray8[0] = (Number) (-1945.972077);
      numberArray8[1] = (Number) (-1842.950587130272);
      numberArray8[2] = (Number) (-1842.950587130272);
      numberArray8[3] = (Number) integer1;
      numberArray8[4] = (Number) (-1842.950587130272);
      numberArray1[6] = numberArray8;
      Number[] numberArray9 = new Number[0];
      numberArray1[7] = numberArray9;
      Number[] numberArray10 = new Number[8];
      numberArray10[0] = (Number) 0.0;
      numberArray10[1] = (Number) integer0;
      numberArray10[2] = (Number) integer0;
      numberArray10[3] = (Number) integer1;
      numberArray10[4] = (Number) (-1550.4178851188);
      numberArray10[5] = (Number) (-1842.950587130272);
      numberArray10[6] = (Number) (-1842.950587130272);
      numberArray10[7] = (Number) (-1842.950587130272);
      numberArray1[8] = numberArray10;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(",DA-04V%,!", "Null 'columnKeys' argument.", numberArray1);
      DatasetUtilities.findRangeBounds(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      SerialDate serialDate0 = SerialDate.createInstance(65);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      timeSeriesCollection0.fireSelectionEvent();
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, true);
      XYSeries xYSeries0 = new XYSeries(serialDate0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) linkedList0, false);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) serialDate0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) linkedList0, true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) serialDate0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Vector<XYIntervalSeriesCollection> vector0 = new Stack<XYIntervalSeriesCollection>();
      Range range0 = new Range((-1.0), 3168);
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries("SCALE_AREA_TO_1", (String) null, "SCALE_AREA_TO_1");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
      DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) vector0, true);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1842.950587130272);
      doubleArray0[1] = (-1842.950587130272);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1945.972077);
      doubleArray0[5] = (-1550.4178851188);
      XYSeries xYSeries0 = new XYSeries((-1550.4178851188), false);
      xYSeries0.createCopy(1116, 1116);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeries0.clone();
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      TimeZone.getDefault();
      Locale.forLanguageTag("yAiPewC@?Hp<r3'");
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      vector0.setSize(1);
      Month month0 = new Month();
      month0.getYear();
      XYDataset xYDataset0 = null;
      Stack<DefaultBoxAndWhiskerCategoryDataset> stack0 = new Stack<DefaultBoxAndWhiskerCategoryDataset>();
      Vector<XYSeriesCollection> vector1 = new Vector<XYSeriesCollection>();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      String string0 = "";
      Locale locale0 = Locale.forLanguageTag("");
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      MetalLabelUI metalLabelUI0 = new MetalLabelUI();
      XYSeries xYSeries0 = new XYSeries("");
      xYSeries0.addPropertyChangeListener(metalLabelUI0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 568, 568);
      List<Byte> list0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      TimeZone.getDefault();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-226), 90);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, 1.0);
      DatasetUtilities.findMaximumStackedRangeValue(slidingGanttCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      TimeZone.getDefault();
      GanttCategoryDataset ganttCategoryDataset0 = null;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 46, 8);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      Stack<YIntervalSeriesCollection> stack0 = new Stack<YIntervalSeriesCollection>();
      ArrayList<JDBCXYDataset> arrayList0 = new ArrayList<JDBCXYDataset>();
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      TimeZone.getDefault();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 70, 90);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, keyToGroupMap0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingGanttCategoryDataset0, (Comparable) null);
      DatasetUtilities.isEmptyOrNull(pieDataset0);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DatasetUtilities.iterateDomainBounds((XYDataset) timePeriodValuesCollection0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("");
      locale0.getDisplayLanguage();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      MetalLabelUI metalLabelUI0 = new MetalLabelUI();
      XYSeries xYSeries0 = new XYSeries("");
      xYSeries0.addPropertyChangeListener(metalLabelUI0);
      int int0 = (-446);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      int int1 = 3432;
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) jDBCCategoryDataset0, 3432);
      DatasetUtilities.createCategoryDataset((Comparable) "", (KeyedValues) pieDataset0);
      Stack<YIntervalSeriesCollection> stack0 = new Stack<YIntervalSeriesCollection>();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) jDBCCategoryDataset0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) jDBCCategoryDataset0);
      // Undeclared exception!
      try { 
        Week.parseWeek("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not find separator.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1842.950587130272);
      doubleArray0[1] = (-1842.950587130272);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1945.972077);
      doubleArray0[5] = (-1550.4178851188);
      XYSeries xYSeries0 = new XYSeries((-1550.4178851188), false);
      xYSeries0.createCopy(1116, 1116);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1265, 2);
      Number[][] numberArray0 = new Number[6][4];
      DatasetUtilities.createCategoryDataset(";y(", "Null 'time' argument.", numberArray0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      TimeZone.getDefault();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-226), 90);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, keyToGroupMap0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      SerialDate serialDate0 = SerialDate.createInstance(65);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      timeSeriesCollection0.fireSelectionEvent();
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, true);
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 4;
      doubleArray1[1] = (-2.147483648E9);
      doubleArray1[2] = (-1441.4171);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 2;
      doubleArray2[1] = 2211.922478;
      doubleArray2[2] = (double) 2958465;
      doubleArray2[3] = (-2.147483648E9);
      doubleArray2[4] = (double) 1;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      int int0 = 3112;
      Stack<YIntervalSeriesCollection> stack0 = new Stack<YIntervalSeriesCollection>();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      Comparable<Float>[] comparableArray0 = (Comparable<Float>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[4][1];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 6;
      doubleArray1[1] = (double) 3112;
      doubleArray1[2] = (-1541.233063);
      doubleArray1[3] = 2180.460855890024;
      doubleArray1[4] = (double) 3112;
      doubleArray1[5] = (double) 8;
      doubleArray1[6] = (double) 8;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 6;
      doubleArray2[1] = 2249.699119785;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 2180.460855890024;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      PriorityQueue<JDBCXYDataset> priorityQueue0 = new PriorityQueue<JDBCXYDataset>();
      stack0.containsAll(priorityQueue0);
      Stack<DefaultMultiValueCategoryDataset> stack1 = new Stack<DefaultMultiValueCategoryDataset>();
      stack1.setSize(2009);
      stack1.listIterator();
      Month month0 = new Month();
      month0.getYear();
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[9][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      stack0.setSize(1990);
      stack0.listIterator();
      Month month0 = new Month();
      month0.getYear();
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, (List) stack0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("I0");
      Locale locale1 = Locale.KOREA;
      locale0.getDisplayName(locale1);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      MetalLabelUI metalLabelUI0 = new MetalLabelUI();
      XYSeries xYSeries0 = new XYSeries("I0");
      xYSeries0.addPropertyChangeListener(metalLabelUI0);
      xYSeries0.createCopy((-446), 879);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("");
      DatasetUtilities.findMinimumDomainValue(simpleHistogramDataset0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      TimeZone.getDefault();
      XYSeries xYSeries0 = new XYSeries("", true, false);
      XYSeries xYSeries1 = xYSeries0.createCopy((-681), (-681));
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries1);
      Year year0 = new Year(1898);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries((Function2D) null, (-2494.14), (-1.0), (-1427), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Second second0 = new Second();
      double[][] doubleArray0 = new double[0][5];
      DatasetUtilities.createCategoryDataset("Range(double, double): require lower (", "Range(double, double): require lower (", doubleArray0);
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Range(double, double): require lower (", "!B]VJP)", doubleArray0);
      DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1842.950587130272);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1945.972077);
      doubleArray0[5] = (-1550.4178851188);
      XYSeries xYSeries0 = new XYSeries((-1550.4178851188), false);
      xYSeries0.createCopy(1116, 1116);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
      ArrayList<DefaultHighLowDataset> arrayList0 = new ArrayList<DefaultHighLowDataset>();
      DefaultWindDataset defaultWindDataset0 = null;
      try {
        defaultWindDataset0 = new DefaultWindDataset(arrayList0, (Object[][][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      boolean boolean0 = true;
      double[][] doubleArray1 = new double[5][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Range(double, double): require lower (", "Range(double, double): require lower (", doubleArray1);
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("", "Range(double, double): require lower (", doubleArray1);
      DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      DatasetUtilities.findRangeBounds(categoryDataset1, false);
      Vector<Object> vector0 = new Vector<Object>();
      DefaultWindDataset defaultWindDataset0 = null;
      try {
        defaultWindDataset0 = new DefaultWindDataset(vector0, (Object[][][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("");
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      int int0 = (-226);
      int int1 = 90;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-226), 90);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, keyToGroupMap0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) linkedList0, true);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (Comparable) "");
      Comparable<JDBCXYDataset>[] comparableArray0 = (Comparable<JDBCXYDataset>[]) Array.newInstance(Comparable.class, 2);
      int int2 = 2;
      int int3 = 1;
      MockDate mockDate0 = new MockDate((-226), 2, (-226), 1, 1);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      comparableArray0[0] = (Comparable<JDBCXYDataset>) regularTimePeriod0;
      int int4 = 2334;
      int int5 = 2;
      int int6 = (-5668);
      int int7 = (-831);
      Second second0 = null;
      try {
        second0 = new Second(2, 2334, 2, (-226), (-5668), (-831));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, (-1610612736), (-1610612736));
      DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(jDBCXYDataset0, (-1236.2257251932715));
      xYBarDataset0.getItemCount(182);
      jDBCXYDataset0.removeChangeListener(xYBarDataset0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0, true);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYBarDataset0, false);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("The number of column keys does not match the number of columns in the data array.", (String) null, (Number[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("");
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      XYSeries xYSeries0 = new XYSeries("");
      xYSeries0.createCopy((-1260), (-340));
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, false);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(taskSeriesCollection0, tableOrder0, (-340));
      DatasetUtilities.createCategoryDataset((Comparable) "", (KeyedValues) categoryToPieDataset0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1842.9505871303);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1945.972077);
      doubleArray0[5] = (-1550.4178851188);
      XYSeries xYSeries0 = new XYSeries((-1550.4178851188), false);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) jDBCCategoryDataset0, (-1792));
      DatasetUtilities.createCategoryDataset((Comparable) (-1842.9505871303), (KeyedValues) pieDataset0);
      Stack<YIntervalSeriesCollection> stack0 = new Stack<YIntervalSeriesCollection>();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) jDBCCategoryDataset0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      DatasetUtilities.findRangeBounds((CategoryDataset) jDBCCategoryDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) jDBCCategoryDataset0, false);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries(month0, true);
      XYSeries xYSeries1 = new XYSeries(month0, false);
      int int0 = 188;
      xYSeries0.createCopy(188, 554);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries1);
      xYSeries1.add((-3663.244), (-1945.972077));
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      int int1 = 2;
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getStartY(181, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 181, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("");
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      XYSeries xYSeries0 = new XYSeries("", true, false);
      XYSeries xYSeries1 = xYSeries0.createCopy((-681), (-681));
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries1);
      xYSeries0.add((double) (-681), (-1.0));
      DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0, true);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      locale0.getScript();
      timeTableXYDataset0.hasListener(xYSeriesCollection0);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-1381), 104);
      slidingGanttCategoryDataset0.hasListener(timeTableXYDataset0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Stack<Object> stack0 = new Stack<Object>();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, 880.0426771350683);
      DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0, false);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("");
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      XYSeries xYSeries0 = new XYSeries("", true, false);
      XYSeries xYSeries1 = xYSeries0.createCopy((-681), (-681));
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries1);
      xYSeries0.add((double) (-681), (-1.0));
      SynthTableHeaderUI synthTableHeaderUI0 = new SynthTableHeaderUI();
      xYSeries1.removePropertyChangeListener(synthTableHeaderUI0);
      DatasetUtilities.isEmptyOrNull((PieDataset) null);
      Vector<XYIntervalSeriesCollection> vector0 = new Vector<XYIntervalSeriesCollection>();
      Range range0 = new Range((-3128.0737449749413), (-3128.0737449749413));
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      vector0.add(xYIntervalSeriesCollection0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) vector0, range0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYIntervalSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      TimeZone.getDefault();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      stack0.setSize(1968);
      Month month0 = new Month();
      month0.getYear();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0);
      double double0 = (-612.0);
      Range range0 = Range.expandToInclude((Range) null, (-612.0));
      Range range1 = Range.scale(range0, 1968);
      Range range2 = Range.shift(range1, (-612.0));
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, (List) stack0, range2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.DefaultTableXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Range range0 = new Range(3168, 3168);
      Week week0 = new Week();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, " ~%Tq&V7QN0Kg[r");
      simpleTimeZone0.setStartYear((-1582));
      Locale locale0 = new Locale(" ~%Tq&V7QN0Kg[r", " ~%Tq&V7QN0Kg[r");
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-2811.8052), 709.0, 3168, 709.0, Double.POSITIVE_INFINITY);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      oHLCDataItemArray0[7] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
      Millisecond millisecond0 = new Millisecond();
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) oHLCDataItem0, 709.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ArrayList<DefaultBoxAndWhiskerCategoryDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerCategoryDataset>();
      arrayList0.add(defaultBoxAndWhiskerCategoryDataset0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      Stack<YIntervalSeriesCollection> stack0 = new Stack<YIntervalSeriesCollection>();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1842.950587130272);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1945.972077);
      doubleArray0[5] = (-1550.4178851188);
      XYSeries xYSeries0 = new XYSeries((-1550.4178851188), false);
      xYSeries0.createCopy(1116, 1116);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      Range range0 = new Range(0.0, 0.0);
      Range.shift(range0, 0.0);
      Range.combine(range0, range0);
      DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(2665.4, (-1550.4178851188));
      // Undeclared exception!
      DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-1842.950587130272), 707.0, 1116, 0.0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("");
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-226), 90);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, keyToGroupMap0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingGanttCategoryDataset0, (Comparable) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Second second0 = new Second();
      second0.getMinute();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      Stack<YIntervalSeriesCollection> stack0 = new Stack<YIntervalSeriesCollection>();
      second0.next();
      stack0.add((YIntervalSeriesCollection) null);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      Comparable<DefaultBoxAndWhiskerCategoryDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerCategoryDataset>[]) Array.newInstance(Comparable.class, 9);
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) second0;
      comparableArray0[1] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) second0;
      comparableArray0[2] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) second0;
      comparableArray0[3] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) second0;
      comparableArray0[4] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) second0;
      comparableArray0[5] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) second0;
      comparableArray0[6] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) second0;
      comparableArray0[7] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) second0;
      comparableArray0[8] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) second0;
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Second second0 = new Second();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      Year year0 = new Year(13);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-2699.84430396), (-1968.884495085366), 13, year0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      ArrayList<CategoryTableXYDataset> arrayList0 = new ArrayList<CategoryTableXYDataset>();
      Range.combine(range0, range0);
      DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) arrayList0, false);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 3112, 8);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingGanttCategoryDataset0, 3112);
      Stack<YIntervalSeriesCollection> stack0 = new Stack<YIntervalSeriesCollection>();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DatasetUtilities.findMinimumDomainValue(jDBCXYDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0);
      DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0, (List) stack0, false);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultXYDataset0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultXYDataset0, true);
      Comparable<DefaultMultiValueCategoryDataset>[] comparableArray0 = (Comparable<DefaultMultiValueCategoryDataset>[]) Array.newInstance(Comparable.class, 3);
      int int0 = (-1);
      int int1 = 3;
      SpreadsheetDate spreadsheetDate0 = null;
      try {
        spreadsheetDate0 = new SpreadsheetDate(10, 2, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      SerialDate serialDate0 = SerialDate.createInstance(65);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      timeSeriesCollection0.fireSelectionEvent();
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, true);
      XYSeries xYSeries0 = new XYSeries(serialDate0);
      Comparable<Byte>[] comparableArray0 = (Comparable<Byte>[]) Array.newInstance(Comparable.class, 0);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(comparableArray0, comparableArray0, (Number[][]) null, (Number[][]) null);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 265, 5);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 3112, 3112);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      Stack<YIntervalSeriesCollection> stack0 = new Stack<YIntervalSeriesCollection>();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) null, (Comparable[]) null, (double[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Stack<YIntervalSeriesCollection> stack0 = new Stack<YIntervalSeriesCollection>();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0, true);
      double[][] doubleArray0 = new double[9][3];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1298.4187309699696;
      doubleArray1[1] = (-2267.32);
      doubleArray1[2] = 2295.5;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = (-1064.6);
      doubleArray1[5] = 3493.8;
      doubleArray1[6] = (-2.147483648E9);
      doubleArray1[7] = 8.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 8.0;
      doubleArray2[1] = (-2267.32);
      doubleArray2[2] = (-2267.32);
      doubleArray2[3] = (-2.147483648E9);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = 1.0;
      doubleArray4[1] = 2295.5;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = 1298.4187309699696;
      doubleArray5[1] = (-3322.300658645);
      doubleArray5[2] = 2295.5;
      doubleArray5[3] = (-1064.6);
      doubleArray5[4] = (-1064.6);
      doubleArray5[5] = 8.0;
      doubleArray5[6] = (-2856.0);
      doubleArray5[7] = (-2.147483648E9);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      doubleArray7[0] = (-1064.6);
      doubleArray7[1] = (-3322.300658645);
      doubleArray7[2] = (-3322.300658645);
      doubleArray7[3] = 2295.5;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[0];
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[9];
      doubleArray9[0] = (-2267.32);
      doubleArray9[1] = 1298.4187309699696;
      doubleArray9[2] = (-2267.32);
      doubleArray9[3] = (-1064.6);
      doubleArray9[4] = (-1.0);
      doubleArray9[5] = 8.0;
      doubleArray9[6] = 1.0;
      doubleArray9[7] = (-2267.32);
      doubleArray9[8] = 1298.4187309699696;
      doubleArray0[8] = doubleArray9;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) null, (Comparable[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      Vector<XYIntervalSeriesCollection> vector0 = new Vector<XYIntervalSeriesCollection>();
      Range range0 = new Range(3154, Double.POSITIVE_INFINITY);
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection1);
      jDBCXYDataset0.getDomainOrder();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) jDBCXYDataset0, (List) vector0, range0, true);
      DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("");
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      XYSeries xYSeries0 = new XYSeries("", true, false);
      XYSeries xYSeries1 = xYSeries0.createCopy((-681), (-681));
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries1);
      xYSeries0.add((double) (-681), (-1.0));
      SynthTableHeaderUI synthTableHeaderUI0 = new SynthTableHeaderUI();
      xYSeries1.removePropertyChangeListener(synthTableHeaderUI0);
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, true);
      Vector<DefaultTableXYDataset> vector0 = new Vector<DefaultTableXYDataset>();
      PriorityQueue<JDBCXYDataset> priorityQueue0 = new PriorityQueue<JDBCXYDataset>();
      vector0.containsAll(priorityQueue0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      // Undeclared exception!
      try { 
        vector0.insertElementAt(defaultTableXYDataset0, (-2641));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      Vector<XYIntervalSeriesCollection> vector0 = new Vector<XYIntervalSeriesCollection>();
      Range range0 = new Range(3154, Double.POSITIVE_INFINITY);
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 3154, 8);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset(slidingGanttCategoryDataset0, 106, (-1945));
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection1);
      DatasetUtilities.findMinimumDomainValue(jDBCXYDataset0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("");
      Locale locale1 = Locale.forLanguageTag("");
      locale0.getDisplayName(locale1);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      MetalLabelUI metalLabelUI0 = new MetalLabelUI();
      XYSeries xYSeries0 = new XYSeries("");
      xYSeries0.addPropertyChangeListener(metalLabelUI0);
      xYSeries0.createCopy((-446), 879);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("");
      DatasetUtilities.findMinimumDomainValue(simpleHistogramDataset0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, true, true);
      Second.parseSecond("");
      xYSeries0.setNotify(true);
      xYSeries0.createCopy(59, 59);
      double[][] doubleArray0 = new double[0][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Range(double, double): require lower (", "Range(double, double): require lower (", doubleArray0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 1257);
      Stack<YIntervalSeriesCollection> stack0 = new Stack<YIntervalSeriesCollection>();
      DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) second0, (double) 1257, (-103));
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Range range0 = new Range(3168, 3168);
      Week week0 = new Week();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, " ~%Tq&V7QN1Kg[r");
      int int0 = (-1568);
      simpleTimeZone0.setStartYear((-1568));
      Locale locale0 = new Locale(" ~%Tq&V7QN1Kg[r", " ~%Tq&V7QN1Kg[r");
      Locale.setDefault(locale0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0, locale0);
      Stack<DefaultIntervalCategoryDataset> stack0 = new Stack<DefaultIntervalCategoryDataset>();
      locale0.getDisplayVariant();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, (List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      boolean boolean0 = true;
      ArrayList<CategoryTableXYDataset> arrayList0 = new ArrayList<CategoryTableXYDataset>();
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds((XYDataset) null, (List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      double[][] doubleArray0 = new double[5][3];
      DatasetUtilities.createCategoryDataset("Range(double, double): require lower (", "Range(double, double): require lower (", doubleArray0);
      Vector<Quarter> vector0 = new Vector<Quarter>();
      XYDataset xYDataset0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds((XYDataset) null, vector0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Second second0 = new Second();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      Year year0 = new Year(13);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-2699.84430396), (-1968.884495085366), 13, year0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      ArrayList<CategoryTableXYDataset> arrayList0 = new ArrayList<CategoryTableXYDataset>();
      Range.combine(range0, range0);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DatasetUtilities.findRangeBounds((XYDataset) timePeriodValuesCollection0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("");
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-226), (-226));
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, keyToGroupMap0);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (Comparable) "");
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, false);
      XYSeries xYSeries1 = xYSeries0.createCopy(59, 1317);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries1);
      xYSeries1.add((-455.834327000793), (double) 59);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 3112, 3112);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      Stack<YIntervalSeriesCollection> stack0 = new Stack<YIntervalSeriesCollection>();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, 13);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) slidingGanttCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      TableOrder tableOrder1 = TableOrder.BY_COLUMN;
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      ArrayList<CategoryTableXYDataset> arrayList0 = new ArrayList<CategoryTableXYDataset>();
      DatasetUtilities.iterateToFindDomainBounds(jDBCXYDataset0, arrayList0, true);
      Range.combine((Range) null, (Range) null);
      DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      double[][] doubleArray0 = new double[0][5];
      XYSeries xYSeries0 = new XYSeries("Range(double, double): require lower (", true);
      MetalLabelUI metalLabelUI0 = new MetalLabelUI();
      xYSeries0.addPropertyChangeListener(metalLabelUI0);
      XYSeries xYSeries1 = new XYSeries("Range(double, double): require lower (");
      xYSeries1.createCopy(87, 520);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "Range(double, double): require lower (", doubleArray0);
      DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      DatasetUtilities.isEmptyOrNull(categoryDataset0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "Range(double, double): require lower (", (double) 87, 520);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1842.950587130272);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1945.972077);
      doubleArray0[5] = (-1550.4178851188);
      XYSeries xYSeries0 = new XYSeries((-1550.4178851188), false);
      xYSeries0.createCopy(1116, 554);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeries0.add(0.0, 0.0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1265, 2);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1842.950587130272);
      doubleArray0[1] = (-1082.052);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1945.972077);
      doubleArray0[5] = (-1550.4178851188);
      XYSeries xYSeries0 = new XYSeries((-1550.4178851188), false);
      MetalLabelUI metalLabelUI0 = new MetalLabelUI();
      xYSeries0.addPropertyChangeListener(metalLabelUI0);
      xYSeries0.createCopy(1116, 520);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      double[][] doubleArray1 = new double[7][6];
      doubleArray1[0] = doubleArray0;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
      String string0 = "?nH/a@)!y;qT\\$a";
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset(connection0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("");
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      MetalLabelUI metalLabelUI0 = new MetalLabelUI();
      XYSeries xYSeries0 = new XYSeries("");
      xYSeries0.addPropertyChangeListener(metalLabelUI0);
      xYSeries0.createCopy((-446), 879);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, true, true);
      Second.parseSecond("");
      xYSeries0.setNotify(true);
      xYSeries0.createCopy(59, 59);
      double[][] doubleArray0 = new double[0][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Range(double, double): require lower (", "Range(double, double): require lower (", doubleArray0);
      DatasetUtilities.createPieDatasetForRow(categoryDataset0, 1257);
      Stack<YIntervalSeriesCollection> stack0 = new Stack<YIntervalSeriesCollection>();
      DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds(categoryDataset0, (KeyToGroupMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1842.950587130272);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1945.972077);
      doubleArray0[5] = (-1550.4178851188);
      XYSeries xYSeries0 = new XYSeries((-1550.4178851188), false);
      xYSeries0.createCopy(1116, 554);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeries0.add(0.0, 0.0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      double[][] doubleArray1 = new double[4][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray1);
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(2, 2784, 331.0, 0.0, 0.0, 3112.0);
      DatasetGroup datasetGroup0 = defaultHeatMapDataset0.getGroup();
      taskSeriesCollection0.setGroup(datasetGroup0);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1116, 2784);
      DatasetUtilities.findCumulativeRangeBounds(slidingGanttCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Second second0 = new Second();
      second0.toString();
      XYSeries xYSeries0 = new XYSeries(second0, true, true);
      xYSeries0.setNotify(true);
      xYSeries0.createCopy(59, 59);
      double[][] doubleArray0 = new double[0][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Range(double, double): require lower (", "Range(double, double): require lower (", doubleArray0);
      DatasetUtilities.findRangeBounds(categoryDataset0);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DatasetUtilities.isEmptyOrNull((XYDataset) timePeriodValuesCollection0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 3112, 8);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingGanttCategoryDataset0, 3112);
      Stack<YIntervalSeriesCollection> stack0 = new Stack<YIntervalSeriesCollection>();
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1841.848147090118);
      doubleArray0[1] = 0.0;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1, 3);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset(slidingGanttCategoryDataset0, (-212), 1);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset1);
      DatasetUtilities.findMinimumStackedRangeValue(slidingGanttCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      TableOrder tableOrder1 = TableOrder.BY_COLUMN;
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      ArrayList<CategoryTableXYDataset> arrayList0 = new ArrayList<CategoryTableXYDataset>();
      DatasetUtilities.iterateToFindDomainBounds(jDBCXYDataset0, arrayList0, false);
      Range.combine((Range) null, (Range) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) jDBCXYDataset0, (List) arrayList0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 53, 53, 70, 53, 53);
      Year year0 = new Year(mockDate0);
      MockDate mockDate1 = new MockDate(9999, 0, 9999, 9999, 0);
      Year year1 = new Year();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, (Comparable) year0);
      Long long0 = new Long(4L);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (double) 53);
      LineFunction2D lineFunction2D0 = new LineFunction2D(Double.NaN, 53);
      DatasetUtilities.sampleFunction2D(lineFunction2D0, Double.NaN, (-1236.2257251932715), 112, mockDate1);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries(month0, true);
      xYSeries0.createCopy(554, 2000);
      XYSeries xYSeries1 = xYSeries0.createCopy(554, (-3041));
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries1);
      DatasetUtilities.isEmptyOrNull((PieDataset) null);
      Vector<XYIntervalSeriesCollection> vector0 = new Vector<XYIntervalSeriesCollection>();
      Range range0 = new Range(293.29740825, 1.7976931348623157E308);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) vector0, range0, true);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries(month0, true);
      xYSeries0.createCopy(554, 2000);
      XYSeries xYSeries1 = xYSeries0.createCopy(554, (-3041));
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries1);
      DatasetUtilities.isEmptyOrNull((PieDataset) null);
      Vector<XYIntervalSeriesCollection> vector0 = new Vector<XYIntervalSeriesCollection>();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 104, 101);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
      DatasetUtilities.findMinimumDomainValue(xYSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(jDBCCategoryDataset0, tableOrder0, 3154);
      categoryToPieDataset0.clone();
      DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      Vector<XYIntervalSeriesCollection> vector0 = new Vector<XYIntervalSeriesCollection>();
      Range range0 = new Range(293.29740825, Double.POSITIVE_INFINITY);
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection1);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) jDBCCategoryDataset0, true);
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) xYIntervalSeriesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      TableXYDataset tableXYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null, (-3822.999));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, true, true);
      xYSeries0.setNotify(true);
      xYSeries0.createCopy(59, 59);
      double[][] doubleArray0 = new double[0][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Range(double, double): require lower (", "Range(double, double): require lower (", doubleArray0);
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) stack0, true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      Comparable<DefaultBoxAndWhiskerCategoryDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerCategoryDataset>[]) Array.newInstance(Comparable.class, 2);
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) second0;
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) second0;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1842.950587130272);
      doubleArray0[1] = (-1842.950587130272);
      doubleArray0[3] = (-1842.950587130272);
      doubleArray0[4] = (-1945.972077);
      doubleArray0[5] = (-1550.4178851188);
      XYSeries xYSeries0 = new XYSeries((-1550.4178851188), false);
      xYSeries0.createCopy(1116, 554);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      taskSeriesCollection0.setGroup(datasetGroup0);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1265, 2);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, false);
      Number[][] numberArray0 = new Number[0][4];
      DatasetUtilities.createCategoryDataset(";y(", "Null 'time' argument.", numberArray0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-1.0));
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Second second0 = new Second();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      Year year0 = new Year(13);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-2699.84430396), (-1968.884495085366), 13, year0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      ArrayList<CategoryTableXYDataset> arrayList0 = new ArrayList<CategoryTableXYDataset>();
      Range.combine(range0, range0);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1842.950587130272);
      doubleArray0[1] = (-1082.052);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1945.972077);
      doubleArray0[5] = (-1550.4178851188);
      XYSeries xYSeries0 = new XYSeries((-1550.4178851188), false);
      xYSeries0.createCopy(1116, 520);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeries0.add(0.0, 6.283185307179586);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset(connection0, "?nH/a@)!y;qT$a");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1841.848147090118);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultBoxAndWhiskerCategoryDataset0, tableOrder0, 278);
      categoryToPieDataset0.clone();
      DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      Vector<XYIntervalSeriesCollection> vector0 = new Vector<XYIntervalSeriesCollection>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) vector0, true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) jDBCXYDataset0, (List) vector0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("");
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-226), (-226));
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
      DatasetUtilities.findMinimumDomainValue(timeTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0);
      double[][] doubleArray0 = new double[8][0];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1186.03;
      doubleArray1[1] = 8.0;
      doubleArray1[2] = (-4333.78640535111);
      doubleArray1[3] = Double.POSITIVE_INFINITY;
      doubleArray1[4] = 1531.67294;
      doubleArray1[5] = (-3676.9313284);
      doubleArray1[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = Double.POSITIVE_INFINITY;
      doubleArray3[1] = (-4333.78640535111);
      doubleArray3[2] = 1531.67294;
      doubleArray3[3] = 8.0;
      doubleArray3[4] = (-2406.0);
      doubleArray3[5] = Double.POSITIVE_INFINITY;
      doubleArray3[6] = 1531.67294;
      doubleArray3[7] = 1186.03;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = (-2406.0);
      doubleArray4[1] = (-4333.78640535111);
      doubleArray4[2] = 1531.67294;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = 8.0;
      doubleArray5[1] = 1922.304866596491;
      doubleArray5[2] = (-2406.0);
      doubleArray5[3] = 2454.145055826185;
      doubleArray5[4] = (-4333.78640535111);
      doubleArray5[5] = (-4333.78640535111);
      doubleArray5[6] = 2454.145055826185;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = 1186.03;
      doubleArray6[1] = 2401.1908174;
      doubleArray6[2] = 3154.0;
      doubleArray6[3] = (-3676.9313284);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      doubleArray7[0] = 3154.0;
      doubleArray7[1] = (-3676.9313284);
      doubleArray7[2] = 2401.1908174;
      doubleArray7[3] = 1922.304866596491;
      doubleArray7[4] = (-2406.0);
      doubleArray7[5] = (-3676.9313284);
      doubleArray7[6] = (-2406.0);
      doubleArray7[7] = Double.NEGATIVE_INFINITY;
      doubleArray7[8] = 1531.67294;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[8];
      doubleArray8[0] = 1186.03;
      doubleArray8[1] = Double.NEGATIVE_INFINITY;
      doubleArray8[2] = (-3676.9313284);
      doubleArray8[3] = 63.0;
      doubleArray8[4] = Double.POSITIVE_INFINITY;
      doubleArray8[5] = (-3676.9313284);
      doubleArray8[6] = (-2406.0);
      doubleArray8[7] = Double.POSITIVE_INFINITY;
      doubleArray0[7] = doubleArray8;
      DatasetUtilities.createCategoryDataset("3Mb~", "3Mb~", doubleArray0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 53, 53, 70, 53, 53);
      Year year0 = new Year(mockDate0);
      mockDate0.clone();
      year0.previous();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, (Comparable) year0);
      Long long0 = new Long(4L);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      defaultTableXYDataset0.getDomainUpperBound(true);
      // Undeclared exception!
      try { 
        defaultTableXYDataset0.getSeries(84);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.DefaultTableXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1842.950587130272);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1945.972077);
      doubleArray0[5] = (-1550.4178851188);
      XYSeries xYSeries0 = new XYSeries((-1550.4178851188), false);
      xYSeries0.createCopy(1116, 554);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeries0.add((-1945.972077), (Number) 0.0, false);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1265, 2);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, false);
      SynthCheckBoxUI synthCheckBoxUI0 = new SynthCheckBoxUI();
      xYSeries0.addPropertyChangeListener(synthCheckBoxUI0);
      Number[][] numberArray0 = new Number[0][4];
      DatasetUtilities.createCategoryDataset(";y(", "Null 'time' argument.", numberArray0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 3112, 8);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      Stack<YIntervalSeriesCollection> stack0 = new Stack<YIntervalSeriesCollection>();
      DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) stack0, true);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, 63.0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) slidingGanttCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Month month0 = new Month();
      month0.next();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(49, 49, month0);
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      dynamicTimeSeriesCollection0.addChangeListener(xYDatasetTableModel0);
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>(0);
      month0.toString();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1, 67);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset(slidingGanttCategoryDataset0, 0, 2);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingGanttCategoryDataset0, 0);
      Stack<YIntervalSeriesCollection> stack0 = new Stack<YIntervalSeriesCollection>();
      DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset1, (List) stack0, true);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1, 1);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultIntervalXYDataset0, true);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      stack0.setSize(2748);
      Month month0 = new Month();
      Year year0 = new Year(2748);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      Range range1 = Range.expandToInclude(range0, 9999);
      Range range2 = Range.scale(range1, 128.02);
      DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, (List) stack0, range2, true);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("");
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      XYSeries xYSeries0 = new XYSeries("");
      xYSeries0.createCopy((-446), 879);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      LinkedList<TimeSeriesCollection> linkedList0 = new LinkedList<TimeSeriesCollection>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) jDBCXYDataset0, (List) linkedList0, range0, true);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, false);
      xYSeries0.createCopy(59, 59);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeries0.add(Double.NEGATIVE_INFINITY, 1186.03);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1116, 28);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      Vector<ChronoLocalDate> vector0 = new Vector<ChronoLocalDate>();
      DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, (List) vector0, range0, false);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      TimeZone.getDefault();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      stack0.setSize(1990);
      Month month0 = new Month();
      month0.getYear();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0);
      Range range0 = Range.expandToInclude((Range) null, (-612.0));
      Range range1 = Range.scale(range0, 1990);
      Range range2 = Range.shift(range1, (-612.0));
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, (List) stack0, range2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.DefaultTableXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(jDBCCategoryDataset0, tableOrder0, 3154);
      categoryToPieDataset0.clone();
      DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = 293.29740825;
      Vector<XYIntervalSeriesCollection> vector0 = new Vector<XYIntervalSeriesCollection>();
      Range range0 = new Range(293.29740825, Double.POSITIVE_INFINITY);
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection1);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) jDBCXYDataset0, (List) vector0, range0, true);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("[");
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      XYSeries xYSeries0 = new XYSeries("[", true, false);
      XYSeries xYSeries1 = xYSeries0.createCopy((-681), (-681));
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries1);
      xYSeries0.add((double) (-681), 7.83054978073732);
      SynthTableHeaderUI synthTableHeaderUI0 = new SynthTableHeaderUI();
      xYSeries1.removePropertyChangeListener(synthTableHeaderUI0);
      DatasetUtilities.isEmptyOrNull((PieDataset) null);
      Vector<XYIntervalSeriesCollection> vector0 = new Stack<XYIntervalSeriesCollection>();
      Range range0 = new Range((-3128.0737449749413), (-3128.0737449749413));
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) vector0, range0, true);
      DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, vector0, false);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      MockDate mockDate0 = new MockDate(0, 0, 135, 135, 2, 2);
      Year year0 = new Year(mockDate0);
      mockDate0.clone();
      RegularTimePeriod regularTimePeriod0 = year0.previous();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (Comparable) year0);
      Comparable<DefaultHighLowDataset>[] comparableArray0 = (Comparable<DefaultHighLowDataset>[]) Array.newInstance(Comparable.class, 4);
      comparableArray0[0] = (Comparable<DefaultHighLowDataset>) regularTimePeriod0;
      comparableArray0[1] = (Comparable<DefaultHighLowDataset>) regularTimePeriod0;
      comparableArray0[2] = (Comparable<DefaultHighLowDataset>) regularTimePeriod0;
      comparableArray0[3] = (Comparable<DefaultHighLowDataset>) year0;
      DatasetUtilities.isEmptyOrNull(pieDataset0);
      Vector<XYIntervalSeriesCollection> vector0 = new Vector<XYIntervalSeriesCollection>();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) null, (List) vector0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Connection connection0 = null;
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      PriorityQueue<JDBCXYDataset> priorityQueue0 = new PriorityQueue<JDBCXYDataset>();
      Vector<DefaultTableXYDataset> vector0 = new Stack<DefaultTableXYDataset>();
      vector0.containsAll(priorityQueue0);
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      stack0.setSize(1990);
      Month month0 = new Month();
      month0.getYear();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) null, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1, 1);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
      MockDate mockDate0 = new MockDate(1, 1, 92, (-1972), 121, 121);
      Second second0 = new Second(mockDate0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingGanttCategoryDataset0, (Comparable) second0);
      DatasetUtilities.isEmptyOrNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 3112, 8);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, 6);
      Stack<YIntervalSeriesCollection> stack0 = new Stack<YIntervalSeriesCollection>();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      Class<DefaultIntervalCategoryDataset> class0 = DefaultIntervalCategoryDataset.class;
      RegularTimePeriod.downsize(class0);
      String[] stringArray0 = new String[0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Month month0 = new Month();
      month0.next();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(49, 49, month0);
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      dynamicTimeSeriesCollection0.addChangeListener(xYDatasetTableModel0);
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>(0);
      month0.toString();
      Class<DefaultIntervalCategoryDataset> class0 = DefaultIntervalCategoryDataset.class;
      RegularTimePeriod.downsize(class0);
      vector0.clear();
      vector0.setSize(893);
      vector0.listIterator();
      month0.getYear();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) vector0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1842.950587130272);
      ArrayList<DefaultBoxAndWhiskerCategoryDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerCategoryDataset>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      arrayList0.add(defaultBoxAndWhiskerCategoryDataset0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, 0.0);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 2454.145055826185, (-2490.7782), (-3103), (-1842.950587130272));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 8, (-2640));
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, 1347);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 63;
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (double) 63;
      doubleArray0[3] = (double) 6;
      doubleArray0[4] = (double) (-2640);
      doubleArray0[5] = (double) 6;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 8, 63.0, 2, 6.0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 3112, 10);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingGanttCategoryDataset0, (-414));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-414);
      doubleArray0[1] = (double) 10;
      doubleArray0[2] = (double) 10;
      doubleArray0[3] = (double) 10;
      doubleArray0[4] = (double) 10;
      doubleArray0[5] = (double) (-414);
      doubleArray0[6] = (double) 63;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 63.0, 63, (-1720), 63.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, false, false);
      xYSeries0.setNotify(true);
      xYSeries0.createCopy(59, 59);
      double[][] doubleArray0 = new double[0][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Range(double, double): require lower (", "Range(double, double): require lower (", doubleArray0);
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      stack0.add(xIntervalSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) stack0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XIntervalSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Stack<YIntervalSeriesCollection> stack0 = new Stack<YIntervalSeriesCollection>();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      stack0.add(yIntervalSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.YIntervalSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries(month0, true);
      XYSeries xYSeries1 = xYSeries0.createCopy(554, 2000);
      XYSeries xYSeries2 = xYSeries0.createCopy(554, (-3041));
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries2);
      xYSeries1.add(6.283185307179586, (-435.88));
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection1, (-3041), (-1381));
      slidingGanttCategoryDataset0.hasListener(taskSeriesCollection1);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.iterateRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, true);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      int int0 = 8;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 3112, 8);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, 6);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) 3112;
      doubleArray0[2] = (double) 3112;
      doubleArray0[3] = (double) 63;
      doubleArray0[4] = (double) 8;
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0);
      String string0 = "Invalid index.";
      String string1 = "";
      Number[][] numberArray0 = new Number[4][2];
      Number[] numberArray1 = new Number[6];
      numberArray1[0] = (Number) 8.0;
      numberArray1[1] = (Number) 3112.0;
      numberArray1[2] = (Number) 6.0;
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      numberArray1[3] = (Number) integer0;
      numberArray1[4] = (Number) 6.0;
      numberArray1[5] = (Number) 3112.0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[7];
      numberArray2[0] = (Number) 3112.0;
      numberArray2[1] = (Number) 3112.0;
      numberArray2[2] = (Number) 3112.0;
      numberArray2[3] = (Number) 3112.0;
      // Undeclared exception!
      try { 
        taskSeriesCollection0.getValue((Comparable) 3112.0, (Comparable) "Invalid index.");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      double[][] doubleArray0 = new double[7][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = 602.8923881334694;
      doubleArray1[3] = (-368.14271261);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = Double.NEGATIVE_INFINITY;
      doubleArray2[3] = (-1664.9399);
      doubleArray2[4] = (-368.14271261);
      doubleArray2[5] = 602.8923881334694;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 1.0;
      doubleArray3[1] = Double.NEGATIVE_INFINITY;
      doubleArray3[2] = Double.NEGATIVE_INFINITY;
      doubleArray3[3] = 602.8923881334694;
      doubleArray3[4] = (-1664.9399);
      doubleArray3[5] = (-368.14271261);
      doubleArray3[6] = Double.NEGATIVE_INFINITY;
      doubleArray3[7] = 602.8923881334694;
      doubleArray3[8] = 1.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = (-368.14271261);
      doubleArray4[1] = 1.0;
      doubleArray4[2] = 1.0;
      doubleArray4[3] = 602.8923881334694;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = (-368.14271261);
      doubleArray6[1] = 1.0;
      doubleArray6[2] = 390.16;
      doubleArray6[3] = 602.8923881334694;
      doubleArray6[4] = (-368.14271261);
      doubleArray6[5] = (-368.14271261);
      doubleArray6[6] = 1.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      doubleArray7[0] = Double.NEGATIVE_INFINITY;
      doubleArray7[1] = (-368.14271261);
      doubleArray7[2] = 1.0;
      doubleArray7[3] = 602.8923881334694;
      doubleArray0[6] = doubleArray7;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("");
      Locale locale1 = Locale.forLanguageTag("");
      locale0.getDisplayName(locale1);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2060.25636);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 707.799697782;
      doubleArray2[1] = (-2060.25636);
      doubleArray2[2] = Double.NEGATIVE_INFINITY;
      doubleArray2[3] = (-1574.007263406);
      doubleArray2[4] = 68.0;
      doubleArray2[5] = 707.799697782;
      doubleArray2[6] = 707.799697782;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      TimeZone.getDefault();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      stack0.setSize(1990);
      Month month0 = new Month();
      Year year0 = month0.getYear();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0);
      Range.expandToInclude((Range) null, (-612.0));
      Comparable<Long>[] comparableArray0 = (Comparable<Long>[]) Array.newInstance(Comparable.class, 7);
      Long.getLong("<g5\"}");
      comparableArray0[0] = (Comparable<Long>) null;
      comparableArray0[1] = (Comparable<Long>) month0;
      comparableArray0[2] = (Comparable<Long>) month0;
      comparableArray0[3] = (Comparable<Long>) year0;
      comparableArray0[4] = (Comparable<Long>) year0;
      comparableArray0[5] = (Comparable<Long>) month0;
      comparableArray0[6] = (Comparable<Long>) month0;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, (double[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'rowKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      Comparable<XYIntervalSeriesCollection>[] comparableArray0 = (Comparable<XYIntervalSeriesCollection>[]) Array.newInstance(Comparable.class, 0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, false, false);
      xYSeries0.setNotify(true);
      xYSeries0.createCopy(59, 59);
      double[][] doubleArray0 = new double[0][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Range(double, double): require lower (", "Range(double, double): require lower (", doubleArray0);
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) stack0, false);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      Comparable<DefaultBoxAndWhiskerCategoryDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerCategoryDataset>[]) Array.newInstance(Comparable.class, 2);
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) second0;
      comparableArray0[1] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) second0;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'rowKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(jDBCCategoryDataset0, tableOrder0, 3154);
      Second second0 = new Second();
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(0, 652.6845);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, 3154, (-756), 0, second0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1842.950587130272);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1945.972077);
      doubleArray0[5] = (-1550.4178851188);
      XYSeries xYSeries0 = new XYSeries((-1550.4178851188), false);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-941.5021303), Double.NEGATIVE_INFINITY, 1997, (-1550.4178851188));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 3112, 8);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      Stack<YIntervalSeriesCollection> stack0 = new Stack<YIntervalSeriesCollection>();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      stack0.add(yIntervalSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.YIntervalSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      TimeZone.getDefault();
      Stack<YIntervalSeriesCollection> stack0 = new Stack<YIntervalSeriesCollection>();
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ArrayList<DefaultBoxAndWhiskerCategoryDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerCategoryDataset>();
      arrayList0.add(defaultBoxAndWhiskerCategoryDataset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Stack<YIntervalSeriesCollection> stack0 = new Stack<YIntervalSeriesCollection>();
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 3112, 8);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, 6);
      Stack<YIntervalSeriesCollection> stack0 = new Stack<YIntervalSeriesCollection>();
      DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) stack0, true);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, 63.0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, (double) 3112);
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      SerialDate.createInstance(3112);
      Locale locale0 = Locale.KOREA;
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("srBcaQ8", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'r'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultXYDataset0);
      MockDate mockDate0 = new MockDate(0, 0, 2325, 2325, (-93), 53);
      // Undeclared exception!
      try { 
        TimeZone.getTimeZone((ZoneId) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("");
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-1501), (-1501));
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, keyToGroupMap0);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (Comparable) "");
      DatasetUtilities.findCumulativeRangeBounds(taskSeriesCollection0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timeTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      TimeZone.getDefault();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1091), 49, (-1091), 334, (-288), (-1542));
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Quarter quarter0 = new Quarter(date0);
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(quarter0);
      DatasetUtilities.findMinimumDomainValue(simpleHistogramDataset0);
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) simpleHistogramDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Locale.forLanguageTag("");
      XYSeries xYSeries0 = new XYSeries("");
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("");
      DatasetUtilities.findMinimumDomainValue(simpleHistogramDataset0);
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) xYSeriesCollection0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(jDBCCategoryDataset0, tableOrder0, 3154);
      categoryToPieDataset0.clone();
      DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = 293.29740825;
      doubleArray0[2] = 0.5;
      Vector<XYIntervalSeriesCollection> vector0 = new Vector<XYIntervalSeriesCollection>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) vector0, true);
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection1);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) jDBCXYDataset0, (List) vector0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, true, true);
      xYSeries0.setNotify(true);
      xYSeries0.createCopy(59, 59);
      double[][] doubleArray0 = new double[0][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Range(double, double): require lower (", "Range(double, double): require lower (", doubleArray0);
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) stack0, true);
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("Range(double, double): require lower (", "!B]VJP)", doubleArray0);
      DatasetUtilities.findCumulativeRangeBounds(categoryDataset1);
      DatasetUtilities.findRangeBounds(categoryDataset1, true);
      DefaultWindDataset defaultWindDataset0 = null;
      try {
        defaultWindDataset0 = new DefaultWindDataset(stack0, (Object[][][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1842.950587130272);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1945.972077);
      doubleArray0[5] = (-1550.4178851188);
      XYSeries xYSeries0 = new XYSeries((-1550.4178851188), false);
      xYSeries0.createCopy(1116, 554);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeries0.add(0.0, 6.283185307179586);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1265, 2);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, false);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertEquals(6.283185307179586, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1842.950587130272);
      doubleArray0[1] = (-1082.052);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1945.972077);
      doubleArray0[5] = (-1550.4178851188);
      XYSeries xYSeries0 = new XYSeries((-1550.4178851188), false);
      MetalLabelUI metalLabelUI0 = new MetalLabelUI();
      xYSeries0.addPropertyChangeListener(metalLabelUI0);
      xYSeries0.createCopy(1116, 520);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      double[][] doubleArray1 = new double[7][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      double[] doubleArray2 = new double[0];
      doubleArray1[5] = doubleArray2;
      doubleArray1[6] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray1);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals((-3210.696274624536), range0.getCentralValue(), 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 3112, 8);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, 6);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) 3112;
      doubleArray0[2] = (double) 3112;
      doubleArray0[3] = (double) 63;
      doubleArray0[4] = (double) 8;
      doubleArray0[5] = (double) 8;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 0.0, 707.799697782, 6, 8.0);
      assertEquals(6, xYSeries0.getItemCount());
      assertEquals(1.4231880735146325E15, xYSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1842.950587130272);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1945.972077);
      doubleArray0[5] = (-1550.4178851188);
      XYSeries xYSeries0 = new XYSeries((-1550.4178851188), false);
      xYSeries0.createCopy(1116, 554);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1265, 2);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, false);
      assertNull(range0);
      
      Number[][] numberArray0 = new Number[0][4];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(";y(", "Null 'time' argument.", numberArray0);
      assertNotNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ArrayList<DefaultBoxAndWhiskerCategoryDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerCategoryDataset>();
      DatasetUtilities.iterateCategoryRangeBounds(defaultBoxAndWhiskerCategoryDataset0, false);
      // Undeclared exception!
      try { 
        ZoneOffset.of("Uje~VRUPMRE/Z");
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid ID for ZoneOffset, invalid format: Uje~VRUPMRE/Z
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultXYDataset0, false);
      ArrayList<CategoryTableXYDataset> arrayList0 = new ArrayList<CategoryTableXYDataset>();
      Range.combine((Range) null, (Range) null);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timePeriodValuesCollection0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(4948.901765, 2295.5);
      Second second0 = new Second();
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal((TableXYDataset) null, 59);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Second second0 = new Second();
      Integer integer0 = new Integer(0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer1 = JLayeredPane.DEFAULT_LAYER;
      arrayList0.add(integer1);
      Integer integer2 = JLayeredPane.DEFAULT_LAYER;
      arrayList0.add(integer2);
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 59;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) 534;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = (double) 534;
      doubleArray3[1] = (double) 534;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = Double.POSITIVE_INFINITY;
      doubleArray3[4] = (double) 0;
      doubleArray3[5] = (double) 0;
      doubleArray3[6] = (double) 59;
      doubleArray3[7] = (double) 0;
      doubleArray3[8] = (double) 59;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", ".%w$?", doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds(categoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, false, false);
      xYSeries0.setNotify(true);
      xYSeries0.createCopy(59, 59);
      double[][] doubleArray0 = new double[0][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Range(double, double): require lower (", "Range(double, double): require lower (", doubleArray0);
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) stack0, false);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) jDBCXYDataset0, (List) stack0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, false, false);
      xYSeries0.setNotify(true);
      xYSeries0.createCopy(59, 59);
      double[][] doubleArray0 = new double[0][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Range(double, double): require lower (", "Range(double, double): require lower (", doubleArray0);
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) stack0, false);
      Stack<YIntervalSeriesCollection> stack1 = new Stack<YIntervalSeriesCollection>();
      DatasetUtilities.findRangeBounds(categoryDataset0, (List) stack0, false);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-1.0));
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultTableXYDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      String string0 = "-cSOg(";
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("-cSOg(", "-cSOg(", (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      int int0 = 135;
      int int1 = 2;
      MockDate mockDate0 = new MockDate(0, 0, 135, 135, 2, 2);
      Year year0 = new Year(mockDate0);
      mockDate0.clone();
      RegularTimePeriod regularTimePeriod0 = year0.previous();
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (Comparable) year0);
      Comparable<DefaultHighLowDataset>[] comparableArray0 = (Comparable<DefaultHighLowDataset>[]) Array.newInstance(Comparable.class, 4);
      comparableArray0[0] = (Comparable<DefaultHighLowDataset>) regularTimePeriod0;
      comparableArray0[1] = (Comparable<DefaultHighLowDataset>) regularTimePeriod0;
      comparableArray0[2] = (Comparable<DefaultHighLowDataset>) regularTimePeriod0;
      comparableArray0[3] = (Comparable<DefaultHighLowDataset>) year0;
      Number[][] numberArray0 = new Number[9][1];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[3];
      numberArray2[0] = (Number) (-9999);
      numberArray2[1] = (Number) 9999;
      numberArray2[2] = (Number) (-9999);
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[9];
      numberArray3[0] = (Number) (-9999);
      numberArray3[1] = (Number) 9999;
      numberArray3[2] = (Number) 9999;
      numberArray3[3] = (Number) (-9999);
      numberArray3[4] = (Number) (-9999);
      numberArray3[5] = (Number) (-9999);
      numberArray3[6] = (Number) (-9999);
      numberArray3[7] = (Number) (-9999);
      numberArray3[8] = (Number) 9999;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[3];
      Long long0 = new Long(0L);
      numberArray4[0] = (Number) long0;
      numberArray4[1] = (Number) 9999;
      numberArray4[2] = (Number) (-9999);
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[4];
      numberArray5[0] = (Number) long0;
      numberArray5[1] = (Number) long0;
      numberArray5[2] = (Number) long0;
      numberArray5[3] = (Number) 9999;
      numberArray0[4] = numberArray5;
      Number[] numberArray6 = new Number[5];
      numberArray6[0] = (Number) long0;
      numberArray6[1] = (Number) long0;
      boolean boolean0 = true;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      // Undeclared exception!
      try { 
        defaultTableXYDataset0.getSeries(135);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.DefaultTableXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      boolean boolean0 = arrayList0.add(integer0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      SynthMenuItemUI synthMenuItemUI0 = new SynthMenuItemUI();
      boolean boolean1 = defaultPieDataset0.hasListener(synthMenuItemUI0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ArrayList<DefaultBoxAndWhiskerCategoryDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerCategoryDataset>();
      arrayList0.add(defaultBoxAndWhiskerCategoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) vector0, true);
      Range.combine((Range) null, (Range) null);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(taskSeriesCollection0);
      assertNull(range0);
      
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, 90);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 90;
      doubleArray0[1] = (double) 90;
      doubleArray0[2] = (double) 90;
      doubleArray0[3] = (double) 90;
      doubleArray0[4] = (double) 90;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, Double.NEGATIVE_INFINITY, 90.0, 90, 90.0);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(90, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("", (String) null, (Number[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-1842.950587130272);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-1945.972077);
      doubleArray1[5] = (-1550.4178851188);
      doubleArray1[6] = (-1.0);
      doubleArray1[7] = 537.6577334858291;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 537.6577334858291;
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (-1945.972077);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 537.6577334858291;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = (-1.0);
      doubleArray4[3] = (-1.0);
      doubleArray4[4] = 0.0;
      doubleArray4[5] = 0.0;
      doubleArray4[6] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = (-1945.972077);
      doubleArray5[1] = (-1550.4178851188);
      doubleArray5[2] = 537.6577334858291;
      doubleArray5[3] = 0.0;
      doubleArray5[4] = (-1842.950587130272);
      doubleArray5[5] = (-1842.950587130272);
      doubleArray5[6] = (-1842.950587130272);
      doubleArray5[7] = 537.6577334858291;
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      int int0 = 1;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1, 1);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
      Comparable<DefaultTableXYDataset>[] comparableArray0 = (Comparable<DefaultTableXYDataset>[]) Array.newInstance(Comparable.class, 7);
      int int1 = 182;
      int int2 = 484;
      Minute minute0 = null;
      try {
        minute0 = new Minute(1, 0, 182, 1, 484);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, false, false);
      XYSeries xYSeries1 = xYSeries0.createCopy((-2165), 59);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries1);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 3671, 2000);
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Comparable<IntervalXYDelegate>[] comparableArray0 = (Comparable<IntervalXYDelegate>[]) Array.newInstance(Comparable.class, 0);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(comparableArray0, comparableArray0, (Number[][]) null, (Number[][]) null);
      int int0 = 0;
      int int1 = 0;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 0, 0);
      Second second0 = new Second();
      Class<DefaultOHLCDataset> class0 = DefaultOHLCDataset.class;
      RegularTimePeriod.downsize(class0);
      second0.getMiddleMillisecond();
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, (Comparable) second0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(jDBCCategoryDataset0, tableOrder0, 3154);
      categoryToPieDataset0.clone();
      DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        jDBCCategoryDataset0.executeQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(4948.901765, 2295.5);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultBoxAndWhiskerCategoryDataset0, 8, 1300);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(slidingCategoryDataset0, tableOrder0, 8);
      categoryToPieDataset0.clone();
      DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("", "", (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      TableXYDataset tableXYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      double[][] doubleArray0 = new double[7][0];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 746.77967716097;
      doubleArray1[1] = 514.08203235501;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 1378.950469108;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 1378.950469108;
      doubleArray2[1] = 1378.950469108;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = 746.77967716097;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 746.77967716097;
      doubleArray4[3] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = 1378.950469108;
      doubleArray5[1] = 746.77967716097;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      doubleArray6[0] = 1113.694458365449;
      doubleArray6[1] = Double.NaN;
      doubleArray6[2] = 746.77967716097;
      doubleArray6[3] = (-1.0);
      doubleArray6[4] = 0.0;
      doubleArray6[5] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[0];
      doubleArray0[6] = doubleArray7;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.time.SerialDate", "", doubleArray0);
      assertNotNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 3112, 3112);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingGanttCategoryDataset0, 90);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 3112;
      doubleArray0[1] = (double) 3112;
      doubleArray0[2] = (double) 90;
      doubleArray0[3] = (double) 90;
      doubleArray0[4] = (double) 3112;
      doubleArray0[5] = (double) 3112;
      doubleArray0[6] = (double) 3112;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-1.0), 90.0, (-1), 3112.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      double double0 = 4948.901765;
      double double1 = 2295.5;
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(4948.901765, 2295.5);
      double double2 = 0.0;
      int int0 = (-756);
      Second second0 = new Second();
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, 0.0, 2295.5, (-756), second0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("");
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) "", (KeyedValues) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowData' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultXYDataset0, false);
      ArrayList<CategoryTableXYDataset> arrayList0 = new ArrayList<CategoryTableXYDataset>();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultXYDataset0, (List) arrayList0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) null, (KeyedValues) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }
}
