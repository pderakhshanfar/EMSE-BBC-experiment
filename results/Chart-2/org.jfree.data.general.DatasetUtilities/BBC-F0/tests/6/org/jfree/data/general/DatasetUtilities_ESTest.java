/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 16 20:27:00 GMT 2020
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.math.BigInteger;
import java.sql.Connection;
import java.sql.Statement;
import java.text.DateFormatSymbols;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Date;
import java.util.EventListener;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import java.util.function.UnaryOperator;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.event.DatasetChangeInfo;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.KeyToGroupMap;
import org.jfree.data.KeyedValues;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.event.DatasetChangeEvent;
import org.jfree.data.event.SeriesChangeEvent;
import org.jfree.data.function.Function2D;
import org.jfree.data.function.LineFunction2D;
import org.jfree.data.function.NormalDistributionFunction2D;
import org.jfree.data.function.PolynomialFunction2D;
import org.jfree.data.function.PowerFunction2D;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeries;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DatasetUtilities;
import org.jfree.data.general.DefaultHeatMapDataset;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.pie.DefaultPieDataset;
import org.jfree.data.pie.PieDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodValue;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.IntervalXYDelegate;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYDatasetTableModel;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.YIntervalSeries;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DatasetUtilities_ESTest extends DatasetUtilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.validateObject();
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Short short0 = new Short((short)102);
      arrayList0.add(short0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Hour hour0 = new Hour();
      defaultKeyedValues2DDataset0.addValue((double) 23, (Comparable) hour0, (Comparable) hour0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultKeyedValues2DDataset0, tableOrder0, 0);
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) hour0, Double.POSITIVE_INFINITY, 33);
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) hour0, 1108.7516695126, 116);
      DatasetUtilities.isEmptyOrNull(pieDataset0);
      Float float0 = new Float(0.0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      Comparable<JDBCXYDataset>[] comparableArray0 = (Comparable<JDBCXYDataset>[]) Array.newInstance(Comparable.class, 0);
      Comparable<Minute>[] comparableArray1 = (Comparable<Minute>[]) Array.newInstance(Comparable.class, 8);
      comparableArray1[0] = (Comparable<Minute>) regularTimePeriod0;
      comparableArray1[1] = (Comparable<Minute>) regularTimePeriod0;
      comparableArray1[2] = (Comparable<Minute>) fixedMillisecond0;
      comparableArray1[3] = (Comparable<Minute>) regularTimePeriod0;
      comparableArray1[4] = (Comparable<Minute>) regularTimePeriod0;
      comparableArray1[5] = (Comparable<Minute>) fixedMillisecond0;
      comparableArray1[6] = (Comparable<Minute>) regularTimePeriod0;
      comparableArray1[7] = (Comparable<Minute>) regularTimePeriod0;
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-634.821);
      doubleArray1[1] = (-868.8726177792);
      doubleArray1[2] = (-874.26896014964);
      doubleArray1[3] = 3344.25962174743;
      doubleArray1[4] = 1106.662593179102;
      doubleArray1[5] = 1580.718;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 1580.718;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (-634.821);
      doubleArray3[1] = (-868.8726177792);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = 1580.718;
      doubleArray4[1] = (-634.821);
      doubleArray4[2] = 1580.718;
      doubleArray4[3] = (-868.8726177792);
      doubleArray4[4] = (-634.821);
      doubleArray4[5] = 1106.662593179102;
      doubleArray4[6] = (-874.26896014964);
      doubleArray4[7] = 1.0;
      doubleArray0[3] = doubleArray4;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'columnKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Hour hour0 = new Hour();
      defaultKeyedValues2DDataset0.addValue((double) 23, (Comparable) hour0, (Comparable) hour0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate(0, 2350, 2350, 2350, 2350);
      mockDate0.getTime();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-2325.8179078725916), 2350, 2350, 1.0100394099476853, 2350);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(hour0, oHLCDataItemArray0);
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 23, 0, 2350, (-536.42603973), 0);
      DefaultOHLCDataset defaultOHLCDataset1 = new DefaultOHLCDataset(hour0, oHLCDataItemArray0);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset1, true);
      ArrayList<CategoryTableXYDataset> arrayList0 = new ArrayList<CategoryTableXYDataset>();
      DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, true);
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset1);
      mockDate0.setTime(0L);
      Range.combine(range0, range0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Hour hour0 = new Hour();
      defaultKeyedValues2DDataset0.addValue((double) 23, (Comparable) hour0, (Comparable) hour0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate(0, 2350, 0, 2350, 0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-2325.8179078725916), 2350, 2350, 1.5, 2350);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(hour0, oHLCDataItemArray0);
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 23, (-1.7976931348623157E308), 2350, (-536.42603973), 0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Day day0 = new Day(mockDate0, timeZone0);
      DefaultOHLCDataset defaultOHLCDataset1 = new DefaultOHLCDataset(hour0, oHLCDataItemArray0);
      DatasetUtilities.findMinimumDomainValue(defaultOHLCDataset0);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset1, true);
      ArrayList<CategoryTableXYDataset> arrayList0 = new ArrayList<CategoryTableXYDataset>();
      DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, true);
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset1);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) arrayList0, true);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1, 79, 366, 0, 79);
      double double0 = (-1222.5322601379);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1743.45766, (-1222.5322601379), 366, (-1222.5322601379), 1.5);
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-1222.5322601379), (-165.458861911), 0, 0, 822.872);
      Second second0 = new Second(mockDate0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      boolean boolean0 = false;
      DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, false);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (366.0) <= upper (-1222.5322601379).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Short short0 = Short.decode("2");
      arrayList0.add(short0);
      Day day0 = new Day();
      Number[][] numberArray0 = new Number[1][1];
      Number[] numberArray1 = new Number[7];
      numberArray1[0] = (Number) short0;
      numberArray1[1] = (Number) short0;
      numberArray1[2] = (Number) short0;
      numberArray1[3] = (Number) short0;
      numberArray1[4] = (Number) short0;
      numberArray1[5] = (Number) short0;
      numberArray1[6] = (Number) short0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      MockDate mockDate0 = new MockDate(91, 79, 79, 3622, 0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 79, 79, (-2961.4070102745), 285.630301, 91);
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-2961.4070102745), 102.5, 3.0, (-2961.4070102745), 285.630301);
      Second second0 = new Second(mockDate0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem1;
      second0.previous();
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(second0, oHLCDataItemArray0);
      Range range0 = new Range((-2961.4070102745), 285.630301);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0);
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, true);
      DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      MockDate mockDate0 = new MockDate();
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      jDBCCategoryDataset0.addValue((double) 0, (Comparable) serialDate0, (Comparable) mockDate0);
      DatasetUtilities.findCumulativeRangeBounds(jDBCCategoryDataset0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(jDBCCategoryDataset0, (-1), 6);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findRangeBounds((CategoryDataset) jDBCCategoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      Hour hour0 = new Hour();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      defaultCategoryDataset0.addValue((double) 23, (Comparable) hour0, (Comparable) hour0);
      Number[][] numberArray0 = new Number[2][1];
      Number[] numberArray1 = new Number[6];
      numberArray1[0] = (Number) 23;
      numberArray1[1] = (Number) 23;
      numberArray1[2] = (Number) 23;
      numberArray1[3] = (Number) 0;
      numberArray1[4] = (Number) 0;
      numberArray1[5] = (Number) 0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[5];
      numberArray2[0] = (Number) 23;
      numberArray2[1] = (Number) 23;
      numberArray2[2] = (Number) 23;
      numberArray2[3] = (Number) 0;
      numberArray2[4] = (Number) 23;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Hour hour0 = new Hour();
      defaultCategoryDataset0.addValue((double) 23, (Comparable) hour0, (Comparable) hour0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, 0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(pieDataset0);
      DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      defaultTableXYDataset0.setIntervalWidth(0);
      DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 23);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Short short0 = new Short((short)3519);
      Short short1 = new Short((short)1);
      arrayList0.add(short0);
      Short short2 = new Short((short)3519);
      Day day0 = new Day();
      defaultMultiValueCategoryDataset0.add(arrayList0, short0, short2);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      Range range0 = new Range(653.81194, (short)3519);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, (-852), day0);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) arrayList0, range0, true);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Hour hour0 = new Hour();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(608, 0, 608);
      hour0.getMiddleMillisecond((Calendar) mockGregorianCalendar0);
      hour0.next();
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, (Comparable) hour0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      stack0.add((Object) yIntervalSeriesCollection0);
      Comparable<Double>[] comparableArray0 = (Comparable<Double>[]) Array.newInstance(Comparable.class, 1);
      double[][] doubleArray0 = new double[1][5];
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of column keys does not match the number of columns in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1, 79, 365, 0, 79);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1743.45766, (-1222.5322601379), 365, (-1222.5322601379), 1.5);
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-1222.5322601379), (-165.458861911), 0, 0, 822.872);
      Second second0 = new Second(mockDate0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      Range range0 = new Range((-1833.3535216306), 6905.52183);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, true);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-1173.05636), (-781.452412), 91, "org.jfree.data.gantt.TaskSeriesCollection");
      DatasetUtilities.iterateDomainBounds(xYDataset0);
      DatasetUtilities.findMinimumRangeValue(xYDataset0);
      Comparable<Month>[] comparableArray0 = (Comparable<Month>[]) Array.newInstance(Comparable.class, 2);
      Week week0 = new Week(91, (-948));
      comparableArray0[0] = (Comparable<Month>) week0;
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week0, (Number) 1);
      comparableArray0[1] = (Comparable<Month>) timeSeriesDataItem0;
      double[][] doubleArray1 = new double[8][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) (-948);
      doubleArray2[1] = (double) (-948);
      doubleArray2[2] = (double) (-948);
      doubleArray2[3] = 1204.3782249028;
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, (Comparable[]) null, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'columnKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 0.5;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = 1.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(polynomialFunction2D0, Double.NaN, 6.283185307179586, 91, 0.5);
      DatasetUtilities.iterateDomainBounds(xYDataset0);
      DatasetUtilities.findMinimumRangeValue(xYDataset0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1, 79, 365, 0, 79);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(mockDate0);
      Quarter quarter0 = new Quarter();
      quarter0.getEnd();
      RegularTimePeriod regularTimePeriod0 = quarter0.previous();
      Locale locale0 = Locale.ROOT;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      regularTimePeriod0.getFirstMillisecond(calendar0);
      timePeriodValues0.add((TimePeriod) regularTimePeriod0, (Number) 4);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      TimePeriodValuesCollection timePeriodValuesCollection1 = new TimePeriodValuesCollection(timePeriodValues0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) timePeriodValuesCollection1);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timePeriodValuesCollection1);
      DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      Vector<DefaultHighLowDataset> vector0 = new Vector<DefaultHighLowDataset>();
      Number[][] numberArray0 = new Number[2][0];
      Number[] numberArray1 = new Number[3];
      Integer integer0 = new Integer(64);
      numberArray1[0] = (Number) integer0;
      Float float0 = new Float((double) 64);
      numberArray1[1] = (Number) float0;
      Integer.getInteger("|74k$:#9o?DsT");
      numberArray1[2] = (Number) null;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[9];
      numberArray2[0] = (Number) integer0;
      numberArray2[1] = (Number) integer0;
      numberArray2[2] = (Number) float0;
      numberArray2[3] = (Number) null;
      numberArray2[4] = (Number) float0;
      numberArray2[5] = (Number) integer0;
      numberArray2[6] = (Number) float0;
      numberArray2[7] = (Number) null;
      numberArray2[8] = (Number) null;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[][] doubleArray0 = new double[8][6];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 856.0;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 1770.468196;
      doubleArray1[4] = (-516.8);
      doubleArray1[5] = 0.5;
      doubleArray1[6] = 2733.107386091;
      doubleArray1[7] = (-4992.615);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 2733.107386091;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = (-4992.615);
      doubleArray2[3] = (-516.8);
      doubleArray2[4] = 0.5;
      doubleArray2[5] = (-516.8);
      doubleArray2[6] = 1.0;
      doubleArray2[7] = 0.5;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = 856.0;
      doubleArray4[1] = 1.0;
      doubleArray4[2] = 1.0;
      doubleArray4[3] = 1770.468196;
      doubleArray4[4] = 1770.468196;
      doubleArray4[5] = 2733.107386091;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = 856.0;
      doubleArray5[1] = 1.0;
      doubleArray5[2] = 2733.107386091;
      doubleArray5[3] = 1.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = 0.5;
      doubleArray6[1] = (-4992.615);
      doubleArray6[2] = (-4992.615);
      doubleArray6[3] = (-516.8);
      doubleArray6[4] = 1.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      doubleArray7[0] = 856.0;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = 856.0;
      doubleArray7[3] = 1.0;
      doubleArray7[4] = 1770.468196;
      doubleArray7[5] = 1770.468196;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[6];
      doubleArray8[0] = 1.0;
      doubleArray8[1] = (-4992.615);
      doubleArray8[2] = 1770.468196;
      doubleArray8[3] = 0.0;
      doubleArray8[4] = 0.5;
      doubleArray8[5] = 0.5;
      doubleArray0[7] = doubleArray8;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (-4992.615));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) null);
      MockDate mockDate0 = new MockDate(91, 79, 79, 3622, 0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 79, 79, (-2961.4070102745), 285.630301, 91);
      Comparable<XYBarDataset>[] comparableArray0 = (Comparable<XYBarDataset>[]) Array.newInstance(Comparable.class, 2);
      comparableArray0[0] = (Comparable<XYBarDataset>) oHLCDataItem0;
      comparableArray0[1] = (Comparable<XYBarDataset>) oHLCDataItem0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(comparableArray0, comparableArray0, (Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) null);
      MockDate mockDate0 = new MockDate(91, 79, 79, 3622, 0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 79, 79, (-2961.4070102745), 285.630301, 91);
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 2845.475939873589, 102.5, 3.0, 2845.475939873589, 285.630301);
      Second second0 = new Second(mockDate0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem1;
      second0.previous();
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(second0, oHLCDataItemArray0);
      Range range0 = new Range((-2961.4070102745), 285.630301);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0);
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, true);
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, true);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      TaskSeries taskSeries0 = new TaskSeries(",p`!,0z-:gVXiF'");
      taskSeriesCollection0.add(taskSeries0);
      DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) null);
      MockDate mockDate0 = new MockDate(91, 79, 79, 3622, 0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 79, 79, (-2961.4070102745), 285.630301, 91);
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 2845.475939873589, 102.5, 0, 2845.475939873589, 1847.540713426885);
      Second second0 = new Second(mockDate0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(second0, oHLCDataItemArray0);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultOHLCDataset0);
      defaultOHLCDataset0.removeChangeListener(intervalXYDelegate0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, false);
      DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, false);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, keyToGroupMap0);
      DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (Comparable) oHLCDataItem0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      timePeriodValues0.getItemCount();
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) null);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      jDBCCategoryDataset0.setValue((Number) null, (Comparable) fixedMillisecond0, (Comparable) fixedMillisecond0);
      Number[][] numberArray0 = new Number[1][0];
      Number[] numberArray1 = new Number[8];
      numberArray1[0] = null;
      numberArray1[1] = null;
      numberArray1[2] = null;
      numberArray1[3] = null;
      numberArray1[4] = null;
      numberArray1[5] = null;
      numberArray1[6] = null;
      numberArray1[7] = null;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, numberArray0);
      DatasetUtilities.isEmptyOrNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) null);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      defaultCategoryDataset0.setValue((Number) null, (Comparable) fixedMillisecond0, (Comparable) fixedMillisecond0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Hour hour0 = new Hour();
      Stack<Object> stack0 = new Stack<Object>();
      stack0.add((Object) null);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0);
      dynamicTimeSeriesCollection0.getRangeBounds(true);
      MockDate mockDate0 = new MockDate(1, 2, 0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 23, 3.0, Double.NEGATIVE_INFINITY, 3.0, Double.NEGATIVE_INFINITY);
      Second second0 = new Second(mockDate0);
      second0.previous();
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(hour0, (OHLCDataItem[]) null);
      Range range0 = new Range((-266.97), 0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-192), 2364, 2364, 2364, (-192));
      Hour hour0 = new Hour(mockDate0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      Locale locale0 = Locale.CHINA;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      ParsePosition parsePosition0 = new ParsePosition(1600);
      Date date0 = mockSimpleDateFormat0.parse("_?ll%zM(|", parsePosition0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 0, 1007.8111055684731, 1600, (-491.386), (-3017.651160123583));
      oHLCDataItemArray0[0] = oHLCDataItem0;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1226, (-192), 91, 1786, 1600, 23);
      Date date1 = mockGregorianCalendar0.getGregorianChange();
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date1, Double.NEGATIVE_INFINITY, 1007.8111055684731, 23, (-1874.62529928), (-1579.505102676326));
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 91, 1.5, 91, 1595.7211299575386, 1034.555943);
      oHLCDataItemArray0[2] = oHLCDataItem2;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(hour0, oHLCDataItemArray0);
      DatasetUtilities.findMinimumDomainValue(defaultOHLCDataset0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) null);
      MockDate mockDate0 = new MockDate(91, 79, 79, 3622, 0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 79, 79, (-2961.4070102745), 285.630301, 91);
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 2845.475939873589, 102.5, 3.0, 2845.475939873589, 1847.540713426885);
      Second second0 = new Second(mockDate0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem1;
      second0.previous();
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(second0, oHLCDataItemArray0);
      Range range0 = new Range((-2961.4070102745), 285.630301);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, true);
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) null);
      MockDate mockDate0 = new MockDate(91, 79, 79, 3622, 0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 79, 79, (-2961.4070102745), 285.630301, 91);
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 2845.475939873589, 102.5, 3.0, 2845.475939873589, 1847.540713426885);
      Second second0 = new Second(mockDate0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(second0, oHLCDataItemArray0);
      Range range0 = new Range((-2961.4070102745), 285.630301);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, true);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Hour hour0 = new Hour();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      defaultKeyedValuesDataset0.insertValue(0, (Comparable) hour0, (Number) 23);
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) hour0, (double) 23, 0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to org.jfree.data.SelectableValue
         //
         verifyException("org.jfree.data.pie.DefaultPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Hour hour0 = new Hour();
      Stack<Object> stack0 = new Stack<Object>();
      stack0.add((Object) null);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0);
      dynamicTimeSeriesCollection0.getRangeBounds(true);
      DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, (List) stack0, true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      dynamicTimeSeriesCollection0.getDomainOrder();
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) 1, (double) 0, (-166));
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(pieDataset0);
      DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
      DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, stack0, true);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Short short0 = new Short((short) (-1196));
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      defaultKeyedValues2DDataset0.setSelectionState(jDBCCategoryDataset0);
      defaultKeyedValues2DDataset0.setValue((Number) short0, (Comparable) short0, (Comparable) short0);
      Short short1 = new Short((short) (-1802));
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.iterateCategoryRangeBounds(defaultKeyedValues2DDataset0, false);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      MockDate mockDate0 = new MockDate(1531, 4063, 271, 22, 271, 71);
      Second second0 = new Second(mockDate0);
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, (OHLCDataItem[]) null);
      Range range0 = new Range(0, 22);
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Vk88%i)m", "", doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 86);
      Float float0 = new Float((float) 86);
      DatasetChangeInfo datasetChangeInfo0 = new DatasetChangeInfo();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(float0, categoryDataset0, datasetChangeInfo0);
      categoryToPieDataset0.datasetChanged(datasetChangeEvent0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) "Vk88%i)m", (KeyedValues) categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 86, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.validateObject();
      Short short0 = new Short((short)102);
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Short short1 = new Short((short)102);
      arrayList0.add(short1);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      LineFunction2D lineFunction2D0 = new LineFunction2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, 0.0, (short)102, (short)102, short0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries(8);
      xYSeries0.addOrUpdate((Number) 8, (Number) 8);
      Stack<Object> stack0 = new Stack<Object>();
      stack0.add((Object) null);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(8, 8);
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, (OHLCDataItem[]) null);
      DatasetUtilities.iterateRangeBounds((XYDataset) dynamicTimeSeriesCollection0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.isEmptyOrNull((XYDataset) null);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 23, (Number) 0);
      xYDataItem0.isSelected();
      xYSeries0.add(xYDataItem0, false);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
      DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, false);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries(8);
      xYSeries0.add(1.7976931348623157E308, Double.NaN);
      xYSeries0.addOrUpdate((Number) 8, (Number) 8);
      Stack<Object> stack0 = new Stack<Object>();
      stack0.add((Object) null);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(8, 8);
      dynamicTimeSeriesCollection0.getRangeBounds(false);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue(dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) null);
      MockDate mockDate0 = new MockDate(91, 79, 79, 3622, 0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 79, 79, (-2961.4070102745), 285.630301, 91);
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 2845.475939873589, 102.5, 3.0, 2845.475939873589, 1847.540713426885);
      Second second0 = new Second(mockDate0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(second0, oHLCDataItemArray0);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, false);
      DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, false);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, keyToGroupMap0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Hour hour0 = new Hour();
      defaultKeyedValues2DDataset0.addValue((-1.7976931348623157E308), (Comparable) hour0, (Comparable) hour0);
      DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultKeyedValues2DDataset0, 2826, 2826);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Hour hour0 = new Hour();
      defaultCategoryDataset0.addValue((double) 23, (Comparable) hour0, (Comparable) hour0);
      DatasetUtilities.findMaximumStackedRangeValue(defaultCategoryDataset0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Null 'f' argument.";
      stringArray0[1] = "$uUgtn:u&~8Xwqz1";
      stringArray0[2] = "nVv'";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 23, (Number) 0);
      xYDataItem0.isSelected();
      xYSeries0.add(xYDataItem0, false);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) timePeriodValuesCollection0);
      Minute minute0 = new Minute(23, hour0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) minute0, 1.0);
      timePeriodValues0.add(timePeriodValue0);
      Double double0 = new Double(1.0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) timePeriodValuesCollection0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) double0, (KeyedValues) defaultPieDataset0);
      DatasetUtilities.findRangeBounds(categoryDataset0, true);
      XYBarDataset xYBarDataset0 = new XYBarDataset(timePeriodValuesCollection0, 1.0);
      DatasetUtilities.findRangeBounds((XYDataset) xYBarDataset0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false);
      Short short0 = new Short((short)79);
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      arrayList0.add(short0);
      Short short1 = new Short((short) (-2515));
      Stack<Object> stack0 = new Stack<Object>();
      Object object0 = new Object();
      Byte byte0 = Byte.valueOf((byte) (-45));
      stack0.add((Object) byte0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(10, (-1));
      Range range0 = new Range((byte) (-45), 549);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) stack0, range0, false);
      DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      Hour hour0 = new Hour();
      Minute minute0 = new Minute(2, hour0);
      Day day0 = minute0.getDay();
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) day0, (double) 59, 0);
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) hour0, (-357.95628042269), 0);
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      LineFunction2D lineFunction2D0 = new LineFunction2D(0, (-1826.908120202765));
      DatasetUtilities.sampleFunction2D(lineFunction2D0, (-357.95628042269), 789.0, 2, hour0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.previous();
      defaultKeyedValues2DDataset0.addValue((-1.7976931348623157E308), (Comparable) regularTimePeriod0, (Comparable) regularTimePeriod0);
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(regularTimePeriod0);
      DatasetUtilities.isEmptyOrNull((XYDataset) simpleHistogramDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0);
      Comparable<String>[] comparableArray0 = (Comparable<String>[]) Array.newInstance(Comparable.class, 5);
      comparableArray0[0] = (Comparable<String>) hour0;
      comparableArray0[1] = (Comparable<String>) regularTimePeriod0;
      comparableArray0[2] = (Comparable<String>) hour0;
      hour0.getYear();
      LineFunction2D lineFunction2D0 = new LineFunction2D(23, 23);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-1.7976931348623157E308), 101.65319175, 92, comparableArray0[0]);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(43);
      comparableArray0[3] = (Comparable<String>) xYDataItem0;
      comparableArray0[4] = (Comparable<String>) hour0;
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1.7976931348623157E308);
      doubleArray1[1] = (double) 23;
      doubleArray1[2] = (double) 23;
      doubleArray1[3] = (double) 43;
      doubleArray1[4] = 1728.74449423691;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 23;
      doubleArray2[1] = 101.65319175;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (double) 23;
      doubleArray3[1] = 1728.74449423691;
      doubleArray3[2] = (double) 0;
      doubleArray0[2] = doubleArray3;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'rowKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection((TimePeriodValues) null);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) integer0);
      TimePeriodValuesCollection timePeriodValuesCollection1 = new TimePeriodValuesCollection(timePeriodValues0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) timePeriodValuesCollection0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) fixedMillisecond0, (-1505.597873));
      timePeriodValues0.add(timePeriodValue0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timePeriodValuesCollection0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) timePeriodValuesCollection1);
      DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection1);
      double[][] doubleArray0 = new double[6][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.5;
      doubleArray1[1] = (-1505.597873);
      doubleArray1[2] = (-1505.597873);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 0.5;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 0.5;
      doubleArray3[1] = 0.5;
      doubleArray3[2] = 0.5;
      doubleArray3[3] = (-1505.597873);
      doubleArray3[4] = (-1505.597873);
      doubleArray3[5] = (-1505.597873);
      doubleArray3[6] = 0.5;
      doubleArray3[7] = (-1505.597873);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = 0.5;
      doubleArray4[1] = (-1505.597873);
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 0.5;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = (-1505.597873);
      doubleArray5[1] = 0.5;
      doubleArray5[2] = 0.5;
      doubleArray5[3] = (-1237.0164380229);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) null, (Comparable[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Hour hour0 = new Hour();
      Month month0 = new Month();
      defaultCategoryDataset0.addValue((double) 23, (Comparable) hour0, (Comparable) month0);
      Double double0 = (Double)DatasetUtilities.findMinimumStackedRangeValue(defaultCategoryDataset0);
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (Comparable) hour0);
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) double0, (double) 23);
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset1);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(78, 0, month0);
      DatasetUtilities.iterateXYRangeBounds(dynamicTimeSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[][] doubleArray0 = new double[8][4];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 3010.6948151022;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 3010.6948151022;
      doubleArray3[1] = 3010.6948151022;
      doubleArray3[2] = 3010.6948151022;
      doubleArray3[3] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 3010.6948151022;
      doubleArray4[3] = 3010.6948151022;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = 3010.6948151022;
      doubleArray5[1] = 3010.6948151022;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 3010.6948151022;
      doubleArray5[4] = 3010.6948151022;
      doubleArray5[5] = 3010.6948151022;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = 3010.6948151022;
      doubleArray6[1] = 3010.6948151022;
      doubleArray6[2] = 3010.6948151022;
      doubleArray6[3] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      doubleArray7[0] = 3010.6948151022;
      doubleArray7[1] = Double.POSITIVE_INFINITY;
      doubleArray7[2] = (-318.5797576109125);
      doubleArray7[3] = 0.0;
      doubleArray7[4] = 0.0;
      doubleArray7[5] = 3010.6948151022;
      doubleArray7[6] = 0.0;
      doubleArray7[7] = 0.0;
      doubleArray7[8] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[0];
      doubleArray0[7] = doubleArray8;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "2tvgDy(", doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-9999));
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) 3010.6948151022, 14.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Short short0 = new Short((short)3519);
      Short short1 = new Short((short)1);
      arrayList0.add(short0);
      Short short2 = new Short((short)3519);
      Day day0 = new Day();
      defaultMultiValueCategoryDataset0.add(arrayList0, short0, short2);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 8;
      XYSeries xYSeries0 = new XYSeries(8.0);
      xYSeries0.addOrUpdate((Number) 8.0, (Number) 8.0);
      Stack<Object> stack0 = new Stack<Object>();
      stack0.clone();
      stack0.add((Object) null);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(549, 549);
      Range range0 = new Range(8.0, 549);
      DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) stack0, range0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      ArrayList<Short> arrayList1 = new ArrayList<Short>();
      Short short0 = new Short((short) (-2166));
      arrayList0.add(short0);
      Number[][] numberArray0 = new Number[1][7];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = (Number) short0;
      numberArray1[1] = (Number) short0;
      numberArray1[2] = (Number) short0;
      numberArray1[3] = (Number) short0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Float float0 = new Float((-1.7976931348623157E308));
      XYDataItem xYDataItem0 = new XYDataItem((Number) float0, (Number) float0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(float0, oHLCDataItemArray0);
      Range range0 = new Range((-1.7976931348623157E308), (-1.7976931348623157E308));
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      Hour hour0 = new Hour();
      Minute minute0 = new Minute(2, hour0);
      Day day0 = minute0.getDay();
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) day0, (double) 59, 0);
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) hour0, (-357.95628042269), 0);
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Hour hour0 = new Hour();
      defaultCategoryDataset0.addValue((double) 23, (Comparable) hour0, (Comparable) hour0);
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      short short0 = (short)282;
      Vector<Object> vector0 = new Vector<Object>();
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      vector0.add((Object) xIntervalSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) vector0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XIntervalSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("VVi8%i)m", "", doubleArray0);
      DatasetUtilities.findRangeBounds(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.previous();
      Hour.parseHour("BSEYCtcBs?YzW*Mh:E");
      defaultCategoryDataset0.addValue((-1.7976931348623157E308), (Comparable) regularTimePeriod0, (Comparable) regularTimePeriod0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(hour0, (OHLCDataItem[]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Short short0 = new Short((short) (-356));
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      defaultCategoryDataset0.addValue(1622.97199234468, (Comparable) short0, (Comparable) short0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, 2983.9);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, (List) arrayList0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      XYSeries xYSeries0 = new XYSeries("Null 'description' argument.", true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      XYSeriesCollection xYSeriesCollection1 = new XYSeriesCollection(xYSeries0);
      xYSeries0.addOrUpdate((-1688.4), (-1688.4));
      xYSeriesCollection0.clearSelection();
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection1, false);
      DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
      DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      Comparable<XIntervalSeriesCollection>[] comparableArray0 = (Comparable<XIntervalSeriesCollection>[]) Array.newInstance(Comparable.class, 8);
      comparableArray0[0] = (Comparable<XIntervalSeriesCollection>) null;
      comparableArray0[1] = (Comparable<XIntervalSeriesCollection>) null;
      comparableArray0[2] = (Comparable<XIntervalSeriesCollection>) null;
      comparableArray0[3] = (Comparable<XIntervalSeriesCollection>) null;
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(968L);
      comparableArray0[4] = (Comparable<XIntervalSeriesCollection>) fixedMillisecond0;
      comparableArray0[5] = (Comparable<XIntervalSeriesCollection>) null;
      comparableArray0[6] = (Comparable<XIntervalSeriesCollection>) null;
      comparableArray0[7] = (Comparable<XIntervalSeriesCollection>) null;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Hour hour0 = new Hour();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0, "Gw#9&'Nn78UYn(Qc)", "**r0S(x(");
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(97, 1);
      timePeriodValues1.add((TimePeriod) fixedMillisecond0, (Number) 23);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues1);
      DatasetUtilities.findMinimumRangeValue((XYDataset) timePeriodValuesCollection0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timePeriodValuesCollection0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Number[][] numberArray0 = new Number[2][3];
      numberArray0[1] = numberArray0[0];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, numberArray0);
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      DatasetUtilities.findRangeBounds(categoryDataset0, (List) linkedList0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("1>_iz`qm\"", "1>_iz`qm\"", "1>_iz`qm\"");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) null);
      TimePeriodValuesCollection timePeriodValuesCollection1 = new TimePeriodValuesCollection(timePeriodValues0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) timePeriodValuesCollection1);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timePeriodValuesCollection1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("Cannot accept XYSeries that allow duplicate values. Use XYSeries(seriesName, <sort>, false) constructor.");
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, 3193);
      Range range0 = new Range(Double.NaN, 3193);
      dynamicTimeSeriesCollection0.setPosition(3193);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) arrayList0, range0, false);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, false);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Short short0 = new Short((short)3519);
      Short short1 = new Short((short)3519);
      arrayList0.add(short1);
      Short short2 = new Short((short)445);
      Day day0 = new Day();
      defaultMultiValueCategoryDataset0.add(arrayList0, short1, short2);
      defaultMultiValueCategoryDataset0.getRangeBounds(true);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, false);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Short short0 = new Short((short)3519);
      short short1 = (short) (-952);
      Short short2 = new Short((short) (-952));
      arrayList0.add(short2);
      short short3 = (short) (-3397);
      short short4 = (short)31;
      Short short5 = new Short((short)31);
      Day day0 = new Day();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.add(arrayList0, short2, short0);
      Short short6 = new Short((short)31);
      ArrayList<Short> arrayList1 = new ArrayList<Short>();
      arrayList1.add(short6);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      int int0 = 88;
      DefaultHeatMapDataset defaultHeatMapDataset0 = null;
      try {
        defaultHeatMapDataset0 = new DefaultHeatMapDataset(1691, (short) (-3397), 88, (short)3519, 863.1599, (short)3519);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'ySamples' > 0
         //
         verifyException("org.jfree.data.general.DefaultHeatMapDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Short short0 = new Short((short)3519);
      Short short1 = new Short((short) (-952));
      arrayList0.add(short0);
      Short short2 = new Short((short) (-3397));
      Day day0 = new Day();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.add(arrayList0, short0, short1);
      UnaryOperator<Short> unaryOperator0 = UnaryOperator.identity();
      arrayList0.replaceAll(unaryOperator0);
      day0.next();
      Short short3 = new Short((short)95);
      arrayList0.add(short3);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(day0);
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultWindDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DatasetUtilities.findMaximumDomainValue(jDBCXYDataset0);
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(jDBCXYDataset0);
      jDBCXYDataset0.removeChangeListener(xYDatasetTableModel0);
      Short short0 = new Short((short)0);
      arrayList0.add(short0);
      DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, false);
      DatasetUtilities.iterateToFindDomainBounds(jDBCXYDataset0, arrayList0, true);
      DatasetUtilities.findMaximumRangeValue((XYDataset) jDBCXYDataset0);
      System.setCurrentTimeMillis(1784L);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      XYSeries xYSeries0 = new XYSeries("Null 'description' argument.", true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      XYSeriesCollection xYSeriesCollection1 = new XYSeriesCollection(xYSeries0);
      xYSeriesCollection0.clearSelection();
      DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, false);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      Vector<Object> vector0 = new Vector<Object>(arrayList0);
      DatasetUtilities.iterateToFindDomainBounds(matrixSeriesCollection0, vector0, true);
      DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      System.setCurrentTimeMillis(1784L);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, true);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      XYSeries xYSeries0 = new XYSeries("Null 'description' argument.", true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      XYSeriesCollection xYSeriesCollection1 = new XYSeriesCollection(xYSeries0);
      xYSeriesCollection0.clearSelection();
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      Number[][] numberArray0 = new Number[1][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) "Null 'description' argument.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Hour hour0 = new Hour();
      defaultKeyedValues2DDataset0.addValue((-1.7976931348623157E308), (Comparable) hour0, (Comparable) hour0);
      DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultKeyedValues2DDataset0, 2826, 2826);
      slidingCategoryDataset0.getColumnIndex(hour0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) hour0);
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) hour0, (-1.0));
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 23;
      doubleArray1[1] = (double) 2826;
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = (double) 23;
      doubleArray1[4] = (-1.7976931348623157E308);
      doubleArray1[5] = (double) (-1);
      doubleArray1[6] = (-1.0);
      doubleArray1[7] = (double) 2826;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) (-1);
      doubleArray2[1] = (double) 23;
      doubleArray2[2] = (-1.7976931348623157E308);
      doubleArray2[3] = (double) 23;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (double) 23;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = (double) 0;
      doubleArray4[1] = (double) (-1);
      doubleArray4[2] = (-1.7976931348623157E308);
      doubleArray4[3] = (double) 2826;
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Short short0 = new Short((short)3519);
      Short short1 = new Short((short)3519);
      arrayList0.add(short1);
      Short short2 = new Short((short)445);
      Day day0 = new Day();
      defaultMultiValueCategoryDataset0.add(arrayList0, short1, short2);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      MatrixSeries matrixSeries0 = new MatrixSeries("org.jfree.data.xy.XYBarDataset", (short)445, 586);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[][] doubleArray0 = new double[5][4];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 2031.133351473258;
      doubleArray1[1] = 6.283185307179586;
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray1[3] = 658.2083434162786;
      doubleArray1[4] = 1055.414;
      doubleArray1[5] = Double.POSITIVE_INFINITY;
      doubleArray1[6] = 2687.79474;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 2031.133351473258;
      doubleArray3[1] = 1055.414;
      doubleArray3[2] = Double.POSITIVE_INFINITY;
      doubleArray3[3] = Double.POSITIVE_INFINITY;
      doubleArray3[4] = 658.2083434162786;
      doubleArray3[5] = 6.283185307179586;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = 2687.79474;
      doubleArray4[1] = (-1341.5517);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = (-1341.5517);
      doubleArray5[1] = Double.POSITIVE_INFINITY;
      doubleArray5[2] = Double.POSITIVE_INFINITY;
      doubleArray5[3] = 2031.133351473258;
      doubleArray5[4] = 1055.414;
      doubleArray5[5] = Double.POSITIVE_INFINITY;
      doubleArray5[6] = 6.283185307179586;
      doubleArray5[7] = Double.POSITIVE_INFINITY;
      doubleArray5[8] = 2687.79474;
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 115.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-280.74);
      doubleArray1[5] = Double.NEGATIVE_INFINITY;
      doubleArray1[6] = 3915.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = (-280.74);
      doubleArray2[2] = 3915.0;
      doubleArray2[3] = 3915.0;
      doubleArray2[4] = Double.NEGATIVE_INFINITY;
      doubleArray2[5] = 1.5;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 1.5;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = (-1.0);
      doubleArray4[1] = 115.0;
      doubleArray4[2] = 115.0;
      doubleArray4[3] = Double.POSITIVE_INFINITY;
      doubleArray4[4] = 1.5;
      doubleArray4[5] = Double.NEGATIVE_INFINITY;
      doubleArray4[6] = 1.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = Double.NEGATIVE_INFINITY;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = Double.NEGATIVE_INFINITY;
      doubleArray5[3] = 0.0;
      doubleArray5[4] = 1.0;
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Short short0 = new Short((short)315);
      Short short1 = new Short((short)315);
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Short short2 = new Short((short)315);
      arrayList0.add(short2);
      Short short3 = new Short((short)9999);
      Day day0 = new Day();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.add(arrayList0, short1, short0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Short short0 = new Short((short)3519);
      Short short1 = new Short((short) (-952));
      arrayList0.add(short0);
      Short short2 = new Short((short) (-3397));
      Day day0 = new Day();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.add(arrayList0, short0, short1);
      UnaryOperator<Short> unaryOperator0 = UnaryOperator.identity();
      arrayList0.replaceAll(unaryOperator0);
      RegularTimePeriod regularTimePeriod0 = day0.next();
      Short short3 = new Short((short)95);
      arrayList0.add(short3);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(day0);
      timePeriodValues0.add((TimePeriod) regularTimePeriod0, (Number) short1);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) timePeriodValuesCollection0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.time.Second", "org.jfree.data.time.Second", doubleArray0);
      ((DefaultCategoryDataset) categoryDataset0).getRowCount();
      Double double0 = new Double(0.0);
      DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) "org.jfree.data.time.Second");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.validateObject();
      Short short0 = new Short((short)102);
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Short short1 = new Short((short)102);
      arrayList0.add(short1);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      double[][] doubleArray0 = new double[14][2];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-228.22321017);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("=K'k)f", "H4", doubleArray0);
      Double double0 = new Double(Double.POSITIVE_INFINITY);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 32);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Short short0 = new Short((short)102);
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(short0);
      DatasetUtilities.findMinimumDomainValue(defaultBoxAndWhiskerXYDataset0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Short short0 = new Short((short)3519);
      Short short1 = new Short((short) (-952));
      arrayList0.add(short0);
      Short short2 = new Short((short) (-3397));
      Day day0 = new Day();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.add(arrayList0, short0, short1);
      Short short3 = new Short((short)95);
      arrayList0.add(short3);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("1>_iz`qm\"", "1>_iz`qm\"", "1>_iz`qm\"");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      DatasetUtilities.isEmptyOrNull((XYDataset) timePeriodValuesCollection0);
      DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, (KeyToGroupMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.previous();
      defaultCategoryDataset0.addValue((-1.7976931348623157E308), (Comparable) regularTimePeriod0, (Comparable) regularTimePeriod0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, (double) 23);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Hour hour0 = new Hour();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      double double0 = 1130.502236561256;
      defaultKeyedValues2DDataset0.addValue(1130.502236561256, (Comparable) hour0, (Comparable) hour0);
      Number[][] numberArray0 = new Number[0][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 23, (Number) 0);
      xYDataItem0.isSelected();
      xYSeries0.add(xYDataItem0, false);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) null, range0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Hour hour0 = new Hour();
      defaultCategoryDataset0.addValue((double) 23, (Comparable) hour0, (Comparable) hour0);
      defaultCategoryDataset0.addValue((double) 23, (Comparable) hour0, (Comparable) hour0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.findMaximumStackedRangeValue(defaultCategoryDataset0);
      LineFunction2D lineFunction2D0 = new LineFunction2D((-853.1212578795896), 23);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(lineFunction2D0, (-853.1212578795896), (-724.589832669), 193, hour0);
      DatasetUtilities.findRangeBounds(xYDataset0);
      SerialDate serialDate0 = SerialDate.createInstance(193);
      SerialDate serialDate1 = SerialDate.addMonths(588, serialDate0);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) serialDate1, 2470.4828468);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      String string0 = "&pf";
      stringArray0[1] = "&pf";
      stringArray0[2] = "cd@M";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      defaultIntervalCategoryDataset0.getColumnKeys();
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "Grg.jfree.dat.tim^.Second", doubleArray0);
      Double double0 = new Double(0.0);
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      LinkedList<XYSeriesCollection> linkedList0 = new LinkedList<XYSeriesCollection>();
      Number number1 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      Object[][][] objectArray0 = new Object[6][7][9];
      Object[][] objectArray1 = new Object[0][5];
      objectArray0[0] = objectArray1;
      Object[][] objectArray2 = new Object[4][4];
      objectArray2[0] = (Object[]) doubleArray0;
      Object[] objectArray3 = new Object[2];
      objectArray3[0] = (Object) categoryDataset0;
      objectArray3[1] = (Object) "Grg.jfree.dat.tim^.Second";
      objectArray2[1] = objectArray3;
      Object[] objectArray4 = new Object[2];
      objectArray4[0] = (Object) range0;
      objectArray4[1] = (Object) 0.0;
      objectArray2[2] = objectArray4;
      objectArray2[3] = (Object[]) null;
      objectArray0[1] = objectArray2;
      Object[][] objectArray5 = new Object[7][3];
      objectArray5[0] = objectArray3;
      objectArray5[1] = (Object[]) null;
      objectArray5[2] = (Object[]) doubleArray0;
      objectArray5[3] = (Object[]) doubleArray0;
      objectArray5[4] = (Object[]) null;
      objectArray5[5] = (Object[]) doubleArray0;
      Object[] objectArray6 = new Object[5];
      objectArray6[0] = (Object) linkedList0;
      objectArray6[1] = (Object) "Grg.jfree.dat.tim^.Second";
      objectArray6[2] = (Object) number0;
      objectArray6[3] = (Object) "org.jfree.data.time.Second";
      objectArray6[4] = (Object) linkedList0;
      objectArray5[6] = objectArray6;
      objectArray0[2] = objectArray5;
      Object[][] objectArray7 = new Object[2][7];
      objectArray7[0] = (Object[]) null;
      objectArray7[1] = objectArray6;
      objectArray0[3] = objectArray7;
      Object[][] objectArray8 = new Object[6][9];
      objectArray8[0] = objectArray4;
      objectArray8[1] = (Object[]) null;
      Object[] objectArray9 = new Object[8];
      objectArray9[0] = (Object) double0;
      objectArray9[1] = (Object) double0;
      objectArray9[2] = (Object) "org.jfree.data.time.Second";
      objectArray9[3] = (Object) linkedList0;
      objectArray9[4] = (Object) null;
      objectArray9[5] = (Object) "org.jfree.data.time.Second";
      objectArray9[6] = (Object) linkedList0;
      objectArray9[7] = (Object) categoryDataset0;
      objectArray8[2] = objectArray9;
      objectArray8[3] = objectArray4;
      Object[] objectArray10 = new Object[6];
      objectArray10[0] = (Object) "org.jfree.data.time.Second";
      objectArray10[1] = (Object) null;
      objectArray10[2] = (Object) "org.jfree.data.time.Second";
      objectArray10[3] = (Object) "org.jfree.data.time.Second";
      objectArray10[4] = (Object) "Grg.jfree.dat.tim^.Second";
      objectArray10[5] = (Object) number1;
      objectArray8[4] = objectArray10;
      objectArray8[5] = objectArray6;
      objectArray0[4] = objectArray8;
      Object[][] objectArray11 = new Object[8][5];
      objectArray11[0] = objectArray9;
      objectArray11[1] = objectArray3;
      objectArray11[2] = objectArray6;
      objectArray11[3] = objectArray10;
      objectArray11[4] = objectArray10;
      objectArray11[5] = objectArray10;
      objectArray11[6] = (Object[]) null;
      objectArray11[7] = objectArray9;
      objectArray0[5] = objectArray11;
      DefaultWindDataset defaultWindDataset0 = null;
      try {
        defaultWindDataset0 = new DefaultWindDataset((String[]) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Short short0 = new Short((short) (-3176));
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      arrayList0.add(short0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) arrayList0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Float float0 = new Float((-1.7976931348623157E308));
      XYDataItem xYDataItem0 = new XYDataItem((Number) float0, (Number) float0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(float0, oHLCDataItemArray0);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      DatasetUtilities.createCategoryDataset((Comparable) xYDataItem0, (KeyedValues) defaultPieDataset0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Float float0 = new Float((double) 1570);
      XYDataItem xYDataItem0 = new XYDataItem((Number) float0, (Number) float0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(xYDataItem0, oHLCDataItemArray0);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection1);
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      jDBCXYDataset0.getRangeBounds(false);
      String string0 = "*cq9!=@u;mvmBvOh";
      String string1 = "MY236uz";
      jDBCXYDataset0.clone();
      Number[][] numberArray0 = new Number[3][1];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[3];
      numberArray2[0] = (Number) float0;
      numberArray2[1] = null;
      numberArray2[2] = (Number) float0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[1];
      boolean boolean0 = false;
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries("*cq9!=@u;mvmBvOh", false, false);
      // Undeclared exception!
      try { 
        yIntervalSeries0.getX(1570);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1570, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.time.Second", "org.jfree.data.time.Second", doubleArray0);
      Double double0 = new Double(0.0);
      DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Number[][] numberArray0 = new Number[3][6];
      Number[] numberArray1 = new Number[1];
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      numberArray1[0] = (Number) integer0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[8];
      numberArray2[0] = (Number) integer0;
      numberArray2[1] = (Number) integer0;
      numberArray2[2] = (Number) integer0;
      numberArray2[3] = (Number) integer0;
      numberArray2[4] = (Number) integer0;
      numberArray2[5] = (Number) integer0;
      numberArray2[6] = (Number) integer0;
      numberArray2[7] = (Number) integer0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[2];
      numberArray3[0] = (Number) integer0;
      numberArray3[1] = (Number) integer0;
      numberArray0[2] = numberArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, numberArray0);
      DatasetUtilities.findRangeBounds(categoryDataset0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      int int0 = (-2631);
      int int1 = 1012;
      SpreadsheetDate spreadsheetDate0 = null;
      try {
        spreadsheetDate0 = new SpreadsheetDate((-2631));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SpreadsheetDate: Serial must be in range 2 to 2958465.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.time.Second", "org.jfree.data.time.Second", doubleArray0);
      Double double0 = new Double(1.0);
      DatasetUtilities.findMinimumRangeValue(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, 954);
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "", (double) 954, (-381));
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "", (KeyedValues) pieDataset1);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (-381));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Hour hour0 = new Hour();
      hour0.previous();
      defaultCategoryDataset0.addValue((double) 23, (Comparable) hour0, (Comparable) hour0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, (-265));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
      DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-1741.1225034479), 0L, 59, 0.0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      Minute.parseMinute("");
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("");
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      Float float0 = new Float((-919.257958094556));
      arrayList0.add(float0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Number[][] numberArray0 = new Number[5][3];
      Number[] numberArray1 = new Number[2];
      numberArray0[0] = numberArray1;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-1782), (-9));
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Short short0 = new Short((short) (-850));
      Short short1 = new Short((short) (-850));
      arrayList0.add(short1);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) arrayList0, true);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) arrayList0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds((XYDataset) null, arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0);
      int int0 = 1260;
      Integer integer0 = new Integer(1260);
      xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
      Stack<Object> stack0 = new Stack<Object>();
      stack0.add((Object) null);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1260, 121);
      Range range0 = dynamicTimeSeriesCollection0.getRangeBounds(false);
      Range.combine(range0, range0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, stack0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Hour hour0 = new Hour();
      hour0.getEnd();
      hour0.previous();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.isEmptyOrNull((XYDataset) null);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      DatasetUtilities.createCategoryDataset("org.jfree.data.time.Second", "org.jfree.data.time.Second", doubleArray0);
      TableXYDataset tableXYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null, 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 8;
      XYSeries xYSeries0 = new XYSeries(8.0);
      xYSeries0.addOrUpdate((Number) 8.0, (Number) 8.0);
      Stack<Object> stack0 = new Stack<Object>();
      stack0.add((Object) null);
      double double0 = (-1524.767205);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null, (-1524.767205));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.previous();
      defaultCategoryDataset0.addValue((-1.7976931348623157E308), (Comparable) regularTimePeriod0, (Comparable) regularTimePeriod0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultCategoryDataset0.getRowCount();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, (double) 23);
      DatasetUtilities.findMinimumStackedRangeValue(defaultCategoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      double[] doubleArray0 = new double[8];
      Number[][] numberArray0 = new Number[1][4];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = (Number) 0.0;
      numberArray0[0] = numberArray1;
      XYSeries xYSeries0 = new XYSeries(0.0, false);
      XYDataItem xYDataItem0 = new XYDataItem(numberArray1[0], numberArray1[0]);
      xYSeries0.setNotify(true);
      xYDataItem0.isSelected();
      xYSeries0.add(xYDataItem0, false);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, keyToGroupMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, 0);
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Short short0 = new Short((short)3519);
      Short short1 = new Short((short)3519);
      arrayList0.add(short1);
      Short short2 = new Short((short) (-952));
      Day day0 = new Day();
      defaultMultiValueCategoryDataset0.add(arrayList0, day0, short0);
      arrayList0.add(short2);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, (-1489));
      Range range0 = dynamicTimeSeriesCollection0.getRangeBounds(false);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) null, range0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      defaultTableXYDataset0.getDomainBounds(false);
      Stack<Object> stack0 = new Stack<Object>();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("1>_iz`qm\"", "1>_iz`qm\"", "]0'vO<?");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultTableXYDataset0);
      MockDate mockDate0 = new MockDate((-1), (-1), (-1), (-1), (-1), (-2403));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) null);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0, false);
      DatasetUtilities.iterateXYRangeBounds(timePeriodValuesCollection0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 805, 1051);
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Short short0 = new Short((short)92);
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      String string0 = "org.jfree.data.time.Second";
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.time.Second", "org.jfree.data.time.Second", doubleArray0);
      TimeSeries timeSeries0 = new TimeSeries("}'SBu8EP3z*)'P-t$", "WZTYl&>ZcsF", "org.jfree.data.time.Second");
      int int0 = 1494;
      timeSeries0.setMaximumItemCount(1494);
      timeSeries0.isEmpty();
      DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DatasetUtilities.findMinimumDomainValue(timePeriodValuesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 1494);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1494, Size: 9
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.previous();
      RegularTimePeriod regularTimePeriod1 = regularTimePeriod0.previous();
      defaultCategoryDataset0.addValue((-1.7976931348623157E308), (Comparable) regularTimePeriod0, (Comparable) regularTimePeriod0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      defaultPieDataset0.insertValue(0, (Comparable) regularTimePeriod1, (Number) 23);
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to org.jfree.data.SelectableValue
         //
         verifyException("org.jfree.data.pie.DefaultPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      Short short0 = new Short((short)2769);
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      arrayList0.add(short0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(short0);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy((short)2769, (-120));
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      timePeriodValues0.removeChangeListener(timePeriodValuesCollection0);
      timePeriodValues1.setKey(short0);
      TimePeriodValuesCollection timePeriodValuesCollection1 = new TimePeriodValuesCollection();
      timePeriodValuesCollection1.getDomainBounds(true);
      DatasetUtilities.findRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      TimeZone.getTimeZone("");
      TimeZone timeZone0 = TimeZone.getDefault();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, (-2985), timeZone0);
      DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, arrayList0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("", "", (Number[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DatasetUtilities.findMaximumDomainValue(jDBCXYDataset0);
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      Class<XIntervalSeriesCollection> class0 = XIntervalSeriesCollection.class;
      Short short0 = new Short((short)2918);
      arrayList0.add(short0);
      xYDatasetTableModel0.getListeners(class0);
      xYDatasetTableModel0.getColumnName(31);
      jDBCXYDataset0.removeChangeListener(xYDatasetTableModel0);
      Short short1 = new Short((short) (-2104));
      Short short2 = new Short((short) (-2104));
      arrayList0.add(short2);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(jDBCXYDataset0, (List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Hour hour0 = new Hour();
      hour0.previous();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 2922, 0);
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Short short0 = new Short((short)89);
      Short short1 = new Short((short) (-2835));
      arrayList0.add(short1);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      Hour hour0 = new Hour();
      hour0.previous();
      hour0.getYear();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Day day0 = new Day();
      Number[][] numberArray0 = new Number[2][2];
      Number[] numberArray1 = new Number[3];
      numberArray1[0] = (Number) 0;
      numberArray1[2] = (Number) 23;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[8];
      numberArray2[0] = (Number) 23;
      numberArray2[1] = (Number) 23;
      numberArray2[2] = (Number) 23;
      numberArray2[3] = (Number) 0;
      numberArray2[4] = (Number) 23;
      numberArray2[5] = (Number) 23;
      numberArray2[6] = (Number) 0;
      numberArray2[7] = (Number) 0;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      LinkedList<XYSeriesCollection> linkedList0 = new LinkedList<XYSeriesCollection>();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, 0);
      Short short0 = new Short((short)2);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      double[] doubleArray0 = new double[8];
      Number[][] numberArray0 = new Number[1][4];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = (Number) 0.0;
      numberArray0[0] = numberArray1;
      XYSeries xYSeries0 = new XYSeries(0.0, false);
      XYDataItem xYDataItem0 = new XYDataItem(numberArray1[0], numberArray1[0]);
      xYSeries0.add(xYDataItem0, false);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.previous();
      hour0.getMiddleMillisecond();
      defaultCategoryDataset0.addValue((-228.965534203013), (Comparable) regularTimePeriod0, (Comparable) regularTimePeriod0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, (double) 23);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, (Comparable) hour0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      Short short0 = new Short((short)1);
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Short short1 = new Short((short)1);
      arrayList0.add(short1);
      arrayList0.add(short0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(short0);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(89, 561);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues1);
      DatasetUtilities.findRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1028, 78, timeZone0);
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal((PieDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      double[] doubleArray0 = new double[12];
      doubleArray0[2] = 974.764483486493;
      doubleArray0[3] = 1785.127;
      doubleArray0[5] = (double) 3193;
      Number[][] numberArray0 = new Number[1][3];
      Number[] numberArray1 = new Number[9];
      numberArray1[0] = (Number) 3193.0;
      numberArray1[1] = (Number) 3193.0;
      numberArray1[2] = (Number) 1785.127;
      numberArray1[3] = (Number) 3193.0;
      numberArray1[4] = (Number) 974.764483486493;
      numberArray1[5] = (Number) 1785.127;
      numberArray1[6] = (Number) 3193.0;
      numberArray1[7] = (Number) 1785.127;
      numberArray1[8] = (Number) 974.764483486493;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1780, 623);
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) arrayList0, true);
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(192);
      Day day0 = new Day(spreadsheetDate0);
      day0.next();
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-1449.3613435397);
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) (-1);
      doubleArray1[4] = (double) 1780;
      doubleArray1[5] = (-1.0);
      doubleArray1[6] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) 3;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Cannot accept XYSeries that allow duplicate values. Use XYSeries(seriesName, <sort>, false) constructor.", "Cannot accept XYSeries that allow duplicate values. Use XYSeries(seriesName, <sort>, false) constructor.", doubleArray0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      DefaultCategoryDataset defaultCategoryDataset1 = new DefaultCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset1, false);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      System.setCurrentTimeMillis(2741L);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 473, 106);
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      arrayList0.iterator();
      Short short0 = new Short((short)89);
      arrayList0.add(short0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) arrayList0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Short short0 = new Short((short)96);
      arrayList0.add(short0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
      DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DatasetUtilities.findMaximumDomainValue(jDBCXYDataset0);
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      xYDatasetTableModel0.getColumnName(31);
      jDBCXYDataset0.removeChangeListener(xYDatasetTableModel0);
      Short short0 = new Short((short)0);
      arrayList0.add(short0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1780, 623);
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Short short0 = new Short((short) (-1));
      Short short1 = new Short((short) (-952));
      arrayList0.add(short1);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      Number[] numberArray0 = new Number[4];
      numberArray0[0] = (Number) short0;
      numberArray0[1] = (Number) short1;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      Short short0 = new Short((short)2769);
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      arrayList0.add(short0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(short0);
      timePeriodValues0.createCopy(400, 1121);
      timePeriodValues0.setKey(short0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 400);
      DatasetUtilities.isEmptyOrNull(pieDataset0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (-1935.3));
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("", true);
      Short short0 = new Short((short)81);
      XYDataItem xYDataItem0 = new XYDataItem((Number) short0, (Number) short0);
      XYDataItem xYDataItem1 = new XYDataItem((Number) short0, (Number) short0);
      xYSeries0.add(xYDataItem1, true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Hour hour0 = new Hour();
      Hour hour1 = (Hour)hour0.previous();
      hour1.getYear();
      DatasetUtilities.findCumulativeRangeBounds(defaultCategoryDataset0);
      LinkedList<XYSeriesCollection> linkedList0 = new LinkedList<XYSeriesCollection>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparable<Short>[] comparableArray0 = (Comparable<Short>[]) Array.newInstance(Comparable.class, 5);
      comparableArray0[0] = (Comparable<Short>) hour0;
      comparableArray0[1] = (Comparable<Short>) hour1;
      comparableArray0[2] = (Comparable<Short>) hour0;
      comparableArray0[3] = (Comparable<Short>) hour1;
      comparableArray0[4] = (Comparable<Short>) hour1;
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 23;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 23;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 23;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 23;
      doubleArray0[0] = doubleArray1;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "S!p$l][8";
      stringArray0[1] = "";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (double) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, 0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(pieDataset0);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("V&7urWf@&q^Erz@rl\"~", "", doubleArray0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(integer0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1780, 623);
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Short short0 = new Short((short) (-1));
      Short short1 = new Short((short) (-952));
      arrayList0.add(short1);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      Number[][] numberArray0 = new Number[1][3];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = (Number) short0;
      numberArray1[1] = (Number) short1;
      numberArray1[2] = (Number) short0;
      numberArray1[3] = (Number) short0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = 8;
      Locale locale0 = Locale.ROOT;
      XYSeries xYSeries0 = new XYSeries(8);
      xYSeries0.addOrUpdate((Number) 8, (Number) 8);
      locale0.getDisplayName();
      Stack<Object> stack0 = new Stack<Object>();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      stack0.add((Object) defaultTableXYDataset0);
      stack0.add((Object) "");
      Comparable<XIntervalSeriesCollection>[] comparableArray0 = (Comparable<XIntervalSeriesCollection>[]) Array.newInstance(Comparable.class, 7);
      comparableArray0[0] = (Comparable<XIntervalSeriesCollection>) null;
      comparableArray0[1] = (Comparable<XIntervalSeriesCollection>) null;
      comparableArray0[2] = (Comparable<XIntervalSeriesCollection>) null;
      comparableArray0[3] = (Comparable<XIntervalSeriesCollection>) null;
      comparableArray0[4] = (Comparable<XIntervalSeriesCollection>) null;
      comparableArray0[5] = (Comparable<XIntervalSeriesCollection>) null;
      comparableArray0[6] = (Comparable<XIntervalSeriesCollection>) null;
      double[][] doubleArray0 = new double[0][7];
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Hour hour0 = new Hour();
      hour0.getStart();
      RegularTimePeriod regularTimePeriod0 = hour0.previous();
      defaultCategoryDataset0.addValue((-1.7976931348623157E308), (Comparable) regularTimePeriod0, (Comparable) regularTimePeriod0);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      keyToGroupMap0.clone();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap0);
      String string0 = "y%Uv;DrMoyvlt5:`9U";
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset("y%Uv;DrMoyvlt5:`9U", "G&9RD4C", "&#+g'P/({(@W+", "k");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1780, 106);
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      MockDate mockDate0 = new MockDate(1849, (-105), 68, 101, (-105));
      Year year0 = new Year(mockDate0);
      XYSeries xYSeries0 = new XYSeries(year0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.previous();
      defaultCategoryDataset0.addValue((-910.04836891871), (Comparable) hour0, (Comparable) hour0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) regularTimePeriod0, (double) 23, (-1970));
      DatasetUtilities.isEmptyOrNull(pieDataset0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (-51.9218));
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, true);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.previous();
      defaultCategoryDataset0.addValue((-1.7976931348623157E308), (Comparable) regularTimePeriod0, (Comparable) regularTimePeriod0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Short short0 = new Short((short)73);
      arrayList0.add(short0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 8;
      Short short0 = new Short((short)30);
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Short short1 = new Short((short)2);
      arrayList0.add(short1);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) null, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      defaultTableXYDataset0.getDomainBounds(false);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0);
      Stack<Object> stack0 = new Stack<Object>();
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      stack0.add((Object) xYIntervalSeriesCollection0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(549, 549);
      Range range0 = dynamicTimeSeriesCollection0.getRangeBounds(true);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultTableXYDataset0, (List) stack0, range0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYIntervalSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, 1780);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(categoryToPieDataset0);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(integer0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Hour hour0 = new Hour();
      defaultCategoryDataset0.addValue((-1.7976931348623157E308), (Comparable) hour0, (Comparable) hour0);
      DatasetUtilities.findCumulativeRangeBounds(defaultCategoryDataset0);
      Comparable<DefaultTableXYDataset>[] comparableArray0 = (Comparable<DefaultTableXYDataset>[]) Array.newInstance(Comparable.class, 7);
      comparableArray0[0] = (Comparable<DefaultTableXYDataset>) hour0;
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      LinkedList<XYSeriesCollection> linkedList0 = new LinkedList<XYSeriesCollection>();
      Stack<Object> stack0 = new Stack<Object>();
      Long long0 = new Long(23);
      stack0.add((Object) long0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2343, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone("Requires 'start' < 'end'.");
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection1 = new DynamicTimeSeriesCollection(0, (-1), timeZone0);
      Range range0 = dynamicTimeSeriesCollection1.getRangeBounds(true);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultWindDataset0, (List) linkedList0, range0, true);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 8;
      XYSeries xYSeries0 = new XYSeries(8.0);
      XYDataItem xYDataItem0 = new XYDataItem(8.0, (double) 8);
      LinkedList<XYSeriesCollection> linkedList0 = new LinkedList<XYSeriesCollection>();
      Comparator<XYSeriesCollection> comparator0 = (Comparator<XYSeriesCollection>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      Range range0 = new Range(8.0, 8);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries1 = new XYSeries(xYDataItem0, false, false);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries1);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList0, true);
      DatasetUtilities.iterateCategoryRangeBounds(taskSeriesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.time.Second", "org.jfree.data.time.Second", doubleArray0);
      TimeSeries timeSeries0 = new TimeSeries("}'SBu8EP3z*)'P-t$", "WZTYl&>ZcsF", "org.jfree.data.time.Second");
      timeSeries0.setMaximumItemCount(1494);
      timeSeries0.isEmpty();
      DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      DatasetUtilities.findMinimumRangeValue(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      XYSeries xYSeries0 = new XYSeries("Null 'description' argument.", true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      XYSeriesCollection xYSeriesCollection1 = new XYSeriesCollection(xYSeries0);
      xYSeriesCollection0.clearSelection();
      xYSeriesCollection0.getSeries();
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      Number[][] numberArray0 = new Number[0][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 405);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 8;
      XYSeries xYSeries0 = new XYSeries(8.0);
      xYSeries0.addOrUpdate((Number) 8.0, (Number) 8.0);
      Stack<Object> stack0 = new Stack<Object>();
      stack0.add((Object) null);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(549, 549);
      dynamicTimeSeriesCollection0.getRangeBounds(false);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 412);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      double[] doubleArray0 = new double[8];
      Number[][] numberArray0 = new Number[1][4];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = (Number) 0.0;
      numberArray0[0] = numberArray1;
      XYSeries xYSeries0 = new XYSeries(0.0, false);
      XYDataItem xYDataItem0 = new XYDataItem(numberArray1[0], numberArray1[0]);
      xYSeries0.add(xYDataItem0, false);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      double[] doubleArray0 = new double[8];
      Number[][] numberArray0 = new Number[1][4];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = (Number) 0.0;
      numberArray0[0] = numberArray1;
      XYSeries xYSeries0 = new XYSeries(0.0, false);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeries0.add(1581.88136598087, numberArray1[0], false);
      xYSeries0.addOrUpdate(1.0, 1.5);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) jDBCCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) 3193;
      doubleArray0[2] = 975.187334858708;
      doubleArray0[3] = 1785.127;
      doubleArray0[4] = (double) (-2260);
      doubleArray0[5] = (double) 3193;
      doubleArray0[6] = 1801.4018;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      // Undeclared exception!
      DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-2260.0), 1801.4018, 3193, 0.0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      double[][] doubleArray1 = new double[2][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      DatasetUtilities.createCategoryDataset("MiLC4!w]Yv", "Unrecognised type.", doubleArray1);
      TimeSeries timeSeries0 = new TimeSeries("Unrecognised type.", "MiLC4!w]Yv", "Unrecognised type.");
      timeSeries0.setMaximumItemCount(2877);
      timeSeries0.isEmpty();
      double[][] doubleArray2 = new double[7][6];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray0;
      doubleArray2[6] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray2, doubleArray2);
      defaultIntervalCategoryDataset0.getRowKeys();
      DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      XYSeries xYSeries0 = new XYSeries("}'SBu8EP3z*)'P-t$", false);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      XYSeriesCollection xYSeriesCollection1 = new XYSeriesCollection();
      xYSeriesCollection1.clearSelection();
      xYSeriesCollection0.getSeries();
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection1, true);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) "}'SBu8EP3z*)'P-t$", 0.0);
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "}'SBu8EP3z*)'P-t$", (-645.13158), (-2077));
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      XYSeries xYSeries0 = new XYSeries(8);
      xYSeries0.addOrUpdate((Number) 8, (Number) 8);
      locale0.getDisplayName();
      Stack<Object> stack0 = new Stack<Object>();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      stack0.add((Object) defaultTableXYDataset0);
      stack0.add((Object) locale0);
      Comparable<Double>[] comparableArray0 = (Comparable<Double>[]) Array.newInstance(Comparable.class, 2);
      comparableArray0[0] = (Comparable<Double>) null;
      stack0.add((Object) xYSeries0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(8, (-1791));
      dynamicTimeSeriesCollection0.getRangeBounds(true);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, (List) stack0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultTableXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DatasetUtilities.findMaximumDomainValue(jDBCXYDataset0);
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(jDBCXYDataset0);
      jDBCXYDataset0.removeChangeListener(xYDatasetTableModel0);
      Short short0 = new Short((short)0);
      arrayList0.add(short0);
      DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, false);
      DatasetUtilities.iterateToFindDomainBounds(jDBCXYDataset0, arrayList0, true);
      DatasetUtilities.findMaximumRangeValue((XYDataset) jDBCXYDataset0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1780, 106);
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Short short0 = new Short((short)92);
      arrayList0.add(short0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) arrayList0, false);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(106, 1093);
      DatasetUtilities.findMaximumRangeValue((XYDataset) dynamicTimeSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      System.setCurrentTimeMillis(2741L);
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Short short0 = new Short((short)89);
      arrayList0.add(short0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultTableXYDataset0, arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.DefaultTableXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      DatasetUtilities.findMaximumDomainValue(xYSeriesCollection0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(timeTableXYDataset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(timeTableXYDataset0, (-2260));
      jDBCXYDataset0.removeChangeListener(xYBarDataset0);
      Short short0 = new Short((short) (-556));
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Short short1 = new Short((short) (-2816));
      arrayList0.add(short1);
      DatasetUtilities.findRangeBounds((XYDataset) xYBarDataset0, false);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(xYSeriesCollection0, arrayList0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.XYSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 975.187334858708;
      Short short0 = new Short((short)2769);
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      arrayList0.add(short0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(0.0);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy((-2260), 1823);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues1);
      DatasetUtilities.findRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, (short)2769, timeZone0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, arrayList0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[1] = 2913.257326471;
      doubleArray0[0] = doubleArray1;
      DatasetUtilities.createCategoryDataset("}'6SBu8EP3z*)'P-t$", "", doubleArray0);
      TimeSeries timeSeries0 = new TimeSeries(0.0, "", "");
      timeSeries0.setMaximumItemCount(3358);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(3358);
      zoneOffset0.getId();
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      defaultTableXYDataset0.getDomainBounds(true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      Short short0 = new Short((short)1746);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      linkedList0.add(short0);
      Range range0 = jDBCXYDataset0.getRangeBounds(true);
      Range.expandToInclude((Range) null, (short)1746);
      XYBarDataset xYBarDataset0 = new XYBarDataset(jDBCXYDataset0, 1424.114);
      DatasetUtilities.findRangeBounds((XYDataset) xYBarDataset0, (List) linkedList0, range0, false);
      DatasetUtilities.iterateToFindDomainBounds(jDBCXYDataset0, linkedList0, false);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findMinimumStackedRangeValue(defaultMultiValueCategoryDataset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DatasetUtilities.calculateStackTotal(jDBCXYDataset0, 418);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      XYSeries xYSeries0 = new XYSeries(8);
      Stack<Object> stack0 = new Stack<Object>();
      stack0.add((Object) null);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(8, 8);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, (-1593));
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, 0);
      LinkedList<XYSeriesCollection> linkedList0 = new LinkedList<XYSeriesCollection>();
      TimeZone timeZone0 = TimeZone.getTimeZone("X2?#d3v]qz1Q");
      timeZone0.setRawOffset(7);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) linkedList0, true);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, 10);
      DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, linkedList0, true);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      double[] doubleArray0 = new double[7];
      XYSeries xYSeries0 = new XYSeries(0.0);
      xYSeries0.addOrUpdate((Number) 0.0, (Number) 0.0);
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      double[][] doubleArray1 = new double[4][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 2610.8168490442436;
      doubleArray2[1] = (-3883.7422535828);
      doubleArray1[2] = doubleArray2;
      doubleArray1[3] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "|w", doubleArray1);
      TimeSeries timeSeries0 = new TimeSeries("", "", "Duplicate items in 'columnKeys'.");
      TimeSeries timeSeries1 = new TimeSeries("");
      timeSeries1.setMaximumItemCount(1494);
      TimeSeries timeSeries2 = new TimeSeries("");
      timeSeries2.isEmpty();
      DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      MockDate mockDate0 = new MockDate(1311L);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1494, 1494, fixedMillisecond0, timeZone0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      Locale locale1 = Locale.ROOT;
      Short short0 = new Short((short)2769);
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      arrayList0.add(short0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(short0);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy((-1434), 1823);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues1);
      DatasetUtilities.findRangeBounds((XYDataset) timePeriodValuesCollection0, false);
      TimeZone timeZone0 = TimeZone.getTimeZone("No bin.");
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(8, (-900), timeZone0);
      DatasetUtilities.iterateToFindDomainBounds(timePeriodValuesCollection0, arrayList0, false);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("[( F4 at?3,|", "", (Number[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 8;
      XYSeries xYSeries0 = new XYSeries(8.0);
      xYSeries0.addOrUpdate((Number) 8.0, (Number) 8.0);
      Stack<Object> stack0 = new Stack<Object>();
      stack0.add((Object) null);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(549, 549);
      dynamicTimeSeriesCollection0.getRangeBounds(false);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, (List) stack0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0, "1>_iz`qm\"", "1>_iz`qm\"");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      TimeSeries timeSeries0 = new TimeSeries("1>_iz`qm\"", "1>_iz`qm\"", "1>_iz`qm\"");
      TimeSeries timeSeries1 = new TimeSeries(fixedMillisecond0);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      timeSeries1.add((RegularTimePeriod) fixedMillisecond0, (Number) integer0, true);
      timeSeries1.setMaximumItemCount(3960);
      timeSeries1.isEmpty();
      DatasetUtilities.findMinimumStackedRangeValue(defaultCategoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal((TableXYDataset) null, 3960);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DatasetUtilities.findMaximumDomainValue(jDBCXYDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, false);
      DatasetUtilities.iterateToFindDomainBounds(jDBCXYDataset0, arrayList0, true);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      Short short0 = new Short((short)2769);
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      arrayList0.add(short0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(short0);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(400, 1121);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues1);
      timePeriodValues1.removeChangeListener(timePeriodValuesCollection0);
      timePeriodValues0.setKey(short0);
      timePeriodValuesCollection0.getDomainBounds(true);
      DatasetUtilities.findRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      TimeZone.getTimeZone("Null 'visibleSeriesKeys' argument.");
      TimeZone timeZone0 = TimeZone.getDefault();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1823, 400, timeZone0);
      DatasetUtilities.iterateToFindDomainBounds(timePeriodValuesCollection0, arrayList0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("", ";I", (Number[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      MockDate mockDate0 = new MockDate(1, 397, 397);
      TimeZone timeZone0 = TimeZone.getTimeZone("\".");
      Hour hour0 = new Hour(mockDate0, timeZone0);
      Minute minute0 = new Minute((-896), hour0);
      Day day0 = minute0.getDay();
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(day0, (OHLCDataItem[]) null);
      DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0, true);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, 1);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, keyToGroupMap0);
      ArrayList<DefaultTableXYDataset> arrayList0 = new ArrayList<DefaultTableXYDataset>();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) jDBCXYDataset0, (List) arrayList0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Hour hour0 = new Hour();
      defaultCategoryDataset0.addValue((-1.7976931348623157E308), (Comparable) hour0, (Comparable) hour0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      Short short0 = new Short((short)400);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, (-1.0));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "c/_vdu:W$/LOC";
      stringArray0[2] = "";
      stringArray0[3] = "Duplicate items in 'columnKeys'.";
      stringArray0[4] = "";
      stringArray0[5] = "M/*G|4zUWpEx8!rB;";
      stringArray0[6] = "org.jfree.data.function.NormalDistributionFunction2D";
      Object[][][] objectArray0 = new Object[4][1][4];
      Object[][] objectArray1 = new Object[8][2];
      objectArray1[0] = (Object[]) stringArray0;
      objectArray1[1] = (Object[]) stringArray0;
      Object[] objectArray2 = new Object[7];
      objectArray2[0] = (Object) "org.jfree.data.function.NormalDistributionFunction2D";
      objectArray2[1] = (Object) "org.jfree.data.function.NormalDistributionFunction2D";
      objectArray2[2] = (Object) short0;
      objectArray2[3] = (Object) "M/*G|4zUWpEx8!rB;";
      objectArray2[4] = (Object) "M/*G|4zUWpEx8!rB;";
      objectArray2[5] = (Object) "";
      objectArray2[6] = (Object) "M/*G|4zUWpEx8!rB;";
      objectArray1[2] = objectArray2;
      Object[] objectArray3 = new Object[1];
      Object object0 = new Object();
      objectArray3[0] = object0;
      objectArray1[3] = objectArray3;
      objectArray1[4] = (Object[]) stringArray0;
      objectArray1[5] = (Object[]) stringArray0;
      objectArray1[6] = (Object[]) stringArray0;
      objectArray1[7] = (Object[]) stringArray0;
      objectArray0[0] = objectArray1;
      Object[][] objectArray4 = new Object[9][2];
      objectArray4[0] = objectArray2;
      objectArray4[1] = (Object[]) stringArray0;
      objectArray4[2] = objectArray3;
      objectArray4[3] = (Object[]) stringArray0;
      objectArray4[4] = objectArray2;
      objectArray4[5] = objectArray3;
      objectArray4[6] = (Object[]) stringArray0;
      objectArray4[7] = objectArray3;
      Object[] objectArray5 = new Object[7];
      Object object1 = new Object();
      objectArray5[0] = object1;
      objectArray5[1] = (Object) "Duplicate items in 'columnKeys'.";
      objectArray5[2] = (Object) "";
      objectArray5[3] = (Object) hour0;
      objectArray5[4] = (Object) hour0;
      objectArray5[5] = (Object) "c/_vdu:W$/LOC";
      objectArray5[6] = (Object) "";
      objectArray4[8] = objectArray5;
      objectArray0[1] = objectArray4;
      Object[][] objectArray6 = new Object[4][6];
      objectArray6[0] = (Object[]) stringArray0;
      objectArray6[1] = objectArray5;
      objectArray6[2] = objectArray2;
      objectArray6[3] = (Object[]) stringArray0;
      objectArray0[2] = objectArray6;
      Object[][] objectArray7 = new Object[1][6];
      objectArray7[0] = objectArray5;
      objectArray0[3] = objectArray7;
      DefaultWindDataset defaultWindDataset0 = null;
      try {
        defaultWindDataset0 = new DefaultWindDataset(stringArray0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of series keys does not match the number of series in the data array.
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 15;
      Number[][] numberArray0 = new Number[1][4];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = (Number) 15.0;
      numberArray1[1] = (Number) 15.0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'description' argument.", "Null 'description' argument.", numberArray0);
      DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset("y%Uv;DrMoyvlt5:`9U", "Null 'description' argument.", "Wc<fg7b]F1HVS:ELl>", "Null 'description' argument.");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.previous();
      defaultCategoryDataset0.addValue((-1.7976931348623157E308), (Comparable) regularTimePeriod0, (Comparable) regularTimePeriod0);
      DatasetUtilities.findCumulativeRangeBounds(defaultCategoryDataset0);
      Comparable<DefaultTableXYDataset>[] comparableArray0 = (Comparable<DefaultTableXYDataset>[]) Array.newInstance(Comparable.class, 7);
      comparableArray0[0] = (Comparable<DefaultTableXYDataset>) hour0;
      comparableArray0[1] = (Comparable<DefaultTableXYDataset>) regularTimePeriod0;
      comparableArray0[2] = (Comparable<DefaultTableXYDataset>) regularTimePeriod0;
      comparableArray0[3] = (Comparable<DefaultTableXYDataset>) hour0;
      comparableArray0[4] = (Comparable<DefaultTableXYDataset>) regularTimePeriod0;
      comparableArray0[5] = (Comparable<DefaultTableXYDataset>) regularTimePeriod0;
      comparableArray0[6] = (Comparable<DefaultTableXYDataset>) hour0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.7976931348623157E308);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 23;
      Number[][] numberArray0 = new Number[0][7];
      DatasetUtilities.createCategoryDataset("r^JCLe:", "r^JCLe:", numberArray0);
      XYDataset xYDataset0 = null;
      ArrayList<DefaultIntervalCategoryDataset> arrayList0 = new ArrayList<DefaultIntervalCategoryDataset>();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) null, (List) arrayList0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 8;
      XYSeries xYSeries0 = new XYSeries(8.0);
      xYSeries0.addOrUpdate((Number) 8.0, (Number) 8.0);
      Stack<Object> stack0 = new Stack<Object>();
      stack0.add((Object) null);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(549, 549);
      dynamicTimeSeriesCollection0.getRangeBounds(true);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Short short0 = new Short((short)3560);
      Short short1 = new Short((short)3560);
      arrayList0.add(short0);
      Short short2 = new Short((short) (-952));
      Day day0 = new Day();
      defaultMultiValueCategoryDataset0.add(arrayList0, day0, day0);
      Short short3 = new Short((short)1334);
      arrayList0.add(short3);
      DatasetUtilities.createCategoryDataset((Comparable) short1, (KeyedValues) defaultKeyedValuesDataset0);
      DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Hour hour0 = new Hour();
      Object[][][] objectArray0 = new Object[0][4][2];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(objectArray0);
      DatasetUtilities.findMaximumDomainValue(defaultWindDataset0);
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      xYDatasetTableModel0.getColumnName(1293);
      JDBCXYDataset jDBCXYDataset0 = null;
      try {
        jDBCXYDataset0 = new JDBCXYDataset("+2*+:=(Ky", "+2*+:=(Ky", "AWT", "AWT");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      XYSeries xYSeries0 = new XYSeries("}'SBu8EP3z*)'P-t$", false);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      XYSeriesCollection xYSeriesCollection1 = new XYSeriesCollection(xYSeries0);
      xYSeriesCollection1.clearSelection();
      xYSeriesCollection0.getSeries();
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection1, true);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      System.setCurrentTimeMillis(0L);
      DatasetUtilities.findMaximumDomainValue(xYSeriesCollection0);
      DatasetUtilities.findCumulativeRangeBounds(taskSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("org.jfree.data.time.Hour");
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Range.combine((Range) null, (Range) null);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      DatasetUtilities.findMaximumDomainValue(defaultBoxAndWhiskerXYDataset0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Hour hour0 = new Hour();
      Hour hour1 = (Hour)hour0.previous();
      hour1.getYear();
      defaultCategoryDataset0.addValue((-1.7976931348623157E308), (Comparable) hour1, (Comparable) hour1);
      DatasetUtilities.findCumulativeRangeBounds(defaultCategoryDataset0);
      Comparable<DefaultTableXYDataset>[] comparableArray0 = (Comparable<DefaultTableXYDataset>[]) Array.newInstance(Comparable.class, 7);
      LinkedList<XYSeriesCollection> linkedList0 = new LinkedList<XYSeriesCollection>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, 0);
      DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DatasetUtilities.findMaximumDomainValue(jDBCXYDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, false);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      MockDate mockDate0 = new MockDate(130, 2, (-4282), 1093, 130);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 130, (-4215.472), (-4282), (-4215.472), (-4215.472));
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) oHLCDataItem0, 462.0);
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) oHLCDataItem0, (-4215.472), 2);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 0;
      Number[][] numberArray0 = new Number[1][4];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = (Number) 0.0;
      numberArray1[1] = (Number) 0.0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'description' argument.", "Null 'description' argument.", numberArray0);
      DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset("y%Uv;DrMoyvlt5:`9U", "Null 'description' argument.", "Wc<fg7b]F1HVS:ELl>", "Null 'description' argument.");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      Number[][] numberArray0 = new Number[0][4];
      double[][] doubleArray1 = new double[9][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("SeriesChangeType.ADD", "Invalid series: ", numberArray0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0);
      MatrixSeries matrixSeries0 = null;
      try {
        matrixSeries0 = new MatrixSeries("#m9", (-404), 1095);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.MatrixSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = "}'SBu8EP3z*)'P-t$";
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2913.257326471;
      doubleArray0[0] = doubleArray1;
      DatasetUtilities.createCategoryDataset("}'SBu8EP3z*)'P-t$", "", doubleArray0);
      TimeSeries timeSeries0 = new TimeSeries(0.0, "", "");
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      Function2D function2D0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries((Function2D) null, 0.0, 1117.0, 28, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.validateObject();
      Short short0 = new Short((short)102);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[7];
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate((short)102);
      Date date0 = spreadsheetDate0.toDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 2, 3518.5, (-1179.1326), 1900, 1);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, 1.0, (short)102, 3, 2, 2535.03801);
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(date0, 2, (-2785.4191505), 2, 3, 6);
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(date0, (-1179.1326), 1, 4686.3366844, 3, 4);
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(date0, 0, 3518.5, 2581.374244758204, 3, (-1179.1326));
      oHLCDataItemArray0[4] = oHLCDataItem4;
      OHLCDataItem oHLCDataItem5 = new OHLCDataItem(date0, 3.0, 2, 7, 1706.0, (-3509.3039));
      oHLCDataItemArray0[5] = oHLCDataItem5;
      OHLCDataItem oHLCDataItem6 = new OHLCDataItem(date0, 3.0, 2845.475939873589, 2, 2539.588, 1);
      oHLCDataItemArray0[6] = oHLCDataItem6;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(short0, oHLCDataItemArray0);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 975.187334858708;
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(0.0, (OHLCDataItem[]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.previous();
      Hour.parseHour("BSEYCtcBs?YzW*Mh:E");
      defaultCategoryDataset0.addValue((-1.7976931348623157E308), (Comparable) regularTimePeriod0, (Comparable) regularTimePeriod0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(hour0, (OHLCDataItem[]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      System.setCurrentTimeMillis(2741L);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "", "");
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      timeSeries0.isEmpty();
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) "", 109.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 2976, 1);
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      XYSeries xYSeries0 = new XYSeries("}'SBu8EP3z*)'P-t$", true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      List list0 = xYSeriesCollection0.getSeries();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(xYSeriesCollection0, list0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYSeries cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.previous();
      defaultCategoryDataset0.addValue((-1.7976931348623157E308), (Comparable) regularTimePeriod0, (Comparable) regularTimePeriod0);
      DatasetUtilities.findCumulativeRangeBounds(defaultCategoryDataset0);
      Comparable<DefaultTableXYDataset>[] comparableArray0 = (Comparable<DefaultTableXYDataset>[]) Array.newInstance(Comparable.class, 7);
      comparableArray0[0] = (Comparable<DefaultTableXYDataset>) hour0;
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      LinkedList<XYSeriesCollection> linkedList0 = new LinkedList<XYSeriesCollection>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetUtilities.findDomainBounds((XYDataset) yIntervalSeriesCollection0, (List) linkedList0, true);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, 1103);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1103, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, 0);
      LinkedList<XYSeriesCollection> linkedList0 = new LinkedList<XYSeriesCollection>();
      TimeZone timeZone0 = TimeZone.getTimeZone("X2?#d3v]qz1Q");
      timeZone0.setRawOffset(7);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) linkedList0, true);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, 10);
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) fixedMillisecond0, 0.0);
      DatasetUtilities.calculatePieDatasetTotal(pieDataset1);
      DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, false);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      System.setCurrentTimeMillis(2741L);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 515, 103);
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Short short0 = new Short((short)92);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingGanttCategoryDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0, true);
      DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, (List) arrayList0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.previous();
      defaultCategoryDataset0.addValue((-1.7976931348623157E308), (Comparable) regularTimePeriod0, (Comparable) regularTimePeriod0);
      Range range0 = new Range((-1.7976931348623157E308), 23);
      Comparable<DefaultTableXYDataset>[] comparableArray0 = (Comparable<DefaultTableXYDataset>[]) Array.newInstance(Comparable.class, 7);
      comparableArray0[0] = (Comparable<DefaultTableXYDataset>) hour0;
      comparableArray0[1] = (Comparable<DefaultTableXYDataset>) regularTimePeriod0;
      comparableArray0[2] = (Comparable<DefaultTableXYDataset>) regularTimePeriod0;
      comparableArray0[3] = (Comparable<DefaultTableXYDataset>) hour0;
      comparableArray0[4] = (Comparable<DefaultTableXYDataset>) regularTimePeriod0;
      comparableArray0[5] = (Comparable<DefaultTableXYDataset>) regularTimePeriod0;
      comparableArray0[6] = (Comparable<DefaultTableXYDataset>) hour0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.7976931348623157E308);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 23;
      XYSeries xYSeries0 = new XYSeries(0.0, true, true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.previous();
      defaultCategoryDataset0.addValue((-1.7976931348623157E308), (Comparable) regularTimePeriod0, (Comparable) regularTimePeriod0);
      DatasetUtilities.findCumulativeRangeBounds(defaultCategoryDataset0);
      Comparable<DefaultTableXYDataset>[] comparableArray0 = (Comparable<DefaultTableXYDataset>[]) Array.newInstance(Comparable.class, 7);
      comparableArray0[0] = (Comparable<DefaultTableXYDataset>) hour0;
      comparableArray0[1] = (Comparable<DefaultTableXYDataset>) regularTimePeriod0;
      comparableArray0[2] = (Comparable<DefaultTableXYDataset>) regularTimePeriod0;
      comparableArray0[3] = (Comparable<DefaultTableXYDataset>) hour0;
      comparableArray0[4] = (Comparable<DefaultTableXYDataset>) regularTimePeriod0;
      comparableArray0[5] = (Comparable<DefaultTableXYDataset>) regularTimePeriod0;
      comparableArray0[6] = (Comparable<DefaultTableXYDataset>) hour0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.7976931348623157E308);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 23;
      Number[][] numberArray0 = new Number[0][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("r^JCLe:", "r^JCLe:", numberArray0);
      DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) linkedList0, true);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 10, 959);
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Short short0 = new Short((short)1084);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      double[] doubleArray0 = new double[12];
      doubleArray0[2] = 974.764483486493;
      doubleArray0[3] = 1785.127;
      DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 975.187334858708;
      doubleArray0[3] = 1785.127;
      doubleArray0[4] = (double) (-2260);
      doubleArray0[5] = (double) 3193;
      doubleArray0[6] = 1801.4018;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      XYSeries xYSeries0 = new XYSeries(1785.127, false, true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeriesCollection0.getSeries();
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Hour hour0 = new Hour();
      Hour hour1 = new Hour();
      defaultCategoryDataset0.addValue((-1.7976931348623157E308), (Comparable) hour1, (Comparable) hour1);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, (double) 23);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) hour0, (double) 0, 23);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, 23);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 23, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      System.setCurrentTimeMillis(2741L);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 515, 106);
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Short short0 = new Short((short)92);
      arrayList0.add(short0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) arrayList0, false);
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) short0, (-921.3), 1051);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Number[][] numberArray0 = new Number[2][3];
      Number[] numberArray1 = new Number[1];
      numberArray0[0] = numberArray1;
      numberArray0[1] = numberArray1;
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2913.257326471;
      doubleArray0[0] = doubleArray1;
      DatasetUtilities.createCategoryDataset("}'SBu8EP3z*)'P-t$", "", doubleArray0);
      TimeSeries timeSeries0 = new TimeSeries(0.0, "", "");
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      timeSeries0.isEmpty();
      zoneOffset0.getId();
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      defaultTableXYDataset0.indexOf("Z");
      DefaultTableXYDataset defaultTableXYDataset1 = new DefaultTableXYDataset();
      DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, false);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Number[][] numberArray0 = new Number[2][3];
      Number[] numberArray1 = new Number[1];
      numberArray0[0] = numberArray1;
      numberArray0[1] = numberArray1;
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      boolean boolean0 = true;
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) integer0);
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(1054, 1900, 1900, (-932.32601185), 1.5, 2.0);
      DatasetGroup datasetGroup0 = defaultHeatMapDataset0.getGroup();
      defaultStatisticalCategoryDataset0.setGroup(datasetGroup0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) null, (KeyedValues) pieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = null;
      Number[][] numberArray0 = new Number[2][3];
      Number[] numberArray1 = new Number[1];
      numberArray0[0] = numberArray1;
      numberArray0[1] = numberArray1;
      LineFunction2D lineFunction2D0 = new LineFunction2D(1205, 1205);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-1.0), 1746.0, 1205, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Hour hour0 = new Hour();
      hour0.previous();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0, hour0);
      Range range0 = dynamicTimeSeriesCollection0.getRangeBounds(false);
      Range range1 = Range.expandToInclude(range0, (-1853.0));
      TimeSeries timeSeries0 = new TimeSeries(2);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1081, "DefaultIntervalCategoryDataset.setValue: unrecognised category.");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, simpleTimeZone0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(dynamicTimeSeriesCollection0, 23);
      boolean boolean0 = false;
      LinkedList<DefaultHighLowDataset> linkedList0 = new LinkedList<DefaultHighLowDataset>();
      DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) linkedList0, range1, false);
      DatasetUtilities.findMinimumDomainValue(xYBarDataset0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0, "DefaultIntervalCategoryDataset.setValue: unrecognised category.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.previous();
      defaultCategoryDataset0.addValue((-1.7976931348623157E308), (Comparable) regularTimePeriod0, (Comparable) regularTimePeriod0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, (double) 23);
      assertEquals(23.0, range0.getUpperBound(), 0.01);
      assertEquals((-8.988465674311579E307), range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) hour0, (KeyedValues) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowData' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      DefaultTableXYDataset defaultTableXYDataset1 = new DefaultTableXYDataset();
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.previous();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.addValue((double) 23, (Comparable) regularTimePeriod0, (Comparable) regularTimePeriod0);
      defaultKeyedValues2DDataset0.addValue((double) 0, (Comparable) hour0, (Comparable) regularTimePeriod0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset1 = new DefaultKeyedValues2DDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, (-444.7685349));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 975.187334858708;
      doubleArray0[3] = 1785.127;
      doubleArray0[4] = (double) (-2260);
      doubleArray0[5] = (double) 3193;
      doubleArray0[6] = 1801.4018;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      System.setCurrentTimeMillis((-909L));
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-1), (-402));
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Short short0 = new Short((short)1);
      Short short1 = new Short((short) (-4172));
      arrayList0.add(short1);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) arrayList0, true);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      DatasetUtilities.findDomainBounds((XYDataset) vectorSeriesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.previous();
      defaultKeyedValues2DDataset0.addValue(0.0, (Comparable) hour0, (Comparable) regularTimePeriod0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset1 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, 0.0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset1, true);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      DefaultTableXYDataset defaultTableXYDataset1 = new DefaultTableXYDataset();
      defaultTableXYDataset1.getDomainBounds(true);
      Short short0 = new Short((short)1746);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short1 = new Short((short)1746);
      linkedList0.add(short1);
      Number[][] numberArray0 = new Number[2][6];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = (Number) short1;
      numberArray1[1] = (Number) short1;
      numberArray1[2] = (Number) short0;
      numberArray1[3] = (Number) short0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[1];
      numberArray2[0] = (Number) short0;
      numberArray0[1] = numberArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, (double) (short)1746);
      // Undeclared exception!
      try { 
        Range.expand((Range) null, 1585.5, 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      defaultTableXYDataset0.getDomainBounds(false);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)1089);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.previous();
      defaultCategoryDataset0.addValue((-1.7976931348623157E308), (Comparable) regularTimePeriod0, (Comparable) regularTimePeriod0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      Short.valueOf((short) (-1108));
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      boolean boolean0 = false;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      hour0.getMiddleMillisecond();
      DatasetUtilities.findMinimumStackedRangeValue(defaultCategoryDataset0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = null;
      try {
        dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection((short) (-1108), 0, regularTimePeriod0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      System.setCurrentTimeMillis(2741L);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 515, 106);
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Short short0 = new Short((short)92);
      arrayList0.add(short0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) arrayList0, true);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Hour hour0 = new Hour();
      defaultKeyedValues2DDataset0.addValue((-1.7976931348623157E308), (Comparable) hour0, (Comparable) hour0);
      DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultKeyedValues2DDataset0, 2826, 2826);
      slidingCategoryDataset0.getColumnIndex(hour0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) hour0);
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) hour0, (-1.0));
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      DefaultTableXYDataset defaultTableXYDataset1 = new DefaultTableXYDataset();
      defaultTableXYDataset1.getDomainBounds(false);
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      LinkedList<XYSeriesCollection> linkedList0 = new LinkedList<XYSeriesCollection>();
      DatasetUtilities.findDomainBounds((XYDataset) defaultWindDataset0, (List) linkedList0, true);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, 10);
      DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2913.257326471;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("}'SBu8EP3z*)'P-t$", "", doubleArray0);
      TimeSeries timeSeries0 = new TimeSeries(0.0, "", "");
      timeSeries0.setMaximumItemAge(0L);
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      timeSeries0.isEmpty();
      zoneOffset0.getId();
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      defaultTableXYDataset0.indexOf("Z");
      DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
      defaultTableXYDataset0.indexOf(zoneOffset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
      DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      DatasetUtilities.calculatePieDatasetTotal(jDBCPieDataset0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      System.setCurrentTimeMillis(2741L);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 515, 106);
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Short short0 = new Short((short)92);
      arrayList0.add(short0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) arrayList0, false);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Number[][] numberArray0 = new Number[2][3];
      Number[] numberArray1 = new Number[1];
      numberArray0[0] = numberArray1;
      numberArray0[1] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, numberArray0);
      DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      int int0 = 0;
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, 0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(pieDataset0);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      boolean boolean0 = true;
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      SpreadsheetDate spreadsheetDate0 = null;
      try {
        spreadsheetDate0 = new SpreadsheetDate(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SpreadsheetDate: Serial must be in range 2 to 2958465.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      System.setCurrentTimeMillis(24L);
      Year year0 = new Year();
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) (-9999);
      doubleArray1[1] = 975.187334858708;
      doubleArray1[2] = (-2.147483648E9);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) 24L;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 975.187334858708;
      doubleArray2[3] = 975.187334858708;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 975.187334858708;
      doubleArray3[1] = (double) 9999;
      doubleArray3[2] = 109.082466517915;
      doubleArray3[3] = (double) 9999;
      doubleArray3[4] = (double) 24L;
      doubleArray3[5] = 4135.987007169;
      doubleArray3[6] = 975.187334858708;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = 4135.987007169;
      doubleArray4[1] = 975.187334858708;
      doubleArray4[2] = 4135.987007169;
      doubleArray4[3] = (double) (-9999);
      doubleArray4[4] = 4135.987007169;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = (double) 9999;
      doubleArray5[1] = (-2.147483648E9);
      doubleArray5[2] = 975.187334858708;
      doubleArray5[3] = (double) 9999;
      doubleArray5[4] = 109.082466517915;
      doubleArray5[5] = 0.0;
      doubleArray5[6] = (double) 9999;
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 2, 2);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, 17);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.previous();
      defaultCategoryDataset0.addValue((-1.7976931348623157E308), (Comparable) regularTimePeriod0, (Comparable) regularTimePeriod0);
      DatasetUtilities.findCumulativeRangeBounds(defaultCategoryDataset0);
      Comparable<DefaultTableXYDataset>[] comparableArray0 = (Comparable<DefaultTableXYDataset>[]) Array.newInstance(Comparable.class, 7);
      comparableArray0[0] = (Comparable<DefaultTableXYDataset>) hour0;
      comparableArray0[1] = (Comparable<DefaultTableXYDataset>) regularTimePeriod0;
      comparableArray0[2] = (Comparable<DefaultTableXYDataset>) regularTimePeriod0;
      comparableArray0[3] = (Comparable<DefaultTableXYDataset>) hour0;
      comparableArray0[4] = (Comparable<DefaultTableXYDataset>) regularTimePeriod0;
      comparableArray0[5] = (Comparable<DefaultTableXYDataset>) regularTimePeriod0;
      comparableArray0[6] = (Comparable<DefaultTableXYDataset>) hour0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.7976931348623157E308);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 23;
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.previous();
      defaultCategoryDataset0.addValue((-1.7976931348623157E308), (Comparable) regularTimePeriod0, (Comparable) regularTimePeriod0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, (double) 23);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, false);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      double[][] doubleArray0 = new double[4][8];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 2913.257326471;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 2913.257326471;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 2913.257326471;
      doubleArray3[7] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = 2913.257326471;
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      TimeSeries timeSeries0 = new TimeSeries(2913.257326471, (String) null, "k6;-;");
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      timeSeries0.isEmpty();
      zoneOffset0.getId();
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      DefaultTableXYDataset defaultTableXYDataset1 = new DefaultTableXYDataset();
      defaultTableXYDataset0.indexOf((Comparable) null);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset1);
      defaultTableXYDataset0.indexOf(0.0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0);
      DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.previous();
      defaultCategoryDataset0.addValue((-1.7976931348623157E308), (Comparable) regularTimePeriod0, (Comparable) regularTimePeriod0);
      DatasetUtilities.findCumulativeRangeBounds(defaultCategoryDataset0);
      Comparable<DefaultTableXYDataset>[] comparableArray0 = (Comparable<DefaultTableXYDataset>[]) Array.newInstance(Comparable.class, 7);
      comparableArray0[0] = (Comparable<DefaultTableXYDataset>) hour0;
      comparableArray0[1] = (Comparable<DefaultTableXYDataset>) regularTimePeriod0;
      comparableArray0[2] = (Comparable<DefaultTableXYDataset>) regularTimePeriod0;
      comparableArray0[3] = (Comparable<DefaultTableXYDataset>) hour0;
      comparableArray0[4] = (Comparable<DefaultTableXYDataset>) regularTimePeriod0;
      comparableArray0[5] = (Comparable<DefaultTableXYDataset>) regularTimePeriod0;
      comparableArray0[6] = (Comparable<DefaultTableXYDataset>) hour0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.7976931348623157E308);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 23;
      Number[][] numberArray0 = new Number[0][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("r^JCLe:", "", numberArray0);
      DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      DatasetUtilities.iterateXYRangeBounds(defaultWindDataset0);
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultWindDataset0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      XYSeries xYSeries0 = new XYSeries(5127);
      xYSeries0.addOrUpdate((Number) 5127, (Number) 8);
      Stack<Object> stack0 = new Stack<Object>();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(120, 53);
      Range range0 = dynamicTimeSeriesCollection0.getRangeBounds(false);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeSeriesCollection0, (List) stack0, range0, false);
      DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, false);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue(dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, 0.0);
      DefaultTableXYDataset defaultTableXYDataset1 = new DefaultTableXYDataset();
      defaultTableXYDataset1.getDomainBounds(true);
      Short short0 = new Short((short)1746);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short1 = new Short((short)1746);
      linkedList0.add(short1);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findMinimumStackedRangeValue(defaultCategoryDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset1, true);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      DefaultTableXYDataset defaultTableXYDataset1 = new DefaultTableXYDataset();
      defaultTableXYDataset1.getDomainBounds(true);
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      LinkedList<XYSeriesCollection> linkedList0 = new LinkedList<XYSeriesCollection>();
      DatasetUtilities.findDomainBounds((XYDataset) defaultWindDataset0, (List) linkedList0, true);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      // Undeclared exception!
      try { 
        taskSeriesCollection0.getValue((Comparable) fixedMillisecond0, (Comparable) fixedMillisecond0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("1>_iz`qm\"", "1>_iz`qm\"", "c$(CLMo:rugg5XF!");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) timePeriodValuesCollection0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-1220), (-1220));
      DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[1] = 2913.257326471;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("}'6SBu8EP3z*)'P-t$", "", doubleArray0);
      TimeSeries timeSeries0 = new TimeSeries(0.0, "", "");
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(3358);
      zoneOffset0.getId();
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      defaultTableXYDataset0.getDomainBounds(true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      Short short0 = new Short((short)1746);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      linkedList0.add(short0);
      Range range0 = jDBCXYDataset0.getRangeBounds(true);
      Range.expandToInclude((Range) null, (short)1746);
      Long long0 = new Long(3358);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(long0);
      jDBCXYDataset0.seriesChanged(seriesChangeEvent0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(jDBCXYDataset0, 1424.114);
      DatasetUtilities.findRangeBounds((XYDataset) xYBarDataset0, (List) linkedList0, range0, false);
      DatasetUtilities.findRangeBounds(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.previous();
      defaultCategoryDataset0.addValue((-1.7976931348623157E308), (Comparable) regularTimePeriod0, (Comparable) regularTimePeriod0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      short short0 = (short) (-1108);
      Short short1 = Short.valueOf((short) (-1108));
      linkedList0.add(short1);
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      DatasetUtilities.iterateDomainBounds((XYDataset) xYIntervalSeriesCollection0, true);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) linkedList0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = "";
      Day day0 = new Day();
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(142, 857.65557399624);
      // Undeclared exception!
      DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, 0.0, 142, 1205, "");
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[1] = 2913.257326471;
      doubleArray0[0] = doubleArray1;
      DatasetUtilities.createCategoryDataset("}'6SBu8EP3z*)'P-t$", "n", doubleArray0);
      TimeSeries timeSeries0 = new TimeSeries(0.0, "n", "n");
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 109, 2913.257326471, 109, 2913.257326471);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[1] = 2913.257326471;
      doubleArray0[0] = doubleArray1;
      DatasetUtilities.createCategoryDataset("}'6SBu8EP3z*)'P-t$", "", doubleArray0);
      XYSeries xYSeries0 = new XYSeries(2913.257326471);
      xYSeries0.addOrUpdate((Number) 2913.257326471, (Number) 2913.257326471);
      Stack<Object> stack0 = new Stack<Object>();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(120, 120);
      Range range0 = dynamicTimeSeriesCollection0.getRangeBounds(true);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) stack0, range0, true);
      DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      CategoryDataset categoryDataset0 = null;
      Stack<DynamicTimeSeriesCollection> stack0 = new Stack<DynamicTimeSeriesCollection>();
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2913.257326471;
      doubleArray0[0] = doubleArray1;
      DatasetUtilities.createCategoryDataset("}'SBu8EP3z*)'P-t$", "", doubleArray0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)79);
      linkedList0.add(short0);
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      DatasetUtilities.iterateDomainBounds((XYDataset) xYIntervalSeriesCollection0, false);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) xYIntervalSeriesCollection0, (List) linkedList0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.XYIntervalSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      XYSeries xYSeries0 = new XYSeries(5127);
      xYSeries0.addOrUpdate((Number) 5127, (Number) 8);
      Stack<Object> stack0 = new Stack<Object>();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)221);
      Short short1 = new Short((short) (-1));
      linkedList0.add(short1);
      LineFunction2D lineFunction2D0 = new LineFunction2D((-2919.0060276), Double.NEGATIVE_INFINITY);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(lineFunction2D0, (short)221, (-1739.16), (short)221, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      System.setCurrentTimeMillis(2741L);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 515, 106);
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) arrayList0, false);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-1173.05636), (-775.217208876), 109, "");
      DatasetUtilities.iterateRangeBounds(xYDataset0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2913.257326471;
      doubleArray0[0] = doubleArray1;
      DatasetUtilities.createCategoryDataset("}'SBu8EP3z*)'P-t$", "", doubleArray0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)101);
      linkedList0.add((Short) null);
      Year year0 = new Year(772);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection((short)101, (-2614), year0);
      Range range0 = dynamicTimeSeriesCollection0.getRangeBounds(true);
      Range.expandToInclude(range0, 2645.801);
      TimeSeries timeSeries0 = new TimeSeries(0.0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(98, "");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, simpleTimeZone0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(timeSeriesCollection0, 1849.09113848);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) linkedList0, range0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      boolean boolean0 = true;
      double[][] doubleArray0 = new double[4][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) (-402);
      doubleArray1[1] = (double) (-402);
      doubleArray1[2] = (double) (-402);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) (-402);
      doubleArray2[1] = (double) (-402);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (double) (-402);
      doubleArray3[1] = (double) (-402);
      doubleArray3[2] = (double) (-402);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = (double) (-402);
      doubleArray4[1] = (double) (-402);
      doubleArray4[2] = (double) (-402);
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 107);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 8;
      doubleArray0[4] = (double) 8;
      XYSeries xYSeries0 = new XYSeries(8.0);
      xYSeries0.addOrUpdate((Number) 0.0, (Number) 8.0);
      Stack<Object> stack0 = new Stack<Object>();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(120, 53);
      Range range0 = dynamicTimeSeriesCollection0.getRangeBounds(true);
      range0.toString();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeSeriesCollection0, (List) stack0, range0, true);
      DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, false);
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Day day0 = new Day();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.iterateCategoryRangeBounds(defaultBoxAndWhiskerCategoryDataset0, false);
      Second.parseSecond("sPeYT.,>W ]oF!6");
      XYSeries xYSeries0 = new XYSeries("sPeYT.,>W ]oF!6");
      xYSeries0.addOrUpdate((Number) 0, (Number) 59);
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      stack0.add(defaultTableXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultTableXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Day day0 = new Day();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, false);
      Second.parseSecond("sPeYT.,>W ]oF!6");
      XYSeries xYSeries0 = new XYSeries(day0);
      xYSeries0.addOrUpdate((Number) 0, (Number) 0);
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) stack0, false);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, false);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultWindDataset0, true);
      String string0 = "Null 'extract' argument.";
      Number[][] numberArray0 = new Number[5][8];
      Number[] numberArray1 = new Number[6];
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      int int0 = 240;
      // Undeclared exception!
      try { 
        defaultTableXYDataset0.getStartX(240, 46);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 240, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = null;
      Number[][] numberArray0 = new Number[2][3];
      Number[] numberArray1 = new Number[1];
      double double0 = (-1.0);
      Double double1 = new Double((-1.0));
      numberArray1[0] = (Number) double1;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[9];
      numberArray2[0] = (Number) double1;
      numberArray2[1] = (Number) double1;
      numberArray2[2] = (Number) double1;
      numberArray2[3] = (Number) double1;
      numberArray2[4] = (Number) double1;
      numberArray2[5] = (Number) double1;
      numberArray2[6] = (Number) double1;
      numberArray2[7] = (Number) double1;
      numberArray2[8] = (Number) double1;
      numberArray0[1] = numberArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, 110);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 110, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Number[][] numberArray0 = new Number[2][3];
      Number[] numberArray1 = new Number[1];
      Double double0 = new Double((-1.0));
      numberArray1[0] = (Number) double0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[9];
      numberArray2[0] = (Number) double0;
      numberArray2[1] = (Number) double0;
      numberArray2[2] = (Number) double0;
      numberArray2[3] = (Number) double0;
      numberArray2[4] = (Number) double0;
      numberArray2[5] = (Number) double0;
      numberArray2[6] = (Number) double0;
      numberArray2[7] = (Number) double0;
      numberArray2[8] = (Number) double0;
      numberArray0[1] = numberArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, numberArray0);
      DatasetUtilities.findMaximumRangeValue(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[1] = 2913.257326471;
      doubleArray0[0] = doubleArray1;
      DatasetUtilities.createCategoryDataset("}'6SBu8EP3z*)'P-t$", "", doubleArray0);
      TimeSeries timeSeries0 = new TimeSeries(0.0, "", "");
      timeSeries0.setMaximumItemCount(3358);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(3358);
      zoneOffset0.getId();
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2913.257326471;
      doubleArray0[0] = doubleArray1;
      DatasetUtilities.createCategoryDataset("}'SBu8EP3z*)'P-t$", "", doubleArray0);
      TimeSeries timeSeries0 = new TimeSeries(0.0, "", "");
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      timeSeries0.isEmpty();
      zoneOffset0.getId();
      TimeZone.getTimeZone((ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 975.187334858708;
      doubleArray0[1] = 1801.4018;
      doubleArray0[2] = 975.187334858708;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-1.7976931348623157E308), (-1.7976931348623157E308), 195, 975.187334858708);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 515, 147);
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Short short0 = new Short((short)92);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) arrayList0, false);
      double[][] doubleArray0 = new double[7][7];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) 515;
      doubleArray2[1] = (double) 147;
      doubleArray2[2] = (double) 2741L;
      doubleArray2[3] = (double) 515;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (double) 147;
      doubleArray3[1] = (double) 515;
      doubleArray3[2] = (double) 515;
      doubleArray3[3] = (double) 147;
      doubleArray3[4] = (double) 2741L;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = (double) 147;
      doubleArray4[1] = (double) 2741L;
      doubleArray4[2] = (double) (short)92;
      doubleArray4[3] = (double) (short)92;
      doubleArray4[4] = (double) 515;
      doubleArray4[5] = (double) 515;
      doubleArray4[6] = (double) 515;
      doubleArray4[7] = (double) 2741L;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = (double) 2741L;
      doubleArray5[1] = (double) 515;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      doubleArray6[0] = (double) (short)92;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      doubleArray7[0] = (double) 2741L;
      doubleArray7[1] = (double) 2741L;
      doubleArray7[2] = (double) 515;
      doubleArray7[3] = (double) 2741L;
      doubleArray7[4] = (double) 515;
      doubleArray7[5] = (double) (short)92;
      doubleArray7[6] = (double) 2741L;
      doubleArray0[6] = doubleArray7;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "6C^Z7\"^WOZ%;5", doubleArray0);
      DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[1] = 2913.257326471;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("}'6SBu8EP3z*)'P-t$", "", doubleArray0);
      TimeSeries timeSeries0 = new TimeSeries(0.0, "", "");
      timeSeries0.setMaximumItemCount(3358);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(3358);
      zoneOffset0.getId();
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      timeSeriesCollection0.clearSelection();
      DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      defaultTableXYDataset0.getDomainBounds(true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      Short short0 = new Short((short)1746);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      linkedList0.add(short0);
      defaultTableXYDataset0.getDomainLowerBound(true);
      Range range0 = jDBCXYDataset0.getRangeBounds(true);
      Range.expandToInclude((Range) null, (short)1746);
      XYBarDataset xYBarDataset0 = new XYBarDataset(jDBCXYDataset0, 1424.114);
      DatasetUtilities.findRangeBounds((XYDataset) xYBarDataset0, (List) linkedList0, range0, false);
      DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Day day0 = new Day();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.iterateCategoryRangeBounds(defaultBoxAndWhiskerCategoryDataset0, false);
      Second.parseSecond("sPeYT.,>W ]oF!6");
      XYSeries xYSeries0 = new XYSeries("sPeYT.,>W ]oF!6");
      xYSeries0.addOrUpdate((Number) 0, (Number) 59);
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, true);
      DatasetUtilities.findMaximumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 2913.257326471;
      XYSeries xYSeries0 = new XYSeries("");
      xYSeries0.addOrUpdate((Number) 2913.257326471, (Number) 2913.257326471);
      Stack<Object> stack0 = new Stack<Object>();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(120, 53);
      Range range0 = dynamicTimeSeriesCollection0.getRangeBounds(false);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) histogramDataset0, (List) stack0, range0, false);
      DatasetUtilities.findRangeBounds((XYDataset) histogramDataset0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, (List) stack0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, 0.0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0);
      DefaultTableXYDataset defaultTableXYDataset1 = new DefaultTableXYDataset();
      defaultTableXYDataset1.getDomainBounds(true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      jDBCXYDataset0.getRangeBounds(false);
      defaultTableXYDataset0.validateObject();
      LinkedList<XIntervalSeriesCollection> linkedList0 = new LinkedList<XIntervalSeriesCollection>();
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      linkedList0.addLast(xIntervalSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset1, (List) linkedList0, range0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XIntervalSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      double[][] doubleArray0 = new double[5][9];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 714.142973830776;
      doubleArray2[1] = (-3700.219767);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 714.142973830776;
      doubleArray3[1] = (-3700.219767);
      doubleArray3[2] = 714.142973830776;
      doubleArray3[3] = 714.142973830776;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = (-2476.4);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = (-2476.4);
      doubleArray5[1] = 714.142973830776;
      doubleArray5[2] = (-2476.4);
      doubleArray5[3] = (-3700.219767);
      doubleArray5[4] = 714.142973830776;
      doubleArray5[5] = (-2476.4);
      doubleArray5[6] = 714.142973830776;
      doubleArray5[7] = (-1985.7116463);
      doubleArray0[4] = doubleArray5;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) null, (Comparable[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultBoxAndWhiskerCategoryDataset0, 1570, 1570);
      DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0, true);
      DatasetGroup datasetGroup0 = new DatasetGroup();
      datasetGroup0.clone();
      slidingCategoryDataset0.setGroup(datasetGroup0);
      DatasetUtilities.iterateCategoryRangeBounds(defaultBoxAndWhiskerCategoryDataset0, false);
      String string0 = "Y\\";
      String string1 = "54+U";
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("Y", "54+U", (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      defaultTableXYDataset0.getDomainBounds(false);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1801.4018;
      doubleArray0[1] = 1801.4018;
      doubleArray0[2] = 975.187334858708;
      doubleArray0[3] = 975.187334858708;
      doubleArray0[4] = 1801.4018;
      doubleArray0[5] = 1801.4018;
      doubleArray0[6] = 1801.4018;
      doubleArray0[7] = 1785.127;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-1173.05636), (-109.0), 10, 1801.4018);
      DatasetUtilities.iterateRangeBounds(xYDataset0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 5127;
      doubleArray0[1] = (double) 8;
      XYSeries xYSeries0 = new XYSeries(5127.0);
      xYSeries0.addOrUpdate((Number) 8.0, (Number) 5127.0);
      Stack<Object> stack0 = new Stack<Object>();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(120, 53);
      Range range0 = dynamicTimeSeriesCollection0.getRangeBounds(false);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeSeriesCollection0, (List) stack0, range0, false);
      DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, false);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) stack0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[1] = 2913.257326471;
      doubleArray0[0] = doubleArray1;
      DatasetUtilities.createCategoryDataset("}'6SBu8EP3z*)'P-t$", "", doubleArray0);
      TimeSeries timeSeries0 = new TimeSeries(0.0, "", "");
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("i/E7ws", "j^tnyvZ", doubleArray0);
      TimeSeries timeSeries1 = new TimeSeries("j^tnyvZ", "i/E7ws", "( ");
      timeSeries0.setMaximumItemCount(0);
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      timeSeries1.isEmpty();
      zoneOffset0.getId();
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DefaultTableXYDataset defaultTableXYDataset1 = new DefaultTableXYDataset(true);
      defaultTableXYDataset1.indexOf(2913.257326471);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0);
      DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultBoxAndWhiskerCategoryDataset0, 1570, 1570);
      DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0, true);
      DatasetGroup datasetGroup0 = new DatasetGroup();
      datasetGroup0.clone();
      slidingCategoryDataset0.setGroup(datasetGroup0);
      DatasetUtilities.iterateCategoryRangeBounds(defaultBoxAndWhiskerCategoryDataset0, false);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      DatasetUtilities.findMinimumDomainValue(histogramDataset0);
      DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0, false);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0);
      MockDate mockDate0 = new MockDate(1570, 1570, 1570, 2722, 0);
      Month month0 = new Month(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.getDataItem((RegularTimePeriod) month0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingCategoryDataset0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)1005);
      Short short1 = new Short((short)32);
      linkedList0.add(short1);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(short0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultBoxAndWhiskerXYDataset0, (-2469.91974923621));
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      DatasetUtilities.findRangeBounds((XYDataset) xYBarDataset0, (List) linkedList0, range0, false);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "i V>M_}";
      stringArray0[1] = "C";
      Object[][][] objectArray0 = new Object[0][1][4];
      DefaultWindDataset defaultWindDataset0 = null;
      try {
        defaultWindDataset0 = new DefaultWindDataset(stringArray0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of series keys does not match the number of series in the data array.
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.previous();
      defaultCategoryDataset0.addValue((-1.7976931348623157E308), (Comparable) regularTimePeriod0, (Comparable) regularTimePeriod0);
      DatasetUtilities.findCumulativeRangeBounds(defaultCategoryDataset0);
      Comparable<DefaultTableXYDataset>[] comparableArray0 = (Comparable<DefaultTableXYDataset>[]) Array.newInstance(Comparable.class, 7);
      comparableArray0[0] = (Comparable<DefaultTableXYDataset>) hour0;
      comparableArray0[1] = (Comparable<DefaultTableXYDataset>) regularTimePeriod0;
      comparableArray0[2] = (Comparable<DefaultTableXYDataset>) regularTimePeriod0;
      comparableArray0[3] = (Comparable<DefaultTableXYDataset>) hour0;
      comparableArray0[4] = (Comparable<DefaultTableXYDataset>) regularTimePeriod0;
      comparableArray0[5] = (Comparable<DefaultTableXYDataset>) regularTimePeriod0;
      comparableArray0[6] = (Comparable<DefaultTableXYDataset>) hour0;
      double[][] doubleArray0 = new double[6][0];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-1.7976931348623157E308);
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 23;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (-1.7976931348623157E308);
      doubleArray1[6] = (-1.7976931348623157E308);
      doubleArray1[7] = 4135.987007169;
      doubleArray1[8] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 23;
      doubleArray2[1] = (-1.7976931348623157E308);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (double) 23;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      doubleArray6[0] = (-527.7);
      doubleArray6[1] = (double) 23;
      doubleArray6[2] = (double) 0;
      doubleArray6[3] = 3459.644;
      doubleArray6[4] = (double) 23;
      doubleArray6[5] = 4135.987007169;
      doubleArray6[6] = (double) 23;
      doubleArray6[7] = (double) 0;
      doubleArray0[5] = doubleArray6;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'rowKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      DatasetGroup datasetGroup0 = new DatasetGroup();
      datasetGroup0.clone();
      datasetGroup0.clone();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, (-2602), 305);
      slidingCategoryDataset0.setGroup(datasetGroup0);
      Range.combine((Range) null, (Range) null);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      DatasetUtilities.findMinimumDomainValue(histogramDataset0);
      DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0, true);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      boolean boolean0 = false;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      defaultTableXYDataset0.getDomainBounds(true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      String string0 = "is ";
      JDBCXYDataset jDBCXYDataset1 = null;
      try {
        jDBCXYDataset1 = new JDBCXYDataset("is ", "is ", "is ", "is ");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, 0.0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultBoxAndWhiskerCategoryDataset0, 1570, 1570);
      DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0, true);
      DatasetGroup datasetGroup0 = new DatasetGroup();
      datasetGroup0.clone();
      slidingCategoryDataset0.setGroup(datasetGroup0);
      DatasetUtilities.iterateCategoryRangeBounds(defaultBoxAndWhiskerCategoryDataset0, false);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      DatasetUtilities.findMinimumDomainValue(histogramDataset0);
      DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0, false);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      defaultTableXYDataset0.getDomainBounds(true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      Short short0 = new Short((short)1746);
      linkedList0.add(short0);
      Range range0 = jDBCXYDataset0.getRangeBounds(false);
      Range.expandToInclude(range0, 1570);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) histogramDataset0, (List) linkedList0, range0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 8;
      XYSeries xYSeries0 = new XYSeries(8.0);
      xYSeries0.addOrUpdate((Number) 8.0, (Number) 8.0);
      Stack<Object> stack0 = new Stack<Object>();
      stack0.add((Object) null);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(549, 549);
      Range range0 = dynamicTimeSeriesCollection0.getRangeBounds(false);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) stack0, range0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.previous();
      defaultCategoryDataset0.addValue((-1.7976931348623157E308), (Comparable) regularTimePeriod0, (Comparable) regularTimePeriod0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      short short0 = (short) (-1108);
      Short short1 = Short.valueOf((short) (-1108));
      linkedList0.add(short1);
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      DatasetUtilities.iterateDomainBounds((XYDataset) xYIntervalSeriesCollection0, true);
      Range range0 = Range.expandToInclude((Range) null, (-1120.42493258));
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYIntervalSeriesCollection0, 23);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) xYBarDataset0, (List) linkedList0, range0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.XYIntervalSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      defaultBoxAndWhiskerCategoryDataset0.removeChangeListener(xYTaskDataset0);
      DatasetUtilities.iterateCategoryRangeBounds(defaultBoxAndWhiskerCategoryDataset0, false);
      Second.parseSecond("");
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 59;
      doubleArray0[2] = 1801.4018;
      doubleArray0[3] = 1801.4018;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 59;
      doubleArray0[6] = 1785.127;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 0.0, 2114.0341, 59, "");
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 5127;
      doubleArray0[1] = (double) 0;
      XYSeries xYSeries0 = new XYSeries(5127.0);
      xYSeries0.addOrUpdate((Number) 0.0, (Number) 5127.0);
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      LinkedList<XIntervalSeriesCollection> linkedList0 = new LinkedList<XIntervalSeriesCollection>();
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      linkedList0.add(xIntervalSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XIntervalSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[1] = 2913.257326471;
      doubleArray0[0] = doubleArray1;
      DatasetUtilities.createCategoryDataset("}'6SBu8EP3z*)'P-t$", "", doubleArray0);
      TimeSeries timeSeries0 = new TimeSeries(0.0, "", "");
      timeSeries0.setMaximumItemCount(0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      zoneOffset0.getId();
      TimeZone.getTimeZone((ZoneId) zoneOffset0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "Z");
      Locale locale0 = Locale.JAPANESE;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0, locale0);
      DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, false);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      int int0 = (-402);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (-402));
      defaultKeyedValues2DDataset0.validateObject();
      DatasetChangeInfo datasetChangeInfo0 = new DatasetChangeInfo();
      defaultKeyedValues2DDataset0.fireDatasetChanged(datasetChangeInfo0);
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      defaultKeyedValues2DDataset0.fireSelectionEvent();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      LinkedList<DefaultIntervalXYDataset> linkedList0 = new LinkedList<DefaultIntervalXYDataset>();
      Comparable<YIntervalSeriesCollection> comparable0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      PieDataset pieDataset0 = null;
      DatasetUtilities.isEmptyOrNull((PieDataset) null);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, 0.0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) stack0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      int int0 = 5127;
      TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 5127;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 975.187334858708;
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset("SerialDate.weekInMonthToString(): invalid code.", "SerialDate.weekInMonthToString(): invalid code.", "SerialDate.weekInMonthToString(): invalid code.", "Mr@R2~ZYVDJTcQW.L-");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      int int0 = (-402);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (-402));
      DatasetChangeInfo datasetChangeInfo0 = new DatasetChangeInfo();
      defaultKeyedValues2DDataset0.fireDatasetChanged(datasetChangeInfo0);
      Stack<XYDatasetTableModel> stack0 = new Stack<XYDatasetTableModel>();
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      stack0.add(xYDatasetTableModel0);
      defaultKeyedValues2DDataset0.fireSelectionEvent();
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) stack0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYDatasetTableModel cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (-402));
      DatasetChangeInfo datasetChangeInfo0 = new DatasetChangeInfo();
      defaultKeyedValues2DDataset0.fireDatasetChanged(datasetChangeInfo0);
      Stack<XYDatasetTableModel> stack0 = new Stack<XYDatasetTableModel>();
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      stack0.add(xYDatasetTableModel0);
      defaultKeyedValues2DDataset0.fireSelectionEvent();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.findMinimumDomainValue(timeTableXYDataset0);
      LinkedList<DefaultIntervalXYDataset> linkedList0 = new LinkedList<DefaultIntervalXYDataset>();
      Comparable<YIntervalSeriesCollection> comparable0 = null;
      // Undeclared exception!
      try { 
        defaultKeyedValues2DDataset0.getValue((Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      defaultTableXYDataset0.getDomainBounds(false);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 8;
      XYSeries xYSeries0 = new XYSeries(8.0);
      xYSeries0.addOrUpdate((Number) 8.0, (Number) 8.0);
      Stack<Object> stack0 = new Stack<Object>();
      stack0.add((Object) null);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(549, 549);
      Range range0 = dynamicTimeSeriesCollection0.getRangeBounds(true);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) stack0, range0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, 0.0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0);
      DefaultTableXYDataset defaultTableXYDataset1 = new DefaultTableXYDataset();
      defaultTableXYDataset1.getDomainBounds(true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      jDBCXYDataset0.getRangeBounds(false);
      LinkedList<XIntervalSeriesCollection> linkedList0 = new LinkedList<XIntervalSeriesCollection>();
      DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset1, (List) linkedList0, range0, true);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 8;
      doubleArray0[4] = (double) 8;
      XYSeries xYSeries0 = new XYSeries(8.0);
      xYSeries0.addOrUpdate((Number) 0.0, (Number) 8.0);
      Stack<Object> stack0 = new Stack<Object>();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(120, 53);
      Range range0 = dynamicTimeSeriesCollection0.getRangeBounds(true);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeSeriesCollection0, (List) stack0, range0, true);
      DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, false);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, 0.0);
      DefaultTableXYDataset defaultTableXYDataset1 = new DefaultTableXYDataset();
      defaultTableXYDataset1.getDomainBounds(true);
      Short short0 = new Short((short)1746);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short1 = new Short((short)1746);
      linkedList0.add(short1);
      Range.expandToInclude((Range) null, Double.POSITIVE_INFINITY);
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultTableXYDataset0, 131.82);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset1, (List) linkedList0, range0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.DefaultTableXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      DatasetGroup datasetGroup0 = new DatasetGroup();
      datasetGroup0.clone();
      HistogramDataset histogramDataset0 = new HistogramDataset();
      DatasetUtilities.findMinimumDomainValue(histogramDataset0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0, false);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultBoxAndWhiskerCategoryDataset0, 1570, 1570);
      DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0, true);
      DatasetGroup datasetGroup0 = new DatasetGroup();
      datasetGroup0.clone();
      slidingCategoryDataset0.setGroup(datasetGroup0);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1570, 28);
      boolean boolean0 = true;
      DatasetUtilities.iterateRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, true);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1073);
      doubleArray0[1] = (double) 1570;
      doubleArray0[2] = (double) 28;
      doubleArray0[3] = (double) (-1073);
      doubleArray0[4] = (double) 28;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 1570, (-477.1), 28, 28.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-43.3));
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Day day0 = new Day();
      boolean boolean0 = false;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, Double.POSITIVE_INFINITY);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 756.077113708;
      doubleArray1[1] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = (-1.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = (-1.0);
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(" F", " F", doubleArray0);
      int int0 = (-2029);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (-2029));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      DatasetUtilities.iterateCategoryRangeBounds(taskSeriesCollection0, false);
      DatasetUtilities.findCumulativeRangeBounds(defaultBoxAndWhiskerCategoryDataset0);
      Second.parseSecond("");
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      xYSeries0.addOrUpdate((Number) 53, (Number) 53);
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      int int0 = 1570;
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 0);
      boolean boolean0 = true;
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-8.92086563748427), 1570, true, true);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) simpleHistogramBin0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(pieDataset0);
      XYSeries xYSeries0 = new XYSeries(simpleHistogramBin0);
      int int1 = (-167);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem((-167));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      int int0 = 0;
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, 0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(pieDataset0);
      Integer integer0 = new Integer(0);
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      boolean boolean0 = true;
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      SpreadsheetDate spreadsheetDate0 = null;
      try {
        spreadsheetDate0 = new SpreadsheetDate(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SpreadsheetDate: Serial must be in range 2 to 2958465.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      LineFunction2D lineFunction2D0 = new LineFunction2D(0L, 1229.409978784);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-1781.1625968), 336.104846045864, (-1), integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      defaultBoxAndWhiskerCategoryDataset0.removeChangeListener(xYTaskDataset0);
      DatasetUtilities.iterateCategoryRangeBounds(defaultBoxAndWhiskerCategoryDataset0, false);
      DatasetUtilities.findCumulativeRangeBounds(taskSeriesCollection0);
      Second.parseSecond("");
      XYSeries xYSeries0 = new XYSeries("");
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      defaultTableXYDataset0.getDomainBounds(true);
      Stack<DynamicTimeSeriesCollection> stack0 = new Stack<DynamicTimeSeriesCollection>();
      Range range0 = new Range(0, 59);
      DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, (List) stack0, range0, false);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Day day0 = new Day();
      DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, 4135.987007169, Double.POSITIVE_INFINITY, 142, day0);
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      LinkedList<XYSeriesCollection> linkedList0 = new LinkedList<XYSeriesCollection>();
      DatasetUtilities.findDomainBounds((XYDataset) defaultWindDataset0, (List) linkedList0, false);
      Comparable<TimeTableXYDataset>[] comparableArray0 = (Comparable<TimeTableXYDataset>[]) Array.newInstance(Comparable.class, 5);
      comparableArray0[0] = (Comparable<TimeTableXYDataset>) day0;
      comparableArray0[1] = (Comparable<TimeTableXYDataset>) day0;
      comparableArray0[2] = (Comparable<TimeTableXYDataset>) day0;
      comparableArray0[3] = (Comparable<TimeTableXYDataset>) day0;
      comparableArray0[4] = (Comparable<TimeTableXYDataset>) day0;
      Number[][] numberArray0 = new Number[9][1];
      Number[] numberArray1 = new Number[4];
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      // Undeclared exception!
      try { 
        taskSeriesCollection0.getValue(comparableArray0[1], comparableArray0[1]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      defaultBoxAndWhiskerCategoryDataset0.removeChangeListener(xYTaskDataset0);
      DatasetUtilities.findCumulativeRangeBounds(defaultBoxAndWhiskerCategoryDataset0);
      String string0 = "";
      Second.parseSecond("");
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2913.257326471;
      doubleArray0[0] = doubleArray1;
      DatasetUtilities.createCategoryDataset("}'SBu8EP3z*)'P-t$", "", doubleArray0);
      TimeSeries timeSeries0 = new TimeSeries(0.0, "", "");
      timeSeries0.setMaximumItemCount(0);
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      timeSeries0.isEmpty();
      zoneOffset0.getId();
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      defaultTableXYDataset0.indexOf("Z");
      DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      Hour hour0 = new Hour();
      Class<DefaultIntervalXYDataset> class0 = DefaultIntervalXYDataset.class;
      RegularTimePeriod.downsize(class0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultTableXYDataset0);
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      int int0 = 1570;
      boolean boolean0 = true;
      DatasetGroup datasetGroup0 = new DatasetGroup();
      datasetGroup0.clone();
      DatasetUtilities.iterateCategoryRangeBounds(defaultBoxAndWhiskerCategoryDataset0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, 1570);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      defaultBoxAndWhiskerCategoryDataset0.removeChangeListener(xYTaskDataset0);
      DatasetUtilities.iterateCategoryRangeBounds(defaultBoxAndWhiskerCategoryDataset0, false);
      DatasetUtilities.findCumulativeRangeBounds(taskSeriesCollection0);
      Second.parseSecond("");
      XYSeries xYSeries0 = new XYSeries("");
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      xYSeries0.addOrUpdate((Number) integer0, (Number) 0);
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      DatasetUtilities.findMaximumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      defaultTableXYDataset0.getDomainBounds(true);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) timePeriodValuesCollection0, (List) linkedList0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      int int0 = 1570;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultBoxAndWhiskerCategoryDataset0, 1570, 1570);
      boolean boolean0 = true;
      DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0, true);
      DatasetGroup datasetGroup0 = new DatasetGroup();
      datasetGroup0.clone();
      slidingCategoryDataset0.setGroup(datasetGroup0);
      DatasetUtilities.iterateCategoryRangeBounds(defaultBoxAndWhiskerCategoryDataset0, false);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) slidingCategoryDataset0);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 1570);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      DatasetUtilities.findMinimumDomainValue(histogramDataset0);
      DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0, false);
      DatasetUtilities.findRangeBounds((XYDataset) histogramDataset0);
      String string0 = "\\pVNQ@BNR`k%";
      MatrixSeries matrixSeries0 = new MatrixSeries("pVNQ@BNR`k%", 1570, 1570);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      int int0 = (-402);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (-402));
      DatasetChangeInfo datasetChangeInfo0 = new DatasetChangeInfo();
      defaultKeyedValues2DDataset0.fireDatasetChanged(datasetChangeInfo0);
      Stack<XYDatasetTableModel> stack0 = new Stack<XYDatasetTableModel>();
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      stack0.add(xYDatasetTableModel0);
      defaultKeyedValues2DDataset0.fireSelectionEvent();
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) stack0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYDatasetTableModel cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 5127;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 975.187334858708;
      doubleArray0[3] = 1785.127;
      doubleArray0[4] = (double) (-2297);
      doubleArray0[5] = (double) 3193;
      doubleArray0[6] = 1801.4018;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 1117.553520996, 1801.4018, 0, 5127.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      double[][] doubleArray0 = new double[0][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'day' argument.", "Null 'day' argument.", doubleArray0);
      DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      Comparable<Double>[] comparableArray0 = (Comparable<Double>[]) Array.newInstance(Comparable.class, 3);
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Year year0 = new Year(date0, timeZone0);
      comparableArray0[0] = (Comparable<Double>) year0;
      Quarter quarter0 = new Quarter(date0);
      comparableArray0[1] = (Comparable<Double>) quarter0;
      Minute minute0 = null;
      try {
        minute0 = new Minute(date0, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      DatasetUtilities.isEmptyOrNull((PieDataset) null);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Object object0 = new Object();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      taskSeriesCollection0.removeAll();
      Week week0 = new Week();
      week0.compareTo(taskSeriesCollection0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 53;
      doubleArray0[6] = (double) 53;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      int int0 = 881;
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-1055.0), 2900.0779632879053, 881, 1.0);
      String string0 = "A|x^#N+V";
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("A|x^#N+V", (DateFormatSymbols) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      defaultBoxAndWhiskerCategoryDataset0.removeChangeListener(xYTaskDataset0);
      DatasetUtilities.findCumulativeRangeBounds(defaultBoxAndWhiskerCategoryDataset0);
      LineFunction2D lineFunction2D0 = new LineFunction2D(0.0, 975.187334858708);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 181, 181);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      String string0 = "yX#y_5";
      DateFormatSymbols dateFormatSymbols0 = SerialDate.DATE_FORMAT_SYMBOLS;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("yX#y_5", dateFormatSymbols0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Locale locale0 = Locale.ENGLISH;
      TimeZone timeZone1 = mockSimpleDateFormat0.getTimeZone();
      TimeZone.setDefault(timeZone1);
      locale0.getScript();
      Week week0 = new Week(date0, timeZone0, locale0);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      Object object0 = new Object();
      taskSeriesCollection0.removeAll();
      week0.compareTo(object0);
      DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, 0.0, 2114.0341, 181, regularTimePeriod0);
      mockSimpleDateFormat0.clone();
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, 975.187334858708, 0.0, 0, regularTimePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) xIntervalSeriesCollection0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      String string0 = "";
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, (Number[][]) null, (Number[][]) null);
      int int0 = (-1443);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      MockDate mockDate0 = new MockDate(5127, 3193, 0, 562, 5127);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      Quarter quarter0 = new Quarter(mockDate0, timeZone0, locale0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(5127, (-2297), quarter0, timeZone0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(dynamicTimeSeriesCollection0, 1.0);
      Number number0 = DatasetUtilities.findMinimumDomainValue(xYBarDataset0);
      assertNull(number0);
      
      Comparable<DefaultIntervalXYDataset>[] comparableArray0 = (Comparable<DefaultIntervalXYDataset>[]) Array.newInstance(Comparable.class, 1);
      comparableArray0[0] = (Comparable<DefaultIntervalXYDataset>) quarter0;
      double[][] doubleArray0 = new double[7][9];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 4;
      doubleArray1[1] = (double) (-2297);
      doubleArray1[2] = (double) 3193;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) (-2297);
      doubleArray2[2] = (double) 5127;
      doubleArray2[3] = (double) 4;
      doubleArray2[4] = Double.POSITIVE_INFINITY;
      doubleArray2[5] = 1.0;
      doubleArray2[6] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = (double) 3193;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = (double) 2;
      doubleArray4[1] = 2913.257326471;
      doubleArray4[2] = 1.0;
      doubleArray4[3] = Double.POSITIVE_INFINITY;
      doubleArray4[4] = (double) 0;
      doubleArray4[5] = Double.NaN;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = 0.8;
      doubleArray5[1] = (double) 5127;
      doubleArray5[2] = Double.POSITIVE_INFINITY;
      doubleArray5[3] = (double) 4;
      doubleArray5[4] = (double) 4;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = (double) 3193;
      doubleArray6[1] = Double.POSITIVE_INFINITY;
      doubleArray6[2] = (double) 562;
      doubleArray6[3] = (-4525.1886738089);
      doubleArray6[4] = 2913.257326471;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = 94.241;
      doubleArray7[2] = (double) 4;
      doubleArray7[3] = Double.POSITIVE_INFINITY;
      doubleArray7[4] = (double) 4;
      doubleArray7[5] = (double) 2;
      doubleArray7[6] = (double) 0;
      doubleArray0[6] = doubleArray7;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0, "1>_iz`qm\"", "1>_iz`qm\"");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) timePeriodValuesCollection0);
      assertNull(number0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (-641));
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "1>_iz`qm\"", (KeyedValues) pieDataset0);
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      DatasetUtilities.iterateXYRangeBounds(xYSeriesCollection0);
      Comparable<XIntervalSeriesCollection>[] comparableArray0 = (Comparable<XIntervalSeriesCollection>[]) Array.newInstance(Comparable.class, 3);
      int int0 = 53;
      Hour hour0 = new Hour();
      Minute minute0 = new Minute(53, hour0);
      RegularTimePeriod regularTimePeriod0 = minute0.previous();
      comparableArray0[0] = (Comparable<XIntervalSeriesCollection>) regularTimePeriod0;
      int int1 = 0;
      // Undeclared exception!
      try { 
        SerialDate.createInstance(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SpreadsheetDate: Serial must be in range 2 to 2958465.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds((CategoryDataset) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-2047.1740642093373);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-2047.1740642093373);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (-2047.1740642093373);
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 0.0;
      doubleArray3[7] = (-829.028884);
      doubleArray3[8] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (-829.028884);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = (-3716.007675);
      doubleArray5[1] = (-829.028884);
      doubleArray5[2] = (-829.028884);
      doubleArray5[3] = (-2047.1740642093373);
      doubleArray5[4] = 0.0;
      doubleArray5[5] = (-829.028884);
      doubleArray5[6] = 0.0;
      doubleArray5[7] = 6.283185307179586;
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 0);
      jDBCXYDataset0.addChangeListener(categoryToPieDataset0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0, 4135.987007169);
      assertNotNull(range0);
      assertEquals(4135.987007169, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Comparable<DefaultIntervalXYDataset>[] comparableArray0 = (Comparable<DefaultIntervalXYDataset>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, (Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      int int0 = 0;
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, 0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(pieDataset0);
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 0.0;
      int int0 = 0;
      Locale locale0 = Locale.KOREAN;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Day day0 = new Day(date0);
      RegularTimePeriod regularTimePeriod0 = day0.next();
      regularTimePeriod0.previous();
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D((Function2D) null, 0.0, 0.0, 0, regularTimePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      LinkedList<XIntervalSeriesCollection> linkedList0 = new LinkedList<XIntervalSeriesCollection>();
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("q>", (String) null, (Number[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      DatasetUtilities.isEmptyOrNull((PieDataset) null);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, 0.0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) jDBCCategoryDataset0, 736.16);
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      int int0 = 3691;
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, 3691);
      DatasetUtilities.isEmptyOrNull(pieDataset0);
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      hour0.getMonth();
      TimeZone timeZone0 = TimeZone.getTimeZone("b4\"9HTbB6r");
      timeZone0.getOffset((long) 3691);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      xYSeries0.equals(timeSeriesCollection0);
      xYSeries0.add(959.00296368, (Number) 23);
      int int1 = 0;
      xYSeriesCollection0.getStartYValue(0, 0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) xYSeriesCollection0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      String string0 = "org.jfree.data.event.SeriesChangeEvent";
      Number[][] numberArray0 = new Number[0][5];
      DatasetUtilities.createCategoryDataset("org.jfree.data.event.SeriesChangeEvent", "org.jfree.data.event.SeriesChangeEvent", numberArray0);
      long long0 = 1275L;
      SimpleTimePeriod simpleTimePeriod0 = null;
      try {
        simpleTimePeriod0 = new SimpleTimePeriod(1275L, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.SimpleTimePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
      String string0 = "";
      String string1 = "";
      Number[][] numberArray0 = new Number[9][3];
      Number[] numberArray1 = new Number[6];
      BigInteger bigInteger0 = BigInteger.ZERO;
      numberArray1[0] = (Number) bigInteger0;
      BigInteger bigInteger1 = BigInteger.ZERO;
      numberArray1[1] = (Number) bigInteger1;
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      numberArray1[2] = (Number) integer0;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      // Undeclared exception!
      try { 
        taskSeriesCollection0.getEndValue((Comparable) "", (Comparable) bigInteger0, (-363));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      double double0 = 0.0;
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, 0.0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0);
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      double[][] doubleArray0 = new double[0][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'day' argument.", "Null 'day' argument.", doubleArray0);
      DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      String string0 = "org.jfree.data.general.DatasetUtilities";
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset("Null 'day' argument.", "Null 'day' argument.", "org.jfree.data.general.DatasetUtilities", "Null 'day' argument.");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2913.257326471;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("}'SBu8EP3z*)'P-t$", "", doubleArray0);
      TimeSeries timeSeries0 = new TimeSeries(0.0, "", "");
      timeSeries0.setMaximumItemCount(0);
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      zoneOffset0.getId();
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (Comparable) "}'SBu8EP3z*)'P-t$");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
