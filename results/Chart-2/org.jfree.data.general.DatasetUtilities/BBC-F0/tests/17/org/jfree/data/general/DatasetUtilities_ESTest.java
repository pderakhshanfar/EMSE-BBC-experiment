/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 16 20:35:33 GMT 2020
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.KeyListener;
import java.lang.reflect.Array;
import java.math.BigInteger;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.Chronology;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Date;
import java.util.EventListener;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import java.util.function.UnaryOperator;
import javax.swing.Action;
import javax.swing.JLayeredPane;
import javax.swing.JToolTip;
import javax.swing.TransferHandler;
import javax.swing.text.DefaultEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.KeyToGroupMap;
import org.jfree.data.KeyedValues;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.event.SeriesChangeEvent;
import org.jfree.data.function.Function2D;
import org.jfree.data.function.LineFunction2D;
import org.jfree.data.function.NormalDistributionFunction2D;
import org.jfree.data.function.PolynomialFunction2D;
import org.jfree.data.function.PowerFunction2D;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DatasetUtilities;
import org.jfree.data.general.DefaultHeatMapDataset;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.SeriesChangeInfo;
import org.jfree.data.general.SeriesChangeType;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.pie.DefaultPieDataset;
import org.jfree.data.pie.PieDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimePeriodAnchor;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XIntervalSeries;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYDatasetTableModel;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DatasetUtilities_ESTest extends DatasetUtilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-1241.279);
      doubleArray1[2] = (-1051.0417378861);
      doubleArray1[3] = (-3234.64633517);
      doubleArray1[4] = (-1337.68006656);
      doubleArray1[5] = (-0.5);
      doubleArray1[6] = (-2825.43470071781);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, (-705), (-2146210687));
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getItemCount();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) integer1, "Null 'rowKeys' argument.", false);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-1102.089));
      DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, false);
      System.setCurrentTimeMillis(0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      categoryTableXYDataset0.hasListener((EventListener) null);
      categoryTableXYDataset0.setIntervalPositionFactor(0.0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "Category 2", true);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 0.0);
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, (-1.0));
      DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[][] doubleArray0 = new double[2][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      Double double0 = (Double)DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(double0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findCumulativeRangeBounds(defaultStatisticalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1048, 1048);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      defaultBoxAndWhiskerCategoryDataset0.add((List) arrayList0, (Comparable) simpleTimePeriod0, (Comparable) simpleTimePeriod0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      Range.combine(range0, range0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      MockDate mockDate0 = new MockDate((-3117), (-230), (-1240), 1391, (-3117));
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1048, 1391, (-1240), 3803.3888842268, 1391);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1075.607, 3743.34923, (-1.0), (-1.0), (-5457.9));
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-1240), (-1.0), (-1.0), (-3117), (-1319.33));
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, (-1240), 4310.74622, 1048, 1048, (-2477.2));
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, 2752.444941588502, 4310.74622, 3084.230196492885, (-1240), 3084.230196492885);
      oHLCDataItemArray0[4] = oHLCDataItem4;
      OHLCDataItem oHLCDataItem5 = new OHLCDataItem(mockDate0, 103.7, 103.7, (-604.41059), (-1861.48772), (-1240));
      oHLCDataItemArray0[5] = oHLCDataItem5;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(simpleTimePeriod0, oHLCDataItemArray0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, false);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Short short0 = new Short((short) (-1686));
      stack0.add(short0);
      double[][] doubleArray0 = new double[18][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (short) (-1686);
      doubleArray1[2] = (double) (short) (-1686);
      doubleArray1[0] = (double) (short) (-1686);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) (short) (-1686);
      doubleArray2[1] = (double) (short) (-1686);
      doubleArray1[0] = (double) (short) (-1686);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      jDBCCategoryDataset0.setValue((Number) (-1686.0), (Comparable) (-1686.0), (Comparable) (-1686.0));
      Vector<Double> vector0 = new Vector<Double>();
      Double double0 = new Double((-126.1));
      vector0.add((Double) (-1686.0));
      DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      TimeTableXYDataset timeTableXYDataset0 = null;
      try {
        timeTableXYDataset0 = new TimeTableXYDataset((TimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'zone' argument.
         //
         verifyException("org.jfree.data.time.TimeTableXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      categoryTableXYDataset0.setIntervalPositionFactor(0.0);
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "Ca>egory 2", true);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 0.0);
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, false);
      DatasetUtilities.findMaximumDomainValue(categoryTableXYDataset0);
      DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      double[][] doubleArray0 = new double[6][3];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = (-1286.6040166);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-1286.6040166);
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 267.10124937;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = (-1286.6040166);
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 267.10124937;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = (-1286.6040166);
      doubleArray4[6] = 0.0;
      doubleArray4[7] = 267.10124937;
      doubleArray4[8] = (-1286.6040166);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = 267.10124937;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 3803.3888842268;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 267.10124937;
      doubleArray6[2] = 0.0;
      doubleArray0[5] = doubleArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1079, 1079, 1079, 1079, 2652, 1079);
      Day day0 = new Day(mockDate0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1079, 1121.1518334024945, 1121.1518334024945, 1079, 2652);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(day0, oHLCDataItemArray0);
      Vector<Short> vector0 = new Vector<Short>();
      Short short0 = new Short((short)920);
      vector0.add(short0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) vector0, true);
      DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0, (List) vector0, true);
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(Double.NEGATIVE_INFINITY, 2069.920074978514);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
      ArrayList<DefaultIntervalXYDataset> arrayList0 = new ArrayList<DefaultIntervalXYDataset>();
      DatasetUtilities.isEmptyOrNull((XYDataset) jDBCXYDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) vector0, range0, true);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0, true);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, 300.0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      categoryTableXYDataset0.hasListener((EventListener) null);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "Category 2", false);
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[7];
      doubleArray0[0] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      defaultCategoryDataset0.setValue((Number) 0.0, (Comparable) 0.0, (Comparable) 0.0);
      Vector<Double> vector0 = new Vector<Double>();
      Double double0 = new Double(0.0);
      vector0.add(double0);
      DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, false);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) vector0, false);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) vector0, true);
      DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      Integer integer2 = Integer.getInteger("P,cHW^g,KWU*CXJ;fm", integer1);
      categoryTableXYDataset0.add((Number) integer0, (Number) integer2, "P,cHW^g,KWU*CXJ;fm", true);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-1102.089));
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.getColumnKeys();
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, true);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Short short0 = new Short((short) (-1686));
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 2977, (short) (-1686));
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(slidingGanttCategoryDataset0, tableOrder0, (-1904));
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) short0, (KeyedValues) categoryToPieDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      categoryTableXYDataset0.setIntervalPositionFactor(0.0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "Category 2", true);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 0.0);
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.getColumnKeys();
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, false);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, (Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";~W7jGKzt");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      categoryTableXYDataset0.hasListener((EventListener) null);
      DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 181);
      DatasetUtilities.isEmptyOrNull((XYDataset) categoryTableXYDataset0);
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, false);
      double[][] doubleArray0 = new double[7][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1857.402;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (double) 181;
      doubleArray2[2] = (-1.7976931348623157E308);
      doubleArray2[3] = 1857.402;
      doubleArray2[4] = 1857.402;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 1857.402;
      doubleArray3[2] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = (double) 181;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 1857.402;
      doubleArray5[2] = (double) 181;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      doubleArray7[0] = (double) 181;
      doubleArray7[1] = (-1.7976931348623157E308);
      doubleArray7[2] = 0.0;
      doubleArray7[3] = 1857.402;
      doubleArray7[4] = 1857.402;
      doubleArray7[5] = (-2779.16991);
      doubleArray0[6] = doubleArray7;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "@Qy5 W(+8\"C_*<OfUI", doubleArray0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      categoryTableXYDataset0.setIntervalPositionFactor(0.0);
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "Ca>egory 2", true);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 0.0);
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, false);
      Number number0 = DatasetUtilities.findMaximumDomainValue(categoryTableXYDataset0);
      DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      Number[][] numberArray0 = new Number[4][7];
      Number[] numberArray1 = new Number[5];
      numberArray1[0] = (Number) integer0;
      numberArray1[1] = number0;
      numberArray1[2] = (Number) integer0;
      numberArray1[3] = (Number) integer0;
      numberArray1[4] = number0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[6];
      numberArray2[0] = number0;
      BigInteger bigInteger0 = BigInteger.ONE;
      numberArray2[1] = (Number) bigInteger0;
      numberArray2[2] = number0;
      numberArray2[3] = number0;
      numberArray2[4] = number0;
      numberArray2[5] = number0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[6];
      numberArray3[0] = (Number) integer0;
      numberArray3[1] = (Number) integer0;
      Integer integer1 = new Integer(1);
      numberArray3[2] = (Number) integer1;
      numberArray3[3] = (Number) bigInteger0;
      numberArray3[4] = (Number) integer0;
      numberArray3[5] = (Number) bigInteger0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[4];
      numberArray4[0] = (Number) integer0;
      numberArray4[1] = (Number) bigInteger0;
      numberArray4[2] = (Number) integer0;
      numberArray4[3] = number0;
      numberArray0[3] = numberArray4;
      DatasetUtilities.createCategoryDataset("Ca>egory 2", "Ca>egory 2", numberArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("series.default-prefix", "series.default-prefix", doubleArray0);
      DatasetUtilities.findRangeBounds(categoryDataset0);
      MockDate mockDate0 = new MockDate();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      defaultKeyedValuesDataset0.setValue((Comparable) mockDate0, (-1481.5));
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      Stack<Double> stack0 = new Stack<Double>();
      UnaryOperator.identity();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      // Undeclared exception!
      try { 
        Chronology.of("series.default-prefix");
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Unknown chronology: series.default-prefix
         //
         verifyException("java.time.chrono.AbstractChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      double[][] doubleArray0 = new double[18][8];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 23.980315884934154;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Range range0 = new Range(23.980315884934154, 23.980315884934154);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      Range.combine(range0, range0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Short short0 = new Short((short) (-1686));
      stack0.add(short0);
      double[][] doubleArray0 = new double[18][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (short) (-1686);
      doubleArray1[2] = (double) (short) (-1686);
      doubleArray1[0] = (double) (short) (-1686);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) (short) (-1686);
      doubleArray2[1] = (double) (short) (-1686);
      doubleArray1[0] = (double) (short) (-1686);
      doubleArray2[3] = (double) (short) (-1686);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (double) (short) (-1686);
      doubleArray2[2] = (double) (short) (-1686);
      doubleArray3[2] = (double) (short) (-1686);
      Range range0 = new Range((-1692.0), 3.4775638199E13);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((-1686.0));
      List<Byte> list0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) null, range0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = "series.default-prefix";
      double[][] doubleArray0 = new double[1][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("series.default-prefix", "series.default-prefix", doubleArray0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (-3792));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockDate mockDate0 = new MockDate(181, 0, 181);
      Stack<Short> stack0 = new Stack<Short>();
      Short short0 = new Short((short) (-4231));
      stack0.add(short0);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((short) (-4231), (short) (-4231));
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3958, "aeor 1");
      DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-4881.111666191738), (-810.0), 14, short0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(mockDate0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      defaultXYDataset0.clone();
      DatasetUtilities.findMinimumDomainValue(defaultXYDataset0);
      String[] stringArray0 = new String[5];
      stringArray0[2] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      Number[][] numberArray0 = new Number[5][5];
      Number[] numberArray1 = new Number[4];
      numberArray1[1] = null;
      numberArray1[2] = null;
      numberArray1[3] = null;
      numberArray0[1] = numberArray1;
      numberArray0[2] = numberArray0[0];
      Number[] numberArray2 = new Number[9];
      numberArray2[0] = null;
      numberArray2[1] = null;
      int int0 = (-408);
      Integer integer0 = new Integer((-408));
      numberArray2[2] = (Number) integer0;
      DatasetUtilities.findRangeBounds((XYDataset) defaultXYDataset0);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.setIntervalPositionFactor(0.0);
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "Null 'rowKeys' argument.", true);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-2973.0));
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.getColumnKeys();
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, true);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Short short0 = new Short((short) (-1686));
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D((short) (-1686), 1652.8629);
      DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, (short) (-1686), 0.8, 5, short0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(short0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Null 'rowKeys' argument.";
      stringArray0[1] = "I]2 *J:V";
      stringArray0[2] = "r:^k(}1-(yL+mbU";
      stringArray0[3] = "*";
      stringArray0[4] = "c4[s4U";
      stringArray0[5] = "Category 4";
      Number[][] numberArray0 = new Number[6][4];
      Number[] numberArray1 = new Number[3];
      numberArray1[0] = (Number) short0;
      numberArray1[1] = (Number) short0;
      numberArray1[2] = (Number) short0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[7];
      numberArray2[0] = (Number) short0;
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      numberArray2[1] = (Number) integer0;
      numberArray2[2] = (Number) short0;
      numberArray2[3] = (Number) short0;
      numberArray2[4] = (Number) short0;
      numberArray2[5] = (Number) short0;
      numberArray2[6] = (Number) short0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[4];
      numberArray3[0] = (Number) short0;
      numberArray3[1] = (Number) short0;
      numberArray3[2] = (Number) integer0;
      numberArray3[3] = (Number) integer0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[1];
      numberArray4[0] = (Number) integer0;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[7];
      numberArray5[0] = (Number) short0;
      numberArray5[1] = (Number) integer0;
      numberArray5[2] = (Number) short0;
      numberArray5[3] = (Number) short0;
      Short short1 = new Short((short) (-1686));
      numberArray5[4] = (Number) short1;
      numberArray5[5] = (Number) integer0;
      numberArray5[6] = (Number) integer0;
      numberArray0[4] = numberArray5;
      Number[] numberArray6 = new Number[0];
      numberArray0[5] = numberArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1079, 1079, 1079, 1079, 2652, 1079);
      Day day0 = new Day(mockDate0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1079, 1121.1518334024945, 1121.1518334024945, 1079, 2652);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(day0, oHLCDataItemArray0);
      Vector<Short> vector0 = new Vector<Short>();
      Short short0 = new Short((short)920);
      vector0.add(short0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) vector0, true);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.getRowKeys();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) vector0, true);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getDomainBounds(true);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 482.283);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) linkedList0, true);
      double[][] doubleArray0 = new double[8][2];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 482.283;
      doubleArray1[1] = 482.283;
      doubleArray1[2] = 482.283;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 482.283;
      doubleArray2[1] = 482.283;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 482.283;
      doubleArray3[1] = 482.283;
      doubleArray3[2] = 482.283;
      doubleArray3[3] = 482.283;
      doubleArray3[4] = 482.283;
      doubleArray3[5] = 482.283;
      doubleArray3[6] = 482.283;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = 482.283;
      doubleArray4[1] = 482.283;
      doubleArray4[2] = 482.283;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 482.283;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 482.283;
      doubleArray6[2] = 1425.26788185;
      doubleArray6[3] = 0.0;
      doubleArray6[4] = 482.283;
      doubleArray6[5] = 0.0;
      doubleArray6[6] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      doubleArray7[0] = (-102.7463937695806);
      doubleArray7[1] = 1425.26788185;
      doubleArray7[2] = 482.283;
      doubleArray7[3] = 0.0;
      doubleArray7[4] = 482.283;
      doubleArray7[5] = 0.0;
      doubleArray7[6] = 0.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[2];
      doubleArray8[0] = 0.0;
      doubleArray8[1] = 0.0;
      doubleArray0[7] = doubleArray8;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(">]:m>J+x_YP!$", ">]:m>J+x_YP!$", doubleArray0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 1);
      DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Short short0 = new Short((short) (-1686));
      stack0.add(short0);
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 259.64;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (int) (short) (-1686));
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) short0, 259.64, (-587));
      Range range0 = new Range((-1569.690960189), (-302.4513842782306));
      DatasetUtilities.calculatePieDatasetTotal(pieDataset1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      Object object0 = new Object();
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(object0);
      matrixSeriesCollection0.seriesChanged(seriesChangeEvent0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      categoryTableXYDataset0.hasListener((EventListener) null);
      categoryTableXYDataset0.setIntervalPositionFactor(0.0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "ZQ", false);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-4231.5));
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(2421.2338635);
      linkedList0.add(double0);
      DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, linkedList0, false);
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      double[][] doubleArray0 = new double[5][3];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2421.2338635;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 2421.2338635;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 2421.2338635;
      doubleArray3[1] = (-4231.5);
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (-4231.5);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = 2421.2338635;
      doubleArray4[1] = Double.POSITIVE_INFINITY;
      doubleArray4[2] = 2421.2338635;
      doubleArray4[3] = 2421.2338635;
      doubleArray4[4] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = Double.POSITIVE_INFINITY;
      doubleArray5[1] = Double.POSITIVE_INFINITY;
      doubleArray5[2] = (-4231.5);
      doubleArray5[3] = Double.POSITIVE_INFINITY;
      doubleArray5[4] = (-4231.5);
      doubleArray5[5] = 0.0;
      doubleArray5[6] = 2421.2338635;
      doubleArray5[7] = (-4231.5);
      doubleArray5[8] = 0.0;
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Float float0 = new Float(0.0F);
      XYSeries xYSeries0 = new XYSeries(float0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      xYSeries0.add((double) 0.0F, (Number) float0);
      xYSeriesCollection0.getRangeUpperBound(true);
      DatasetUtilities.iterateXYRangeBounds(xYSeriesCollection0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, (-511));
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      Comparable<Float>[] comparableArray0 = (Comparable<Float>[]) Array.newInstance(Comparable.class, 5);
      comparableArray0[0] = (Comparable<Float>) float0;
      comparableArray0[1] = (Comparable<Float>) float0;
      comparableArray0[2] = (Comparable<Float>) float0;
      comparableArray0[3] = (Comparable<Float>) float0;
      comparableArray0[4] = (Comparable<Float>) float0;
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) (-511);
      doubleArray1[1] = (double) 0.0F;
      doubleArray1[2] = 464.46341681213;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 464.46341681213;
      doubleArray2[1] = (double) (-511);
      doubleArray2[2] = 464.46341681213;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (double) 0.0F;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (-5058.0);
      doubleArray3[1] = (double) (-511);
      doubleArray3[2] = (double) (-511);
      doubleArray3[3] = (-1023.8960623598042);
      doubleArray3[4] = (double) (-511);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = (double) (-511);
      doubleArray0[3] = doubleArray4;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'rowKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Short short0 = new Short((short) (-1686));
      stack0.add(short0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((Number) integer0, (Number) short0, "The number of row keys does not match the number of rows in the data array.", false);
      DatasetGroup datasetGroup0 = new DatasetGroup("'7&iL");
      categoryTableXYDataset0.setGroup(datasetGroup0);
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (short) (-1686));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockDate mockDate0 = new MockDate(181, 0, 181, 181, 181, 181);
      Stack<Short> stack0 = new Stack<Short>();
      Short short0 = new Short((short) (-4231));
      stack0.add(short0);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((short) (-4231), (short) (-4231));
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "Category 2", true);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (double) 0);
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(0);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultXYZDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      double[][] doubleArray0 = new double[4][8];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-3500.258);
      doubleArray1[1] = 23.0;
      doubleArray1[2] = 23.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      double[] doubleArray3 = new double[3];
      doubleArray3[1] = 23.0;
      doubleArray3[2] = 23.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = 23.0;
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset1);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      categoryTableXYDataset0.hasListener((EventListener) null);
      categoryTableXYDataset0.setIntervalPositionFactor(0.0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "Category 2", false);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 0.0);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray0[0] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      defaultCategoryDataset0.setValue((Number) 0.0, (Comparable) 0.0, (Comparable) 0.0);
      DatasetUtilities.findMaximumStackedRangeValue(defaultCategoryDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, false);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) linkedList0, range0, false);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Vector<Short> vector0 = new Vector<Short>();
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 23.0;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 1);
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 1, 1);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      List list0 = defaultMultiValueCategoryDataset0.getRowKeys();
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("|OQ$fag +q", "Category 2", doubleArray0);
      DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, list0, false);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, (-2243));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Vector<Short> vector0 = new Vector<Short>();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[1] = 23.0;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 1);
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 1, 1);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(0.0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0, keyToGroupMap0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      DatasetUtilities.isEmptyOrNull((PieDataset) jDBCPieDataset0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      categoryTableXYDataset0.hasListener((EventListener) null);
      categoryTableXYDataset0.setIntervalPositionFactor(0.0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "Category 2", false);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 0.0);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      double[][] doubleArray0 = new double[1][8];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      defaultCategoryDataset0.setValue((Number) 0.0, (Comparable) 0.0, (Comparable) 0.0);
      Vector<Double> vector0 = new Vector<Double>();
      Double double0 = new Double(0.0);
      vector0.add(double0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset1, (List) vector0, range0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 964);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 964, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      defaultXYDataset0.clone();
      DatasetUtilities.findMinimumDomainValue(defaultXYDataset0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      Number[][] numberArray0 = new Number[5][5];
      Number[] numberArray1 = new Number[5];
      numberArray1[0] = null;
      numberArray1[1] = null;
      numberArray1[2] = null;
      numberArray1[3] = null;
      numberArray1[4] = null;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      numberArray2[0] = null;
      numberArray2[1] = null;
      numberArray2[2] = null;
      numberArray2[3] = null;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[2];
      numberArray3[0] = null;
      numberArray3[1] = null;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[9];
      numberArray4[0] = null;
      numberArray4[1] = null;
      Integer integer0 = new Integer((-408));
      numberArray4[2] = (Number) integer0;
      numberArray4[3] = null;
      numberArray4[4] = null;
      numberArray4[5] = null;
      numberArray4[6] = null;
      numberArray4[7] = null;
      numberArray4[8] = null;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[6];
      numberArray5[0] = null;
      numberArray5[1] = (Number) integer0;
      numberArray5[2] = (Number) integer0;
      numberArray5[3] = (Number) integer0;
      numberArray5[4] = null;
      numberArray5[5] = null;
      numberArray0[4] = numberArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      KeyListener keyListener0 = mock(KeyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(keyListener0, keyListener0);
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.hasListener((EventListener) null);
      categoryTableXYDataset0.setIntervalPositionFactor(0.0);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "Category 2", true);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 1473.62478216877);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1473.62478216877;
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) "Category 2", (Comparable) integer0);
      Vector<Double> vector0 = new Vector<Double>();
      Double double0 = new Double(1473.62478216877);
      Double double1 = new Double(Double.NEGATIVE_INFINITY);
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) vector0, range0, false);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, false);
      DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, false);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) double0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      KeyListener keyListener0 = mock(KeyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(keyListener0, keyListener0);
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.hasListener((EventListener) null);
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      categoryTableXYDataset1.setIntervalPositionFactor(0.0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) null, ";Rw~bb}C", false);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 0.0);
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(31.839601314);
      linkedList0.add(double0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(xYSeriesCollection0, linkedList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.XYSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      MockInstant.now();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      categoryTableXYDataset0.add(number0, number0, "Null 'rowKeys' argument.", true);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 6.283185307179586);
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, false);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.getColumnKeys();
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DatasetUtilities.findDomainBounds((XYDataset) defaultXYDataset0, true);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultXYDataset0, true);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      KeyListener keyListener0 = mock(KeyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(keyListener0, keyListener0);
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.hasListener((EventListener) null);
      categoryTableXYDataset0.setIntervalPositionFactor(0.0);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "Category 2", true);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 1473.62478216877);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1473.62478216877;
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.getRowKeys();
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) "Category 2", (Comparable) integer0);
      Vector<Double> vector0 = new Vector<Double>();
      Double double0 = new Double(1473.62478216877);
      Double double1 = new Double(Double.NEGATIVE_INFINITY);
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) vector0, range0, false);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, false);
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Vector<Short> vector0 = new Vector<Short>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Short short0 = new Short((short) (-1686));
      vector0.add(short0);
      double[][] doubleArray0 = new double[18][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (short) (-1686);
      doubleArray1[1] = (double) (short) (-1686);
      doubleArray1[2] = (double) (short) (-1686);
      doubleArray1[3] = (double) (short) (-1686);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) (short) (-1686);
      doubleArray2[1] = (double) (short) (-1686);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (-2147059160));
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) (-1686.0), (-5058.0), (int) (short) (-1686));
      Range range0 = new Range((-5058.0), (-290.588));
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((-1686.0));
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) vector0, range0, false);
      DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      KeyListener keyListener0 = mock(KeyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(keyListener0, keyListener0);
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.hasListener((EventListener) null);
      categoryTableXYDataset0.setIntervalPositionFactor(0.0);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 1473.62478216877);
      double[] doubleArray0 = new double[1];
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) "Category 2", (Comparable) integer0);
      Vector<Double> vector0 = new Vector<Double>();
      Double double0 = new Double(0.0);
      vector0.add(double0);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultKeyedValues2DDataset0, false);
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) vector0, range0, false);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (-2814.4020778268));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[][] doubleArray0 = new double[0][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("series.default-prefix", "series.default-prefix", doubleArray0);
      DatasetUtilities.findRangeBounds(categoryDataset0);
      MockDate mockDate0 = new MockDate();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("series.default-prefix");
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultBoxAndWhiskerXYDataset0, 1.5);
      DatasetUtilities.findMinimumDomainValue(xYBarDataset0);
      Vector<Object> vector0 = new Vector<Object>();
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, false);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYBarDataset0, (List) vector0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1079, 1079);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1079);
      Date date0 = spreadsheetDate0.toDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 2, 1418.213844917201, 9999, (-235.284100738749), 1);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[7];
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, (-196.88885800000003), 4, 4, 0.8, 2);
      oHLCDataItemArray0[0] = oHLCDataItem1;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double0 = 0.0;
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      short short0 = (short)927;
      Short short1 = new Short((short)927);
      String[] stringArray0 = new String[0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Vector<Short> vector0 = new Vector<Short>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Short short0 = new Short((short) (-1686));
      vector0.add(short0);
      double[][] doubleArray0 = new double[18][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (short) (-1686);
      doubleArray1[1] = (double) (short) (-1686);
      doubleArray1[2] = (double) (short) (-1686);
      doubleArray1[3] = (double) (short) (-1686);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) (short) (-1686);
      doubleArray2[1] = (double) (short) (-1686);
      doubleArray2[2] = (double) (short) (-1686);
      doubleArray2[3] = (double) (short) (-1686);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (double) (short) (-1686);
      doubleArray3[1] = (double) (short) (-1686);
      doubleArray3[2] = (double) (short) (-1686);
      doubleArray3[3] = (double) (short) (-1686);
      doubleArray3[5] = (double) (short) (-1686);
      doubleArray3[7] = (double) (short) (-1686);
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Double double0 = new Double((-912.36227752309));
      Stack<Double> stack0 = new Stack<Double>();
      stack0.add((Double) (-1686.0));
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      System.setCurrentTimeMillis((-1490L));
      int int0 = 1079;
      MockDate mockDate0 = new MockDate(1079, 1079, 1079, 1079, 2670, 1079);
      Day day0 = new Day(mockDate0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "z98ej");
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 2670;
      doubleArray1[1] = (double) 2670;
      doubleArray1[2] = (double) 1079;
      doubleArray1[3] = (double) 1079;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 2670;
      doubleArray2[1] = Double.POSITIVE_INFINITY;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (double) (-1490L);
      doubleArray2[4] = (double) 1079;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Category 2", "Category 2", doubleArray0);
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 2670);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) 2670.0, (KeyedValues) categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2670, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Vector<Short> vector0 = new Vector<Short>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Short short0 = new Short((short) (-1686));
      vector0.add(short0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short) (-1686);
      doubleArray0[1] = (double) (short) (-1686);
      doubleArray0[2] = (double) (short) (-1686);
      doubleArray0[3] = (double) (short) (-1686);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((Number) integer0, (Number) (-1686.0), "Category 2", true);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-1686.0));
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(1.0);
      linkedList0.add(double0);
      DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, linkedList0, true);
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      categoryTableXYDataset0.setIntervalPositionFactor(0.0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "Category 2", false);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 0.0);
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("Category 2", "", doubleArray0);
      defaultCategoryDataset0.setValue((Number) 0.0, (Comparable) 0.0, (Comparable) 0.0);
      Vector<Double> vector0 = new Vector<Double>();
      Double double0 = new Double((-2354.992294700058));
      vector0.add(double0);
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, true);
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) vector0, range1, true);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) vector0, range0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      KeyListener keyListener0 = mock(KeyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(keyListener0, keyListener0);
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.hasListener((EventListener) null);
      categoryTableXYDataset0.setIntervalPositionFactor(0.0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "Category 2", true);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 1473.62478216877);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1473.62478216877;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("g6]~LzM8B7gxVJxz", "g6]~LzM8B7gxVJxz", doubleArray0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) "Category 2", (Comparable) integer0);
      Vector<Double> vector0 = new Vector<Double>();
      Double double0 = new Double(1473.62478216877);
      Double double1 = new Double(Double.NEGATIVE_INFINITY);
      vector0.add(double1);
      DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) vector0, range0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      System.setCurrentTimeMillis((-1490L));
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day(mockDate0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1079, 1117.367, 1117.367, 1079, (-388.5909723628));
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(day0, oHLCDataItemArray0);
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-1490L), (-1038.0825193838798), (-1490L), (-388.5909723628), (-1490L));
      DefaultOHLCDataset defaultOHLCDataset1 = new DefaultOHLCDataset(day0, oHLCDataItemArray0);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(6.283185307179586, 1079);
      DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, (-1038.0825193838798), 0.0, 1079, oHLCDataItem0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      System.setCurrentTimeMillis((-1490L));
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day(mockDate0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1079, 1117.367, 1117.367, 1079, 1079);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(day0, oHLCDataItemArray0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockDate mockDate0 = new MockDate(181, 0, 181, 181, 181, 181);
      Stack<Short> stack0 = new Stack<Short>();
      Short short0 = new Short((short) (-4231));
      stack0.add(short0);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((short) (-4231), (short) (-4231));
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3958, "Category 1");
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 3.5957170079E13;
      doubleArray1[1] = (-515.9236097259);
      doubleArray1[2] = (double) 181;
      doubleArray1[3] = (double) (short) (-4231);
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) (short) (-4231);
      doubleArray1[6] = (double) 181;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Category 1", "Category 1", doubleArray0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.setValue((Number) short0, (Comparable) short0, (Comparable) 181.0);
      Vector<Double> vector0 = new Vector<Double>();
      Double double0 = new Double((-2866.2568423));
      Stack<Double> stack1 = new Stack<Double>();
      Double double1 = new Double(181.0);
      stack1.add(double1);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(short0);
      DatasetUtilities.findRangeBounds((XYDataset) simpleHistogramDataset0, (List) stack1, range0, true);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(powerFunction2D0, 0.5, (-4231.0), (-6), (-4231.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      System.setCurrentTimeMillis((-1490L));
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day(mockDate0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1079, 1117.367, 1117.367, 1079, (-388.5909723628));
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(day0, oHLCDataItemArray0);
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-1490L), (-1038.0825193838798), (-1490L), (-388.5909723628), (-1490L));
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, true);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      System.setCurrentTimeMillis((-1490L));
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day(mockDate0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1079, 1117.367, 1117.367, 1079, (-388.5909723628));
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(day0, oHLCDataItemArray0);
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 1079, 1117.367, 312, oHLCDataItem0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(mockDate0);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      ArrayList<DynamicTimeSeriesCollection> arrayList0 = new ArrayList<DynamicTimeSeriesCollection>();
      DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, false);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MockDate mockDate0 = new MockDate(181, 0, 181, 181, 181, 181);
      Stack<Short> stack0 = new Stack<Short>();
      Short short0 = new Short((short) (-4231));
      Stack<Short> stack1 = new Stack<Short>();
      stack1.add(short0);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((short) (-4231), 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(181, "~I 3*");
      Vector<Short> vector0 = new Vector<Short>();
      Short short1 = new Short((short) (-4231));
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 2177, 2);
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) stack1, false);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) timeTableXYDataset0);
      Number[][] numberArray0 = new Number[5][0];
      Number[] numberArray1 = new Number[7];
      numberArray1[0] = null;
      numberArray1[1] = (Number) short1;
      numberArray1[2] = null;
      numberArray1[3] = (Number) short1;
      numberArray1[4] = null;
      numberArray1[5] = (Number) short1;
      numberArray1[6] = (Number) short1;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[0];
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[8];
      numberArray3[0] = (Number) short0;
      numberArray3[1] = null;
      numberArray3[2] = (Number) short0;
      numberArray3[3] = (Number) short1;
      numberArray3[4] = null;
      numberArray3[5] = null;
      numberArray3[6] = (Number) short0;
      numberArray3[7] = null;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[4];
      numberArray4[0] = (Number) short1;
      numberArray4[1] = (Number) short0;
      numberArray4[2] = null;
      numberArray4[3] = (Number) short0;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[9];
      numberArray5[0] = (Number) short1;
      numberArray5[1] = (Number) short0;
      numberArray5[2] = (Number) short1;
      numberArray5[3] = (Number) short0;
      numberArray5[4] = null;
      numberArray5[5] = (Number) short1;
      numberArray5[6] = (Number) short1;
      numberArray5[7] = null;
      numberArray5[8] = (Number) short1;
      numberArray0[4] = numberArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("8g|&0xrj", "8g|&0xrj", numberArray0);
      DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[][] doubleArray0 = new double[0][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("series.default-prefix", "series.default-prefix", doubleArray0);
      DatasetUtilities.findRangeBounds(categoryDataset0);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      double[] doubleArray1 = new double[10];
      doubleArray1[0] = 1443.4522;
      doubleArray1[1] = 1443.4522;
      doubleArray1[2] = 1443.4522;
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray1[4] = 1443.4522;
      doubleArray1[5] = 1443.4522;
      doubleArray1[6] = 1443.4522;
      doubleArray1[7] = 1443.4522;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 304.03789483134835, 1335.0, 8, 1443.4522);
      Month month0 = new Month(8, 2);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(month0);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      Vector<DynamicTimeSeriesCollection> vector0 = new Vector<DynamicTimeSeriesCollection>();
      DatasetUtilities.findDomainBounds((XYDataset) timePeriodValuesCollection0, (List) vector0, false);
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal((PieDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Vector<Short> vector0 = new Vector<Short>();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 23.0;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 1);
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("P", "1?#e+nyKVl7}1", doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, (-1903));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) double0, (KeyedValues) categoryToPieDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Vector<Short> vector0 = new Vector<Short>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Short short0 = new Short((short) (-1686));
      vector0.add(short0);
      double[][] doubleArray0 = new double[18][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (short) (-1686);
      doubleArray1[1] = (double) (short) (-1686);
      doubleArray1[2] = (double) (short) (-1686);
      doubleArray1[3] = (double) (short) (-1686);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) (short) (-1686);
      doubleArray2[1] = (double) (short) (-1686);
      doubleArray2[2] = (double) (short) (-1686);
      doubleArray2[3] = (double) (short) (-1686);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (double) (short) (-1686);
      doubleArray3[1] = (double) (short) (-1686);
      doubleArray3[2] = (double) (short) (-1686);
      doubleArray3[3] = (double) (short) (-1686);
      doubleArray3[5] = (double) (short) (-1686);
      doubleArray3[7] = (double) (short) (-1686);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 0);
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) (-1686.0), 0.0, (int) (short) (-1686));
      Range range0 = new Range((-1686.0), (-1686.0));
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(short0);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) vector0, range0, true);
      DatasetUtilities.calculatePieDatasetTotal(pieDataset1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Stack<Long> stack0 = new Stack<Long>();
      DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0);
      double[][] doubleArray0 = new double[2][1];
      timeTableXYDataset0.getDomainUpperBound(false);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 3.5957170079E13;
      doubleArray0[0] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("g1;", "SerialDate.monthCodeToString: month outside valid range.", doubleArray0);
      defaultCategoryDataset0.setValue(3.5957170079E13, (Comparable) 3.5957170079E13, (Comparable) "g1;");
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, false);
      DatasetUtilities.findCumulativeRangeBounds(defaultCategoryDataset0);
      DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 934);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Vector<Short> vector0 = new Vector<Short>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Short short0 = new Short((short) (-1686));
      vector0.add(short0);
      double[][] doubleArray0 = new double[18][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (short) (-1686);
      doubleArray1[1] = (double) (short) (-1686);
      doubleArray1[2] = (double) (short) (-1686);
      doubleArray1[3] = (double) (short) (-1686);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) (short) (-1686);
      doubleArray2[1] = (double) (short) (-1686);
      doubleArray2[2] = (double) (short) (-1686);
      doubleArray2[3] = (double) (short) (-1686);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (double) (short) (-1686);
      doubleArray3[1] = (double) (short) (-1686);
      doubleArray3[2] = (double) (short) (-1686);
      doubleArray3[3] = (double) (short) (-1686);
      doubleArray3[5] = (double) (short) (-1686);
      doubleArray3[7] = (double) (short) (-1686);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 0);
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) (-1686.0), 0.0, (int) (short) (-1686));
      Range range0 = new Range((-1686.0), (-1686.0));
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(short0);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) vector0, range0, true);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Vector<Short> vector0 = new Vector<Short>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Short short0 = new Short((short) (-1686));
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[][] doubleArray0 = new double[18][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (short) (-1686);
      doubleArray1[1] = (double) (short) (-1686);
      doubleArray1[2] = (double) (short) (-1686);
      doubleArray1[3] = (double) (short) (-1686);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) (short) (-1686);
      doubleArray2[1] = (double) (short) (-1686);
      doubleArray2[2] = (double) (short) (-1686);
      doubleArray2[3] = (double) (short) (-1686);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (double) (short) (-1686);
      DatasetUtilities.createCategoryDataset("OvG{i['n{<VD68HARGQ", "OvG{i['n{<VD68HARGQ", doubleArray0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.setValue((Number) (-1686.0), (Comparable) (-1686.0), (Comparable) (-1686.0));
      Vector<Double> vector1 = new Vector<Double>();
      Double double0 = new Double((-1686.0));
      Double double1 = new Double((-1686.0));
      vector1.add(double1);
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, keyToGroupMap0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      String string0 = "Category 1";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((short) (-1713), "Category 1");
      Locale locale0 = Locale.JAPAN;
      defaultBoxAndWhiskerCategoryDataset0.clear();
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultBoxAndWhiskerCategoryDataset0, tableOrder0, (short) (-1713));
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) instant0, (double) (short) (-1713), (int) (short) (-1713));
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "Category 1", 1.0);
      Double double0 = new Double(101.0);
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "Category 1", 101.0, 387);
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D((-718.0), 101.0);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, 0L, 486.42, (-8), double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      System.setCurrentTimeMillis((-1490L));
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day(mockDate0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[17];
      Instant instant0 = MockInstant.ofEpochMilli((-1490L));
      Date.from(instant0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1079, 1117.367, 1117.367, 1079, (-388.5909723628));
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(day0, oHLCDataItemArray0);
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-388.5909723628);
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = (double) 2670;
      doubleArray1[3] = (double) 2670;
      doubleArray1[4] = (double) 1079;
      doubleArray1[5] = (double) 2670;
      doubleArray1[6] = (double) (-1490L);
      doubleArray1[7] = (double) 1079;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "The number of column keys does not match the number of columns in the data array.", doubleArray0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, 3229);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3229, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      System.setCurrentTimeMillis((-1490L));
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day(mockDate0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1079, 1117.367, 1117.367, 1079, (-388.5909723628));
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(day0, oHLCDataItemArray0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, false);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      categoryTableXYDataset0.hasListener((EventListener) null);
      categoryTableXYDataset0.setIntervalPositionFactor(0.0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "Category 2", false);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 0.0);
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[3] = 0.0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("vxK]X25", "Null 'f' argument.", doubleArray0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      categoryTableXYDataset0.setIntervalPositionFactor(0.0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "Category 2", false);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 0.0);
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("Category 2", "", doubleArray0);
      defaultCategoryDataset0.setValue((Number) 0.0, (Comparable) 0.0, (Comparable) 0.0);
      Vector<Double> vector0 = new Vector<Double>();
      double double0 = (-2354.992294700058);
      Double double1 = new Double((-2354.992294700058));
      int int0 = (-1509);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (-1509));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Vector<Short> vector0 = new Vector<Short>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Short short0 = new Short((short) (-1686));
      vector0.add(short0);
      double[][] doubleArray0 = new double[18][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (short) (-1686);
      doubleArray1[1] = (double) (short) (-1686);
      doubleArray1[2] = (double) (short) (-1686);
      doubleArray1[3] = (double) (short) (-1686);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) (short) (-1686);
      doubleArray2[1] = (double) (short) (-1686);
      doubleArray2[2] = (double) (short) (-1686);
      doubleArray2[3] = (double) (short) (-1686);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (double) (short) (-1686);
      doubleArray3[1] = (double) (short) (-1686);
      doubleArray3[2] = (double) (short) (-1686);
      doubleArray3[3] = (double) (short) (-1686);
      doubleArray3[4] = (double) (short) (-1686);
      doubleArray3[5] = (double) (short) (-1686);
      doubleArray3[7] = (double) (short) (-1686);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Vector<Short> vector0 = new Vector<Short>();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 23.0;
      doubleArray0[1] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      int int0 = 1;
      DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 1);
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      System.setCurrentTimeMillis((-93L));
      double[][] doubleArray0 = new double[6][5];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) (-93L);
      doubleArray1[1] = (double) (-93L);
      doubleArray1[2] = (double) (-93L);
      doubleArray1[3] = (double) (-93L);
      doubleArray1[4] = (double) (-93L);
      doubleArray1[5] = 3.4775639279E13;
      doubleArray1[6] = (double) (-93L);
      doubleArray1[7] = (-1.0);
      doubleArray1[8] = (double) (-93L);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 3.4775639279E13;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = (-1.0);
      doubleArray3[2] = (double) (-93L);
      doubleArray3[3] = (double) (-93L);
      doubleArray3[4] = (-1.0);
      doubleArray3[5] = 3.4775639279E13;
      doubleArray3[6] = 3.4775639279E13;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = 3.4775639279E13;
      doubleArray4[1] = 3.4775639279E13;
      doubleArray4[2] = (-1.0);
      doubleArray4[3] = 3.4775639279E13;
      doubleArray4[4] = (double) (-93L);
      doubleArray4[5] = (double) (-93L);
      doubleArray4[6] = 3.4775639279E13;
      doubleArray4[7] = (double) (-93L);
      doubleArray4[8] = (-1.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = 3800.834291358689;
      doubleArray5[1] = (-1.0);
      doubleArray5[2] = (double) (-93L);
      doubleArray5[3] = (double) (-93L);
      doubleArray5[4] = (double) (-93L);
      doubleArray5[5] = 3.4775639279E13;
      doubleArray5[6] = (double) (-93L);
      doubleArray5[7] = (-1.0);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      doubleArray6[0] = (-1.0);
      doubleArray6[1] = (-1.0);
      doubleArray6[2] = (double) (-93L);
      doubleArray6[3] = (-1.0);
      doubleArray6[4] = (double) (-93L);
      doubleArray6[5] = 3800.834291358689;
      doubleArray6[6] = 3800.834291358689;
      doubleArray6[7] = 3800.834291358689;
      doubleArray0[5] = doubleArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      categoryTableXYDataset0.setIntervalPositionFactor(0.0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "Category 2", false);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 0.0);
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      defaultCategoryDataset0.setValue((Number) 0.0, (Comparable) 0.0, (Comparable) 0.0);
      Vector<Double> vector0 = new Vector<Double>();
      Double double0 = new Double((-2354.992294700058));
      vector0.add(double0);
      DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, true);
      Double double1 = new Double(3.5920968479E13);
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 984, 559);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, true);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(slidingGanttCategoryDataset0, tableOrder0, 984);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-974L), 984);
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) simpleTimePeriod0, (double) 984, 9999);
      MockDate mockDate0 = new MockDate((-974L));
      TimeZone timeZone0 = TimeZone.getDefault();
      Day day0 = new Day(mockDate0, timeZone0);
      RegularTimePeriod regularTimePeriod0 = day0.next();
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) regularTimePeriod0, (-1162.849));
      DatasetUtilities.createConsolidatedPieDataset(pieDataset1, (Comparable) null, 181.0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(568, (-1370), timeZone0);
      DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      MockDate mockDate0 = new MockDate();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "series.default-prefix");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      System.setCurrentTimeMillis((-1490L));
      MockDate mockDate0 = new MockDate(1079, 1079, 1079, 1079, 2670, 1079);
      Day day0 = new Day(mockDate0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 1079);
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 2670, 1810);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Vector<Short> vector0 = new Vector<Short>();
      Short short0 = new Short((short) (-1686));
      Short short1 = new Short((short) (-486));
      vector0.add(short1);
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      DatasetUtilities.findRangeBounds((XYDataset) defaultWindDataset0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, (int) (short) (-1686));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      categoryTableXYDataset0.setIntervalPositionFactor(0.0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      String string0 = "Category 2";
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "Category 2", false);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 0.0);
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      String string1 = "";
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      defaultCategoryDataset0.setValue((Number) 0.0, (Comparable) 0.0, (Comparable) 0.0);
      Vector<Double> vector0 = new Vector<Double>();
      Double double0 = new Double((-2354.992294700058));
      vector0.add(double0);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, true);
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) vector0, range0, true);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0);
      Number[][] numberArray0 = new Number[1][6];
      Number[] numberArray1 = new Number[7];
      numberArray1[0] = (Number) integer0;
      numberArray1[1] = (Number) double0;
      numberArray1[2] = (Number) 0.0;
      numberArray1[3] = (Number) 0.0;
      numberArray1[4] = (Number) integer0;
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      // Undeclared exception!
      try { 
        xIntervalSeriesCollection0.getX(1, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Gw ");
      MockDate mockDate0 = new MockDate(2306, 2306, 2306, 2306, 1067, (-551));
      Year year0 = new Year(mockDate0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, 2306);
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) mockDate0, (-216.97809), (-551));
      DatasetUtilities.createCategoryDataset((Comparable) year0, (KeyedValues) pieDataset1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      linkedList0.poll();
      Double double0 = new Double((-1795.6537));
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList1.add(double0);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      DatasetUtilities.iterateToFindDomainBounds(vectorSeriesCollection0, linkedList0, false);
      Short short0 = new Short((short) (-1793));
      Stack<Short> stack0 = new Stack<Short>();
      stack0.add(short0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (short) (-1793), (short) (-1793));
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      DatasetUtilities.findMaximumStackedRangeValue(defaultMultiValueCategoryDataset0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) double0, 1340.0, (int) (short) (-1793));
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) null, (double) (short) (-1793));
      Double double1 = new Double((-1353.1980312));
      DatasetUtilities.iterateRangeBounds((XYDataset) vectorSeriesCollection0, true);
      DatasetUtilities.isEmptyOrNull(pieDataset1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      System.setCurrentTimeMillis((-1490L));
      MockDate mockDate0 = new MockDate(1079, 1079, 1079, 1079, 2670, 1079);
      Day day0 = new Day(mockDate0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "z98ej");
      Vector<Short> vector0 = new Vector<Short>(964, 957);
      Short short0 = new Short((short) (-1793));
      vector0.add(short0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1079, 954);
      DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) vector0, true);
      vector0.add(short0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0, true);
      DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0, false);
      DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) null, (List) vector0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      System.setCurrentTimeMillis((-1490L));
      MockDate mockDate0 = new MockDate(1079, 1514, 1498, 1514, 2670, 1079);
      Day day0 = new Day(mockDate0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1498, 1117.367, 1117.367, 1079, (-388.5909723628));
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(day0, oHLCDataItemArray0);
      Stack<XYBarDataset> stack0 = new Stack<XYBarDataset>();
      stack0.add((XYBarDataset) null);
      TimeSeries timeSeries0 = new TimeSeries(day0, "Requires 'start' < 'end'.", "Null 'xRange' argument");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeSeriesCollection0, (List) stack0, range0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'series' argument is out of bounds (-1).
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      System.setCurrentTimeMillis((-1492L));
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Stack<Short> stack0 = new Stack<Short>();
      Short short0 = Short.valueOf((short) (-1548));
      stack0.add(short0);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 65, (-2401));
      DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) stack0, true);
      SeriesChangeType seriesChangeType0 = SeriesChangeType.CHANGE_KEY;
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo(seriesChangeType0, 954, 1074);
      Short short1 = new Short((short) (-1));
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(short1, seriesChangeInfo0);
      taskSeriesCollection0.seriesChanged(seriesChangeEvent0);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 3903, 3903);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      stack0.add(short0);
      DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset1, (List) stack0, false);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) stack0, true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset(connection0, "Requires 'samples' > 1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      System.setCurrentTimeMillis((-1490L));
      MockDate mockDate0 = new MockDate(1079, 1514, 1498, 1514, 2670, 1079);
      Day day0 = new Day(mockDate0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      double double0 = 1117.367;
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1498, 1117.367, 1117.367, 1079, (-388.5909723628));
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(day0, oHLCDataItemArray0);
      Stack<XYBarDataset> stack0 = new Stack<XYBarDataset>();
      TimeSeries timeSeries0 = new TimeSeries(day0, "Requires 'start' < 'end'.", "Null 'xRange' argument");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) day0);
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) mockDate0, (double) 1514, 2670);
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) "Requires 'start' < 'end'.", (double) 1498);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      categoryTableXYDataset0.hasListener((EventListener) null);
      categoryTableXYDataset0.setIntervalPositionFactor(0.0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "Category 2", false);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 0.0);
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[7];
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      defaultCategoryDataset0.setValue((Number) 0.0, (Comparable) 0.0, (Comparable) 0.0);
      Vector<Double> vector0 = new Vector<Double>();
      Double double0 = new Double((-266.7));
      vector0.add(double0);
      double double1 = (-2354.992294700058);
      Double double2 = new Double((-2354.992294700058));
      vector0.add(double2);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, (Comparable) "");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Vector<Short> vector0 = new Vector<Short>();
      Short short0 = new Short((short) (-1686));
      vector0.add(short0);
      Short short1 = new Short((short) (-1686));
      Stack<Short> stack0 = new Stack<Short>();
      Short short2 = new Short((short) (-1686));
      stack0.add(short2);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SeriesChangeType seriesChangeType0 = SeriesChangeType.UPDATE;
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo(seriesChangeType0, (-1513), (short) (-1686));
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent("Null 'rowKey' argument.", seriesChangeInfo0);
      taskSeriesCollection0.seriesChanged(seriesChangeEvent0);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (short) (-1686), 1575);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      vector0.add(short0);
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      linkedList0.poll();
      Double double0 = new Double((-1795.6537));
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList1.add(double0);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      DatasetUtilities.iterateToFindDomainBounds(vectorSeriesCollection0, linkedList0, false);
      Short short0 = new Short((short) (-1793));
      Stack<Short> stack0 = new Stack<Short>();
      stack0.add(short0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SeriesChangeType seriesChangeType0 = SeriesChangeType.UPDATE;
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo(seriesChangeType0, (short) (-1793), (short) (-1793));
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(linkedList0, seriesChangeInfo0);
      taskSeriesCollection0.seriesChanged(seriesChangeEvent0);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (short) (-1793), (short) (-1793));
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      stack0.add(short0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList1, false);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset(connection0, "Requires 'samples' > 1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      ArrayList<TimeTableXYDataset> arrayList0 = new ArrayList<TimeTableXYDataset>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) arrayList0, true);
      TimeSeries timeSeries0 = new TimeSeries("Null 'xRange' argument", "Category 4", "Category 2");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, true);
      DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, true);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Vector<Short> vector0 = new Vector<Short>();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 23.0;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 1);
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 1, 1);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0, keyToGroupMap0);
      DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) double0, 23.0, 1);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset1, (Comparable) double0, 0.0);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) 23.0, (-2980.5594), 1);
      DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      System.setCurrentTimeMillis((-1492L));
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Stack<Short> stack0 = new Stack<Short>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Short short0 = Short.valueOf((short) (-479));
      stack0.add(short0);
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection1, 1074, (short) (-479));
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection1, (List) stack0, true);
      DefaultEditorKit.BeepAction defaultEditorKit_BeepAction0 = new DefaultEditorKit.BeepAction();
      slidingGanttCategoryDataset0.hasListener(taskSeriesCollection1);
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection1, (List) stack0, true);
      Year year0 = new Year(2);
      RegularTimePeriod regularTimePeriod0 = year0.previous();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((short) (-1548), ".");
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(65, (-2092), regularTimePeriod0, simpleTimeZone0);
      DatasetGroup datasetGroup0 = new DatasetGroup();
      dynamicTimeSeriesCollection0.setGroup(datasetGroup0);
      DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, (List) stack0, true);
      DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      linkedList0.poll();
      Double double0 = new Double((-1795.6537));
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList1.add(double0);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      DatasetUtilities.isEmptyOrNull((XYDataset) vectorSeriesCollection0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) vectorSeriesCollection0);
      Number[][] numberArray0 = new Number[3][5];
      Number[] numberArray1 = new Number[3];
      numberArray1[0] = (Number) null;
      numberArray1[1] = (Number) double0;
      numberArray1[2] = (Number) double0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[5];
      numberArray2[0] = (Number) double0;
      numberArray2[1] = (Number) null;
      numberArray2[2] = (Number) double0;
      Long long0 = new Long(291L);
      Long long1 = Long.getLong("Null 'rowKey' argument.", long0);
      numberArray2[3] = (Number) long1;
      numberArray2[4] = null;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[5];
      numberArray3[1] = (Number) double0;
      numberArray3[2] = (Number) null;
      numberArray3[3] = (Number) long0;
      numberArray3[4] = null;
      numberArray0[2] = numberArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "Ea= o}JMj61?~w> RUB", numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) linkedList1, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      categoryTableXYDataset0.hasListener((EventListener) null);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "Category 2", false);
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[7];
      doubleArray0[0] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      defaultCategoryDataset0.setValue((Number) 0.0, (Comparable) 0.0, (Comparable) 0.0);
      Vector<Double> vector0 = new Vector<Double>();
      Double double0 = new Double(0.0);
      vector0.add(double0);
      DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, false);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) vector0, true);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) vector0, true);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Stack<Long> stack0 = new Stack<Long>();
      DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0);
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 3.5957170079E13;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("g1;", "SerialDate.monthCodeToString: month outside valid range.", doubleArray0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[][] doubleArray0 = new double[2][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      boolean boolean0 = true;
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (KeyToGroupMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MockDate mockDate0 = new MockDate(181, 0, 181, 181, 181, 181);
      Stack<Short> stack0 = new Stack<Short>();
      Short short0 = new Short((short) (-4231));
      stack0.add(short0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, 181, (short) (-4231));
      DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(2743.663309, 2743.663309);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3958, "Category 1");
      Locale locale0 = Locale.JAPAN;
      Vector<Short> vector0 = new Vector<Short>();
      Short short1 = new Short((short) (-4231));
      stack0.add(short1);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-1007), 181);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) "Category 1", (KeyedValues) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowData' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(5004L, 5004L);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 7);
      DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0);
      Comparable<CategoryTableXYDataset>[] comparableArray0 = (Comparable<CategoryTableXYDataset>[]) Array.newInstance(Comparable.class, 1);
      comparableArray0[0] = (Comparable<CategoryTableXYDataset>) simpleTimePeriod0;
      double[][] doubleArray0 = new double[1][1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      ArrayList<DefaultIntervalXYDataset> arrayList0 = new ArrayList<DefaultIntervalXYDataset>();
      DatasetUtilities.findRangeBounds(categoryDataset0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(5004L);
      keyToGroupMap0.getKeyCount(comparableArray0[0]);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, keyToGroupMap0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      MockDate mockDate0 = new MockDate();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset1 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.isEmptyOrNull((XYDataset) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(5004L, 5004L);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(taskSeriesCollection0, tableOrder0, (-1463));
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) simpleTimePeriod0, (KeyedValues) categoryToPieDataset0);
      DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      TableXYDataset tableXYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = "series.default-prefix";
      double[][] doubleArray0 = new double[0][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("series.default-prefix", "series.default-prefix", doubleArray0);
      DatasetUtilities.findRangeBounds(categoryDataset0);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      MockDate mockDate0 = new MockDate();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "series.default-prefix");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) oHLCDataItemArray0, (Comparable[]) oHLCDataItemArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      System.setCurrentTimeMillis((-1490L));
      int int0 = 1079;
      MockDate mockDate0 = new MockDate(1079, 1514, 1498, 1514, 2670, 1079);
      Day day0 = new Day(mockDate0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1498, 1117.367, 1117.367, 1079, (-388.5909723628));
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(day0, oHLCDataItemArray0);
      Stack<XYBarDataset> stack0 = new Stack<XYBarDataset>();
      TimeSeries timeSeries0 = new TimeSeries(day0, "Requires 'start' < 'end'.", "Null 'xRange' argument");
      GanttCategoryDataset ganttCategoryDataset0 = null;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 1213, 1213);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Vector<Short> vector0 = new Vector<Short>();
      Short short0 = new Short((short) (-1686));
      vector0.add(short0);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((short) (-1686), "Category 1");
      Locale locale0 = Locale.JAPAN;
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double((-4074.7576));
      linkedList0.add(double0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, linkedList0, false);
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      System.setCurrentTimeMillis((-1490L));
      MockDate mockDate0 = new MockDate(1079, 1079, 1079, 1079, 2665, 1079);
      Day day0 = new Day();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "z98ej");
      Vector<Short> vector0 = new Vector<Short>(964, 957);
      Short short0 = new Short((short) (-1793));
      vector0.add(short0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1079, 954);
      DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) vector0, true);
      vector0.add(short0);
      boolean boolean0 = true;
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) vector0, true);
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSet) null).when(statement0).executeQuery(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0).when(connection0).createStatement();
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) jDBCXYDataset0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(mockDate0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, keyToGroupMap0);
      // Undeclared exception!
      try { 
        jDBCXYDataset0.executeQuery("z98ej");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      System.setCurrentTimeMillis((-1492L));
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Stack<Short> stack0 = new Stack<Short>();
      Short short0 = Short.valueOf((short) (-1548));
      stack0.add(short0);
      DefaultEditorKit.BeepAction defaultEditorKit_BeepAction0 = new DefaultEditorKit.BeepAction();
      taskSeriesCollection0.indexOf(short0);
      Year year0 = new Year(1074);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2401), "Duplicate items in 'rowKeys'.");
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(65, 1710, year0, simpleTimeZone0);
      simpleTimeZone0.getOffset((-1L));
      DatasetUtilities.findMinimumRangeValue((XYDataset) dynamicTimeSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, (List) stack0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      categoryTableXYDataset0.clone();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList1.poll();
      linkedList1.add((Double) null);
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 924, 924);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      Integer integer0 = new Integer((-2439));
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(5004L, 5004L);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 7);
      DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0);
      Comparable<CategoryTableXYDataset>[] comparableArray0 = (Comparable<CategoryTableXYDataset>[]) Array.newInstance(Comparable.class, 1);
      comparableArray0[0] = (Comparable<CategoryTableXYDataset>) simpleTimePeriod0;
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) 7;
      doubleArray1[2] = (double) 5004L;
      doubleArray1[3] = (double) 7;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (double) (-1467);
      doubleArray1[6] = (double) 5004L;
      doubleArray1[7] = (double) 5004L;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      doubleArray1[8] = (double) (-1467);
      doubleArray0[0] = doubleArray1;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of column keys does not match the number of columns in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      System.setCurrentTimeMillis((-1492L));
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      Stack<Byte> stack0 = new Stack<Byte>();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.isEmptyOrNull((PieDataset) null);
      Stack<Double> stack1 = new Stack<Double>();
      UnaryOperator<Double> unaryOperator0 = UnaryOperator.identity();
      stack1.replaceAll(unaryOperator0);
      Double double0 = new Double((-1492L));
      stack1.add(double0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack1, true);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MockDate mockDate0 = new MockDate(181, 0, 181, 181, 181, 181);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(978, "Category 1");
      simpleTimeZone0.getDisplayName();
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      defaultBoxAndWhiskerCategoryDataset0.add((List) arrayList0, (Comparable) mockDate0, (Comparable) "Category 1");
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("Category 1");
      DatasetUtilities.findMaximumRangeValue((XYDataset) simpleHistogramDataset0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1079, 1079, 1079, 1079, 2670, 1079);
      Day day0 = new Day(mockDate0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1079, 1117.367, 1117.367, 1079, (-388.5909723628));
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(day0, oHLCDataItemArray0);
      Vector<Short> vector0 = new Vector<Short>();
      Short short0 = new Short((short)920);
      vector0.add(short0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) vector0, true);
      DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0, (List) vector0, true);
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(Double.NEGATIVE_INFINITY, 2069.920074978514);
      DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset("w_7|p", "w_7|p", (String) null, "");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, (OHLCDataItem[]) null);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Stack<Short> stack0 = new Stack<Short>();
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1079, 1079, 1079, 1079, 2670, 1079);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Stack<Short> stack0 = new Stack<Short>();
      Short short0 = new Short((short)2000);
      stack0.add(short0);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1575, (-557));
      DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) stack0, true);
      stack0.ensureCapacity(1079);
      DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) stack0, false);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Vector<Short> vector0 = new Vector<Short>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      MockDate mockDate0 = new MockDate(2670, (short) (-1686), (short) (-1686), 1079, (short) (-1686), 2149);
      Day day0 = new Day(mockDate0);
      mockDate0.getTime();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (short) (-1686), (-4023.1046123147357), 1.7976931348623157E308, (-543.473275), (-505.60353));
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[7];
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (short) (-1686), 1117.367, 6.283185307179586, 830.7, (-451.28351833687));
      oHLCDataItemArray0[0] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (short) (-1686), (-4023.1046123147357), 1772.06874275409, 1117.367, 3816.168186);
      oHLCDataItemArray0[1] = oHLCDataItem2;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(day0, oHLCDataItemArray0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      Double double0 = new Double((-451.28351833687));
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, false);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) matrixSeriesCollection0, (List) vector0, range0, true);
      DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      System.setCurrentTimeMillis((-1490L));
      MockDate mockDate0 = new MockDate();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2670, "Category 1");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      linkedList0.poll();
      Double double0 = new Double(94.0);
      linkedList0.add(double0);
      Date[] dateArray0 = new Date[9];
      dateArray0[0] = (Date) mockDate0;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(951, 2670, (-771), 951, 2);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      dateArray0[1] = date0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      dateArray0[6] = (Date) mockDate0;
      dateArray0[7] = (Date) mockDate0;
      dateArray0[8] = (Date) mockDate0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2670;
      doubleArray0[1] = 94.0;
      doubleArray0[2] = 94.0;
      doubleArray0[3] = (double) (-1490L);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 94.0;
      doubleArray1[1] = (double) (-1490L);
      doubleArray1[2] = (double) (-1490L);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(double0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, linkedList0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1079, 1079, 1079, 1079, 2670, 1079);
      Day day0 = new Day(mockDate0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1079, 1117.367, 1117.367, 1079, (-388.5909723628));
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(day0, oHLCDataItemArray0);
      Vector<Short> vector0 = new Vector<Short>();
      Short short0 = new Short((short)920);
      vector0.add(short0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) vector0, true);
      DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0, (List) vector0, true);
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(Double.NEGATIVE_INFINITY, 2069.920074978514);
      // Undeclared exception!
      DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, Double.NEGATIVE_INFINITY, (-718.0), 936, day0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      double[][] doubleArray0 = new double[2][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      ArrayList<DefaultIntervalXYDataset> arrayList0 = new ArrayList<DefaultIntervalXYDataset>();
      DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, (List) arrayList0, range0, true);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      System.setCurrentTimeMillis((-1490L));
      MockDate mockDate0 = new MockDate(1079, 1079, 1079, 1079, 2670, 1079);
      Day day0 = new Day(mockDate0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "z98ej");
      Vector<Short> vector0 = new Vector<Short>(964, 957);
      Short short0 = new Short((short) (-1793));
      vector0.add(short0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte)111;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-939.47868), (-1490L), 1079, 2670, (-1950.0));
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1.5, (-891.7758624008737), (-939.47868), 957, 2670);
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 1.5, 2670, 1079, Double.NEGATIVE_INFINITY, (-939.47868));
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (1079.0) <= upper (-1490.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Short short0 = new Short((short)990);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(short0);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) timePeriodValuesCollection0);
      MockDate mockDate0 = new MockDate(0L);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1088.625, 1.0, 100.24818142956471, (-3652), (short)990);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Requires 'samples' > 1");
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      defaultBoxAndWhiskerCategoryDataset0.add((List) arrayList0, (Comparable) oHLCDataItem0, (Comparable) mockDate0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (double) 0L);
      DatasetUtilities.iterateDomainBounds((XYDataset) timePeriodValuesCollection0, false);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      linkedList0.poll();
      Double double0 = new Double((-1795.6537));
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList1.add(double0);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      DatasetUtilities.iterateToFindDomainBounds(vectorSeriesCollection0, linkedList0, false);
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) vectorSeriesCollection0);
      MockDate mockDate0 = new MockDate((-2070), 971, (-2070), (-2070), (-1551));
      Day day0 = new Day();
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(3958, 1772.06874275409);
      DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, (-2070), 1443.4522, 971, day0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(day0);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultXYZDataset0, false);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Short short0 = new Short((short)990);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(short0);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) timePeriodValuesCollection0);
      MockDate mockDate0 = new MockDate(0L);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1088.625, 1.0, 100.0, (-3652), (short)990);
      Instant instant0 = mockDate0.toInstant();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) instant0);
      DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      DatasetUtilities.findMaximumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) instant0, 358.98875);
      Double double0 = new Double(338.586663343);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      System.setCurrentTimeMillis((-1490L));
      MockDate mockDate0 = new MockDate(1079, 1079, 1079, 1079, 2670, 1079);
      Day day0 = new Day(mockDate0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "z98ej");
      Vector<Short> vector0 = new Vector<Short>(964, 957);
      Short short0 = new Short((short) (-1793));
      vector0.add(short0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1079, 954);
      DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) vector0, true);
      vector0.add(short0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) vector0, true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      // Undeclared exception!
      try { 
        jDBCXYDataset0.executeQuery("z98ej");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Double double0 = new Double(755.964252757923);
      linkedList0.add(double0);
      linkedList1.poll();
      MockDate mockDate0 = new MockDate(4, 4, (-1), 366, 4);
      Day day0 = new Day();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) linkedList0, true);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) day0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Short short0 = new Short((short)990);
      Stack<Short> stack0 = new Stack<Short>();
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      Stack<Byte> stack1 = new Stack<Byte>();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack1, true);
      defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      String string0 = null;
      Number[][] numberArray0 = new Number[2][1];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = (Number) short0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[7];
      numberArray2[0] = (Number) short0;
      numberArray2[1] = (Number) short0;
      numberArray2[2] = (Number) short0;
      numberArray2[3] = (Number) short0;
      numberArray2[4] = (Number) short0;
      Float float0 = new Float((double) (short)990);
      numberArray2[5] = (Number) float0;
      numberArray2[6] = (Number) short0;
      numberArray0[1] = numberArray2;
      DatasetUtilities.createCategoryDataset("PieDatasetChangeType.ADD", "Null 'rowKeys' argument.", numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, (Comparable) "PieDatasetChangeType.ADD");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("Null 'dataset' argument.", (OHLCDataItem[]) null);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 966, (-1576));
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) linkedList0, false);
      Vector<TimeSeriesCollection> vector0 = new Vector<TimeSeriesCollection>();
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) vector0, true);
      ArrayList<DefaultBoxAndWhiskerCategoryDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerCategoryDataset>();
      DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, false);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Stack<Short> stack0 = new Stack<Short>();
      Short short0 = new Short((short) (-1548));
      stack0.add(short0);
      Vector<Short> vector0 = new Vector<Short>();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(short0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Short short0 = new Short((short)990);
      Stack<Short> stack0 = new Stack<Short>();
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      Stack<Byte> stack1 = new Stack<Byte>();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.isEmptyOrNull((PieDataset) null);
      Stack<Double> stack2 = new Stack<Double>();
      UnaryOperator<Double> unaryOperator0 = UnaryOperator.identity();
      stack2.replaceAll(unaryOperator0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack2, true);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      System.setCurrentTimeMillis((-1490L));
      MockDate mockDate0 = new MockDate(1079, 1079, 1079, 1079, 2670, 1079);
      Day day0 = new Day(mockDate0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1079, 1117.367, 1117.367, 1079, (-388.5909723628));
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(day0, oHLCDataItemArray0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, false);
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, false);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Double double0 = new Double(1583.80019);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Double double1 = new Double(1583.80019);
      linkedList1.add(double1);
      MockDate mockDate0 = new MockDate();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "7");
      simpleTimeZone0.getDisplayName();
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      MockDate mockDate1 = new MockDate(0, 1436, 0, 0, 1460);
      Hour hour0 = new Hour(mockDate1);
      defaultBoxAndWhiskerCategoryDataset0.add((List) linkedList1, (Comparable) hour0, (Comparable) mockDate1);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (double) 1460);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      MockDate mockDate0 = new MockDate();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1436, "");
      simpleTimeZone0.getDisplayName();
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      defaultBoxAndWhiskerCategoryDataset0.add((List) arrayList0, (Comparable) "GMT+00:00", (Comparable) "7");
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      Range.combine(range0, range0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 1436);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1436, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      int int0 = 181;
      int int1 = 11;
      XYDataset xYDataset0 = null;
      Stack<Byte> stack0 = new Stack<Byte>();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds((XYDataset) null, stack0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[][] doubleArray0 = new double[0][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("series.default-prefix", "series.default-prefix", doubleArray0);
      DatasetUtilities.findRangeBounds(categoryDataset0);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, true);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 152.261312, (-4090.1886), 152.261312, 785.6367674, 152.261312);
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 785.6367674, 2965.9631174428, 2965.9631174428, 1052.0, Double.NEGATIVE_INFINITY);
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("series.default-prefix", oHLCDataItemArray0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MatrixSeriesCollection matrixSeriesCollection1 = new MatrixSeriesCollection();
      DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection1);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (Comparable) oHLCDataItem0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Vector<Short> vector0 = new Vector<Short>();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      double[][] doubleArray0 = new double[2][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      MockDate mockDate0 = new MockDate(999, 948, 948, 999, 429, 2084);
      Minute minute0 = new Minute(mockDate0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) minute0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Vector<Short> vector0 = new Vector<Short>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Short short0 = new Short((short) (-1686));
      vector0.add(short0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      String string0 = "Category 1";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((short) (-1686), "Category 1");
      Locale locale0 = Locale.JAPAN;
      Number[][] numberArray0 = new Number[5][3];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 156.62833, 156.62833, 1340.0, 682.95246849469, (short) (-1686));
      MockDate mockDate0 = new MockDate((short) (-1686));
      DatasetUtilities.createCategoryDataset("Category 1", (String) null, numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Vector<Short> vector0 = new Vector<Short>();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 23.0;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 1);
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 1, 1);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(23.0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0, keyToGroupMap0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      DatasetUtilities.isEmptyOrNull((PieDataset) jDBCPieDataset0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Vector<Short> vector0 = new Vector<Short>();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 23.0;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 1);
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 1, 1);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0, keyToGroupMap0);
      DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) double0, 23.0, 1);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset1, (Comparable) double0, 0.0);
      Double double1 = new Double((-814.27982590201));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      categoryTableXYDataset0.setIntervalPositionFactor(0.0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "Category 2", false);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 0.0);
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      defaultCategoryDataset0.setValue((Number) 0.0, (Comparable) 0.0, (Comparable) 0.0);
      Vector<Double> vector0 = new Vector<Double>();
      Double double0 = new Double((-2354.992294700058));
      vector0.add(double0);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, true);
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) vector0, range0, true);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[][] doubleArray0 = new double[0][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("series.default-prefix", "series.default-prefix", doubleArray0);
      DatasetUtilities.findRangeBounds(categoryDataset0);
      MockDate mockDate0 = new MockDate();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 2657);
      DatasetUtilities.isEmptyOrNull(pieDataset0);
      Stack<Double> stack0 = new Stack<Double>();
      UnaryOperator<Double> unaryOperator0 = UnaryOperator.identity();
      stack0.replaceAll(unaryOperator0);
      ArrayList<DefaultIntervalXYDataset> arrayList0 = new ArrayList<DefaultIntervalXYDataset>();
      DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) arrayList0, false);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Double double0 = new Double(1583.80019);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Double double1 = new Double(1583.80019);
      linkedList1.add(double1);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, linkedList0, false);
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) vectorSeriesCollection0);
      MockDate mockDate0 = new MockDate(971, (-2070), 60, 971, (-1777));
      Day day0 = new Day();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList1, true);
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) linkedList0, false);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      categoryTableXYDataset0.hasListener((EventListener) null);
      categoryTableXYDataset0.setIntervalPositionFactor(0.0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "Category 2", false);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 0.0);
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      defaultCategoryDataset0.setValue((Number) 0.0, (Comparable) 0.0, (Comparable) 0.0);
      Vector<Double> vector0 = new Vector<Double>();
      Double double0 = new Double((-2354.992294700058));
      vector0.add(double0);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, false);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) vector0, range0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Vector<Short> vector0 = new Vector<Short>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Short short0 = new Short((short) (-1686));
      vector0.add(short0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      String string0 = "Category 1";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((short) (-1686), "Category 1");
      Locale locale0 = Locale.JAPAN;
      Number[][] numberArray0 = new Number[5][3];
      Vector<Short> vector1 = new Vector<Short>();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) vector0, false);
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 156.62833, 156.62833, 1340.0, 682.95246849469, (short) (-1686));
      MockDate mockDate0 = new MockDate((short) (-1686));
      mockDate0.toInstant();
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Category 1", (String) null, numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (Comparable) date0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      MockDate mockDate0 = new MockDate(181, 181, 11, 11, 0, 0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1191.09), 11, (-1633.8305), 0, 693.9933260544927);
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-2099.628), (-1191.09), (-3714.50528), (-3714.50528), 0.4991278538723);
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Category 1", "Category 4", doubleArray0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList1.poll();
      linkedList1.add((Double) null);
      boolean boolean0 = true;
      DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, linkedList1, true);
      MockDate mockDate0 = new MockDate(1, 1, 1, 1, (-1551));
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries(mockDate0);
      xYSeries0.addOrUpdate((double) (-1551), (double) (-1551));
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(3451.89526253323, 1);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, 1.0, 1772.06874275409, 0, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Double double0 = new Double(1583.80019);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Double double1 = new Double(1583.80019);
      linkedList1.add(double1);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, linkedList0, false);
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) vectorSeriesCollection0);
      MockDate mockDate0 = new MockDate(971, (-2070), 60, 971, (-1777));
      Day day0 = new Day();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList1, false);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultXYZDataset0, (List) linkedList1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultXYZDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, (OHLCDataItem[]) null);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Stack<Short> stack0 = new Stack<Short>();
      Short short0 = new Short((short) (-1548));
      stack0.add(short0);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (short) (-1548), 1074);
      XYSeries xYSeries0 = new XYSeries(short0);
      xYSeries0.addOrUpdate((double) 1074, 1.0);
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1074, 1342.786810528544);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, (-1980.17113922529), 923.414, 941, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      linkedList0.poll();
      Double double0 = new Double((-1795.6537));
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList1.add(double0);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      DatasetUtilities.iterateToFindDomainBounds(vectorSeriesCollection0, linkedList0, false);
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) vectorSeriesCollection0);
      MockDate mockDate0 = new MockDate((-2070), 971, 1052, (-2070), (-2070));
      Day day0 = new Day();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) linkedList0, true);
      DatasetUtilities.findDomainBounds((XYDataset) vectorSeriesCollection0, (List) linkedList0, false);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Vector<Short> vector0 = new Vector<Short>();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 23.0;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      System.setCurrentTimeMillis((-1490L));
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-4090.1886), (-1490L), (-2.147483648E9), (-156.21657), 1686.0);
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-156.21657), 785.6367674, 6.283185307179586, 2887.419673390826, (-1490L));
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-382.8105979718412), (-606.432230046), 670.29, 1370.11, 1079);
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 1200.60819644372, 0.0, 1.0, 1370.11, 3832.1461);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, (-469.71), (-382.8105979718412), Double.NEGATIVE_INFINITY, 0.0, 2424.805);
      oHLCDataItemArray0[2] = oHLCDataItem4;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      MockDate mockDate0 = new MockDate(181, 0, 181, 181, 2, 181);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(978, "org.jfree.data.general.AbstractDataset");
      simpleTimeZone0.getDisplayName();
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      defaultBoxAndWhiskerCategoryDataset0.add((List) arrayList0, (Comparable) mockDate0, (Comparable) "org.jfree.data.general.AbstractDataset");
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      defaultBoxAndWhiskerCategoryDataset0.add((List) arrayList0, (Comparable) "GMT+00:00", (Comparable) "GMT+00:00");
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultBoxAndWhiskerCategoryDataset0, 0, 398);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) jDBCCategoryDataset0);
      DatasetUtilities.findMinimumStackedRangeValue(slidingCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      categoryTableXYDataset0.hasListener((EventListener) null);
      categoryTableXYDataset0.setIntervalPositionFactor(0.0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "Category 2", false);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 0.0);
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      defaultCategoryDataset0.setValue((Number) 0.0, (Comparable) 0.0, (Comparable) 0.0);
      Stack<Double> stack0 = new Stack<Double>();
      UnaryOperator<Double> unaryOperator0 = UnaryOperator.identity();
      stack0.replaceAll(unaryOperator0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) stack0, true);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, 6.8475398372E13);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      categoryTableXYDataset0.hasListener((EventListener) null);
      categoryTableXYDataset0.setIntervalPositionFactor(0.0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "Category 2", false);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 0.0);
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      defaultCategoryDataset0.setValue((Number) 0.0, (Comparable) 0.0, (Comparable) 0.0);
      Vector<Double> vector0 = new Vector<Double>();
      Double double0 = new Double((-2354.992294700058));
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      DatasetUtilities.findMinimumStackedRangeValue(defaultCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Vector<TimeSeriesCollection> vector0 = new Vector<TimeSeriesCollection>();
      double[][] doubleArray0 = new double[8][4];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-1325.29877901);
      doubleArray1[1] = (-1264.3703733);
      doubleArray1[2] = 6.283185307179586;
      doubleArray1[3] = (-250.0);
      doubleArray1[4] = (-606.432230046);
      doubleArray1[5] = 3709.39;
      doubleArray1[6] = 2332.0;
      doubleArray1[7] = Double.NEGATIVE_INFINITY;
      doubleArray1[8] = (-94.728);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (-94.728);
      doubleArray2[1] = 2332.0;
      doubleArray2[2] = (-606.432230046);
      doubleArray2[3] = 3709.39;
      doubleArray2[4] = 6.283185307179586;
      doubleArray2[5] = 3709.39;
      doubleArray2[6] = (-94.728);
      doubleArray2[7] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = (-606.432230046);
      doubleArray4[1] = (-94.728);
      doubleArray4[2] = Double.NEGATIVE_INFINITY;
      doubleArray4[3] = (-1264.3703733);
      doubleArray4[4] = (-1325.29877901);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = (-250.0);
      doubleArray5[1] = (-250.0);
      doubleArray5[2] = 2332.0;
      doubleArray5[3] = (-1264.3703733);
      doubleArray5[4] = (-1325.29877901);
      doubleArray5[5] = (-1264.3703733);
      doubleArray5[6] = (-94.728);
      doubleArray5[7] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = (-1264.3703733);
      doubleArray6[1] = 2332.0;
      doubleArray6[2] = (-1264.3703733);
      doubleArray6[3] = (-1264.3703733);
      doubleArray6[4] = (-3236.9125);
      doubleArray6[5] = 3709.39;
      doubleArray6[6] = (-250.0);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      doubleArray7[0] = (-250.0);
      doubleArray7[1] = 3709.39;
      doubleArray7[2] = (-1325.29877901);
      doubleArray7[3] = (-606.432230046);
      doubleArray7[4] = (-94.728);
      doubleArray7[5] = (-3236.9125);
      doubleArray7[6] = (-94.728);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[9];
      doubleArray8[0] = (-1325.29877901);
      doubleArray8[1] = Double.POSITIVE_INFINITY;
      doubleArray8[2] = 2332.0;
      doubleArray8[3] = (-1325.29877901);
      doubleArray8[4] = Double.NEGATIVE_INFINITY;
      doubleArray8[5] = (-606.432230046);
      doubleArray8[6] = (-3236.9125);
      doubleArray8[7] = (-1325.29877901);
      doubleArray8[8] = (-94.728);
      doubleArray0[7] = doubleArray8;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 23.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 23.0;
      doubleArray2[1] = 23.0;
      doubleArray2[2] = 23.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 23.0;
      doubleArray3[1] = 23.0;
      doubleArray3[2] = 23.0;
      doubleArray3[3] = 23.0;
      doubleArray3[4] = 23.0;
      doubleArray3[5] = 23.0;
      doubleArray3[6] = 23.0;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 963);
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) null, (double) 0, 937);
      DatasetUtilities.iterateCategoryRangeBounds(defaultBoxAndWhiskerCategoryDataset0, true);
      Stack<Byte> stack0 = new Stack<Byte>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (-438.655));
      System.setCurrentTimeMillis(0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      categoryTableXYDataset0.hasListener((EventListener) null);
      categoryTableXYDataset0.setIntervalPositionFactor(0.0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "Category 2", false);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 0.0);
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      Vector<Double> vector0 = new Vector<Double>();
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) vector0, range0, false);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      MockDate mockDate0 = new MockDate(181, 181, 11, 11, 0, 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1436, "");
      Locale locale0 = new Locale("L?;RGL26}[mW/qv=~l$");
      Locale locale1 = Locale.GERMAN;
      Quarter quarter0 = new Quarter(mockDate0, simpleTimeZone0, locale1);
      TimeSeries timeSeries0 = new TimeSeries("L?;RGL26}[mW/qv=~l$");
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      boolean boolean0 = false;
      DatasetUtilities.iterateDomainBounds((XYDataset) xYIntervalSeriesCollection0, false);
      locale1.getDisplayName();
      DatasetUtilities.isEmptyOrNull((XYDataset) xYIntervalSeriesCollection0);
      Vector<Short> vector1 = new Vector<Short>();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0, "hfQthhW0-x;*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Vector<Short> vector0 = new Vector<Short>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Short short0 = new Short((short) (-1686));
      vector0.add(short0);
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (short) (-1686);
      doubleArray1[1] = (double) (short) (-1686);
      doubleArray1[2] = (double) (short) (-1686);
      doubleArray1[3] = (double) (short) (-1686);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) (short) (-1686);
      doubleArray2[1] = (double) (short) (-1686);
      doubleArray2[2] = (double) (short) (-1686);
      doubleArray2[3] = (double) (short) (-1686);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (double) (short) (-1686);
      doubleArray3[1] = (double) (short) (-1686);
      doubleArray3[2] = (double) (short) (-1686);
      doubleArray3[3] = (double) (short) (-1686);
      doubleArray3[4] = (double) (short) (-1686);
      doubleArray3[5] = (double) (short) (-1686);
      doubleArray1[0] = (double) (short) (-1686);
      doubleArray3[7] = (double) (short) (-1686);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 0);
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) (-1686.0), 0.0, (int) (short) (-1686));
      DatasetUtilities.iterateCategoryRangeBounds(defaultBoxAndWhiskerCategoryDataset0, true);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) vector0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (-1686.0));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, (OHLCDataItem[]) null);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Stack<Short> stack0 = new Stack<Short>();
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      categoryTableXYDataset0.hasListener((EventListener) null);
      categoryTableXYDataset0.setIntervalPositionFactor(0.0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "Category 2", true);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 0.0);
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      DatasetUtilities.createCategoryDataset("", "", doubleArray0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[][] doubleArray0 = new double[0][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("series.default-prefix", "series.default-prefix", doubleArray0);
      DatasetUtilities.findRangeBounds(categoryDataset0);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, true);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      MockDate mockDate0 = new MockDate();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 152.261312, (-4090.1886), 152.261312, 785.6367674, 152.261312);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 152.261312, 152.261312, Double.NEGATIVE_INFINITY, 1370.11, 785.6367674);
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-4090.1886), 670.29, 152.261312, 1370.11, 4166.27713411);
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, Double.NEGATIVE_INFINITY, 1.0, 785.6367674, 2424.805, Double.NEGATIVE_INFINITY);
      oHLCDataItemArray0[3] = oHLCDataItem3;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("series.default-prefix", oHLCDataItemArray0);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MockDate mockDate0 = new MockDate(181, 0, 181, 181, 2, 181);
      Date[] dateArray0 = new Date[7];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      dateArray0[5] = (Date) mockDate0;
      dateArray0[6] = (Date) mockDate0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 181;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 181;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList1.poll();
      Double double0 = new Double(1.0);
      linkedList1.add(double0);
      DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, linkedList1, true);
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultXYZDataset0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      MockDate mockDate0 = new MockDate(226, 3958, (-2070), (-1007), 3958);
      double[][] doubleArray1 = new double[2][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 226);
      DatasetUtilities.findRangeBounds((XYDataset) defaultXYZDataset0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte) (-84);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList1.poll();
      Double double0 = new Double(1.0);
      linkedList1.add(double0);
      DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, linkedList1, true);
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultXYZDataset0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      MockDate mockDate0 = new MockDate(226, 3958, (-2070), (-1007), 3958);
      double[][] doubleArray1 = new double[2][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'columnKey' argument.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[][] doubleArray0 = new double[4][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("series.default-prefix", "series.default-prefix", doubleArray0);
      DatasetUtilities.findRangeBounds(categoryDataset0);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, true);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 152.261312, 152.261312, Double.NEGATIVE_INFINITY, 1370.11, 785.6367674);
      oHLCDataItemArray0[1] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, Double.POSITIVE_INFINITY, 670.29, 152.261312, 1370.11, 4124.539397801998);
      oHLCDataItemArray0[2] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, Double.NEGATIVE_INFINITY, 1.0, 785.6367674, 2424.805, Double.NEGATIVE_INFINITY);
      oHLCDataItemArray0[3] = oHLCDataItem2;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("series.default-prefix", oHLCDataItemArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, (OHLCDataItem[]) null);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Stack<Short> stack0 = new Stack<Short>();
      Short short0 = new Short((short) (-1548));
      stack0.add(short0);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (short) (-1548), 1074);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) null, (List) stack0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      linkedList0.poll();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) vectorSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) null, (List) linkedList1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Vector<Short> vector0 = new Vector<Short>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Short short0 = new Short((short) (-1686));
      vector0.add(short0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((short) (-1686), "Category 1");
      Locale locale0 = Locale.JAPAN;
      Number[][] numberArray0 = new Number[5][3];
      Number[] numberArray1 = new Number[2];
      numberArray1[1] = (Number) short0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[3];
      numberArray2[0] = (Number) short0;
      numberArray2[2] = (Number) short0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[8];
      numberArray3[0] = (Number) short0;
      numberArray3[1] = (Number) short0;
      numberArray3[3] = (Number) short0;
      numberArray3[5] = (Number) short0;
      numberArray3[6] = (Number) short0;
      numberArray3[7] = (Number) short0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[1];
      numberArray4[0] = (Number) short0;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[1];
      numberArray0[4] = numberArray5;
      DatasetUtilities.createCategoryDataset("Category 1", "c4KS9xep[)ZI$Vk)Ife", numberArray0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) vector0, true);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Action action0 = TransferHandler.getCutAction();
      defaultKeyedValues2DDataset0.hasListener(action0);
      defaultKeyedValues2DDataset0.clearSelection();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[][] doubleArray0 = new double[9][7];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1.5;
      doubleArray1[1] = (-6276.0);
      doubleArray1[2] = (-1352.949);
      doubleArray1[3] = 1822.538028904;
      doubleArray1[4] = 2447.82;
      doubleArray1[5] = 398.1726;
      doubleArray1[6] = 1.0;
      doubleArray1[7] = 1085.6817946375613;
      doubleArray1[8] = 587.91957881659;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 587.91957881659;
      doubleArray2[1] = (-1352.949);
      doubleArray2[2] = 1822.538028904;
      doubleArray2[3] = 1822.538028904;
      doubleArray2[4] = (-1352.949);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 363.068460219;
      doubleArray3[1] = (-1.0);
      doubleArray3[2] = 1.0;
      doubleArray3[3] = (-1352.949);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = (-1.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = (-1.0);
      doubleArray5[1] = 1182.0;
      doubleArray5[2] = 1.0;
      doubleArray5[3] = 72.0;
      doubleArray5[4] = (-1352.949);
      doubleArray5[5] = 1.5;
      doubleArray5[6] = (-1.0);
      doubleArray5[7] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = (-1352.949);
      doubleArray6[1] = 587.91957881659;
      doubleArray6[2] = 1085.6817946375613;
      doubleArray6[3] = 1182.0;
      doubleArray6[4] = (-1.0);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[0];
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[2];
      doubleArray8[0] = (-1352.949);
      doubleArray8[1] = 398.1726;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[2];
      doubleArray9[0] = 398.1726;
      doubleArray9[1] = 1182.0;
      doubleArray0[8] = doubleArray9;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("]f#/R@wBv`Ys+K`@Y|", "TimePeriodAnchor unknown.", doubleArray0);
      DatasetUtilities.findMaximumRangeValue(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Vector<Short> vector0 = new Vector<Short>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Short short0 = new Short((short)990);
      Stack<Short> stack0 = new Stack<Short>();
      vector0.add(short0);
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      Stack<Byte> stack1 = new Stack<Byte>();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack1, false);
      defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) jDBCCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, (OHLCDataItem[]) null);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Stack<Short> stack0 = new Stack<Short>();
      Short short0 = new Short((short) (-1548));
      stack0.add(short0);
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (short) (-1548);
      doubleArray1[1] = 0.8;
      doubleArray1[2] = 0.8;
      doubleArray1[3] = (double) (short) (-1548);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) (short) (-1548);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'xRange' argument", "{>+%WXTe:=sW e", doubleArray0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Vector<Short> vector0 = new Vector<Short>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Short short0 = new Short((short) (-1686));
      vector0.add(short0);
      MockDate mockDate0 = new MockDate((short) (-1686), 181, (short) (-1686), 963, (short) (-1686), (short) (-1686));
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "");
      simpleTimeZone0.getDisplayName();
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      defaultBoxAndWhiskerCategoryDataset0.add((List) vector0, (Comparable) "GMT+00:00", (Comparable) "");
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset1 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset1);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset1);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (double) 1436);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      Stack<Short> stack0 = new Stack<Short>();
      Short short0 = new Short((short) (-2118));
      Stack<Short> stack1 = new Stack<Short>();
      Short short1 = new Short((short)1202);
      stack1.add(short1);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-1442), 721);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) stack1, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      TableXYDataset tableXYDataset0 = null;
      Short short0 = null;
      GanttCategoryDataset ganttCategoryDataset0 = null;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 1085, (-1498));
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, (OHLCDataItem[]) null);
      Vector<Short> vector0 = new Vector<Short>();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 23.0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, (OHLCDataItem[]) null);
      Vector<Short> vector0 = new Vector<Short>();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 23.0;
      doubleArray1[1] = 23.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (-732.3391064);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(23.0);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal((PieDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      MockDate mockDate0 = new MockDate(158, 3958, 435, 158, 435);
      Day day0 = new Day(mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(day0);
      day0.toString();
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      DatasetUtilities.iterateDomainBounds((XYDataset) timePeriodValuesCollection0, true);
      DatasetUtilities.findMaximumDomainValue(timePeriodValuesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal((PieDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0);
      double[][] doubleArray0 = new double[6][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 2203.9227369;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 2203.9227369;
      doubleArray2[1] = 2203.9227369;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = 2203.9227369;
      doubleArray3[1] = 2203.9227369;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 2203.9227369;
      doubleArray4[1] = 2203.9227369;
      doubleArray4[2] = 2203.9227369;
      doubleArray4[3] = 1436.0;
      doubleArray4[4] = 2203.9227369;
      doubleArray4[5] = 2203.9227369;
      doubleArray4[6] = 2203.9227369;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = 1436.0;
      doubleArray5[1] = 2203.9227369;
      doubleArray5[2] = 2203.9227369;
      doubleArray5[3] = 4856.26708297;
      doubleArray5[4] = 1436.0;
      doubleArray5[5] = 1436.0;
      doubleArray5[6] = 1436.0;
      doubleArray5[7] = 2203.9227369;
      doubleArray5[8] = 1436.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      doubleArray6[0] = 1436.0;
      doubleArray6[1] = 4856.26708297;
      doubleArray6[2] = 2.0;
      doubleArray6[3] = 4856.26708297;
      doubleArray6[4] = 4856.26708297;
      doubleArray6[5] = 4856.26708297;
      doubleArray6[6] = 4856.26708297;
      doubleArray6[7] = 4856.26708297;
      doubleArray0[5] = doubleArray6;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) null, (Comparable[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      MockDate mockDate0 = new MockDate(181, 181, 11, 11, 0, 0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1436, "");
      simpleTimeZone0.getDisplayName();
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      defaultBoxAndWhiskerCategoryDataset0.add((List) arrayList0, (Comparable) "GMT+00:00", (Comparable) "");
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultBoxAndWhiskerCategoryDataset0, 1436, 274);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, (List) arrayList0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, (OHLCDataItem[]) null);
      Vector<Short> vector0 = new Vector<Short>();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 23.0;
      doubleArray1[1] = 23.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (-732.3391064);
      doubleArray2[1] = 23.0;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>();
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ArrayList<TimeTableXYDataset> arrayList0 = new ArrayList<TimeTableXYDataset>();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte) (-88);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      DatasetUtilities.findMaximumDomainValue(defaultWindDataset0);
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Stack<Long> stack0 = new Stack<Long>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      DatasetUtilities.iterateXYRangeBounds(timeTableXYDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0);
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 3.5957170079E13;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 0.8;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("g1;", "g1;", doubleArray0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      System.setCurrentTimeMillis((-1490L));
      MockDate mockDate0 = new MockDate(1079, 1514, 1498, 1514, 2670, 1079);
      Day day0 = new Day(mockDate0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1498, 1117.367, 1117.367, 1079, (-388.5909723628));
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(day0, oHLCDataItemArray0);
      Stack<XYBarDataset> stack0 = new Stack<XYBarDataset>();
      TimeSeries timeSeries0 = new TimeSeries(day0, "Requires 'start' < 'end'.", "Null 'xRange' argument");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, true);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      MockDate mockDate0 = new MockDate(181, 181, 11, 11, 0, 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1436, "");
      simpleTimeZone0.getDisplayName();
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      defaultBoxAndWhiskerCategoryDataset0.add((List) arrayList0, (Comparable) "GMT+00:00", (Comparable) "");
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (double) 1436);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Vector<Short> vector0 = new Vector<Short>();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 23.0;
      doubleArray1[1] = 23.0;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      System.setCurrentTimeMillis((-1490L));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      linkedList0.poll();
      Double double0 = new Double((-1795.6537));
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList1.add(double0);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      DatasetUtilities.iterateToFindDomainBounds(vectorSeriesCollection0, linkedList0, false);
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) vectorSeriesCollection0);
      MockDate mockDate0 = new MockDate((-2070), 971, 1052, (-2070), (-1551));
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries(day0);
      xYSeries0.addOrUpdate(1.0, Double.POSITIVE_INFINITY);
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(3958, 1772.06874275409);
      XYSeries xYSeries1 = DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, 1052, 1443.4522, 971, day0);
      // Undeclared exception!
      try { 
        xYSeries1.addOrUpdate((XYDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, (OHLCDataItem[]) null);
      Vector<Short> vector0 = new Vector<Short>();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 23.0;
      doubleArray1[1] = 23.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (-732.3391064);
      doubleArray2[1] = 23.0;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      MockDate mockDate0 = new MockDate(158, 3958, 435, 158, 435);
      Day day0 = new Day(mockDate0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      vector0.add(defaultBoxAndWhiskerCategoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0, (List) vector0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      MockDate mockDate0 = new MockDate(181, 181, 11, 11, 0, 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1436, "");
      Minute minute0 = new Minute(mockDate0, simpleTimeZone0);
      simpleTimeZone0.getDisplayName();
      Second second0 = new Second(0, minute0);
      Millisecond millisecond0 = new Millisecond(0, second0);
      simpleTimeZone0.observesDaylightTime();
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultBoxAndWhiskerCategoryDataset0, 1436, 274);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) slidingCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(Double.NEGATIVE_INFINITY, 1340.0);
      XYDataItem xYDataItem0 = new XYDataItem(2424.805, (double) 0);
      DatasetUtilities.sampleFunction2D(powerFunction2D0, 181, 2424.805, 999, xYDataItem0);
      DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0, false);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      double[][] doubleArray0 = new double[2][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>();
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      DatasetUtilities.findMaximumDomainValue(timeSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null, (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Vector<Short> vector0 = new Vector<Short>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) vector0, false);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      DatasetUtilities.iterateXYRangeBounds(vectorSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((XYDataset) vectorSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.findMinimumRangeValue((XYDataset) timeTableXYDataset0);
      MockDate mockDate0 = new MockDate((-3652));
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-3652), (-3652), (-1950.0), (-1950.0), (-1.0));
      mockDate0.toInstant();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) mockDate0);
      DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      DatasetUtilities.findMaximumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) null, (double) (-3652));
      DatasetUtilities.calculatePieDatasetTotal(pieDataset1);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, (OHLCDataItem[]) null);
      Vector<Short> vector0 = new Vector<Short>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      vector0.add((Short) null);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      vector0.add((Short) null);
      vector0.add((Short) null);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 181, 181);
      DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) vector0, true);
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) vector0, false);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) null, 0.8);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) vector0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.AbstractSeriesDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, (OHLCDataItem[]) null);
      Vector<Short> vector0 = new Vector<Short>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      vector0.add((Short) null);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      vector0.add((Short) null);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 181, 181);
      DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) vector0, true);
      vector0.add((Short) null);
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) vector0, false);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0, (List) vector0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) vector0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.AbstractSeriesDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      MockDate mockDate0 = new MockDate(181, 0, 181, 181, 181, 181);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(978, "Category 1");
      simpleTimeZone0.getDisplayName();
      Short short0 = new Short((short)5);
      Stack<Short> stack0 = new Stack<Short>();
      Short short1 = new Short((short)5);
      stack0.add(short1);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 584, 0);
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, false);
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, false);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, false);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Vector<Short> vector0 = new Vector<Short>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Short short0 = new Short((short) (-1686));
      vector0.add(short0);
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (short) (-1686);
      doubleArray1[1] = (double) (short) (-1686);
      doubleArray1[2] = (double) (short) (-1686);
      doubleArray1[3] = (double) (short) (-1686);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) (short) (-1686);
      doubleArray2[1] = (double) (short) (-1686);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "");
      simpleTimeZone0.getDisplayName();
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      defaultBoxAndWhiskerCategoryDataset0.add((List) vector0, (Comparable) (-1686.0), (Comparable) short0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultBoxAndWhiskerCategoryDataset0, (short) (-1686), 59);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      MockDate mockDate0 = new MockDate(0, 11, 1081, 0, 1075, (-144));
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      defaultBoxAndWhiskerCategoryDataset0.add((List) arrayList0, (Comparable) "Category 1", (Comparable) "Category 1");
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultBoxAndWhiskerCategoryDataset0, (-3456), 1075);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      MockDate mockDate0 = new MockDate(181, 181, 11, 11, 0, 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-574), "");
      Minute minute0 = new Minute(mockDate0, simpleTimeZone0);
      simpleTimeZone0.getDisplayName();
      Second second0 = new Second(181, minute0);
      Millisecond millisecond0 = new Millisecond(0, second0);
      simpleTimeZone0.observesDaylightTime();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1073, 1324);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) vector0, false);
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) vector0, false);
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      DatasetUtilities.findDomainBounds((XYDataset) xYIntervalSeriesCollection0, (List) vector0, false);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 181, 999, Double.POSITIVE_INFINITY, 0, 0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (Comparable) oHLCDataItem0);
      DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      DatasetUtilities.findMaximumStackedRangeValue(slidingGanttCategoryDataset0);
      DatasetUtilities.findMinimumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 502);
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) double0, (-1621.116043936), 2);
      DefaultPieDataset defaultPieDataset2 = new DefaultPieDataset(defaultPieDataset1);
      DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset2);
      Vector<DefaultTableXYDataset> vector0 = new Vector<DefaultTableXYDataset>();
      Object[][][] objectArray0 = new Object[2][5][6];
      Object[][] objectArray1 = new Object[8][9];
      Object[] objectArray2 = new Object[2];
      objectArray2[0] = (Object) defaultPieDataset0;
      Object object0 = new Object();
      objectArray2[1] = object0;
      objectArray1[0] = objectArray2;
      Object[] objectArray3 = new Object[7];
      objectArray3[0] = (Object) defaultBoxAndWhiskerCategoryDataset0;
      objectArray3[1] = object0;
      objectArray3[2] = (Object) defaultPieDataset2;
      objectArray3[3] = (Object) vector0;
      objectArray3[4] = (Object) vector0;
      objectArray3[5] = (Object) defaultBoxAndWhiskerCategoryDataset0;
      objectArray3[6] = (Object) defaultPieDataset1;
      objectArray1[1] = objectArray3;
      Object[] objectArray4 = new Object[0];
      objectArray1[2] = objectArray4;
      Object[] objectArray5 = new Object[9];
      objectArray5[0] = (Object) defaultPieDataset1;
      objectArray5[1] = object0;
      objectArray5[2] = (Object) double0;
      objectArray5[3] = (Object) vector0;
      Object object1 = new Object();
      objectArray5[4] = object1;
      objectArray5[5] = (Object) defaultBoxAndWhiskerCategoryDataset0;
      objectArray5[6] = (Object) vector0;
      objectArray5[7] = (Object) defaultPieDataset0;
      objectArray5[8] = object0;
      objectArray1[3] = objectArray5;
      Object[] objectArray6 = new Object[3];
      objectArray6[0] = object0;
      objectArray6[1] = (Object) double0;
      objectArray6[2] = object1;
      objectArray1[4] = objectArray6;
      Object[] objectArray7 = new Object[4];
      objectArray7[0] = (Object) vector0;
      Object object2 = new Object();
      objectArray7[1] = object2;
      objectArray7[2] = (Object) defaultPieDataset0;
      objectArray7[3] = (Object) defaultBoxAndWhiskerCategoryDataset0;
      objectArray1[5] = objectArray7;
      Object[] objectArray8 = new Object[7];
      objectArray8[0] = (Object) defaultPieDataset0;
      objectArray8[1] = object2;
      objectArray8[2] = (Object) defaultPieDataset2;
      objectArray8[3] = (Object) double0;
      objectArray8[4] = (Object) defaultBoxAndWhiskerCategoryDataset0;
      objectArray8[5] = (Object) vector0;
      objectArray8[6] = (Object) defaultBoxAndWhiskerCategoryDataset0;
      objectArray1[6] = objectArray8;
      Object[] objectArray9 = new Object[1];
      objectArray9[0] = object0;
      objectArray1[7] = objectArray9;
      objectArray0[0] = objectArray1;
      Object[][] objectArray10 = new Object[0][4];
      objectArray0[1] = objectArray10;
      DefaultWindDataset defaultWindDataset0 = null;
      try {
        defaultWindDataset0 = new DefaultWindDataset(vector0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of series keys does not match the number of series in the data array.
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      MockDate mockDate0 = new MockDate(764, 0, 2449);
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(serialDate0, "org.jfree.chart.util.HashUtilities", "Duplicate items in 'columnKeys'.");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      DatasetUtilities.iterateDomainBounds((XYDataset) timePeriodValuesCollection0, false);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Vector<Short> vector0 = new Vector<Short>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Short short0 = new Short((short) (-1686));
      vector0.add(short0);
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (short) (-1686);
      doubleArray1[1] = (double) (short) (-1686);
      doubleArray1[2] = (double) (short) (-1686);
      doubleArray1[3] = (double) (short) (-1686);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) (short) (-1686);
      doubleArray2[1] = (double) (short) (-1686);
      doubleArray2[2] = (double) (short) (-1686);
      doubleArray2[3] = (double) (short) (-1686);
      doubleArray0[1] = doubleArray2;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      Clock clock0 = MockClock.system(zoneOffset0);
      Instant instant0 = MockInstant.now(clock0);
      Instant instant1 = MockInstant.plusSeconds(instant0, 1308L);
      Instant instant2 = MockInstant.plusNanos(instant1, 511L);
      Date date0 = Date.from(instant2);
      TimeZone timeZone0 = TimeZone.getDefault();
      Class<DefaultBoxAndWhiskerCategoryDataset> class0 = DefaultBoxAndWhiskerCategoryDataset.class;
      RegularTimePeriod.createInstance(class0, date0, timeZone0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset1 = new DefaultBoxAndWhiskerCategoryDataset();
      Vector<Short> vector1 = new Vector<Short>();
      Short short1 = new Short((short)2162);
      vector0.add(short1);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset1, (List) vector0, true);
      DatasetUtilities.findCumulativeRangeBounds(defaultBoxAndWhiskerCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      int int0 = 179;
      double double0 = new Integer(179);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      timeTableXYDataset0.getDomainUpperBound(true);
      DatasetUtilities.iterateXYRangeBounds(timeTableXYDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0);
      Stack<DefaultIntervalXYDataset> stack0 = new Stack<DefaultIntervalXYDataset>();
      DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, stack0, true);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultMultiValueCategoryDataset0, tableOrder0, 416);
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) null, (double) 416, 28);
      double double0 = 1.0;
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) null, 1.0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, (OHLCDataItem[]) null);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Vector<Short> vector0 = new Vector<Short>();
      Short short0 = new Short((short) (-1548));
      vector0.add(short0);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (short) (-1548), 1074);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) vector0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("#;G8LL'9xMeu^R7}q@");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 2703, 2703);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      MockDate mockDate0 = new MockDate(181, 181, 11, 11, 0, 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1436, "");
      simpleTimeZone0.getDisplayName();
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      defaultBoxAndWhiskerCategoryDataset0.add((List) arrayList0, (Comparable) "GMT+00:00", (Comparable) "");
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 2745);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2745, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      System.setCurrentTimeMillis((-1490L));
      MockDate mockDate0 = new MockDate(1079, 1514, 1498, 1514, 2670, 1079);
      Day day0 = new Day(mockDate0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1498, 1117.367, 1117.367, 1079, (-388.5909723628));
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(day0, oHLCDataItemArray0);
      Stack<XYBarDataset> stack0 = new Stack<XYBarDataset>();
      TimeSeries timeSeries0 = new TimeSeries(day0, "Requires 'start' < 'end'.", "Null 'xRange' argument");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, true);
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList1.poll();
      double double0 = 1.0;
      Double double1 = new Double(1.0);
      linkedList1.add(double1);
      DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, linkedList1, true);
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultXYZDataset0);
      String string0 = "OFXdMKXdu'L@Gn,BuN";
      double[][] doubleArray0 = new double[9][2];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = 1.0;
      doubleArray1[6] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = Double.NEGATIVE_INFINITY;
      doubleArray2[3] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = Double.NEGATIVE_INFINITY;
      doubleArray3[1] = Double.NEGATIVE_INFINITY;
      doubleArray3[2] = 1.0;
      doubleArray3[3] = 1.0;
      doubleArray3[4] = 1.0;
      doubleArray3[5] = 181.0;
      doubleArray3[6] = Double.NEGATIVE_INFINITY;
      doubleArray3[7] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = 181.0;
      doubleArray4[1] = 181.0;
      doubleArray4[2] = 187.3843093;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = 181.0;
      doubleArray5[1] = 181.0;
      doubleArray5[2] = Double.NEGATIVE_INFINITY;
      doubleArray5[3] = 187.3843093;
      doubleArray5[4] = 1.0;
      doubleArray5[5] = (-606.432230046);
      doubleArray5[6] = 181.0;
      doubleArray5[7] = 1.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = 181.0;
      doubleArray6[1] = 187.3843093;
      doubleArray6[2] = 187.3843093;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      doubleArray7[0] = 691.06576459818;
      doubleArray7[1] = (-606.432230046);
      doubleArray7[2] = 187.3843093;
      doubleArray7[3] = Double.NEGATIVE_INFINITY;
      doubleArray7[4] = 187.3843093;
      doubleArray7[5] = 187.3843093;
      doubleArray7[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[7];
      doubleArray8[0] = (-606.432230046);
      doubleArray8[1] = 1.0;
      doubleArray8[2] = 181.0;
      doubleArray8[3] = (-606.432230046);
      doubleArray8[4] = 1.0;
      doubleArray8[5] = 1.0;
      doubleArray8[6] = 691.06576459818;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[4];
      doubleArray9[0] = 691.06576459818;
      doubleArray9[1] = 23.0;
      doubleArray9[2] = 187.3843093;
      doubleArray9[3] = 1.0;
      doubleArray0[8] = doubleArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      defaultXYDataset0.clone();
      DatasetUtilities.findMinimumDomainValue(defaultXYDataset0);
      String[] stringArray0 = new String[5];
      stringArray0[2] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      Number[][] numberArray0 = new Number[5][5];
      Number[] numberArray1 = new Number[9];
      numberArray1[0] = null;
      numberArray1[1] = null;
      numberArray1[3] = null;
      numberArray1[4] = null;
      numberArray1[5] = null;
      numberArray1[6] = null;
      numberArray1[7] = null;
      numberArray1[8] = null;
      numberArray0[3] = numberArray1;
      Number[] numberArray2 = new Number[6];
      numberArray2[5] = null;
      numberArray0[4] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      int int0 = 954;
      int int1 = 943;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(954, 943);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      System.setCurrentTimeMillis((-1492L));
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Stack<Short> stack0 = new Stack<Short>();
      Short short0 = new Short((short) (-1548));
      stack0.add(short0);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 46, (-2401));
      DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) stack0, true);
      DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) stack0, true);
      Year year0 = new Year(1074);
      RegularTimePeriod regularTimePeriod0 = year0.previous();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2401), "Duplicate items in 'rowKeys'.");
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(46, 1710, regularTimePeriod0, simpleTimeZone0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, (List) stack0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList1.poll();
      double double0 = 1.0;
      Double double1 = new Double(1.0);
      linkedList1.add(double1);
      DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, linkedList1, true);
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      // Undeclared exception!
      try { 
        defaultXYZDataset0.getX((-3531), (-3531));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      categoryTableXYDataset0.hasListener((EventListener) null);
      categoryTableXYDataset0.setIntervalPositionFactor(0.0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "Category 2", false);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 0.0);
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      linkedList0.add((Double) 0.0);
      DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, linkedList0, true);
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultXYZDataset0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList1.poll();
      Double double0 = new Double(1.0);
      linkedList1.add(double0);
      DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, linkedList1, true);
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultXYZDataset0);
      double[][] doubleArray0 = new double[9][2];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = 1.0;
      doubleArray1[6] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = Double.NEGATIVE_INFINITY;
      doubleArray2[3] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = Double.NEGATIVE_INFINITY;
      doubleArray3[1] = Double.NEGATIVE_INFINITY;
      doubleArray3[2] = 1.0;
      doubleArray3[3] = 1.0;
      doubleArray3[4] = 1.0;
      doubleArray3[5] = 181.0;
      doubleArray3[6] = Double.NEGATIVE_INFINITY;
      doubleArray3[7] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = 181.0;
      doubleArray4[1] = 181.0;
      doubleArray4[2] = 187.3843093;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = 181.0;
      doubleArray5[1] = 181.0;
      doubleArray5[2] = Double.NEGATIVE_INFINITY;
      doubleArray5[3] = 181.0;
      doubleArray5[4] = 1.0;
      doubleArray5[5] = (-606.432230046);
      doubleArray5[6] = 181.0;
      doubleArray5[7] = 1.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = 181.0;
      doubleArray6[1] = 187.3843093;
      doubleArray6[2] = 187.3843093;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      doubleArray7[0] = 691.06576459818;
      doubleArray7[1] = (-606.432230046);
      doubleArray7[2] = 187.3843093;
      doubleArray7[3] = Double.NEGATIVE_INFINITY;
      doubleArray7[4] = 187.3843093;
      doubleArray7[5] = 187.3843093;
      doubleArray7[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[7];
      doubleArray8[0] = (-606.432230046);
      doubleArray8[1] = 1.0;
      doubleArray8[2] = 181.0;
      doubleArray8[3] = (-606.432230046);
      doubleArray8[4] = 1.0;
      doubleArray8[5] = 1.0;
      doubleArray8[6] = 691.06576459818;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[4];
      doubleArray9[0] = 691.06576459818;
      doubleArray9[1] = 23.0;
      doubleArray9[2] = 187.3843093;
      doubleArray9[3] = 1.0;
      doubleArray0[8] = doubleArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, (OHLCDataItem[]) null);
      Vector<Short> vector0 = new Vector<Short>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      vector0.add((Short) null);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      vector0.add((Short) null);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 181, 181);
      DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) vector0, true);
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) vector0, false);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) vector0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.AbstractSeriesDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      int int0 = 213;
      String string0 = "Key not found: ";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(213, "Key not found: ");
      Locale locale0 = Locale.TAIWAN;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0, locale0);
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) vector0, true);
      Comparable<XYBarDataset>[] comparableArray0 = (Comparable<XYBarDataset>[]) Array.newInstance(Comparable.class, 8);
      int int1 = (-1);
      Month month0 = null;
      try {
        month0 = new Month((-2516), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Month outside valid range.
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      MockDate mockDate0 = new MockDate(181, 181, 11, 11, 0, 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-574), "");
      Minute minute0 = new Minute(mockDate0, simpleTimeZone0);
      simpleTimeZone0.getDisplayName();
      Second second0 = new Second(181, minute0);
      Millisecond millisecond0 = new Millisecond(0, second0);
      simpleTimeZone0.observesDaylightTime();
      RegularTimePeriod regularTimePeriod0 = millisecond0.previous();
      defaultBoxAndWhiskerCategoryDataset0.add((List) vector0, (Comparable) regularTimePeriod0, (Comparable) "");
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultBoxAndWhiskerCategoryDataset0, 0, 59);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) slidingCategoryDataset0);
      DatasetUtilities.findMinimumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Vector<Short> vector0 = new Vector<Short>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Short short0 = new Short((short) (-1686));
      vector0.add(short0);
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (short) (-1686);
      doubleArray1[1] = (double) (short) (-1686);
      doubleArray1[2] = (double) (short) (-1686);
      doubleArray1[3] = (double) (short) (-1686);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) (short) (-1686);
      doubleArray2[1] = (double) (short) (-1686);
      doubleArray2[2] = (double) (short) (-1686);
      doubleArray2[3] = (double) (short) (-1686);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (double) (short) (-1686);
      doubleArray3[1] = (double) (short) (-1686);
      doubleArray3[2] = (double) (short) (-1686);
      doubleArray3[3] = (double) (short) (-1686);
      doubleArray3[4] = (double) (short) (-1686);
      doubleArray3[5] = (double) (short) (-1686);
      doubleArray3[6] = (double) (short) (-1686);
      doubleArray3[7] = (double) (short) (-1686);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 0);
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) (-1686.0), 0.0, (int) (short) (-1686));
      DatasetUtilities.iterateCategoryRangeBounds(defaultBoxAndWhiskerCategoryDataset0, true);
      LineFunction2D lineFunction2D0 = new LineFunction2D(6.283185307179586, (-1686.0));
      DatasetUtilities.sampleFunction2D(lineFunction2D0, (-606.432230046), 4062.153393232, 2, (-1686.0));
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      MockDate mockDate0 = new MockDate(181, 181, 11, 11, 0, 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1436, "");
      Minute minute0 = new Minute(mockDate0, simpleTimeZone0);
      simpleTimeZone0.getDisplayName();
      Second second0 = new Second(0, minute0);
      Millisecond millisecond0 = new Millisecond(0, second0);
      simpleTimeZone0.observesDaylightTime();
      millisecond0.previous();
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultBoxAndWhiskerCategoryDataset0, 1436, 274);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) slidingCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(Double.NEGATIVE_INFINITY, 1340.0);
      XYDataItem xYDataItem0 = new XYDataItem(2424.805, (double) 0);
      DatasetUtilities.sampleFunction2D(powerFunction2D0, 181, 2424.805, 999, xYDataItem0);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 999);
      Comparable<Double>[] comparableArray0 = (Comparable<Double>[]) Array.newInstance(Comparable.class, 6);
      comparableArray0[0] = (Comparable<Double>) minute0;
      comparableArray0[1] = (Comparable<Double>) second0;
      comparableArray0[2] = (Comparable<Double>) xYDataItem0;
      comparableArray0[3] = (Comparable<Double>) minute0;
      comparableArray0[4] = (Comparable<Double>) xYDataItem0;
      comparableArray0[5] = (Comparable<Double>) minute0;
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 59;
      doubleArray1[1] = (double) 999;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 999;
      doubleArray1[4] = (double) 1436;
      doubleArray1[5] = (double) 11;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 1340.0;
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = (double) 181;
      doubleArray2[3] = (double) 59;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) 274;
      doubleArray2[6] = (double) 999;
      doubleArray0[1] = doubleArray2;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'rowKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, (OHLCDataItem[]) null);
      Vector<Short> vector0 = new Vector<Short>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (-1275.2);
      doubleArray3[1] = 248.78656729;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) null, (Comparable[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      DatasetUtilities.isEmptyOrNull((PieDataset) null);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      int int0 = 750;
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.removeColumn(91);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 91, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      TableXYDataset tableXYDataset0 = null;
      int int0 = 156;
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal((TableXYDataset) null, 156);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      MockDate mockDate0 = new MockDate(181, 181, 11, 11, 0, 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1436, "");
      Minute minute0 = new Minute(mockDate0, simpleTimeZone0);
      simpleTimeZone0.getDisplayName();
      Second second0 = new Second(0, minute0);
      Millisecond millisecond0 = new Millisecond(0, second0);
      simpleTimeZone0.observesDaylightTime();
      millisecond0.previous();
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      DatasetUtilities.createCategoryDataset((Comparable) second0, (KeyedValues) jDBCPieDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (-1562));
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (-3236.9125));
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      double[][] doubleArray0 = new double[0][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(2, 2, (-4522.557140487681), 3136.0, (-4522.557140487681), 3136.0);
      DatasetGroup datasetGroup0 = defaultHeatMapDataset0.getGroup();
      defaultIntervalCategoryDataset0.setGroup(datasetGroup0);
      Float float0 = new Float((double) 2);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      Vector<String> vector0 = new Vector<String>();
      SeriesChangeType seriesChangeType0 = SeriesChangeType.UPDATE;
      vector0.iterator();
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo(seriesChangeType0, 181, 957);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) vector0, false);
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, false);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 819);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Vector<Short> vector0 = new Vector<Short>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Short short0 = new Short((short) (-1686));
      vector0.add(short0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((short) (-1686), "Category 1");
      Locale locale0 = Locale.JAPAN;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0, locale0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timeTableXYDataset0);
      Number[][] numberArray0 = new Number[5][3];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = null;
      numberArray1[1] = (Number) short0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[3];
      numberArray2[0] = (Number) short0;
      numberArray2[1] = null;
      numberArray2[2] = (Number) short0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[8];
      numberArray3[0] = (Number) short0;
      numberArray3[1] = (Number) short0;
      numberArray3[2] = null;
      numberArray3[3] = (Number) short0;
      numberArray3[4] = null;
      numberArray3[5] = (Number) short0;
      numberArray3[6] = (Number) short0;
      numberArray3[7] = (Number) short0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[1];
      numberArray4[0] = (Number) short0;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[1];
      numberArray5[0] = null;
      numberArray0[4] = numberArray5;
      DatasetUtilities.createCategoryDataset("Category 1", "c4KS9xep[)ZI$Vk)Ife", numberArray0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, (OHLCDataItem[]) null);
      Vector<Short> vector0 = new Vector<Short>();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      Object[][][] objectArray0 = new Object[4][4][1];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(objectArray0);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(defaultWindDataset0);
      seriesChangeEvent0.setSummary((SeriesChangeInfo) null);
      seriesChangeEvent0.setSummary((SeriesChangeInfo) null);
      defaultWindDataset0.seriesChanged(seriesChangeEvent0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultWindDataset0);
      Range.combine((Range) null, (Range) null);
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-1950.0);
      doubleArray1[1] = (-1950.0);
      doubleArray1[2] = (-1950.0);
      doubleArray1[3] = (-1950.0);
      doubleArray1[4] = (-1950.0);
      doubleArray1[5] = (-1950.0);
      doubleArray1[6] = (-1950.0);
      doubleArray1[7] = (-1950.0);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) (-1950.0), (-1950.0), (-2474));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      categoryTableXYDataset0.setIntervalPositionFactor(0.0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "Category 2", true);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 0.0);
      TimeSeries timeSeries0 = new TimeSeries("]", "]", "]");
      Vector<Double> vector0 = new Vector<Double>();
      Double double0 = new Double(200.0);
      Double double1 = new Double(Double.NEGATIVE_INFINITY);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      ArrayList<TimeTableXYDataset> arrayList0 = new ArrayList<TimeTableXYDataset>();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) arrayList0, false);
      DatasetUtilities.iterateXYRangeBounds(timeTableXYDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      ArrayList<TimeTableXYDataset> arrayList0 = new ArrayList<TimeTableXYDataset>();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) arrayList0, true);
      timeTableXYDataset0.getDomainUpperBound(true);
      DatasetUtilities.iterateXYRangeBounds(timeTableXYDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, false);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, (OHLCDataItem[]) null);
      Vector<Short> vector0 = new Vector<Short>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      vector0.add((Short) null);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      vector0.add((Short) null);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 181, 181);
      DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) vector0, true);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      MockDate mockDate0 = new MockDate(181, 181, 11, 11, 0, 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1436, "");
      simpleTimeZone0.getDisplayName();
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      defaultBoxAndWhiskerCategoryDataset0.add((List) arrayList0, (Comparable) "GMT+00:00", (Comparable) "");
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultBoxAndWhiskerCategoryDataset0, 1436, 274);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(Double.NEGATIVE_INFINITY, 1340.0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[][] doubleArray0 = new double[4][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 2067.2132345;
      doubleArray2[1] = 2067.2132345;
      doubleArray2[2] = 2067.2132345;
      doubleArray2[3] = 2067.2132345;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[1] = (-655.38373720799);
      doubleArray3[2] = (-1963.91756915);
      doubleArray3[3] = 2067.2132345;
      doubleArray3[4] = (-1963.91756915);
      doubleArray3[5] = 2067.2132345;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (-1963.91756915);
      doubleArray4[2] = (-1963.91756915);
      doubleArray4[4] = 2067.2132345;
      doubleArray4[5] = 2067.2132345;
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[][][] objectArray0 = new Object[0][0][2];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(objectArray0);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(timePeriodValuesCollection0);
      SeriesChangeType seriesChangeType0 = SeriesChangeType.REMOVE;
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo(seriesChangeType0, 193, 690);
      seriesChangeEvent0.setSummary(seriesChangeInfo0);
      seriesChangeEvent0.setSummary(seriesChangeInfo0);
      defaultWindDataset0.seriesChanged(seriesChangeEvent0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultWindDataset0);
      Range.combine((Range) null, (Range) null);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(804.730068121697, 690);
      DatasetUtilities.iterateDomainBounds((XYDataset) timePeriodValuesCollection0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) null, (KeyedValues) jDBCPieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.findMinimumRangeValue((XYDataset) timeTableXYDataset0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (-3652));
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) null, (KeyedValues) pieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      ArrayList<TimeTableXYDataset> arrayList0 = new ArrayList<TimeTableXYDataset>();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) arrayList0, true);
      DatasetUtilities.iterateXYRangeBounds(timeTableXYDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      Object[][][] objectArray0 = new Object[4][4][1];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(objectArray0);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(defaultWindDataset0);
      seriesChangeEvent0.setSummary((SeriesChangeInfo) null);
      seriesChangeEvent0.setSummary((SeriesChangeInfo) null);
      defaultWindDataset0.seriesChanged(seriesChangeEvent0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultWindDataset0);
      Range.combine((Range) null, (Range) null);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(0.0, (-1950.0));
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultWindDataset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      DatasetUtilities.createCategoryDataset((Comparable) "Null 'dataset' argument.", (KeyedValues) jDBCPieDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultWindDataset0, true);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      double[][] doubleArray0 = new double[0][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("series.default-prefix", "series.default-prefix", doubleArray0);
      DatasetUtilities.findRangeBounds(categoryDataset0);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, true);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 152.261312, (-4090.1886), 152.261312, 785.6367674, 152.261312);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 152.261312, 152.261312, Double.NEGATIVE_INFINITY, 1370.11, 785.6367674);
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, Double.POSITIVE_INFINITY, 670.29, 152.261312, 1370.11, 4166.27713411);
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, Double.NEGATIVE_INFINITY, 1.0, 785.6367674, 2424.805, Double.NEGATIVE_INFINITY);
      oHLCDataItemArray0[3] = oHLCDataItem3;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("series.default-prefix", oHLCDataItemArray0);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, false);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Vector<Short> vector0 = new Vector<Short>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Short short0 = new Short((short) (-1686));
      vector0.add(short0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) vector0, true);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      double[][] doubleArray0 = new double[0][9];
      ArrayList<TimeTableXYDataset> arrayList0 = new ArrayList<TimeTableXYDataset>();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) arrayList0, true);
      DatasetUtilities.iterateXYRangeBounds(timeTableXYDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0);
      MatrixSeries matrixSeries0 = null;
      try {
        matrixSeries0 = new MatrixSeries("Null 'seriesKey' argument.", (-65), 3452);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.MatrixSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, (OHLCDataItem[]) null);
      Vector<Short> vector0 = new Vector<Short>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      vector0.add((Short) null);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 181, 181);
      DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) vector0, true);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Vector<Short> vector0 = new Vector<Short>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Short short0 = new Short((short) (-1686));
      vector0.add(short0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((short) (-1686), "Category 1");
      Locale locale0 = Locale.JAPAN;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0, locale0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timeTableXYDataset0);
      Number[][] numberArray0 = new Number[5][3];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = null;
      numberArray1[1] = (Number) short0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[3];
      numberArray2[0] = (Number) short0;
      numberArray2[1] = null;
      numberArray2[2] = (Number) short0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[8];
      numberArray3[0] = (Number) short0;
      numberArray3[1] = (Number) short0;
      numberArray3[2] = null;
      numberArray3[3] = (Number) short0;
      numberArray3[4] = null;
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("Category 1");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      DatasetUtilities.iterateDomainBounds((XYDataset) timePeriodValuesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      categoryTableXYDataset0.setIntervalPositionFactor(0.0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "Category 2", false);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 0.0);
      TimeSeries timeSeries0 = new TimeSeries("", "", "");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(timeSeriesCollection0, 0.0);
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYBarDataset0, (List) arrayList0, range0, false);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Vector<Short> vector0 = new Vector<Short>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector0.sort(comparator0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) vector0, true);
      MockDate mockDate0 = new MockDate(158, 3958, 435, 158, 435);
      Day day0 = new Day(mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(day0);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      DatasetUtilities.findMinimumDomainValue(timePeriodValuesCollection0);
      DatasetUtilities.iterateDomainBounds((XYDataset) timePeriodValuesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, (OHLCDataItem[]) null);
      Vector<Short> vector0 = new Vector<Short>();
      vector0.add((Short) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      ArrayList<TimeTableXYDataset> arrayList0 = new ArrayList<TimeTableXYDataset>();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      arrayList0.add(timeTableXYDataset0);
      arrayList0.add(timeTableXYDataset0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(334, "");
      simpleTimeZone0.setID("");
      MockDate mockDate0 = new MockDate(1059, 2, 0, 2, 2);
      Minute minute0 = new Minute(mockDate0, simpleTimeZone0);
      simpleTimeZone0.getDisplayName();
      simpleTimeZone0.observesDaylightTime();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Second second0 = new Second();
      defaultBoxAndWhiskerCategoryDataset0.add((List) arrayList0, (Comparable) second0, (Comparable) "GMT+00:00");
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) "GMT+00:00");
      DatasetUtilities.createCategoryDataset((Comparable) "GMT+00:00", (KeyedValues) pieDataset0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(simpleTimeZone0);
      TimePeriodAnchor timePeriodAnchor0 = timeSeriesCollection0.getXPosition();
      timeSeriesCollection0.setXPosition(timePeriodAnchor0);
      DatasetUtilities.iterateCategoryRangeBounds(defaultBoxAndWhiskerCategoryDataset0, false);
      DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0);
      DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0);
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(334, 59);
      Minute minute1 = new Minute(mockDate0);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, 0.8, 0, 334, minute1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(Double.NEGATIVE_INFINITY, 0.8);
      Hour hour0 = new Hour();
      hour0.previous();
      LinkedList<TimeSeriesCollection> linkedList0 = new LinkedList<TimeSeriesCollection>();
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = "Null 'rowKeys' argument.";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Null 'rowKeys' argument.");
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, Double.POSITIVE_INFINITY);
      DatasetUtilities.findMinimumDomainValue(timeTableXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte) (-67);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      xYDatasetTableModel0.fireTableRowsUpdated(170, 170);
      defaultMultiValueCategoryDataset0.removeChangeListener(xYDatasetTableModel0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.clone();
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, false);
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, false);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Vector<Short> vector0 = new Vector<Short>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Short short0 = new Short((short) (-1686));
      vector0.add(short0);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((short) (-1686), 1673.53);
      XYDataItem xYDataItem0 = new XYDataItem((double) (short) (-1686), (-337.90327404693));
      // Undeclared exception!
      DatasetUtilities.sampleFunction2D(powerFunction2D0, 93.4, 1340.0, 1366, short0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, (OHLCDataItem[]) null);
      Vector<Short> vector0 = new Vector<Short>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      vector0.add((Short) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) vector0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      ArrayList<TimeTableXYDataset> arrayList0 = new ArrayList<TimeTableXYDataset>();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      arrayList0.add(timeTableXYDataset0);
      arrayList0.add(timeTableXYDataset0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(334, "");
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("", (OHLCDataItem[]) null);
      Vector<Short> vector0 = new Vector<Short>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.TimeTableXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, (OHLCDataItem[]) null);
      defaultOHLCDataset0.getDomainOrder();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, (List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale locale0 = new Locale("Null 'visibleSeriesKeys' argument.");
      Locale locale1 = Locale.GERMAN;
      MockDate mockDate0 = new MockDate((-1069), (-1069), 12, (-1069), (-1069), 1);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Quarter quarter0 = new Quarter(mockDate0, timeZone0, locale1);
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      DatasetUtilities.iterateDomainBounds((XYDataset) xYIntervalSeriesCollection0, false);
      locale1.getDisplayName();
      DatasetUtilities.isEmptyOrNull((XYDataset) xYIntervalSeriesCollection0);
      Vector<Short> vector0 = new Vector<Short>();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) vector0, false);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Comparable<DefaultTableXYDataset> comparable0 = null;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, (OHLCDataItem[]) null);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(0.715159, 0.715159);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, 0.715159, 0.715159, 1372, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[][] doubleArray0 = new double[4][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 2067.2132345;
      doubleArray2[1] = 2067.2132345;
      doubleArray2[2] = 2067.2132345;
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("");
      Locale locale1 = Locale.GERMAN;
      MockDate mockDate0 = new MockDate((-1790), (-1790), (-1790));
      Quarter quarter0 = new Quarter(mockDate0, timeZone0, locale1);
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0);
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      DatasetUtilities.iterateDomainBounds((XYDataset) xYIntervalSeriesCollection0, false);
      Locale locale2 = Locale.JAPAN;
      locale2.getDisplayName();
      DatasetUtilities.isEmptyOrNull((XYDataset) xYIntervalSeriesCollection0);
      Vector<Short> vector0 = new Vector<Short>();
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) vector0, true);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      Instant instant0 = MockInstant.ofEpochSecond(12L, (-4313L));
      Date date0 = Date.from(instant0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("");
      Locale locale1 = Locale.GERMAN;
      Quarter quarter0 = new Quarter(date0, timeZone0, locale1);
      TimeSeries timeSeries0 = new TimeSeries(instant0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      DatasetUtilities.iterateDomainBounds((XYDataset) xYIntervalSeriesCollection0, false);
      locale1.getDisplayName();
      DatasetUtilities.isEmptyOrNull((XYDataset) xYIntervalSeriesCollection0);
      Vector<Short> vector0 = new Vector<Short>();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) vector0, false);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, (OHLCDataItem[]) null);
      Vector<Short> vector0 = new Vector<Short>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) vector0, true);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      linkedList0.poll();
      Double double0 = null;
      linkedList0.add((Double) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultXYZDataset0, linkedList0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultXYZDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DatasetUtilities.findMaximumDomainValue(timeSeriesCollection0);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(4975L, 4975L);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, keyToGroupMap0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(taskSeriesCollection0, tableOrder0, (-1467));
      DatasetUtilities.createCategoryDataset((Comparable) simpleTimePeriod0, (KeyedValues) categoryToPieDataset0);
      TimePeriodAnchor timePeriodAnchor0 = timeSeriesCollection0.getXPosition();
      timeSeriesCollection0.setXPosition(timePeriodAnchor0);
      DatasetUtilities.iterateCategoryRangeBounds(taskSeriesCollection0, true);
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      MockDate mockDate0 = new MockDate(1053, (-1467), (-1459), (-272), (-545));
      TimeZone timeZone0 = TimeZone.getTimeZone("d%+0#Bc}$g<");
      Quarter quarter0 = new Quarter(mockDate0, timeZone0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1053, (-545), quarter0, timeZone0);
      Vector<DefaultStatisticalCategoryDataset> vector0 = new Vector<DefaultStatisticalCategoryDataset>();
      DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, vector0, false);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      DatasetUtilities.isEmptyOrNull((XYDataset) null);
      Vector<Short> vector0 = new Vector<Short>();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      System.setCurrentTimeMillis((-1490L));
      int int0 = 2670;
      MockDate mockDate0 = new MockDate(1079, 1079, 1079, 1079, 2670, 1079);
      Day day0 = new Day(mockDate0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1079, 1117.367, 1117.367, 1079, (-388.5909723628));
      oHLCDataItemArray0[0] = oHLCDataItem0;
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DatasetUtilities.findMaximumDomainValue(timeSeriesCollection0);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(4975L, 4975L);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, keyToGroupMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      double[][] doubleArray0 = new double[0][9];
      ArrayList<TimeTableXYDataset> arrayList0 = new ArrayList<TimeTableXYDataset>();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      arrayList0.add(timeTableXYDataset0);
      arrayList0.add(timeTableXYDataset0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) arrayList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.TimeTableXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      double[][] doubleArray0 = new double[0][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      int int0 = 2;
      double double0 = (-4522.557140487681);
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(2, 2, (-4522.557140487681), 3136.0, (-4522.557140487681), 3136.0);
      DatasetGroup datasetGroup0 = defaultHeatMapDataset0.getGroup();
      defaultIntervalCategoryDataset0.setGroup(datasetGroup0);
      DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      Vector<String> vector0 = new Vector<String>();
      boolean boolean0 = false;
      SeriesChangeType seriesChangeType0 = SeriesChangeType.UPDATE;
      int int1 = 181;
      int int2 = 957;
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo(seriesChangeType0, 181, 957);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(defaultIntervalCategoryDataset0, seriesChangeInfo0);
      String string0 = null;
      vector0.add((String) null);
      timeSeriesCollection0.seriesChanged(seriesChangeEvent0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) vector0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      ArrayList<TimeTableXYDataset> arrayList0 = new ArrayList<TimeTableXYDataset>();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      arrayList0.add(timeTableXYDataset0);
      arrayList0.add(timeTableXYDataset0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(334, "");
      MockDate mockDate0 = new MockDate(1059, 2, 0, 2, 1007);
      Minute minute0 = new Minute(mockDate0, simpleTimeZone0);
      simpleTimeZone0.getDisplayName();
      Second second0 = new Second(2, minute0);
      Millisecond millisecond0 = new Millisecond(0, second0);
      simpleTimeZone0.observesDaylightTime();
      millisecond0.previous();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Second second1 = new Second();
      defaultBoxAndWhiskerCategoryDataset0.add((List) arrayList0, (Comparable) second1, (Comparable) "GMT+00:00");
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset1 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset1);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      ArrayList<TimeTableXYDataset> arrayList0 = new ArrayList<TimeTableXYDataset>();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      arrayList0.add(timeTableXYDataset0);
      arrayList0.add(timeTableXYDataset0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(334, "");
      MockDate mockDate0 = new MockDate(1059, 2, 0, 2, 1007);
      Minute minute0 = new Minute(mockDate0, simpleTimeZone0);
      simpleTimeZone0.getDisplayName();
      Second second0 = new Second(2, minute0);
      Millisecond millisecond0 = new Millisecond(0, second0);
      simpleTimeZone0.observesDaylightTime();
      millisecond0.previous();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Second second1 = new Second();
      defaultBoxAndWhiskerCategoryDataset0.add((List) arrayList0, (Comparable) second1, (Comparable) "GMT+00:00");
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset1 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset1);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset1);
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection();
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection1);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultKeyedValues2DDataset0, 10, 0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      MockDate mockDate0 = new MockDate(181, 181, 11, 11, 0, 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1436, "");
      Minute minute0 = new Minute(mockDate0, simpleTimeZone0);
      simpleTimeZone0.getDisplayName();
      Second second0 = new Second(0, minute0);
      Millisecond millisecond0 = new Millisecond(0, second0);
      simpleTimeZone0.observesDaylightTime();
      millisecond0.previous();
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      defaultBoxAndWhiskerCategoryDataset0.add((List) arrayList0, (Comparable) "GMT+00:00", (Comparable) "");
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultBoxAndWhiskerCategoryDataset0, 1436, 274);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) slidingCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(Double.NEGATIVE_INFINITY, 1340.0);
      XYDataItem xYDataItem0 = new XYDataItem(2424.805, (double) 0);
      DatasetUtilities.sampleFunction2D(powerFunction2D0, 181, 2424.805, 999, xYDataItem0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      MockDate mockDate0 = new MockDate(181, 181, 11, 11, 0, 0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) vector0, true);
      MatrixSeries matrixSeries0 = null;
      try {
        matrixSeries0 = new MatrixSeries("Null 'seriesKey' argument.", 1069, (-1618));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.MatrixSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = "Null 'dataset' argument.";
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      Object[][][] objectArray0 = new Object[4][4][1];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(objectArray0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(defaultWindDataset0);
      defaultWindDataset0.seriesChanged(seriesChangeEvent0);
      taskSeriesCollection0.seriesChanged(seriesChangeEvent0);
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      defaultWindDataset0.addChangeListener(xYTaskDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultWindDataset0);
      Range.expandToInclude((Range) null, (-1950.0));
      Range.combine((Range) null, (Range) null);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, 824);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset(connection0, "org.jfree.data.jdbc.JDBCCategoryDataset");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      MockDate mockDate0 = new MockDate(181, 181, 11, 11, 0, 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-574), "");
      Minute minute0 = new Minute(mockDate0, simpleTimeZone0);
      simpleTimeZone0.getDisplayName();
      Second second0 = new Second(181, minute0);
      Millisecond millisecond0 = new Millisecond(0, second0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      millisecond0.previous();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(second0);
      keyToGroupMap0.getKeyCount("");
      KeyToGroupMap keyToGroupMap1 = new KeyToGroupMap();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findMinimumDomainValue(categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      Instant instant0 = MockInstant.ofEpochSecond(4064L, 4064L);
      Date.from(instant0);
      TimeZone.getDefault();
      Locale locale0 = new Locale("");
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 4064L;
      doubleArray1[1] = (double) 4064L;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 4064L;
      doubleArray2[1] = (double) 4064L;
      doubleArray2[2] = (double) 4064L;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (-2561.34));
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds((CategoryDataset) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.setIntervalPositionFactor(0.0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 0.0);
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      ArrayList<TimeTableXYDataset> arrayList0 = new ArrayList<TimeTableXYDataset>();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      arrayList0.add(timeTableXYDataset0);
      arrayList0.add(timeTableXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) arrayList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.TimeTableXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(Double.NEGATIVE_INFINITY, 0.8);
      Hour hour0 = new Hour();
      hour0.previous();
      int int0 = 0;
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(powerFunction2D0, (-3236.9125), 1117.367, 0, hour0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Vector<Short> vector0 = new Vector<Short>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Short short0 = new Short((short) (-1686));
      vector0.add(short0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((short) (-1686), "Category 1");
      Locale locale0 = Locale.JAPAN;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0, locale0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timeTableXYDataset0);
      Number[][] numberArray0 = new Number[5][3];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = null;
      numberArray1[1] = (Number) short0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[3];
      numberArray2[0] = (Number) short0;
      numberArray2[1] = null;
      numberArray2[2] = (Number) short0;
      numberArray0[1] = numberArray2;
      PowerFunction2D powerFunction2D1 = new PowerFunction2D((short) (-1686), 1340.0);
      XYDataItem xYDataItem0 = new XYDataItem((-43.851), (-1651.88312984089));
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(powerFunction2D0, (-43.851), 1.0, (short) (-1686), short0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      Instant instant0 = MockInstant.ofEpochSecond(12L, (-4313L));
      Date date0 = Date.from(instant0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("");
      Locale locale1 = Locale.GERMAN;
      Quarter quarter0 = new Quarter(date0, timeZone0, locale1);
      TimeSeries timeSeries0 = new TimeSeries(instant0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      DatasetUtilities.iterateDomainBounds((XYDataset) xYIntervalSeriesCollection0, false);
      locale1.getDisplayName();
      Range.combine((Range) null, (Range) null);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(1083, "", 1000, 1619, 4, 92, 0, (-2007), (-418), (-418), 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 1000
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      Object[][][] objectArray0 = new Object[4][4][1];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(objectArray0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(defaultWindDataset0);
      seriesChangeEvent0.setSummary((SeriesChangeInfo) null);
      seriesChangeEvent0.setSummary((SeriesChangeInfo) null);
      defaultWindDataset0.seriesChanged(seriesChangeEvent0);
      taskSeriesCollection0.seriesChanged(seriesChangeEvent0);
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      defaultWindDataset0.addChangeListener(xYTaskDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultWindDataset0);
      Range.expandToInclude((Range) null, (-1950.0));
      Range.combine((Range) null, (Range) null);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, 824);
      TimeZone timeZone0 = TimeZone.getDefault();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      timeSeriesCollection0.getXPosition();
      TimeSeries timeSeries0 = new TimeSeries("Null 'dataset' argument.");
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection(timeSeries0, timeZone0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      TimePeriodAnchor timePeriodAnchor0 = timeTableXYDataset0.getXPosition();
      timeSeriesCollection1.setXPosition(timePeriodAnchor0);
      DatasetUtilities.iterateCategoryRangeBounds(taskSeriesCollection0, false);
      DatasetUtilities.findDomainBounds((XYDataset) xYTaskDataset0);
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = "Null 'dataset' argument.";
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      Object[][][] objectArray0 = new Object[4][4][1];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(objectArray0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(defaultWindDataset0);
      taskSeriesCollection0.seriesChanged(seriesChangeEvent0);
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      defaultWindDataset0.addChangeListener(xYTaskDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultWindDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultWindDataset0, (List) linkedList0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      Instant instant0 = MockInstant.ofEpochSecond(4064L, 4064L);
      Date date0 = Date.from(instant0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("");
      Quarter quarter0 = new Quarter(date0, timeZone0, locale0);
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      Range.combine((Range) null, (Range) null);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(4, "", (-492), 4, 92, 4, 1000, 0, (-1278), 0, 1072);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -492
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      List<String> list0 = null;
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findMaximumDomainValue(timeSeriesCollection0);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(4975L, 4975L);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, keyToGroupMap0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(taskSeriesCollection0, tableOrder0, (-1467));
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) simpleTimePeriod0, (KeyedValues) categoryToPieDataset0);
      TimePeriodAnchor timePeriodAnchor0 = timeSeriesCollection0.getXPosition();
      timeSeriesCollection0.setXPosition(timePeriodAnchor0);
      DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findMaximumDomainValue(timeSeriesCollection0);
      timeSeriesCollection0.getDomainBounds(false);
      Range.combine((Range) null, (Range) null);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-606.432230046);
      doubleArray0[1] = (-606.432230046);
      doubleArray0[2] = (-606.432230046);
      doubleArray0[3] = (-606.432230046);
      doubleArray0[4] = (-606.432230046);
      doubleArray0[5] = (-606.432230046);
      doubleArray0[6] = 0.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      // Undeclared exception!
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-606.432230046), 0.0, 3070, (-606.432230046));
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Function2D function2D0 = null;
      int int0 = 0;
      Comparable<XYBarDataset> comparable0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries((Function2D) null, 0.0, 0.0, 0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, (-1293.212538357));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findMaximumDomainValue(timeSeriesCollection0);
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, false);
      // Undeclared exception!
      try { 
        Range.expand((Range) null, (-606.432230046), (-606.432230046));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      MockDate mockDate0 = new MockDate(181, 181, 181, 181, 0, 0);
      DatasetUtilities.findMaximumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      Vector<Short> vector1 = new Vector<Short>();
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      DatasetUtilities.findMinimumDomainValue(xYIntervalSeriesCollection0);
      List<String> list0 = null;
      int int0 = (-1680);
      int int1 = (-969);
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYIntervalSeriesCollection0, (-1441.52246738156));
      // Undeclared exception!
      try { 
        xYBarDataset0.getYValue((-1680), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      ArrayList<TimeTableXYDataset> arrayList0 = new ArrayList<TimeTableXYDataset>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) arrayList0, true);
      MatrixSeries matrixSeries0 = null;
      try {
        matrixSeries0 = new MatrixSeries("Null 'seriesKey' argument.", (-1618), 3452);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.MatrixSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, (OHLCDataItem[]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      Comparable<Double>[] comparableArray0 = (Comparable<Double>[]) Array.newInstance(Comparable.class, 3);
      int int0 = (-1880);
      // Undeclared exception!
      try { 
        SerialDate.createInstance((-1880));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SpreadsheetDate: Serial must be in range 2 to 2958465.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      double double0 = 0.0;
      defaultTableXYDataset0.setIntervalWidth(0.0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
      defaultTableXYDataset0.updateXPoints();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      int int0 = 2;
      MockDate mockDate0 = new MockDate(2, 2, 1648, 2, 2, 1);
      Quarter quarter0 = new Quarter(mockDate0);
      XIntervalSeries xIntervalSeries0 = new XIntervalSeries(quarter0);
      // Undeclared exception!
      try { 
        xIntervalSeries0.remove(quarter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findMinimumStackedRangeValue(defaultStatisticalCategoryDataset0);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(0.8, (-134.7244121));
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.previous();
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(powerFunction2D0, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 0, regularTimePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      String string0 = null;
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((String) null, (String) null, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Comparable<XYSeriesCollection>[] comparableArray0 = (Comparable<XYSeriesCollection>[]) Array.newInstance(Comparable.class, 0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Comparable<JToolTip>[] comparableArray0 = (Comparable<JToolTip>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 250.4453224109553;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-983.0);
      doubleArray1[4] = (-161.2);
      doubleArray1[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 250.4453224109553;
      doubleArray2[1] = 250.4453224109553;
      doubleArray0[1] = doubleArray2;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      MockDate mockDate0 = new MockDate(181, 181, 11, 11, 0, 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-574), "");
      Minute minute0 = new Minute(mockDate0, simpleTimeZone0);
      simpleTimeZone0.getDisplayName();
      Second second0 = new Second(181, minute0);
      Millisecond millisecond0 = new Millisecond(0, second0);
      simpleTimeZone0.observesDaylightTime();
      RegularTimePeriod regularTimePeriod0 = millisecond0.previous();
      defaultBoxAndWhiskerCategoryDataset0.add((List) vector0, (Comparable) regularTimePeriod0, (Comparable) "");
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultBoxAndWhiskerCategoryDataset0, 0, 59);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) slidingCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>();
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, (Range) null, true);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      MockDate mockDate0 = new MockDate(181, 181, 11, 11, 0, 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1436, "");
      Minute minute0 = new Minute(mockDate0, simpleTimeZone0);
      simpleTimeZone0.getDisplayName();
      Second second0 = new Second(0, minute0);
      Millisecond millisecond0 = new Millisecond(0, second0);
      simpleTimeZone0.observesDaylightTime();
      millisecond0.previous();
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultBoxAndWhiskerCategoryDataset0, 1436, 274);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) slidingCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0, (List) vector0, false);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeSeriesCollection0, (List) vector0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      System.setCurrentTimeMillis((-1490L));
      MockDate mockDate0 = new MockDate(1079, 1514, 1498, 1514, 2670, 1079);
      Day day0 = new Day(mockDate0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1498, 1117.367, 1117.367, 1079, (-388.5909723628));
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(day0, oHLCDataItemArray0);
      Stack<XYBarDataset> stack0 = new Stack<XYBarDataset>();
      TimeSeries timeSeries0 = new TimeSeries(day0, "Requires 'start' < 'end'.", "Null 'xRange' argument");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      boolean boolean0 = true;
      DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, true);
      // Undeclared exception!
      try { 
        Range.expand((Range) null, 1.0, Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[3];
      doubleArray1[2] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[3] = 0.0;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, true);
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      System.setCurrentTimeMillis((-1490L));
      MockDate mockDate0 = new MockDate(1079, 1514, 1498, 1514, 2670, 1079);
      Day day0 = new Day(mockDate0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1498, 1117.367, 1117.367, 1079, (-388.5909723628));
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(day0, oHLCDataItemArray0);
      Stack<XYBarDataset> stack0 = new Stack<XYBarDataset>();
      TimeSeries timeSeries0 = new TimeSeries(day0, "Requires 'start' < 'end'.", "Null 'xRange' argument");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, true);
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, true);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeSeriesCollection0, (List) stack0, range0, true);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.setIntervalPositionFactor(0.0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 0.0);
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      DatasetUtilities.createCategoryDataset("", "", doubleArray0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      MockDate mockDate0 = new MockDate(181, 181, 11, 11, 0, 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-574), "");
      Minute minute0 = new Minute(mockDate0, simpleTimeZone0);
      simpleTimeZone0.getDisplayName();
      Second second0 = new Second(181, minute0);
      Millisecond millisecond0 = new Millisecond(0, second0);
      simpleTimeZone0.observesDaylightTime();
      RegularTimePeriod regularTimePeriod0 = millisecond0.previous();
      Locale locale0 = Locale.CANADA_FRENCH;
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      regularTimePeriod0.peg(calendar0);
      defaultBoxAndWhiskerCategoryDataset0.add((List) vector0, (Comparable) regularTimePeriod0, (Comparable) "");
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      Range.combine(range0, range0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultBoxAndWhiskerCategoryDataset0, 0, 59);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) slidingCategoryDataset0);
      Range range1 = DatasetUtilities.iterateXYRangeBounds(timeSeriesCollection0);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      Object[][][] objectArray0 = new Object[4][4][1];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(objectArray0);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(defaultWindDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultWindDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultWindDataset0, (List) linkedList0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("#;G8LL'9xMeu^R7}q@");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, (-1551));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.iterateXYRangeBounds(timeSeriesCollection0);
      ArrayList<XYSeriesCollection> arrayList0 = new ArrayList<XYSeriesCollection>();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      arrayList0.add(xYSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      linkedList0.poll();
      Double double0 = null;
      linkedList0.add((Double) null);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultXYZDataset0, linkedList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultXYZDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      double[][] doubleArray0 = new double[9][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-3884.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = Double.POSITIVE_INFINITY;
      doubleArray3[1] = (-3884.0);
      doubleArray3[2] = 2.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = 2975.15427;
      doubleArray4[1] = Double.POSITIVE_INFINITY;
      doubleArray4[2] = (-3884.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = Double.POSITIVE_INFINITY;
      doubleArray5[1] = (-3884.0);
      doubleArray5[2] = 2975.15427;
      doubleArray5[3] = Double.POSITIVE_INFINITY;
      doubleArray5[4] = Double.POSITIVE_INFINITY;
      doubleArray5[5] = (-3884.0);
      doubleArray5[6] = 2975.15427;
      doubleArray5[7] = (-3884.0);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = 2.0;
      doubleArray6[1] = 2975.15427;
      doubleArray6[2] = Double.POSITIVE_INFINITY;
      doubleArray6[3] = 2.0;
      doubleArray6[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      doubleArray7[0] = 2975.15427;
      doubleArray7[1] = Double.POSITIVE_INFINITY;
      doubleArray7[2] = Double.POSITIVE_INFINITY;
      doubleArray7[3] = 2067.2132345;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[9];
      doubleArray8[0] = 2067.2132345;
      doubleArray8[1] = Double.POSITIVE_INFINITY;
      doubleArray8[2] = 2.0;
      doubleArray8[3] = 2.0;
      doubleArray8[4] = 2067.2132345;
      doubleArray8[5] = 2975.15427;
      doubleArray8[6] = Double.POSITIVE_INFINITY;
      doubleArray8[7] = 2.0;
      doubleArray8[8] = Double.POSITIVE_INFINITY;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[0];
      doubleArray0[8] = doubleArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 0);
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 223.97514;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-522.24098);
      doubleArray0[6] = 187.3843093;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 187.3843093, (-1950.0), (-3813), 223.97514);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      String string0 = "Null 'dataset' argument.";
      String string1 = "!ie$k>A<sFa";
      Number[][] numberArrayArray0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("Null 'dataset' argument.", "!ie$k>A<sFa", (Number[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      String string0 = "Null 'dataset' argument.";
      Number[][] numberArrayArray0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("Null 'dataset' argument.", "!ie$k>A<sFa", (Number[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }
}
