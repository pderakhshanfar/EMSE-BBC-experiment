/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 16 15:06:18 GMT 2020
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.MultipleGradientPaint;
import java.lang.reflect.Array;
import java.math.BigInteger;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.ParsePosition;
import java.time.Instant;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Date;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.SimpleTimeZone;
import java.util.Spliterator;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;
import javax.swing.JComponent;
import javax.swing.JLayeredPane;
import javax.swing.JProgressBar;
import javax.swing.JTable;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.JTableHeader;
import javax.swing.text.DefaultEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.util.SortOrder;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.DefaultKeyedValues;
import org.jfree.data.KeyToGroupMap;
import org.jfree.data.KeyedValues;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.event.DatasetChangeListener;
import org.jfree.data.event.SeriesChangeEvent;
import org.jfree.data.function.Function2D;
import org.jfree.data.function.LineFunction2D;
import org.jfree.data.function.NormalDistributionFunction2D;
import org.jfree.data.function.PolynomialFunction2D;
import org.jfree.data.function.PowerFunction2D;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeries;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DatasetUtilities;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.SeriesChangeInfo;
import org.jfree.data.general.SeriesChangeType;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.pie.DefaultPieDataset;
import org.jfree.data.pie.PieDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.IntervalXYDelegate;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYDatasetTableModel;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DatasetUtilities_ESTest extends DatasetUtilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Number[][] numberArray0 = new Number[9][4];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'rowData' argument.", "Null 'rowData' argument.", numberArray0);
      assertEquals(9, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 2145578397, 2145578397);
      assertEquals(2145578397, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(2145578397, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(9, numberArray0.length);
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2145578397, Size: 4
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = 3243.49332225;
      doubleArray1[2] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 3243.49332225;
      doubleArray2[1] = 3243.49332225;
      doubleArray2[2] = (double) 1;
      doubleArray2[3] = (double) 1;
      doubleArray2[5] = 3243.49332225;
      doubleArray2[6] = (double) 1;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 1415);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      Minute minute0 = new Minute();
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("Null 'rowKeys' argument.");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertNotNull(calendar0);
      
      minute0.peg(calendar0);
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2014,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=14,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=20,MINUTE=21,SECOND=59,MILLISECOND=999,ZONE_OFFSET=?,DST_OFFSET=?]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      jDBCPieDataset0.setValue((Comparable) minute0, 2176.178317760023);
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) minute0, 1.0, 0);
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(pieDataset0);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNotNull(defaultXYDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      jDBCCategoryDataset0.addValue(133.1389120218576, (Comparable) "Null 'rowData' argument.", (Comparable) "Null 'rowData' argument.");
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(133.1389120218576));
      
      MatrixSeries matrixSeries0 = new MatrixSeries("", 4, 4);
      assertEquals(16, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(4, matrixSeries0.getRowCount());
      assertEquals(4, matrixSeries0.getColumnsCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(16, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(4, matrixSeries0.getRowCount());
      assertEquals(4, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(16, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(4, matrixSeries0.getRowCount());
      assertEquals(4, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
      assertEquals(3.0, number0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("");
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNull(number1);
      
      Number number2 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertEquals(16, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(4, matrixSeries0.getRowCount());
      assertEquals(4, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number2);
      assertFalse(number2.equals((Object)number0));
      assertEquals(0.0, number2);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[10];
      double[] doubleArray0 = new double[8];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(10, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((-447.27472801881026), (-447.27472801881026), "");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      
      boolean boolean0 = stack0.add("");
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(""));
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, true);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals((-447.77472801881026), range0.getLowerBound(), 0.01);
      assertEquals((-446.77472801881026), range0.getUpperBound(), 0.01);
      assertEquals((-447.27472801881026), range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertTrue(stack0.contains(""));
      
      Stack<CategoryTableXYDataset> stack1 = new Stack<CategoryTableXYDataset>();
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertEquals("[]", stack1.toString());
      assertNotNull(stack1);
      assertFalse(stack1.contains(categoryTableXYDataset0));
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, false);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals((-447.27472801881026), range1.getLowerBound(), 0.01);
      assertEquals((-447.27472801881026), range1.getUpperBound(), 0.01);
      assertEquals((-447.27472801881026), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertTrue(stack0.contains(""));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      Range range2 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack1, false);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertEquals("[]", stack1.toString());
      assertNull(range2);
      assertFalse(stack1.contains(categoryTableXYDataset0));
      
      Range range3 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals((-447.27472801881026), range3.getLowerBound(), 0.01);
      assertEquals((-223.63736400940513), range3.getCentralValue(), 0.01);
      assertEquals(447.27472801881026, range3.getLength(), 0.01);
      assertNotNull(range3);
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      
      Range range4 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range3, true);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals((-447.27472801881026), range3.getLowerBound(), 0.01);
      assertEquals((-223.63736400940513), range3.getCentralValue(), 0.01);
      assertEquals(447.27472801881026, range3.getLength(), 0.01);
      assertEquals((-447.27472801881026), range4.getUpperBound(), 0.01);
      assertEquals((-447.27472801881026), range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals((-447.27472801881026), range4.getLowerBound(), 0.01);
      assertNotNull(range4);
      assertTrue(stack0.contains(""));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range1));
      assertNotSame(range3, range4);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(range4, range1);
      assertNotSame(range4, range3);
      assertNotSame(range4, range0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      double double0 = categoryTableXYDataset0.getDomainLowerBound(true);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      categoryTableXYDataset0.add(Double.NaN, Double.NaN, "tt");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = categoryTableXYDataset0.getDomainBounds(true);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNull(range0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("tt"));
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertNotNull(range2);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNull(range3);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      int int0 = categoryTableXYDataset0.getItemCount();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, int0);
      
      double double0 = categoryTableXYDataset0.getDomainLowerBound(true);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      categoryTableXYDataset0.add((double) 0, Double.NaN, "x(s_m FoqSyjRCM\"");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = categoryTableXYDataset0.getDomainBounds(false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(Double.NaN));
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals((-0.5), range1.getLowerBound(), 0.01);
      assertEquals(0.5, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(range3);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      defaultPieDataset0.setValue((Comparable) "#`<DF6H\"yfoe6", (-351.0));
      Double double0 = new Double((-351.0));
      assertNotNull(double0);
      assertEquals((-351.0), (double)double0, 0.01);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) "#`<DF6H\"yfoe6", (-21.557808856776216), 1);
      assertNotNull(pieDataset0);
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 2037, 2037);
      assertEquals(2037, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(2037, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      int int0 = categoryTableXYDataset0.getItemCount();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, int0);
      
      categoryTableXYDataset0.add((double) 0, (double) 0, "8QDj}dVT*x0dW|zW%");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add((-1408.0), (-1408.0), "Null 'f' argument.");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1408.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = categoryTableXYDataset0.getDomainBounds(true);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1408.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(704.0, range0.getUpperBound(), 0.01);
      assertEquals((-704.0), range0.getCentralValue(), 0.01);
      assertEquals((-2112.0), range0.getLowerBound(), 0.01);
      assertEquals(2816.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("Null 'f' argument."));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1408.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(2816.0, range1.getLength(), 0.01);
      assertEquals((-2112.0), range1.getLowerBound(), 0.01);
      assertEquals((-704.0), range1.getCentralValue(), 0.01);
      assertEquals(704.0, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1408.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-1408.0), double0, 0.01);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("U`<hF66HQyf,e|]", "U`<hF66HQyf,e|]", numberArray0);
      assertEquals(1, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 1563, 1563);
      assertEquals(1563, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1563, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, numberArray0.length);
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, (Comparable) "U`<hF66HQyf,e|]");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1562, Size: 3
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add((String) null);
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertTrue(boolean0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset1 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset1.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset1.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset1.getSeriesCount());
      assertNotNull(defaultBoxAndWhiskerXYDataset1);
      assertTrue(defaultBoxAndWhiskerXYDataset1.equals((Object)defaultBoxAndWhiskerXYDataset0));
      
      Range range0 = defaultBoxAndWhiskerXYDataset1.getRangeBounds(true);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset1.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset1.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset1.getSeriesCount());
      assertNull(range0);
      assertTrue(defaultBoxAndWhiskerXYDataset1.equals((Object)defaultBoxAndWhiskerXYDataset0));
      assertNotSame(defaultBoxAndWhiskerXYDataset1, defaultBoxAndWhiskerXYDataset0);
      
      Range range1 = Range.expandToInclude((Range) null, (-1384.0));
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1384.0), range1.getLowerBound(), 0.01);
      assertEquals((-1384.0), range1.getUpperBound(), 0.01);
      assertEquals((-1384.0), range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset1, (List) stack0, range1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.AbstractSeriesDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Minute minute0 = new Minute();
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("");
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(""));
      assertTrue(boolean0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      int int0 = jDBCPieDataset0.getIndex(minute0);
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals((-1), int0);
      
      jDBCPieDataset0.setValue((Comparable) minute0, (-3235.9667663736));
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      Double double0 = new Double((-3235.9667663736));
      assertNotNull(double0);
      assertEquals((-3235.9667663736), (double)double0, 0.01);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) minute0, 1848.0, 0);
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Number[][] numberArray0 = new Number[9][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("U`<htrF66H\"yf,e|6", "U`<htrF66H\"yf,e|6", numberArray0);
      assertEquals(9, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, (-31.893526076));
      assertEquals((-31.893526076), range0.getUpperBound(), 0.01);
      assertEquals((-31.893526076), range0.getLowerBound(), 0.01);
      assertEquals((-31.893526076), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(9, numberArray0.length);
      assertNotNull(range0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1, 1);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertNotNull(dynamicTimeSeriesCollection0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = "U`<htrF66H\"yf,e|6";
      Number[][] numberArray0 = new Number[9][3];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("U`<htrF66H\"yf,e|6", "U`<htrF66H\"yf,e|6", numberArray0);
      assertEquals(9, numberArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      DefaultEditorKit.InsertTabAction defaultEditorKit_InsertTabAction0 = new DefaultEditorKit.InsertTabAction();
      assertNotNull(defaultEditorKit_InsertTabAction0);
      
      boolean boolean0 = defaultCategoryDataset0.hasListener(defaultEditorKit_InsertTabAction0);
      assertEquals(9, numberArray0.length);
      assertFalse(boolean0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, (-31.893526076));
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-31.893526076), range0.getUpperBound(), 0.01);
      assertEquals((-31.893526076), range0.getLowerBound(), 0.01);
      assertEquals((-31.893526076), range0.getCentralValue(), 0.01);
      assertEquals(9, numberArray0.length);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, false);
      assertEquals(9, numberArray0.length);
      assertNull(range1);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, 3477);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(3477, categoryToPieDataset0.getExtractIndex());
      assertEquals(9, numberArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "U`<htrF66H\"yf,e|6", 397.20561);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3477, Size: 9
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      Minute minute0 = new Minute();
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      jDBCPieDataset0.setValue((Comparable) minute0, 0.8);
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(jDBCPieDataset0);
      assertEquals(0.8, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = (-2305.184813155875);
      doubleArray1[2] = 1221.3807725515;
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = (-1470.6918436254568);
      doubleArray1[5] = (-2584.981800697757);
      doubleArray1[6] = (-1303.2284458308889);
      doubleArray1[7] = 2419.3448;
      doubleArray1[8] = (-1.0);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals((-2584.981800697757), range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals((-2584.981800697757), range1.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.fireSelectionEvent();
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Instant instant0 = mockDate0.toInstant();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(instant0);
      
      defaultKeyedValuesDataset0.insertValue(0, (Comparable) instant0, (Number) null);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      defaultKeyedValuesDataset0.setValue((Comparable) mockDate0, (-6.5443106020777452E18));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) instant0, (KeyedValues) defaultKeyedValuesDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.pie.DefaultPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      defaultPieDataset0.setValue((Comparable) "#`<DF6H\"yfoe6", (-351.0));
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "#`<DF6H\"yfoe6", (KeyedValues) defaultPieDataset0);
      assertNotNull(categoryDataset0);
      
      Double double0 = new Double((-351.0));
      assertNotNull(double0);
      assertEquals((-351.0), (double)double0, 0.01);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertFalse(number0.equals((Object)double0));
      assertEquals(0.0, number0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) "#`<DF6H\"yfoe6", 6.283185307179586, 1);
      assertNotNull(pieDataset0);
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertEquals((-351.0), range0.getUpperBound(), 0.01);
      assertEquals((-351.0), range0.getCentralValue(), 0.01);
      assertEquals((-351.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertNotSame(defaultPieDataset0, pieDataset0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-65.0), 3982.939150566435, (byte) (-99), (-65.0), 1094.1754943890996);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Range range0 = new Range((byte) (-99), 1094.1754943890996);
      assertEquals(1094.1754943890996, range0.getUpperBound(), 0.01);
      assertEquals(1193.1754943890996, range0.getLength(), 0.01);
      assertEquals(497.5877471945498, range0.getCentralValue(), 0.01);
      assertEquals((-99.0), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(number0);
      assertEquals(1.39240928132E12, number0);
      
      Double double0 = new Double((-65.0));
      assertNotNull(double0);
      assertNotEquals((double)double0, (double)number0, 0.01);
      assertEquals((-65.0), (double)double0, 0.01);
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(number1);
      assertTrue(number1.equals((Object)number0));
      assertFalse(number1.equals((Object)double0));
      assertEquals(1.39240928132E12, number1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Minute minute0 = new Minute();
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(minute0);
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Comparable<JProgressBar>[] comparableArray0 = (Comparable<JProgressBar>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[4][7];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 59;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 59;
      doubleArray1[6] = (double) 59;
      doubleArray1[7] = (double) 59;
      doubleArray1[8] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 59;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 59;
      doubleArray2[3] = 1174.1475;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) 59;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1174.1475;
      doubleArray3[1] = 1174.1475;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (double) 59;
      doubleArray4[1] = (double) 0;
      doubleArray4[2] = 1174.1475;
      doubleArray0[3] = doubleArray4;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, (Comparable[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'columnKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Minute minute0 = new Minute();
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("");
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(""));
      assertTrue(boolean0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(minute0);
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Range range0 = defaultBoxAndWhiskerXYDataset0.getRangeBounds(false);
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNull(range0);
      
      Comparable<String>[] comparableArray0 = (Comparable<String>[]) Array.newInstance(Comparable.class, 2);
      comparableArray0[0] = (Comparable<String>) minute0;
      comparableArray0[1] = (Comparable<String>) "";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(comparableArray0, comparableArray0, (Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, comparableArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      linkedList0.replaceAll(unaryOperator0);
      assertEquals(0, linkedList0.size());
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("Null 'rowData' argument.", (OHLCDataItem[]) null);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      boolean boolean0 = linkedList0.add((Object) defaultOHLCDataset0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(linkedList0.contains("Null 'rowData' argument."));
      assertTrue(boolean0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      mockDate0.setTime(0L);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      MockDate mockDate1 = new MockDate(17, 1276, 431, 431, (-245));
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      boolean boolean0 = mockDate0.before(mockDate1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals("Sun Jul 21 18:55:00 GMT 2024", mockDate1.toString());
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(mockDate1, mockDate0);
      assertTrue(boolean0);
      
      Instant instant0 = mockDate0.toInstant();
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(instant0);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertNotSame(mockDate0, mockDate1);
      
      jDBCCategoryDataset0.addValue(6.283185307179586, (Comparable) mockDate0, (Comparable) mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertNotSame(mockDate0, mockDate1);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) jDBCCategoryDataset0, keyToGroupMap0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(6.283185307179586, range0.getUpperBound(), 0.01);
      assertEquals(3.141592653589793, range0.getCentralValue(), 0.01);
      assertEquals(6.283185307179586, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) jDBCCategoryDataset0, true);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(6.283185307179586, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(6.283185307179586, range1.getUpperBound(), 0.01);
      assertEquals(6.283185307179586, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      Range range2 = DatasetUtilities.iterateCategoryRangeBounds(jDBCCategoryDataset0, true);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(6.283185307179586, range2.getUpperBound(), 0.01);
      assertEquals(6.283185307179586, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(6.283185307179586, range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Minute minute0 = new Minute();
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("");
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.contains(""));
      assertTrue(boolean0);
      
      Minute minute1 = new Minute();
      assertEquals(21, minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute1);
      assertTrue(minute1.equals((Object)minute0));
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      jDBCPieDataset0.setValue((Comparable) "", (double) 59);
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) jDBCPieDataset0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(59, 0, minute1);
      assertEquals(21, minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals((-1), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertTrue(minute1.equals((Object)minute0));
      
      Number[][] numberArray0 = new Number[5][1];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = (Number) 59;
      numberArray1[1] = (Number) 59;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[2];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) 59;
      numberArray2[1] = (Number) 0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[3];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) 59;
      numberArray3[1] = (Number) 1;
      numberArray3[2] = (Number) 1;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[0];
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray2));
      
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[1];
      assertFalse(numberArray5.equals((Object)numberArray3));
      assertFalse(numberArray5.equals((Object)numberArray4));
      assertFalse(numberArray5.equals((Object)numberArray1));
      assertFalse(numberArray5.equals((Object)numberArray2));
      
      numberArray5[0] = (Number) 0;
      numberArray0[4] = numberArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, numberArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("");
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(""));
      assertTrue(boolean0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("");
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Range range0 = defaultBoxAndWhiskerXYDataset0.getRangeBounds(true);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNull(range0);
      
      Range range1 = Range.expandToInclude((Range) null, 53.0);
      assertEquals(53.0, range1.getUpperBound(), 0.01);
      assertEquals(53.0, range1.getLowerBound(), 0.01);
      assertEquals(53.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, range1, false);
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(53.0, range1.getUpperBound(), 0.01);
      assertEquals(53.0, range1.getLowerBound(), 0.01);
      assertEquals(53.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNull(range2);
      assertTrue(stack0.contains(""));
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, range1, true);
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(53.0, range1.getUpperBound(), 0.01);
      assertEquals(53.0, range1.getLowerBound(), 0.01);
      assertEquals(53.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNull(range3);
      assertTrue(stack0.contains(""));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Minute minute0 = new Minute();
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("");
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.contains(""));
      assertTrue(boolean0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(minute0);
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Range range0 = defaultBoxAndWhiskerXYDataset0.getRangeBounds(false);
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNull(range0);
      
      Range range1 = Range.expandToInclude((Range) null, (-1384.0));
      assertEquals((-1384.0), range1.getUpperBound(), 0.01);
      assertEquals((-1384.0), range1.getLowerBound(), 0.01);
      assertEquals((-1384.0), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, range1, false);
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals((-1384.0), range1.getUpperBound(), 0.01);
      assertEquals((-1384.0), range1.getLowerBound(), 0.01);
      assertEquals((-1384.0), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNull(range2);
      assertTrue(stack0.contains(""));
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, range1, true);
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals((-1384.0), range1.getUpperBound(), 0.01);
      assertEquals((-1384.0), range1.getLowerBound(), 0.01);
      assertEquals((-1384.0), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNull(range3);
      assertTrue(stack0.contains(""));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Minute minute0 = new Minute();
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("");
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(""));
      assertTrue(boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(stack0, "", minute0);
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertTrue(stack0.contains(""));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertNull(range0);
      assertTrue(stack0.contains(""));
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertNull(range1);
      assertTrue(stack0.contains(""));
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset1 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset1);
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertNull(range2);
      assertTrue(stack0.contains(""));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      int int0 = categoryTableXYDataset0.getItemCount();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, int0);
      
      categoryTableXYDataset0.add(392.432215779, 159.332391, "");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = categoryTableXYDataset0.getDomainBounds(false);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(392.432215779, range0.getUpperBound(), 0.01);
      assertEquals(392.432215779, range0.getCentralValue(), 0.01);
      assertEquals(392.432215779, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(392.432215779));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(392.932215779, range1.getUpperBound(), 0.01);
      assertEquals(391.932215779, range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals(392.432215779, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(159.332391, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Week week0 = new Week(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 1;
      doubleArray0[0] = doubleArray1;
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      jDBCPieDataset0.setValue((Comparable) mockDate0, 2302.6036712);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) mockDate0, 1933.3);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) "U`<hF66Hyf,e|6", 3169.4042649966846);
      Double double0 = new Double(823.79);
      assertNotNull(double0);
      assertEquals(823.79, (double)double0, 0.01);
      
      int int0 = (-1);
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "U`<hF66Hyf,e|6", 823.79, (-1));
      assertNotNull(pieDataset0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "U`<hF66Hyf,e|6";
      stringArray0[1] = "U`<hF66Hyf,e|6";
      stringArray0[2] = "U`<hF66Hyf,e|6";
      stringArray0[3] = "W#f.QvwY{";
      stringArray0[4] = "U`<hF66Hyf,e|6";
      Number[][] numberArray0 = new Number[6][4];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = (Number) double0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[2];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) double0;
      numberArray2[1] = (Number) double0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[3];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray3[0] = (Number) double0;
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      // Undeclared exception!
      try { 
        defaultKeyedValues0.getValue((Comparable) "U`<hF66Hyf,e|6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key not found: U`<hF66Hyf,e|6
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      int int0 = categoryTableXYDataset0.getItemCount();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, int0);
      
      categoryTableXYDataset0.add((-1.0), (-1.0), "The number of column keys does not match the number of columns in the data array.");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = categoryTableXYDataset0.getDomainBounds(false);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains((-1.0)));
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertEquals((-0.5), range1.getUpperBound(), 0.01);
      assertEquals((-1.5), range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-1.0), double0, 0.01);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset(defaultPieDataset0);
      assertNotNull(defaultPieDataset1);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      defaultPieDataset1.setGroup(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset1, (Comparable) "The number of column keys does not match the number of columns in the data array.", 0.0, 45);
      assertNotNull(pieDataset0);
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertTrue(pieDataset0.equals((Object)defaultPieDataset1));
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(defaultPieDataset1, pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset1);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      Minute minute0 = new Minute();
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      jDBCPieDataset0.validateObject();
      Minute minute1 = (Minute)minute0.next();
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(22, minute1.getMinute());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute1);
      assertFalse(minute1.equals((Object)minute0));
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      
      jDBCPieDataset0.setValue((Comparable) minute1, (double) 0);
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(22, minute1.getMinute());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(jDBCPieDataset0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-65.0), 3982.939150566435, (byte) (-99), (-65.0), 1094.1754943890996);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3982.939150566435, range0.getUpperBound(), 0.01);
      assertEquals(1941.9695752832174, range0.getCentralValue(), 0.01);
      assertEquals(4081.939150566435, range0.getLength(), 0.01);
      assertEquals((-99.0), range0.getLowerBound(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("");
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(""));
      assertTrue(boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(stack0, "", "");
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(""));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertNull(range0);
      assertTrue(stack0.contains(""));
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      jDBCPieDataset0.setValue((Comparable) "", (-207.42083));
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) "", (-207.42083));
      assertNotNull(pieDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(defaultKeyedValuesDataset0);
      assertNotNull(defaultPieDataset0);
      
      Hour hour0 = new Hour();
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      
      defaultPieDataset0.setValue((Comparable) hour0, (-351.0));
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Double double0 = new Double((-351.0));
      assertNotNull(double0);
      assertEquals((-351.0), (double)double0, 0.01);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) hour0, (double) 23, 6);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(pieDataset0);
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Minute minute0 = new Minute();
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      Number[][] numberArray0 = new Number[4][5];
      Number[] numberArray1 = new Number[3];
      numberArray1[0] = (Number) 59;
      numberArray1[1] = (Number) 59;
      numberArray1[2] = (Number) 59;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[8];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) 0;
      numberArray2[1] = (Number) 59;
      numberArray2[2] = (Number) 59;
      numberArray2[3] = (Number) 59;
      numberArray2[5] = (Number) 0;
      numberArray2[6] = (Number) 59;
      numberArray2[7] = (Number) 0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[4];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) 0;
      numberArray3[1] = (Number) 59;
      numberArray3[2] = (Number) 0;
      numberArray3[3] = (Number) 59;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[5];
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray2));
      
      numberArray4[1] = (Number) 59;
      numberArray4[2] = (Number) 59;
      numberArray4[3] = (Number) 0;
      numberArray4[4] = (Number) 0;
      numberArray0[3] = numberArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("U2q\"", "U2q\"", numberArray0);
      assertEquals(4, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, (double) 0);
      assertEquals(236.0, range0.getUpperBound(), 0.01);
      assertEquals(118.0, range0.getCentralValue(), 0.01);
      assertEquals(236.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(4, numberArray0.length);
      assertNotNull(range0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "U2q\"";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = null;
      try {
        defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of series keys does not match the number of series in the data.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Week week0 = new Week(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      Number[][] numberArray0 = new Number[2][1];
      Number[] numberArray1 = new Number[1];
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      numberArray1[0] = (Number) integer0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[7];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) 1;
      numberArray2[1] = (Number) integer0;
      Integer integer1 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(300, (int)integer1);
      
      numberArray2[2] = (Number) integer1;
      numberArray2[3] = (Number) 1;
      numberArray2[4] = (Number) 53;
      numberArray2[5] = (Number) 1;
      numberArray2[6] = (Number) 1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "WahF_]", numberArray0);
      assertEquals(2, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 53, 2406);
      assertEquals(2406, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(53, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2, numberArray0.length);
      assertNotNull(slidingCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(2, numberArray0.length);
      assertFalse(boolean0);
      
      Date[] dateArray0 = new Date[7];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      ParsePosition parsePosition0 = new ParsePosition(2406);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=2406,errorIndex=-1]", parsePosition0.toString());
      assertEquals(2406, parsePosition0.getIndex());
      assertNotNull(parsePosition0);
      
      Date date0 = mockSimpleDateFormat0.parse("", parsePosition0);
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals(2406, parsePosition0.getErrorIndex());
      assertEquals(2406, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=2406,errorIndex=2406]", parsePosition0.toString());
      assertNull(date0);
      
      dateArray0[5] = null;
      dateArray0[6] = (Date) mockDate0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 53;
      doubleArray0[1] = (double) 2406;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 53;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, doubleArray1.length);
      assertEquals(7, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {53.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {53.0, 2406.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      int int0 = categoryTableXYDataset0.getItemCount();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, int0);
      
      categoryTableXYDataset0.setIntervalWidth(0);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add((double) 0, (double) 0, "8QDj}dT*x0dW|zW%");
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = categoryTableXYDataset0.getDomainBounds(false);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(0));
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (Comparable) "8QDj}dT*x0dW|zW%");
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(pieDataset0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertNotNull(range2);
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Week week0 = new Week(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      Number[][] numberArray0 = new Number[2][1];
      Number[] numberArray1 = new Number[1];
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      numberArray1[0] = (Number) integer0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[7];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) 1;
      numberArray2[1] = (Number) integer0;
      Integer integer1 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(300, (int)integer1);
      
      numberArray2[2] = (Number) integer1;
      numberArray2[3] = (Number) 1;
      numberArray2[4] = (Number) 53;
      numberArray2[5] = (Number) 1;
      numberArray2[6] = (Number) 1;
      numberArray0[1] = numberArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("90./4&XfPz/9m OnA", "", numberArray0);
      assertEquals(2, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 53, 1);
      assertEquals(1, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(53, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2, numberArray0.length);
      assertNotNull(slidingCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      assertEquals(1, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(53, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2, numberArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(range0);
      
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      Week week0 = new Week(mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(1970, week0.getYearValue());
      assertEquals(0L, week0.getFirstMillisecond());
      assertEquals(1, week0.getWeek());
      assertEquals((-1L), week0.getLastMillisecond());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-2468.962481808459), 0L);
      assertEquals(0.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-2468.962481808459), lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(2254.0, Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(2254.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertNotNull(normalDistributionFunction2D0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, 1, 1000.99842117893, 53, week0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(1970, week0.getYearValue());
      assertEquals(0L, week0.getFirstMillisecond());
      assertEquals(1, week0.getWeek());
      assertEquals((-1L), week0.getLastMillisecond());
      assertEquals(Double.POSITIVE_INFINITY, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(2254.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(xYSeriesCollection0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(1970, week0.getYearValue());
      assertEquals(0L, week0.getFirstMillisecond());
      assertEquals(1, week0.getWeek());
      assertEquals((-1L), week0.getLastMillisecond());
      assertEquals(Double.POSITIVE_INFINITY, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(2254.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1000.9984211789299, range1.getLength(), 0.01);
      assertEquals(0.5, range1.getLowerBound(), 0.01);
      assertEquals(1001.4984211789299, range1.getUpperBound(), 0.01);
      assertEquals(500.99921058946495, range1.getCentralValue(), 0.01);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(range1);
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((XYDataset) xYSeriesCollection0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(1970, week0.getYearValue());
      assertEquals(0L, week0.getFirstMillisecond());
      assertEquals(1, week0.getWeek());
      assertEquals((-1L), week0.getLastMillisecond());
      assertEquals(Double.POSITIVE_INFINITY, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(2254.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(1970, week0.getYearValue());
      assertEquals(0L, week0.getFirstMillisecond());
      assertEquals(1, week0.getWeek());
      assertEquals((-1L), week0.getLastMillisecond());
      assertEquals(Double.POSITIVE_INFINITY, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(2254.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range1));
      assertNotSame(range2, range1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-65.0), 3982.939150566435, (byte) (-99), (-65.0), 1079.49848675561);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 648.53791409, 1.074738348E13, 988.64935171, (-6.0), 4573.909);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3982.939150566435, range0.getUpperBound(), 0.01);
      assertEquals(4081.939150566435, range0.getLength(), 0.01);
      assertEquals((-99.0), range0.getLowerBound(), 0.01);
      assertEquals(1941.9695752832174, range0.getCentralValue(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(range0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(number0);
      assertEquals(1.39240928132E12, number0);
      
      Double double0 = new Double(1.074738348E13);
      assertNotNull(double0);
      assertNotEquals((double)double0, (double)number0, 0.01);
      assertEquals(1.074738348E13, (double)double0, 0.01);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      JDBCCategoryDataset jDBCCategoryDataset1 = (JDBCCategoryDataset)jDBCCategoryDataset0.clone();
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertTrue(jDBCCategoryDataset1.getTranspose());
      assertNotNull(jDBCCategoryDataset1);
      assertTrue(jDBCCategoryDataset1.equals((Object)jDBCCategoryDataset0));
      assertNotSame(jDBCCategoryDataset0, jDBCCategoryDataset1);
      assertNotSame(jDBCCategoryDataset1, jDBCCategoryDataset0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) jDBCCategoryDataset0, 2439);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(defaultPieDataset0);
      assertTrue(jDBCCategoryDataset0.equals((Object)jDBCCategoryDataset1));
      assertNotSame(jDBCCategoryDataset0, jDBCCategoryDataset1);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = (-851.0);
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray1[3] = 6.283185307179586;
      doubleArray1[4] = (-6.0);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("t2~[<<<0T9lfnvh", "t2~[<<<0T9lfnvh", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals((-851.0), range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertNotNull(taskSeriesCollection1);
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection1, 35, 2);
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(2, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(35, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      
      Number number1 = DatasetUtilities.findMaximumStackedRangeValue(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(2, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(35, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNull(number1);
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      assertNotSame(taskSeriesCollection1, taskSeriesCollection0);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNotNull(histogramDataset0);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      assertNotNull(localDate0);
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(0L));
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Comparable<CategoryTableXYDataset>[] comparableArray0 = (Comparable<CategoryTableXYDataset>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(localDate0, (OHLCDataItem[]) null);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, "");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      
      boolean boolean0 = stack0.add("");
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(""));
      assertTrue(boolean0);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(defaultBoxAndWhiskerCategoryDataset0, true);
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, false);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertNull(range2);
      assertTrue(stack0.contains(""));
      
      Short short0 = new Short((short) (-119));
      assertNotNull(short0);
      assertEquals((short) (-119), (short)short0);
      
      Number[][] numberArray0 = new Number[7][6];
      Number[] numberArray1 = new Number[6];
      numberArray1[0] = (Number) short0;
      numberArray1[1] = (Number) short0;
      numberArray1[2] = (Number) short0;
      numberArray1[3] = (Number) short0;
      numberArray1[4] = (Number) short0;
      numberArray1[5] = (Number) short0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[9];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) short0;
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      numberArray2[1] = (Number) integer0;
      numberArray2[2] = (Number) short0;
      numberArray2[3] = (Number) short0;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(xYTaskDataset0);
      
      Number number0 = xYTaskDataset0.getX(168, 475);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(number0);
      assertEquals(168.0, number0);
      
      numberArray2[4] = number0;
      numberArray2[5] = (Number) short0;
      numberArray2[6] = (Number) short0;
      numberArray2[7] = (Number) short0;
      Long long0 = new Long(475);
      assertNotNull(long0);
      assertEquals(475L, (long)long0);
      
      numberArray2[8] = (Number) long0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[1];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray3[0] = (Number) integer0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[0];
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray1));
      
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[5];
      assertFalse(numberArray5.equals((Object)numberArray3));
      assertFalse(numberArray5.equals((Object)numberArray4));
      assertFalse(numberArray5.equals((Object)numberArray1));
      assertFalse(numberArray5.equals((Object)numberArray2));
      
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(400, (int)integer1);
      
      numberArray5[0] = (Number) integer1;
      numberArray5[1] = (Number) short0;
      numberArray5[2] = (Number) long0;
      numberArray5[3] = (Number) integer0;
      numberArray5[4] = number0;
      numberArray0[4] = numberArray5;
      Number[] numberArray6 = new Number[8];
      assertFalse(numberArray6.equals((Object)numberArray4));
      assertFalse(numberArray6.equals((Object)numberArray5));
      assertFalse(numberArray6.equals((Object)numberArray3));
      assertFalse(numberArray6.equals((Object)numberArray1));
      assertFalse(numberArray6.equals((Object)numberArray2));
      
      numberArray6[0] = (Number) integer0;
      numberArray6[1] = (Number) integer0;
      numberArray6[2] = (Number) integer0;
      numberArray6[3] = number0;
      numberArray6[4] = (Number) integer0;
      Integer integer2 = new Integer(168);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(168, (int)integer2);
      
      numberArray6[5] = (Number) integer2;
      Float float0 = new Float(Double.NEGATIVE_INFINITY);
      assertNotNull(float0);
      assertEquals(Float.NEGATIVE_INFINITY, (float)float0, 0.01F);
      
      numberArray6[6] = (Number) float0;
      numberArray6[7] = (Number) short0;
      numberArray0[5] = numberArray6;
      Number[] numberArray7 = new Number[2];
      assertFalse(numberArray7.equals((Object)numberArray2));
      assertFalse(numberArray7.equals((Object)numberArray6));
      assertFalse(numberArray7.equals((Object)numberArray1));
      assertFalse(numberArray7.equals((Object)numberArray3));
      assertFalse(numberArray7.equals((Object)numberArray4));
      assertFalse(numberArray7.equals((Object)numberArray5));
      
      numberArray7[0] = (Number) short0;
      numberArray7[1] = (Number) long0;
      numberArray0[6] = numberArray7;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, numberArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      jDBCCategoryDataset0.addValue((-447.27472801881026), (Comparable) "", (Comparable) "");
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) jDBCCategoryDataset0, keyToGroupMap0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals((-447.27472801881026), range0.getLowerBound(), 0.01);
      assertEquals((-223.63736400940513), range0.getCentralValue(), 0.01);
      assertEquals(447.27472801881026, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(jDBCCategoryDataset0, true);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals((-447.27472801881026), range1.getCentralValue(), 0.01);
      assertEquals((-447.27472801881026), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-447.27472801881026), range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) jDBCCategoryDataset0, false);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals((-447.27472801881026), range2.getLowerBound(), 0.01);
      assertEquals((-447.27472801881026), range2.getUpperBound(), 0.01);
      assertEquals((-447.27472801881026), range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = "U`<hF66Hyf,e|6";
      Number[][] numberArray0 = new Number[9][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "U`<hF66Hyf,e|6", numberArray0);
      assertEquals(9, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 2154);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2154, categoryToPieDataset0.getExtractIndex());
      assertEquals(9, numberArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2154, Size: 3
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertTrue(boolean0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("MCU%,<wU", 243, 2);
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(486, matrixSeries0.getItemCount());
      assertEquals(243, matrixSeries0.getRowCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(486, matrixSeries0.getItemCount());
      assertEquals(243, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(matrixSeriesCollection0);
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(486, matrixSeries0.getItemCount());
      assertEquals(243, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(121.0, range0.getCentralValue(), 0.01);
      assertEquals(242.0, range0.getLength(), 0.01);
      assertEquals(242.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(486, matrixSeries0.getItemCount());
      assertEquals(243, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(0.5, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      assertFalse(vector0.contains(243));
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) vector0, true);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNull(range2);
      assertFalse(vector0.contains(243));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("", (OHLCDataItem[]) null);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(1L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1L, regularTimePeriod0.getSerialIndex());
      assertNotNull(regularTimePeriod0);
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Long long1 = Long.getLong("", long0);
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      timeTableXYDataset0.add((TimePeriod) regularTimePeriod0, (Number) long1, "", true);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(1L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1L, regularTimePeriod0.getSerialIndex());
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(number0);
      assertEquals(1.0, number0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("");
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(""));
      assertTrue(boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean1 = true;
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNull(range0);
      assertTrue(stack0.contains(""));
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      defaultCategoryDataset0.setValue(0.0, (Comparable) "", (Comparable) "");
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) stack0, true);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      assertTrue(stack0.contains(""));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertNotNull(taskSeriesCollection1);
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 1, 25);
      assertEquals(1, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(25, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingGanttCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[7];
      double[] doubleArray0 = new double[8];
      doubleArray0[3] = (double) (byte) (-93);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(7, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-93.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[][] doubleArray1 = new double[1][8];
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) (byte) (-93);
      doubleArray1[0] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, doubleArray1.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals((-93.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-46.5), range0.getCentralValue(), 0.01);
      assertEquals(93.0, range0.getLength(), 0.01);
      assertEquals(1, doubleArray1.length);
      assertNotNull(range0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null, timeZone0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultHighLowDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(7, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-93.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(boolean0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-93.0), range1.getUpperBound(), 0.01);
      assertEquals((-93.0), range1.getLowerBound(), 0.01);
      assertEquals((-93.0), range1.getCentralValue(), 0.01);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, doubleArray1.length);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(Double.NEGATIVE_INFINITY));
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      categoryTableXYDataset0.add((-1938.48543583934), (-1938.48543583934), "Null 'rowData' argument.");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getLowerBound(), 0.01);
      assertEquals((-1938.48543583934), range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("");
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(""));
      assertTrue(boolean0);
      
      double[][] doubleArray0 = new double[1][2];
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      int int0 = defaultMultiValueCategoryDataset0.getRowIndex("");
      assertEquals((-1), int0);
      
      defaultMultiValueCategoryDataset0.add(stack0, "", "");
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(""));
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(1, stack0.size());
      assertNull(range1);
      assertTrue(stack0.contains(""));
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      defaultCategoryDataset0.setValue(2573.25289, (Comparable) "", (Comparable) "");
      assertEquals(1, doubleArray0.length);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(0.0, (-497.7804188), "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains((-497.7804188)));
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      
      boolean boolean0 = stack0.add("X-H?");
      assertEquals(10, stack0.capacity());
      assertEquals("[X-H?]", stack0.toString());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.contains(""));
      assertTrue(stack0.contains("X-H?"));
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, true);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(10, stack0.capacity());
      assertEquals("[X-H?]", stack0.toString());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals((-0.5), range0.getLowerBound(), 0.01);
      assertEquals(0.5, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertFalse(stack0.contains(""));
      assertTrue(stack0.contains("X-H?"));
      
      Stack<CategoryTableXYDataset> stack1 = new Stack<CategoryTableXYDataset>();
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertNotNull(stack1);
      assertFalse(stack1.contains(categoryTableXYDataset0));
      
      int int0 = defaultMultiValueCategoryDataset0.getColumnIndex(integer0);
      assertEquals((-1), int0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(10, stack0.capacity());
      assertEquals("[X-H?]", stack0.toString());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      assertFalse(stack0.contains(""));
      assertTrue(stack0.contains("X-H?"));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      Range range2 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack1, true);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertNull(range2);
      assertFalse(stack1.contains(categoryTableXYDataset0));
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, (-1852104167));
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Minute minute0 = new Minute();
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      Comparable<XIntervalSeriesCollection>[] comparableArray0 = (Comparable<XIntervalSeriesCollection>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number[][] numberArray0 = new Number[1][2];
      Number[] numberArray1 = new Number[5];
      numberArray1[0] = (Number) 59;
      numberArray1[1] = (Number) 59;
      numberArray1[2] = (Number) 0;
      numberArray1[3] = (Number) 0;
      numberArray1[4] = (Number) 0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertEquals(1, numberArray0.length);
      assertNotNull(categoryDataset1);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotSame(categoryDataset1, categoryDataset0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset1, true);
      assertEquals(59.0, range0.getUpperBound(), 0.01);
      assertEquals(29.5, range0.getCentralValue(), 0.01);
      assertEquals(59.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1, numberArray0.length);
      assertNotNull(range0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotSame(categoryDataset1, categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset1);
      assertEquals(1, numberArray0.length);
      assertNotNull(number0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotSame(categoryDataset1, categoryDataset0);
      assertEquals(59.0, number0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      Minute minute0 = new Minute();
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      jDBCPieDataset0.validateObject();
      Minute minute1 = (Minute)minute0.next();
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(22, minute1.getMinute());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute1);
      assertFalse(minute1.equals((Object)minute0));
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[9];
      doubleArray1[4] = (double) 59;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (-2449.632185809);
      doubleArray1[5] = (double) 59;
      doubleArray1[6] = (double) 59;
      doubleArray1[7] = (double) 0;
      doubleArray1[8] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2449.632185809);
      doubleArray2[1] = (double) 59;
      doubleArray2[2] = (double) 59;
      doubleArray2[3] = (double) 59;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 59;
      doubleArray3[1] = (-2449.632185809);
      doubleArray3[2] = (double) 0;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      String string0 = "";
      String string1 = "Key not found: ";
      boolean boolean0 = stack0.add("Key not found: ");
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[Key not found: ]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(string1));
      assertFalse(stack0.contains(string0));
      assertTrue(boolean0);
      
      String string2 = "Missing Q.";
      double[][] doubleArray0 = new double[1][2];
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(stack0, "Missing Q.", "Missing Q.");
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[Key not found: ]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(string1));
      assertFalse(stack0.contains("Missing Q."));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(0.8420628257148763, 0.8420628257148763, "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.8420628257148763, range0.getUpperBound(), 0.01);
      assertEquals(0.8420628257148763, range0.getLowerBound(), 0.01);
      assertEquals(0.8420628257148763, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      boolean boolean0 = linkedList0.add((Object) range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.8420628257148763, range0.getUpperBound(), 0.01);
      assertEquals(0.8420628257148763, range0.getLowerBound(), 0.01);
      assertEquals(0.8420628257148763, range0.getCentralValue(), 0.01);
      assertFalse(linkedList0.contains(""));
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) linkedList0, range0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.Range cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      double[][] doubleArray0 = new double[1][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Key not found: ", "Null 'rowData' argument.", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(boolean0);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xYIntervalSeriesCollection0);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) xYIntervalSeriesCollection0, (List) arrayList0, true);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[7];
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte) (-93);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(7, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {(-93.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-46.5), range0.getCentralValue(), 0.01);
      assertEquals((-93.0), range0.getLowerBound(), 0.01);
      assertEquals(93.0, range0.getLength(), 0.01);
      assertEquals(7, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertNotNull(range0);
      assertArrayEquals(new double[] {(-93.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultHighLowDataset0, (-1047.83));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-1047.83), xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(7, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertNotNull(xYBarDataset0);
      assertArrayEquals(new double[] {(-93.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYBarDataset0, (List) null, range0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      byte byte0 = (byte) (-93);
      Date[] dateArray0 = new Date[7];
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte) (-93);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(7, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {(-93.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(7, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertNotNull(number0);
      assertArrayEquals(new double[] {(-93.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, number0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(7, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertNotNull(number1);
      assertArrayEquals(new double[] {(-93.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(number1.equals((Object)number0));
      assertEquals((-93.0), number1);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      Range range0 = defaultTableXYDataset0.getDomainBounds(true);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNull(range0);
      
      Number[][] numberArray0 = new Number[1][1];
      Number[] numberArray1 = new Number[7];
      numberArray1[0] = number1;
      numberArray1[1] = number0;
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Number number2 = DatasetUtilities.findMinimumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      assertNull(number2);
      
      numberArray1[2] = null;
      numberArray1[3] = (Number) (-93.0);
      numberArray1[4] = number0;
      numberArray1[5] = number0;
      numberArray1[6] = number1;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, numberArray0);
      assertEquals(1, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      Stack<TimeSeriesCollection> stack0 = new Stack<TimeSeriesCollection>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) stack0, false);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(1, numberArray0.length);
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertEquals(93.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals((-93.0), range2.getLowerBound(), 0.01);
      assertEquals((-46.5), range2.getCentralValue(), 0.01);
      assertEquals(1, numberArray0.length);
      assertNotNull(range2);
      
      Function2D function2D0 = null;
      int int0 = 2120;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((byte) (-93), (String) null, 53, 2120, 53, 4, 2120, (byte) (-93), (byte) (-93), 4, 1280);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Number[][] numberArray0 = new Number[9][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("U`<VF66H\"Af,e|6", "U`<VF66H\"Af,e|6", numberArray0);
      assertEquals(9, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      Minute minute0 = new Minute(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0, Double.NEGATIVE_INFINITY, (-1648.0477946613796), (-1648.0477946613796), 59);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(minute0, oHLCDataItemArray0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      defaultOHLCDataset0.validateObject();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(1, oHLCDataItemArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (-1648.0477946613796) <= upper (-Infinity).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(Double.NEGATIVE_INFINITY));
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      
      boolean boolean0 = stack0.add("");
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(""));
      assertTrue(boolean0);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(defaultBoxAndWhiskerCategoryDataset0, true);
      assertNull(range1);
      
      Range range2 = Range.expandToInclude((Range) null, 884.0);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(884.0, range2.getLowerBound(), 0.01);
      assertEquals(884.0, range2.getUpperBound(), 0.01);
      assertEquals(884.0, range2.getCentralValue(), 0.01);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range0));
      assertNotSame(range2, range0);
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range0, false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(Double.NaN, range3.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range3.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range3.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range3.getCentralValue(), 0.01);
      assertNotNull(range3);
      assertTrue(stack0.contains(""));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range0));
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      Range range4 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultXYZDataset0, false);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(range4);
      
      Range range5 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range2, false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(884.0, range2.getLowerBound(), 0.01);
      assertEquals(884.0, range2.getUpperBound(), 0.01);
      assertEquals(884.0, range2.getCentralValue(), 0.01);
      assertNull(range5);
      assertTrue(stack0.contains(""));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range3));
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[4];
      double[] doubleArray0 = new double[8];
      doubleArray0[3] = (double) (byte) (-93);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(4, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-93.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(4, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertNotNull(number0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-93.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, number0);
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean0 = linkedList0.add(defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      assertTrue(boolean0);
      
      boolean boolean1 = true;
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      MockDate mockDate0 = new MockDate(378, 378, 378, 378, 378);
      assertNotNull(mockDate0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-2474.352863480769), 3982.939150566435, 3982.939150566435, 1672.7363638842367, 1672.7363638842367);
      assertEquals("Fri Jul 29 00:18:00 GMT 2310", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 378, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 988.64935171, 378);
      assertEquals("Fri Jul 29 00:18:00 GMT 2310", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      oHLCDataItemArray0[0] = oHLCDataItem1;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem1;
      oHLCDataItemArray0[3] = oHLCDataItem1;
      int int0 = oHLCDataItem0.compareTo(oHLCDataItem1);
      assertEquals("Fri Jul 29 00:18:00 GMT 2310", mockDate0.toString());
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotSame(oHLCDataItem1, oHLCDataItem0);
      assertEquals(0, int0);
      
      oHLCDataItemArray0[4] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem1, oHLCDataItemArray0);
      assertEquals("Fri Jul 29 00:18:00 GMT 2310", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      defaultOHLCDataset0.validateObject();
      assertEquals("Fri Jul 29 00:18:00 GMT 2310", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(5, oHLCDataItemArray0.length);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotSame(oHLCDataItem1, oHLCDataItem0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      assertEquals("Fri Jul 29 00:18:00 GMT 2310", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(3982.939150566435, range0.getUpperBound(), 0.01);
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(range0);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotSame(oHLCDataItem1, oHLCDataItem0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(number0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      assertFalse(stack0.contains(int0));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, true);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals("Fri Jul 29 00:18:00 GMT 2310", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(3982.939150566435, range0.getUpperBound(), 0.01);
      assertEquals(5, oHLCDataItemArray0.length);
      assertNull(range1);
      assertFalse(stack0.contains(int0));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotSame(oHLCDataItem1, oHLCDataItem0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(range2);
      
      Comparable<DefaultBoxAndWhiskerCategoryDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerCategoryDataset>[]) Array.newInstance(Comparable.class, 0);
      Comparable<YIntervalSeriesCollection>[] comparableArray1 = (Comparable<YIntervalSeriesCollection>[]) Array.newInstance(Comparable.class, 5);
      comparableArray1[0] = (Comparable<YIntervalSeriesCollection>) oHLCDataItem1;
      comparableArray1[1] = (Comparable<YIntervalSeriesCollection>) oHLCDataItem1;
      comparableArray1[2] = (Comparable<YIntervalSeriesCollection>) oHLCDataItem1;
      comparableArray1[3] = (Comparable<YIntervalSeriesCollection>) oHLCDataItem1;
      comparableArray1[4] = (Comparable<YIntervalSeriesCollection>) oHLCDataItem1;
      double[][] doubleArray0 = new double[8][0];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 378;
      doubleArray1[1] = 1672.7363638842367;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = 1672.7363638842367;
      doubleArray1[4] = (-2474.352863480769);
      doubleArray1[5] = Double.NEGATIVE_INFINITY;
      doubleArray1[6] = Double.NEGATIVE_INFINITY;
      doubleArray1[7] = 3982.939150566435;
      doubleArray1[8] = 1.5;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1672.7363638842367;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 378;
      doubleArray3[1] = 1672.7363638842367;
      doubleArray3[2] = Double.NEGATIVE_INFINITY;
      doubleArray3[3] = 3982.939150566435;
      doubleArray3[4] = 1672.7363638842367;
      doubleArray3[5] = (-2474.352863480769);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 988.64935171;
      doubleArray4[1] = 1.5;
      doubleArray4[2] = 988.64935171;
      doubleArray4[3] = (-1.0);
      doubleArray4[4] = Double.NEGATIVE_INFINITY;
      doubleArray4[5] = (double) 0;
      doubleArray4[6] = 1.5;
      doubleArray4[7] = 1.5;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = (double) 378;
      doubleArray5[1] = 3982.939150566435;
      doubleArray5[2] = 51.0;
      doubleArray5[3] = (double) 378;
      doubleArray5[4] = 1672.7363638842367;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray6[0] = 1.5;
      doubleArray6[1] = 51.0;
      doubleArray6[2] = 1672.7363638842367;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      
      doubleArray7[0] = 1672.7363638842367;
      doubleArray7[1] = (double) 0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[9];
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      
      doubleArray8[0] = (-1.0);
      doubleArray8[1] = 51.0;
      doubleArray8[2] = 0.5;
      doubleArray8[3] = Double.NEGATIVE_INFINITY;
      doubleArray8[4] = (-2474.352863480769);
      doubleArray8[5] = (double) 0;
      doubleArray8[6] = (double) 0;
      doubleArray8[7] = Double.NEGATIVE_INFINITY;
      doubleArray8[8] = 1.5;
      doubleArray0[7] = doubleArray8;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'columnKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[7];
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte) (-93);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(7, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {(-93.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(7, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertNotNull(number0);
      assertArrayEquals(new double[] {(-93.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, number0);
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, true);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0, linkedList0.size());
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(7, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertNull(range1);
      assertArrayEquals(new double[] {(-93.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(linkedList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("Key not found: ");
      assertEquals(10, stack0.capacity());
      assertEquals("[Key not found: ]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains("Key not found: "));
      assertTrue(boolean0);
      
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[2];
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertEquals(10, stack0.capacity());
      assertEquals("[Key not found: ]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertNull(range0);
      assertTrue(stack0.contains("Key not found: "));
      
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range1);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Missing Q.", "Null 'visibleSeriesKeys' argument.", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range2 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range2);
      assertTrue(range2.equals((Object)range1));
      assertNotSame(range2, range1);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.removeSeries(4580);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.MatrixSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[6];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte) (-54);
      doubleArray0[2] = (double) (byte) (-54);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(6, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {(-54.0), 0.0, (-54.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Instant instant0 = mockDate0.toInstant();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(instant0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(6, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      assertNotNull(number0);
      assertArrayEquals(new double[] {(-54.0), 0.0, (-54.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, number0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(0.5, 1.0, "");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      categoryTableXYDataset0.setSelectionState(timeSeriesCollection0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      
      boolean boolean0 = stack0.add("");
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(""));
      assertTrue(boolean0);
      
      Range range1 = Range.combine(range0, range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      Range range2 = Range.expandToInclude(range0, 0.5);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(0.75, range2.getCentralValue(), 0.01);
      assertEquals(0.5, range2.getLength(), 0.01);
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(0.5, range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      assertTrue(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      
      Range range3 = Range.combine(range2, range2);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(0.75, range2.getCentralValue(), 0.01);
      assertEquals(0.5, range2.getLength(), 0.01);
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(0.5, range2.getLowerBound(), 0.01);
      assertEquals(0.75, range3.getCentralValue(), 0.01);
      assertEquals(0.5, range3.getLength(), 0.01);
      assertEquals(1.0, range3.getUpperBound(), 0.01);
      assertEquals(0.5, range3.getLowerBound(), 0.01);
      assertNotNull(range3);
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      
      Range range4 = timeSeriesCollection0.getDomainBounds(true);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(range4);
      
      Range range5 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range2, false);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(0.75, range2.getCentralValue(), 0.01);
      assertEquals(0.5, range2.getLength(), 0.01);
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(0.5, range2.getLowerBound(), 0.01);
      assertEquals(1.0, range5.getLowerBound(), 0.01);
      assertEquals(1.0, range5.getUpperBound(), 0.01);
      assertEquals(1.0, range5.getCentralValue(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertNotNull(range5);
      assertTrue(stack0.contains(""));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range3));
      assertTrue(range5.equals((Object)range0));
      assertTrue(range5.equals((Object)range1));
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range0, range1);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range5);
      assertNotSame(range2, range1);
      assertNotSame(range5, range0);
      assertNotSame(range5, range1);
      assertNotSame(range5, range2);
      assertNotSame(range5, range3);
      
      Range range6 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, range6.getLength(), 0.01);
      assertEquals(0.0, range6.getLowerBound(), 0.01);
      assertEquals(1.0, range6.getUpperBound(), 0.01);
      assertEquals(0.5, range6.getCentralValue(), 0.01);
      assertNotNull(range6);
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range2));
      assertNotSame(range6, range3);
      assertNotSame(range6, range0);
      assertNotSame(range6, range5);
      assertNotSame(range6, range1);
      assertNotSame(range6, range2);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      MockDate mockDate0 = new MockDate((-6), (-6), (-6), (-6), (-6), (-6));
      assertNotNull(mockDate0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      jDBCCategoryDataset0.addValue((double) (-6), (Comparable) mockDate0, (Comparable) mockDate0);
      assertEquals("Fri Jun 23 17:53:54 GMT 1893", mockDate0.toString());
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      KeyToGroupMap keyToGroupMap1 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap1.getGroupCount());
      assertNotNull(keyToGroupMap1);
      assertTrue(keyToGroupMap1.equals((Object)keyToGroupMap0));
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) jDBCCategoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(6.0, range0.getLength(), 0.01);
      assertEquals((-6.0), range0.getLowerBound(), 0.01);
      assertEquals((-3.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      assertTrue(keyToGroupMap0.equals((Object)keyToGroupMap1));
      assertNotSame(keyToGroupMap0, keyToGroupMap1);
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(6.0, range1.getLength(), 0.01);
      assertEquals((-6.0), range1.getLowerBound(), 0.01);
      assertEquals((-3.0), range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("8B", 1084, 1077);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      MockDate mockDate0 = new MockDate(378, 378, 378, 378, 378);
      assertNotNull(mockDate0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-2474.352863480769), 3982.939150566435, 3982.939150566435, 1674.5591013106, 1674.5591013106);
      assertEquals("Fri Jul 29 00:18:00 GMT 2310", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 378, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 988.64935171, 378);
      assertEquals("Fri Jul 29 00:18:00 GMT 2310", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      oHLCDataItemArray0[0] = oHLCDataItem1;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem1;
      oHLCDataItemArray0[3] = oHLCDataItem1;
      int int0 = oHLCDataItem0.compareTo(oHLCDataItem1);
      assertEquals("Fri Jul 29 00:18:00 GMT 2310", mockDate0.toString());
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotSame(oHLCDataItem1, oHLCDataItem0);
      assertEquals(0, int0);
      
      oHLCDataItemArray0[4] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem1, oHLCDataItemArray0);
      assertEquals("Fri Jul 29 00:18:00 GMT 2310", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      defaultOHLCDataset0.validateObject();
      assertEquals("Fri Jul 29 00:18:00 GMT 2310", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(5, oHLCDataItemArray0.length);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotSame(oHLCDataItem1, oHLCDataItem0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      assertEquals("Fri Jul 29 00:18:00 GMT 2310", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(3982.939150566435, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(range0);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotSame(oHLCDataItem1, oHLCDataItem0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(number0);
      
      Number number1 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertEquals("Fri Jul 29 00:18:00 GMT 2310", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(number1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotSame(oHLCDataItem1, oHLCDataItem0);
      assertEquals(1.074738348E13, number1);
      
      Number number2 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      assertEquals("Fri Jul 29 00:18:00 GMT 2310", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(number2);
      assertFalse(number2.equals((Object)number1));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotSame(oHLCDataItem1, oHLCDataItem0);
      assertEquals(Double.NEGATIVE_INFINITY, number2);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) jDBCCategoryDataset0, (-6571));
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(pieDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      MockDate mockDate0 = new MockDate(378, 378, 378, 378, 378);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-2474.352863480769), 378, 378, 1672.7363638842367, 1672.7363638842367);
      assertEquals("Fri Jul 29 00:18:00 GMT 2310", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 378, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 988.64935171, 378);
      assertEquals("Fri Jul 29 00:18:00 GMT 2310", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      oHLCDataItemArray0[0] = oHLCDataItem1;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem1;
      oHLCDataItemArray0[3] = oHLCDataItem1;
      int int0 = oHLCDataItem0.compareTo(oHLCDataItem1);
      assertEquals("Fri Jul 29 00:18:00 GMT 2310", mockDate0.toString());
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotSame(oHLCDataItem1, oHLCDataItem0);
      assertEquals(0, int0);
      
      oHLCDataItemArray0[4] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem1, oHLCDataItemArray0);
      assertEquals("Fri Jul 29 00:18:00 GMT 2310", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      defaultOHLCDataset0.validateObject();
      assertEquals("Fri Jul 29 00:18:00 GMT 2310", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(5, oHLCDataItemArray0.length);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotSame(oHLCDataItem1, oHLCDataItem0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      assertEquals("Fri Jul 29 00:18:00 GMT 2310", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(378.0, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(range0);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotSame(oHLCDataItem1, oHLCDataItem0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertEquals("Fri Jul 29 00:18:00 GMT 2310", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(number0);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotSame(oHLCDataItem1, oHLCDataItem0);
      assertEquals(1.074738348E13, number0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      assertEquals("Fri Jul 29 00:18:00 GMT 2310", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(number1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertFalse(number1.equals((Object)number0));
      assertNotSame(oHLCDataItem1, oHLCDataItem0);
      assertEquals(Double.NEGATIVE_INFINITY, number1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(6.2702533055033145, 6.2702533055033145, "");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(6.2702533055033145, range0.getUpperBound(), 0.01);
      assertEquals(6.2702533055033145, range0.getLowerBound(), 0.01);
      assertEquals(6.2702533055033145, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      
      boolean boolean0 = stack0.add("");
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(""));
      assertTrue(boolean0);
      
      Range range1 = Range.expandToInclude(range0, 6.2702533055033145);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(6.2702533055033145, range0.getUpperBound(), 0.01);
      assertEquals(6.2702533055033145, range0.getLowerBound(), 0.01);
      assertEquals(6.2702533055033145, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(6.2702533055033145, range1.getUpperBound(), 0.01);
      assertEquals(6.2702533055033145, range1.getLowerBound(), 0.01);
      assertEquals(6.2702533055033145, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      assertSame(range0, range1);
      assertSame(range1, range0);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range0, true);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(6.2702533055033145, range0.getUpperBound(), 0.01);
      assertEquals(6.2702533055033145, range0.getLowerBound(), 0.01);
      assertEquals(6.2702533055033145, range0.getCentralValue(), 0.01);
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(6.2702533055033145, range2.getUpperBound(), 0.01);
      assertEquals(6.2702533055033145, range2.getLowerBound(), 0.01);
      assertEquals(6.2702533055033145, range2.getCentralValue(), 0.01);
      assertNotNull(range2);
      assertTrue(stack0.contains(""));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertNotSame(range0, range2);
      assertSame(range0, range1);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) "");
      assertNotNull(pieDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 6.2702533055033145;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 6.2702533055033145;
      doubleArray0[3] = 1247.0;
      doubleArray0[4] = 3793.106213671996;
      doubleArray0[5] = 6.2702533055033145;
      doubleArray0[6] = 6.2702533055033145;
      doubleArray0[7] = 6.2702533055033145;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertEquals(8, doubleArray0.length);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {6.2702533055033145, 0.0, 6.2702533055033145, 1247.0, 3793.106213671996, 6.2702533055033145, 6.2702533055033145, 6.2702533055033145}, doubleArray0, 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-4496.0), (-1891.2702175), 1059, 6.2702533055033145);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertEquals((-4496.0), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals((-5.424135898080309E23), xYSeries0.getMaxY(), 0.01);
      assertEquals((-2.3279444659603943E26), xYSeries0.getMinY(), 0.01);
      assertEquals((-1891.2702175), xYSeries0.getMaxX(), 0.01);
      assertEquals(1059, xYSeries0.getItemCount());
      assertEquals(8, doubleArray0.length);
      assertNotNull(xYSeries0);
      assertArrayEquals(new double[] {6.2702533055033145, 0.0, 6.2702533055033145, 1247.0, 3793.106213671996, 6.2702533055033145, 6.2702533055033145, 6.2702533055033145}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      Minute minute0 = new Minute();
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      Minute minute1 = (Minute)minute0.next();
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(22, minute1.getMinute());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute1);
      assertFalse(minute1.equals((Object)minute0));
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      
      jDBCPieDataset0.setValue((Comparable) minute1, (double) 0);
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(22, minute1.getMinute());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((Comparable) minute1, (KeyedValues) jDBCPieDataset0);
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(22, minute1.getMinute());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(defaultCategoryDataset0);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, (-41), 59);
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(22, minute1.getMinute());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals((-41), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(59, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(slidingCategoryDataset0);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(slidingCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-65.0), 3982.939150566435, (byte) (-99), (-65.0), 1079.49848675561);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 648.53791409, 1.074738348E13, 988.64935171, (-6.0), 4574.612718478282);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1941.9695752832174, range0.getCentralValue(), 0.01);
      assertEquals(4081.939150566435, range0.getLength(), 0.01);
      assertEquals((-99.0), range0.getLowerBound(), 0.01);
      assertEquals(3982.939150566435, range0.getUpperBound(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[6];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte) (-54);
      doubleArray0[1] = (double) (byte) (-54);
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (byte) (-54);
      doubleArray1[1] = (double) (byte) (-54);
      doubleArray1[2] = (double) (byte) (-54);
      doubleArray1[3] = (double) (byte) (-54);
      doubleArray1[4] = (double) (byte) (-54);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(dateArray0[0], dateArray0, doubleArray1, doubleArray0, doubleArray1, doubleArray1, doubleArray0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(6, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {(-54.0), (-54.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-54.0), (-54.0), (-54.0), (-54.0), (-54.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Range range0 = categoryTableXYDataset0.getDomainBounds(false);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(range0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(false));
      
      Stack<DefaultHighLowDataset> stack1 = new Stack<DefaultHighLowDataset>();
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertNotNull(stack1);
      
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertNotNull(taskSeriesCollection1);
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotNull(range2);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 433.3356923176;
      doubleArray0[1] = 2739.166688707774;
      doubleArray0[2] = 212.0;
      doubleArray0[3] = 4242.415414;
      doubleArray0[4] = (-7.18819597E11);
      doubleArray0[5] = 1.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(6, doubleArray0.length);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {433.3356923176, 2739.166688707774, 212.0, 4242.415414, (-7.18819597E11), 1.0}, doubleArray0, 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-857.5755670869454), 939.8164585, 51, 1.0);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(6, doubleArray0.length);
      assertNotNull(xYSeriesCollection0);
      assertArrayEquals(new double[] {433.3356923176, 2739.166688707774, 212.0, 4242.415414, (-7.18819597E11), 1.0}, doubleArray0, 0.01);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(5.6077945338691974E23, range3.getLength(), 0.01);
      assertEquals((-5.607794539015049E23), range3.getLowerBound(), 0.01);
      assertEquals((-5.145851329157301E14), range3.getUpperBound(), 0.01);
      assertEquals((-2.80389727208045E23), range3.getCentralValue(), 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotNull(range3);
      assertArrayEquals(new double[] {433.3356923176, 2739.166688707774, 212.0, 4242.415414, (-7.18819597E11), 1.0}, doubleArray0, 0.01);
      assertFalse(range3.equals((Object)range2));
      assertNotSame(range3, range2);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, 51);
      assertNotNull(defaultPieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack1, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      MockDate mockDate0 = new MockDate((-6), (-6), (-6), (-6), (-6));
      assertNotNull(mockDate0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      jDBCCategoryDataset0.addValue((double) (-6), (Comparable) mockDate0, (Comparable) mockDate0);
      assertEquals("Fri Jun 23 17:54:00 GMT 1893", mockDate0.toString());
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-6);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) (-6);
      doubleArray0[3] = (double) (-6);
      doubleArray0[4] = (double) (-6);
      doubleArray0[5] = (double) (-6);
      doubleArray0[6] = (double) (-6);
      doubleArray0[7] = (double) (-6);
      doubleArray0[8] = (double) (-6);
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = (double) (-6);
      Instant instant0 = MockInstant.ofEpochSecond(1134L);
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertEquals("Thu Jan 01 00:18:54 GMT 1970", date0.toString());
      assertNotNull(date0);
      
      doubleArray1[2] = (double) (-6);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1);
      assertEquals("Fri Jun 23 17:54:00 GMT 1893", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(3, doubleArray1.length);
      assertEquals(2, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {Double.NaN, (-6.0), (-6.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-6.0), Double.NaN, (-6.0), (-6.0), (-6.0), (-6.0), (-6.0), (-6.0), (-6.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
      assertEquals("Fri Jun 23 17:54:00 GMT 1893", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(3, doubleArray1.length);
      assertEquals(2, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      assertNotNull(number0);
      assertArrayEquals(new double[] {Double.NaN, (-6.0), (-6.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-6.0), Double.NaN, (-6.0), (-6.0), (-6.0), (-6.0), (-6.0), (-6.0), (-6.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals((-6.0), number0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      MockDate mockDate0 = new MockDate(378, (-1), (-1), (-1), 378);
      assertNotNull(mockDate0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-2474.352863480769), 3982.939150566435, 3982.939150566435, 1674.5591013106, 1674.5591013106);
      assertEquals("Thu Nov 29 05:18:00 GMT 2277", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 378, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 988.64935171, 378);
      assertEquals("Thu Nov 29 05:18:00 GMT 2277", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      oHLCDataItemArray0[0] = oHLCDataItem1;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem1;
      oHLCDataItemArray0[3] = oHLCDataItem1;
      int int0 = oHLCDataItem0.compareTo(oHLCDataItem1);
      assertEquals("Thu Nov 29 05:18:00 GMT 2277", mockDate0.toString());
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotSame(oHLCDataItem1, oHLCDataItem0);
      assertEquals(0, int0);
      
      oHLCDataItemArray0[4] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem1, oHLCDataItemArray0);
      assertEquals("Thu Nov 29 05:18:00 GMT 2277", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      defaultOHLCDataset0.validateObject();
      assertEquals("Thu Nov 29 05:18:00 GMT 2277", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(5, oHLCDataItemArray0.length);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotSame(oHLCDataItem1, oHLCDataItem0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      assertEquals("Thu Nov 29 05:18:00 GMT 2277", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3982.939150566435, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(range0);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotSame(oHLCDataItem1, oHLCDataItem0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(number0);
      
      Number number1 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertEquals("Thu Nov 29 05:18:00 GMT 2277", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(number1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotSame(oHLCDataItem1, oHLCDataItem0);
      assertEquals(9.71673588E12, number1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 2;
      MatrixSeries matrixSeries0 = new MatrixSeries("org.jfree.data.general.DatasetUtilities", 2, 2);
      assertEquals(2, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(4, matrixSeries0.getItemCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(2, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(4, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      assertEquals(2, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(4, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
      assertEquals(1.0, number0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNull(range0);
      
      Comparable<IntervalXYDelegate>[] comparableArray0 = (Comparable<IntervalXYDelegate>[]) Array.newInstance(Comparable.class, 3);
      long long0 = 0L;
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-1L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals((-1L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-1L), regularTimePeriod0.getSerialIndex());
      assertEquals((-1L), regularTimePeriod0.getFirstMillisecond());
      assertNotNull(regularTimePeriod0);
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      
      comparableArray0[0] = (Comparable<IntervalXYDelegate>) regularTimePeriod0;
      double double0 = 1.0;
      SimpleHistogramBin simpleHistogramBin0 = null;
      try {
        simpleHistogramBin0 = new SimpleHistogramBin(1.0, 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid bounds; 1.0 to 1.0
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramBin", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      MockDate mockDate0 = new MockDate((-6), (-6), (-6), (-6), (-6));
      assertNotNull(mockDate0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      jDBCCategoryDataset0.addValue((double) (-6), (Comparable) mockDate0, (Comparable) mockDate0);
      assertEquals("Fri Jun 23 17:54:00 GMT 1893", mockDate0.toString());
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      KeyToGroupMap keyToGroupMap1 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap1.getGroupCount());
      assertNotNull(keyToGroupMap1);
      assertTrue(keyToGroupMap1.equals((Object)keyToGroupMap0));
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNotNull(vectorSeriesCollection0);
      
      Stack<DefaultBoxAndWhiskerXYDataset> stack0 = new Stack<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(jDBCCategoryDataset0, false);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals((-6.0), range0.getUpperBound(), 0.01);
      assertEquals((-6.0), range0.getCentralValue(), 0.01);
      assertEquals((-6.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) vectorSeriesCollection0, (List) stack0, range0, false);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals((-6.0), range0.getUpperBound(), 0.01);
      assertEquals((-6.0), range0.getCentralValue(), 0.01);
      assertEquals((-6.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNull(range1);
      
      System.setCurrentTimeMillis((-1L));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(0.5, 1.0, "");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      categoryTableXYDataset0.setSelectionState(timeSeriesCollection0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      
      boolean boolean0 = stack0.add("");
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.contains(""));
      assertTrue(boolean0);
      
      Range range1 = Range.combine(range0, range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      Range range2 = Range.expandToInclude(range0, 0.5);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.75, range2.getCentralValue(), 0.01);
      assertEquals(0.5, range2.getLength(), 0.01);
      assertEquals(0.5, range2.getLowerBound(), 0.01);
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertNotNull(range2);
      assertTrue(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      
      System.setCurrentTimeMillis(1L);
      Range range3 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, true);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(1.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(0.5, range3.getCentralValue(), 0.01);
      assertEquals(1.0, range3.getLength(), 0.01);
      assertNotNull(range3);
      assertTrue(stack0.contains(""));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 37, 366);
      assertEquals(37, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(366, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(366));
      
      boolean boolean0 = linkedList0.add((Object) slidingCategoryDataset0);
      assertEquals(37, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(366, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(366));
      assertTrue(boolean0);
      
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0, (List) linkedList0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(0.8420628257148763, 0.8420628257148763, "");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(number0);
      assertEquals(0.8420628257148763, number0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.8420628257148763, range0.getUpperBound(), 0.01);
      assertEquals(0.42103141285743817, range0.getCentralValue(), 0.01);
      assertEquals(0.8420628257148763, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xYIntervalSeriesCollection0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      MockDate mockDate0 = new MockDate(378, (-1), (-1), (-1), 378);
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[6];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[0] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      dateArray0[5] = (Date) mockDate0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-3241.97864848);
      doubleArray0[1] = (double) 378;
      doubleArray0[2] = (-2104.9943907);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) 378;
      doubleArray0[6] = 1.5;
      doubleArray0[7] = (double) (-1);
      doubleArray0[8] = (-1370.54973429659);
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 378;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("U`<hF66H\"yf,e|6", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1, doubleArray1);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(6, dateArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {378.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-3241.97864848), 378.0, (-2104.9943907), (-1.0), (-1.0), 378.0, 1.5, (-1.0), (-1370.54973429659)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(6, dateArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertNotNull(number0);
      assertArrayEquals(new double[] {378.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-3241.97864848), 378.0, (-2104.9943907), (-1.0), (-1.0), 378.0, 1.5, (-1.0), (-1370.54973429659)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(378.0, number0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("Key not found: ");
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[Key not found: ]", stack0.toString());
      assertTrue(stack0.contains("Key not found: "));
      assertTrue(boolean0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("Key not found: "));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean1 = linkedList0.removeLastOccurrence("Key not found: ");
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("Key not found: "));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) linkedList0, true);
      assertEquals(0, linkedList0.size());
      assertNull(range0);
      assertFalse(linkedList0.contains("Key not found: "));
      
      boolean boolean2 = linkedList0.add((Object) "");
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains("Key not found: "));
      assertTrue(linkedList0.contains(""));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) linkedList0, true);
      assertEquals(1, linkedList0.size());
      assertNull(range1);
      assertFalse(linkedList0.contains("Key not found: "));
      assertTrue(linkedList0.contains(""));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      double double0 = categoryTableXYDataset0.getDomainLowerBound(false);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      categoryTableXYDataset0.add(Double.NaN, Double.NaN, "&L2");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset1);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      Range range0 = categoryTableXYDataset1.getDomainBounds(false);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertNull(range0);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(Double.NaN));
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertNull(range1);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertNotNull(range2);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, false);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(range3);
      assertFalse(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      int int0 = 488;
      int int1 = 0;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 488, 0);
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(488, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Minute minute0 = new Minute();
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(minute0);
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      defaultBoxAndWhiskerXYDataset0.setOutlierCoefficient((-0.5));
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals((-0.5), defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultBoxAndWhiskerXYDataset0);
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals((-0.5), defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNull(number0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals((-0.5), defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertTrue(boolean0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 0, 34);
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(34, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0, (double) 59);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Number[][] numberArray0 = new Number[9][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("U`<hF66H\"yf,e|6", "U`<hF66H\"yf,e|6", numberArray0);
      assertEquals(9, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      Byte byte0 = new Byte((byte) (-54));
      assertNotNull(byte0);
      assertEquals((byte) (-54), (byte)byte0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(9, numberArray0.length);
      assertTrue(boolean0);
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-54);
      doubleArray0[1] = (double) (byte) (-54);
      doubleArray0[2] = (double) (byte) (-54);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {(-54.0), (-54.0), (-54.0)}, doubleArray0, 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(number0);
      assertArrayEquals(new double[] {(-54.0), (-54.0), (-54.0)}, doubleArray0, 0.01);
      assertEquals((-54.0), number0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(range0);
      assertArrayEquals(new double[] {(-54.0), (-54.0), (-54.0)}, doubleArray0, 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (byte) (-54), (-232));
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals((-232), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-54), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingGanttCategoryDataset0, (-232));
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals((-232), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-54), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("Key not found: ");
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[Key not found: ]", stack0.toString());
      assertTrue(stack0.contains("Key not found: "));
      assertTrue(boolean0);
      
      Range range0 = new Range(2560.6, 2560.6);
      assertEquals(2560.6, range0.getUpperBound(), 0.01);
      assertEquals(2560.6, range0.getCentralValue(), 0.01);
      assertEquals(2560.6, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2560.6;
      doubleArray0[1] = 2560.6;
      Range range1 = Range.combine(range0, range0);
      assertEquals(2560.6, range0.getUpperBound(), 0.01);
      assertEquals(2560.6, range0.getCentralValue(), 0.01);
      assertEquals(2560.6, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2560.6, range1.getUpperBound(), 0.01);
      assertEquals(2560.6, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(2560.6, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      LinkedHashSet<XIntervalSeriesCollection> linkedHashSet0 = new LinkedHashSet<XIntervalSeriesCollection>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, (List) vector0, range0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Vector<Short> vector0 = new Vector<Short>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Short short0 = new Short((short)45);
      assertNotNull(short0);
      assertEquals((short)45, (short)short0);
      
      boolean boolean0 = vector0.add(short0);
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals("[45]", vector0.toString());
      assertEquals(1, vector0.size());
      assertTrue(vector0.contains((short)45));
      assertTrue(boolean0);
      
      int int0 = taskSeriesCollection0.getColumnIndex(short0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals((-1), int0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) vector0, true);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals("[45]", vector0.toString());
      assertEquals(1, vector0.size());
      assertNull(range0);
      assertTrue(vector0.contains((short)45));
      
      Short short1 = new Short((short)45);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)45, (short)short1);
      
      XYDataset xYDataset0 = null;
      boolean boolean1 = false;
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(taskSeriesCollection0, false);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, (List) vector0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      Range range0 = new Range(1.0, 1.0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      PriorityQueue<XIntervalSeriesCollection> priorityQueue0 = new PriorityQueue<XIntervalSeriesCollection>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.capacity());
      assertNotNull(vector0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) vector0, range0, true);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.capacity());
      assertNull(range1);
      
      Comparable<TimeSeriesCollection>[] comparableArray0 = (Comparable<TimeSeriesCollection>[]) Array.newInstance(Comparable.class, 0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      KeyToGroupMap keyToGroupMap1 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap1.getGroupCount());
      assertNotNull(keyToGroupMap1);
      assertTrue(keyToGroupMap1.equals((Object)keyToGroupMap0));
      
      KeyToGroupMap keyToGroupMap2 = (KeyToGroupMap)keyToGroupMap0.clone();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1, keyToGroupMap2.getGroupCount());
      assertNotNull(keyToGroupMap2);
      assertTrue(keyToGroupMap0.equals((Object)keyToGroupMap1));
      assertTrue(keyToGroupMap2.equals((Object)keyToGroupMap1));
      assertTrue(keyToGroupMap2.equals((Object)keyToGroupMap0));
      assertNotSame(keyToGroupMap0, keyToGroupMap1);
      assertNotSame(keyToGroupMap0, keyToGroupMap2);
      assertNotSame(keyToGroupMap2, keyToGroupMap0);
      assertNotSame(keyToGroupMap2, keyToGroupMap1);
      
      MockDate mockDate0 = new MockDate((-656), (-912), 2042, 1856, (-656));
      assertNotNull(mockDate0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      jDBCCategoryDataset0.addValue((-31.218938174273966), (Comparable) mockDate0, (Comparable) mockDate0);
      assertEquals("Thu Oct 18 21:04:00 GMT 1173", mockDate0.toString());
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      KeyToGroupMap keyToGroupMap3 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap3.getGroupCount());
      assertNotNull(keyToGroupMap3);
      assertTrue(keyToGroupMap3.equals((Object)keyToGroupMap0));
      assertTrue(keyToGroupMap3.equals((Object)keyToGroupMap2));
      assertTrue(keyToGroupMap3.equals((Object)keyToGroupMap1));
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) jDBCCategoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(31.218938174273966, range0.getLength(), 0.01);
      assertEquals((-31.218938174273966), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-15.609469087136983), range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertTrue(keyToGroupMap0.equals((Object)keyToGroupMap2));
      assertTrue(keyToGroupMap0.equals((Object)keyToGroupMap3));
      assertTrue(keyToGroupMap0.equals((Object)keyToGroupMap1));
      assertNotSame(keyToGroupMap0, keyToGroupMap1);
      assertNotSame(keyToGroupMap0, keyToGroupMap3);
      assertNotSame(keyToGroupMap0, keyToGroupMap2);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) jDBCCategoryDataset0, false);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-31.218938174273966), range1.getUpperBound(), 0.01);
      assertEquals((-31.218938174273966), range1.getCentralValue(), 0.01);
      assertEquals((-31.218938174273966), range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(range0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("");
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(""));
      assertTrue(boolean0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, false);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNull(range1);
      assertTrue(stack0.contains(""));
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, false);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(range2);
      
      Range range3 = Range.expandToInclude((Range) null, (-84.0396586694));
      assertEquals((-84.0396586694), range3.getUpperBound(), 0.01);
      assertEquals((-84.0396586694), range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals((-84.0396586694), range3.getLowerBound(), 0.01);
      assertNotNull(range3);
      
      Stack<CategoryTableXYDataset> stack1 = new Stack<CategoryTableXYDataset>();
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertNotNull(stack1);
      assertFalse(stack1.contains(categoryTableXYDataset0));
      
      Range range4 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, false);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNull(range4);
      assertTrue(stack0.contains(""));
      
      Range range5 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack1, false);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertNull(range5);
      assertFalse(stack1.contains(categoryTableXYDataset0));
      
      Double double0 = new Double((-84.0396586694));
      assertNotNull(double0);
      assertEquals((-84.0396586694), (double)double0, 0.01);
      
      double[][] doubleArray0 = new double[6][6];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-84.0396586694);
      doubleArray1[1] = (-84.0396586694);
      doubleArray1[2] = (-84.0396586694);
      doubleArray1[3] = (-912.0);
      doubleArray1[4] = (-84.0396586694);
      doubleArray1[5] = (-84.0396586694);
      doubleArray1[6] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.0;
      doubleArray2[1] = (-912.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (-912.0);
      doubleArray4[1] = (-912.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = (-84.0396586694);
      doubleArray5[1] = (-912.0);
      doubleArray5[2] = (-912.0);
      doubleArray5[3] = 1.0;
      doubleArray5[4] = (-84.0396586694);
      doubleArray5[5] = 1.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      
      doubleArray6[0] = 1.5;
      doubleArray6[1] = (-84.0396586694);
      doubleArray6[2] = (-84.0396586694);
      doubleArray6[3] = 1.0;
      doubleArray6[4] = (-912.0);
      doubleArray6[5] = (-84.0396586694);
      doubleArray6[6] = 4102.0;
      doubleArray0[5] = doubleArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Range range0 = new Range(1.0, 1.0);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(0.0, 852.153, "(");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(852.153, range0.getUpperBound(), 0.01);
      assertEquals(852.153, range0.getLowerBound(), 0.01);
      assertEquals(852.153, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      categoryTableXYDataset0.setSelectionState(timeSeriesCollection0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      CategoryTableXYDataset categoryTableXYDataset1 = (CategoryTableXYDataset)categoryTableXYDataset0.clone();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      assertFalse(stack0.contains("("));
      
      boolean boolean0 = stack0.add("(");
      assertEquals("[(]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains("("));
      assertTrue(boolean0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, range1.getUpperBound(), 0.01);
      assertEquals((-0.5), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertTrue(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotSame(range1, range0);
      
      Range range2 = Range.combine(range0, range1);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(852.153, range0.getUpperBound(), 0.01);
      assertEquals(852.153, range0.getLowerBound(), 0.01);
      assertEquals(852.153, range0.getCentralValue(), 0.01);
      assertEquals(0.5, range1.getUpperBound(), 0.01);
      assertEquals((-0.5), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals(425.8265, range2.getCentralValue(), 0.01);
      assertEquals(852.653, range2.getLength(), 0.01);
      assertEquals(852.153, range2.getUpperBound(), 0.01);
      assertEquals((-0.5), range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      assertTrue(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      
      Range range3 = Range.expandToInclude(range0, 571.2752776);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(852.153, range0.getUpperBound(), 0.01);
      assertEquals(852.153, range0.getLowerBound(), 0.01);
      assertEquals(852.153, range0.getCentralValue(), 0.01);
      assertEquals(852.153, range3.getUpperBound(), 0.01);
      assertEquals(711.7141388, range3.getCentralValue(), 0.01);
      assertEquals(280.87772240000004, range3.getLength(), 0.01);
      assertEquals(571.2752776, range3.getLowerBound(), 0.01);
      assertNotNull(range3);
      assertTrue(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      
      Range range4 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, Double.NEGATIVE_INFINITY);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(Double.NaN, range4.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range4.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range4.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range4.getCentralValue(), 0.01);
      assertNotNull(range4);
      assertTrue(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range1));
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertNotSame(range4, range0);
      assertNotSame(range4, range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeSeriesCollection0, (List) stack0, range2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'series' argument is out of bounds (-1).
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Minute minute0 = new Minute();
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(minute0);
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertTrue(boolean0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0, (double) 0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset1 = new JDBCCategoryDataset(connection1);
      assertTrue(jDBCCategoryDataset1.getTranspose());
      assertNotNull(jDBCCategoryDataset1);
      assertTrue(jDBCCategoryDataset1.equals((Object)jDBCCategoryDataset0));
      
      jDBCCategoryDataset1.addValue((double) 0L, (Comparable) localDate0, (Comparable) localDate0);
      assertTrue(jDBCCategoryDataset1.getTranspose());
      assertFalse(jDBCCategoryDataset1.equals((Object)jDBCCategoryDataset0));
      assertNotSame(jDBCCategoryDataset1, jDBCCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) jDBCCategoryDataset1, keyToGroupMap0);
      assertTrue(jDBCCategoryDataset1.getTranspose());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertFalse(jDBCCategoryDataset1.equals((Object)jDBCCategoryDataset0));
      assertNotSame(jDBCCategoryDataset1, jDBCCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      categoryTableXYDataset0.remove((Number) integer0, "6Q1-s=ylYV:L-nRPt", false);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add((-84.0396586694), (-84.0396586694), "");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-84.0396586694), range0.getLowerBound(), 0.01);
      assertEquals((-84.0396586694), range0.getUpperBound(), 0.01);
      assertEquals((-84.0396586694), range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      
      boolean boolean0 = stack0.add("");
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.contains(""));
      assertFalse(stack0.contains("6Q1-s=ylYV:L-nRPt"));
      assertTrue(boolean0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, false);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals((-84.0396586694), range1.getLowerBound(), 0.01);
      assertEquals((-84.0396586694), range1.getUpperBound(), 0.01);
      assertEquals((-84.0396586694), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertTrue(stack0.contains(""));
      assertFalse(stack0.contains("6Q1-s=ylYV:L-nRPt"));
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, false);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-84.0396586694), range2.getUpperBound(), 0.01);
      assertEquals((-84.0396586694), range2.getCentralValue(), 0.01);
      assertEquals((-84.0396586694), range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      
      Range range3 = Range.expandToInclude(range0, Double.NEGATIVE_INFINITY);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-84.0396586694), range0.getLowerBound(), 0.01);
      assertEquals((-84.0396586694), range0.getUpperBound(), 0.01);
      assertEquals((-84.0396586694), range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range3.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range3.getCentralValue(), 0.01);
      assertEquals((-84.0396586694), range3.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range3.getLowerBound(), 0.01);
      assertNotNull(range3);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      
      Stack<CategoryTableXYDataset> stack1 = new Stack<CategoryTableXYDataset>();
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertNotNull(stack1);
      assertFalse(stack1.contains(categoryTableXYDataset0));
      
      Range range4 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, true);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals((-83.5396586694), range4.getUpperBound(), 0.01);
      assertEquals((-84.0396586694), range4.getCentralValue(), 0.01);
      assertEquals((-84.5396586694), range4.getLowerBound(), 0.01);
      assertEquals(1.0, range4.getLength(), 0.01);
      assertNotNull(range4);
      assertTrue(stack0.contains(""));
      assertFalse(stack0.contains("6Q1-s=ylYV:L-nRPt"));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range0));
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      
      Range range5 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack1, false);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertNull(range5);
      assertFalse(stack1.contains(categoryTableXYDataset0));
      
      Range range6 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, false);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals((-84.0396586694), range6.getLowerBound(), 0.01);
      assertEquals((-84.0396586694), range6.getUpperBound(), 0.01);
      assertEquals((-84.0396586694), range6.getCentralValue(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertNotNull(range6);
      assertTrue(stack0.contains(""));
      assertFalse(stack0.contains("6Q1-s=ylYV:L-nRPt"));
      assertFalse(range6.equals((Object)range3));
      assertTrue(range6.equals((Object)range1));
      assertTrue(range6.equals((Object)range0));
      assertTrue(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range4));
      assertNotSame(range6, range2);
      assertNotSame(range6, range3);
      assertNotSame(range6, range1);
      assertNotSame(range6, range0);
      assertNotSame(range6, range4);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(number0);
      assertEquals((-84.0396586694), number0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("Requi#es 'start' < 'end'.");
      assertEquals("[Requi#es 'start' < 'end'.]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains("Requi#es 'start' < 'end'."));
      assertTrue(boolean0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("Requi#es 'start' < 'end'.");
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("Requi#es 'start' < 'end'."));
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((-2093.0), (-2093.0), "Null 'type' argument");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains("Null 'type' argument"));
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNull(range0);
      
      Stack<String> stack1 = new Stack<String>();
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertEquals("[]", stack1.toString());
      assertNotNull(stack1);
      assertFalse(stack1.contains("Null 'type' argument"));
      assertFalse(stack1.equals((Object)stack0));
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection((MatrixSeries) null);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, false);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-2093.0), range1.getUpperBound(), 0.01);
      assertEquals((-2093.0), range1.getLowerBound(), 0.01);
      assertEquals((-2093.0), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      Stream<String> stream0 = stack0.stream();
      assertEquals("[Requi#es 'start' < 'end'.]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertNotNull(stream0);
      assertFalse(stack0.contains("Null 'type' argument"));
      assertTrue(stack0.contains("Requi#es 'start' < 'end'."));
      assertFalse(stack0.equals((Object)stack1));
      assertNotSame(stack0, stack1);
      
      Range range2 = Range.expandToInclude((Range) null, Double.NEGATIVE_INFINITY);
      assertEquals(Double.NEGATIVE_INFINITY, range2.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range2.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range2.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range1));
      assertNotSame(range2, range1);
      
      Stack<CategoryTableXYDataset> stack2 = new Stack<CategoryTableXYDataset>();
      assertTrue(stack2.isEmpty());
      assertEquals("[]", stack2.toString());
      assertEquals(10, stack2.capacity());
      assertEquals(0, stack2.size());
      assertTrue(stack2.empty());
      assertNotNull(stack2);
      assertFalse(stack2.contains(categoryTableXYDataset0));
      
      Range range3 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) linkedList1, true);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(0, linkedList1.size());
      assertNull(range3);
      assertFalse(linkedList1.contains(false));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotSame(linkedList1, linkedList0);
      
      Range range4 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack0, false);
      assertEquals("[Requi#es 'start' < 'end'.]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals((-2093.0), range4.getUpperBound(), 0.01);
      assertEquals((-2093.0), range4.getLowerBound(), 0.01);
      assertEquals((-2093.0), range4.getCentralValue(), 0.01);
      assertNotNull(range4);
      assertFalse(stack0.contains("Null 'type' argument"));
      assertTrue(stack0.contains("Requi#es 'start' < 'end'."));
      assertFalse(stack0.equals((Object)stack1));
      assertFalse(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range1));
      assertNotSame(stack0, stack1);
      assertNotSame(range4, range1);
      assertNotSame(range4, range2);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      MockDate mockDate0 = new MockDate(0);
      assertNotNull(mockDate0);
      
      Week week0 = new Week(mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, week0.getWeek());
      assertEquals((-1L), week0.getLastMillisecond());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(0L, week0.getFirstMillisecond());
      assertEquals(1970, week0.getYearValue());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      Week week1 = (Week)week0.next();
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, week0.getWeek());
      assertEquals((-1L), week0.getLastMillisecond());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(0L, week0.getFirstMillisecond());
      assertEquals(1970, week0.getYearValue());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(2, week1.getWeek());
      assertEquals(1970, week1.getYearValue());
      assertEquals(104412L, week1.getSerialIndex());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotNull(week1);
      assertFalse(week1.equals((Object)week0));
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      
      defaultKeyedValuesDataset0.insertValue(0, (Comparable) week1, Double.POSITIVE_INFINITY);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, week0.getWeek());
      assertEquals((-1L), week0.getLastMillisecond());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(0L, week0.getFirstMillisecond());
      assertEquals(1970, week0.getYearValue());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(2, week1.getWeek());
      assertEquals(1970, week1.getYearValue());
      assertEquals(104412L, week1.getSerialIndex());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      assertEquals("SortOrder.DESCENDING", sortOrder0.toString());
      assertNotNull(sortOrder0);
      
      defaultKeyedValuesDataset0.sortByKeys(sortOrder0);
      assertEquals("SortOrder.DESCENDING", sortOrder0.toString());
      
      defaultKeyedValuesDataset0.validateObject();
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to org.jfree.data.SelectableValue
         //
         verifyException("org.jfree.data.pie.DefaultPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(0.5, 1.0, "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      categoryTableXYDataset0.setSelectionState(timeSeriesCollection0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      
      boolean boolean0 = stack0.add("");
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(""));
      assertTrue(boolean0);
      
      Range range1 = Range.combine(range0, range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      Range range2 = Range.expandToInclude(range0, Double.NEGATIVE_INFINITY);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range2.getLength(), 0.01);
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range2.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      assertTrue(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      
      Range range3 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-43.8476910439001));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-42.8476910439001), range3.getUpperBound(), 0.01);
      assertEquals((-43.8476910439001), range3.getLowerBound(), 0.01);
      assertEquals(1.0, range3.getLength(), 0.01);
      assertEquals((-43.3476910439001), range3.getCentralValue(), 0.01);
      assertNotNull(range3);
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      
      Range range4 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range2, false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(Double.POSITIVE_INFINITY, range2.getLength(), 0.01);
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range2.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(1.0, range4.getLowerBound(), 0.01);
      assertEquals(1.0, range4.getUpperBound(), 0.01);
      assertEquals(1.0, range4.getCentralValue(), 0.01);
      assertNotNull(range4);
      assertTrue(stack0.contains(""));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range3));
      assertTrue(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range3));
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range4);
      assertNotSame(range2, range4);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range4, range2);
      assertNotSame(range4, range1);
      assertNotSame(range4, range3);
      assertNotSame(range4, range0);
      
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      boolean boolean0 = linkedList1.add((Object) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, linkedList1.size());
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(boolean0);
      
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[12];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(12, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(12, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertEquals(12, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(12, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.removeSeries(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(0.8420628257148763, 0.8420628257148763, "");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(0.8420628257148763));
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      
      boolean boolean0 = stack0.add("Time");
      assertEquals("[Time]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.contains(""));
      assertTrue(stack0.contains("Time"));
      assertTrue(boolean0);
      
      Double double0 = new Double(0.8420628257148763);
      assertNotNull(double0);
      assertEquals(0.8420628257148763, (double)double0, 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.8420628257148763, range0.getLength(), 0.01);
      assertEquals(0.8420628257148763, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.42103141285743817, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.8420628257148763, range1.getUpperBound(), 0.01);
      assertEquals(0.8420628257148763, range1.getLowerBound(), 0.01);
      assertEquals(0.8420628257148763, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 34, 34);
      assertEquals(34, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(34, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Stack<String> stack1 = new Stack<String>();
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      
      boolean boolean0 = stack1.add("Ti]e");
      assertEquals(10, stack1.capacity());
      assertEquals(1, stack1.size());
      assertEquals("[Ti]e]", stack1.toString());
      assertFalse(stack1.isEmpty());
      assertFalse(stack1.empty());
      assertTrue(stack1.contains("Ti]e"));
      assertFalse(stack1.equals((Object)stack0));
      assertNotSame(stack1, stack0);
      assertTrue(boolean0);
      
      double[][] doubleArray0 = new double[4][9];
      double[] doubleArray1 = new double[1];
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[1] = (double) 212;
      doubleArray2[2] = 1282.4;
      doubleArray2[4] = (double) 212;
      doubleArray2[5] = (double) 212;
      doubleArray2[6] = (double) 212;
      doubleArray0[2] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 212;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray0[2] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = new Range(212.0, 212.0);
      assertEquals(212.0, range0.getUpperBound(), 0.01);
      assertEquals(212.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(212.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertEquals(0, doubleArray0.length);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      MockDate mockDate0 = new MockDate(378, (-1), (-1), (-1), 378);
      assertNotNull(mockDate0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains((-1)));
      
      Range range0 = new Range(378, Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(378.0, range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      PriorityQueue<XIntervalSeriesCollection> priorityQueue0 = new PriorityQueue<XIntervalSeriesCollection>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.capacity());
      assertNotNull(vector0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      double double0 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 304);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.0, double0, 0.01);
      
      Comparable<Integer>[] comparableArray0 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 1);
      Day day0 = new Day();
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertNotNull(day0);
      
      comparableArray0[0] = (Comparable<Integer>) day0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(comparableArray0, comparableArray0, (Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, comparableArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(249, "op'%");
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(249, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=op'%,offset=249,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("op'%", simpleTimeZone0.getID());
      assertNotNull(simpleTimeZone0);
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(249);
      assertEquals(249, spreadsheetDate0.toSerial());
      assertEquals(5, spreadsheetDate0.getDayOfMonth());
      assertEquals(9, spreadsheetDate0.getMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertNotNull(spreadsheetDate0);
      
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) (-1);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 249;
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = (double) 6;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 3;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (double) 2;
      doubleArray4[1] = (double) 2;
      doubleArray4[2] = (double) 1900;
      doubleArray4[3] = (double) 6;
      doubleArray4[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'rowData' argument.", "op'%", doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(1900.0, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(range0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("Null 'rowData' argument."));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) linkedList0, false);
      assertEquals(0, linkedList0.size());
      assertEquals(4, doubleArray0.length);
      assertNull(range1);
      assertFalse(linkedList0.contains("Null 'rowData' argument."));
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) linkedList0, true);
      assertEquals(0, linkedList0.size());
      assertEquals(4, doubleArray0.length);
      assertNull(range2);
      assertFalse(linkedList0.contains("Null 'rowData' argument."));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, (-2688), (-2688));
      assertEquals((-2688), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-2688), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("T'im");
      assertEquals("[T'im]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains("T'im"));
      assertTrue(boolean0);
      
      Range range0 = new Range(1239.0363069441937, 5029.746517826982);
      assertEquals(1239.0363069441937, range0.getLowerBound(), 0.01);
      assertEquals(5029.746517826982, range0.getUpperBound(), 0.01);
      assertEquals(3134.391412385588, range0.getCentralValue(), 0.01);
      assertEquals(3790.7102108827885, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertEquals(0, doubleArray0.length);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(0.5, (-1.0), "The number of row keys does not match the number of rows in the data array.");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      categoryTableXYDataset0.setSelectionState(timeSeriesCollection0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      assertFalse(stack0.contains("The number of row keys does not match the number of rows in the data array."));
      
      boolean boolean0 = stack0.add("The number of row keys does not match the number of rows in the data array.");
      assertEquals("[The number of row keys does not match the number of rows in the data array.]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains("The number of row keys does not match the number of rows in the data array."));
      assertTrue(boolean0);
      
      Range range1 = Range.expandToInclude(range0, (-1.0));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertSame(range0, range1);
      assertSame(range1, range0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 0.5);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, range2.getLength(), 0.01);
      assertEquals(0.5, range2.getUpperBound(), 0.01);
      assertEquals((-0.5), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeSeriesCollection0, (List) stack0, range0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'series' argument is out of bounds (-1).
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 1.0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.expandToInclude(range0, 279.29913);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(278.29913, range1.getLength(), 0.01);
      assertEquals(279.29913, range1.getUpperBound(), 0.01);
      assertEquals(140.149565, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      PriorityQueue<XIntervalSeriesCollection> priorityQueue0 = new PriorityQueue<XIntervalSeriesCollection>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) vector0, range0, true);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNull(range2);
      assertFalse(range0.equals((Object)range1));
      assertNotSame(range0, range1);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, (Comparable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(2560.6, 2560.6, "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2560.6, range0.getLowerBound(), 0.01);
      assertEquals(2560.6, range0.getUpperBound(), 0.01);
      assertEquals(2560.6, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      
      boolean boolean0 = stack0.add("");
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(""));
      assertTrue(boolean0);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(number0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset1 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset1);
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNull(range1);
      assertTrue(stack0.contains(""));
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.equals((Object)defaultBoxAndWhiskerCategoryDataset1));
      assertNotSame(defaultBoxAndWhiskerCategoryDataset0, defaultBoxAndWhiskerCategoryDataset1);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset1);
      assertNull(number1);
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      assertNotSame(defaultBoxAndWhiskerCategoryDataset1, defaultBoxAndWhiskerCategoryDataset0);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultXYZDataset0, true);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(range2);
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(2560.6, range3.getUpperBound(), 0.01);
      assertEquals(2560.6, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(2560.6, range3.getLowerBound(), 0.01);
      assertNotNull(range3);
      assertTrue(range3.equals((Object)range0));
      assertNotSame(range3, range0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2560.6;
      doubleArray0[1] = 2560.6;
      doubleArray0[2] = 2560.6;
      doubleArray0[3] = 2560.6;
      doubleArray0[4] = 2560.6;
      doubleArray0[5] = 2560.6;
      doubleArray0[6] = 2560.6;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(6, polynomialFunction2D0.getOrder());
      assertEquals(7, doubleArray0.length);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {2560.6, 2560.6, 2560.6, 2560.6, 2560.6, 2560.6, 2560.6}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 2560.6, 2560.6, (-934), 2560.6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      int int0 = categoryTableXYDataset0.getItemCount();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, int0);
      
      categoryTableXYDataset0.add((double) 0, (double) 0, "8QDj}dT*x0dW|zW%");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = categoryTableXYDataset0.getDomainBounds(false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(0));
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals((-0.5), range1.getLowerBound(), 0.01);
      assertEquals(0.5, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertNotNull(range3);
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range0));
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      
      Range range4 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, range4.getLength(), 0.01);
      assertEquals(0.5, range4.getUpperBound(), 0.01);
      assertEquals((-0.5), range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertNotNull(range4);
      assertTrue(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range2));
      assertNotSame(range4, range3);
      assertNotSame(range4, range0);
      assertNotSame(range4, range1);
      assertNotSame(range4, range2);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("8QDj}dT*x0dW|zW%", "8QDj}dT*x0dW|zW%", "8QDj}dT*x0dW|zW%");
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("8QDj}dT*x0dW|zW%", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("8QDj}dT*x0dW|zW%", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertNotNull(timePeriodValues0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("8QDj}dT*x0dW|zW%", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("8QDj}dT*x0dW|zW%", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timePeriodValuesCollection0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("8QDj}dT*x0dW|zW%", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("8QDj}dT*x0dW|zW%", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Minute minute0 = new Minute();
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(Double.POSITIVE_INFINITY, (double) 0, "dF/uUg$jW=");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      categoryTableXYDataset0.setSelectionState(timeSeriesCollection0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      assertFalse(stack0.contains("dF/uUg$jW="));
      
      boolean boolean0 = stack0.add("");
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains("dF/uUg$jW="));
      assertTrue(stack0.contains(""));
      assertTrue(boolean0);
      
      Range range1 = Range.expandToInclude(range0, 0.5);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range1.getLength(), 0.01);
      assertEquals(0.5, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.25, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 1.5);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.5, range2.getUpperBound(), 0.01);
      assertEquals(1.5, range2.getLowerBound(), 0.01);
      assertEquals(1.5, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      
      Range range3 = Range.expandToInclude(range2, (-43.173605518));
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.5, range2.getUpperBound(), 0.01);
      assertEquals(1.5, range2.getLowerBound(), 0.01);
      assertEquals(1.5, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-20.836802759), range3.getCentralValue(), 0.01);
      assertEquals(44.673605518, range3.getLength(), 0.01);
      assertEquals((-43.173605518), range3.getLowerBound(), 0.01);
      assertEquals(1.5, range3.getUpperBound(), 0.01);
      assertNotNull(range3);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      
      Range range4 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(Double.NaN, range4.getLength(), 0.01);
      assertEquals(Double.NaN, range4.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range4.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range4.getCentralValue(), 0.01);
      assertNotNull(range4);
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range2));
      assertNotSame(range4, range3);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range4, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      int int0 = categoryTableXYDataset0.getItemCount();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, int0);
      
      categoryTableXYDataset0.add((double) 0, (double) 0, "8QDj}dT*x0dW|zW%");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      categoryTableXYDataset0.setSelectionState(timeSeriesCollection0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      assertFalse(stack0.contains("8QDj}dT*x0dW|zW%"));
      
      boolean boolean0 = stack0.add("8QDj}dT*x0dW|zW%");
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[8QDj}dT*x0dW|zW%]", stack0.toString());
      assertTrue(stack0.contains("8QDj}dT*x0dW|zW%"));
      assertTrue(boolean0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("8QDj}dT*x0dW|zW%");
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertNotNull(timePeriodValues0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      Range range0 = timePeriodValuesCollection0.getDomainBounds(true);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNull(range0);
      
      Range range1 = Range.expandToInclude((Range) null, 909.62196);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(909.62196, range1.getLowerBound(), 0.01);
      assertEquals(909.62196, range1.getUpperBound(), 0.01);
      assertEquals(909.62196, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 909.62196);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(909.62196, range2.getUpperBound(), 0.01);
      assertEquals(909.62196, range2.getCentralValue(), 0.01);
      assertEquals(909.62196, range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      assertTrue(range2.equals((Object)range1));
      assertNotSame(range2, range1);
      
      Range range3 = Range.expandToInclude((Range) null, 0);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertNotNull(range3);
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      
      Range range4 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range3, true);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[8QDj}dT*x0dW|zW%]", stack0.toString());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertNotNull(range4);
      assertTrue(stack0.contains("8QDj}dT*x0dW|zW%"));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range1));
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range4);
      assertNotSame(range4, range2);
      assertNotSame(range4, range1);
      assertNotSame(range4, range3);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      double double0 = 2560.6;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(2560.6, 2560.6, "");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2560.6, range0.getLowerBound(), 0.01);
      assertEquals(2560.6, range0.getCentralValue(), 0.01);
      assertEquals(2560.6, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      
      boolean boolean0 = stack0.add("Unknown 'series' key.");
      assertEquals("[Unknown 'series' key.]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.contains(""));
      assertTrue(stack0.contains("Unknown 'series' key."));
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Minute minute0 = new Minute();
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      Number[][] numberArray0 = new Number[4][8];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = (Number) 0;
      numberArray1[1] = (Number) 59;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[2];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) 0;
      numberArray2[1] = (Number) 0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[0];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[1];
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray3));
      
      numberArray4[0] = (Number) 59;
      numberArray0[3] = numberArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, numberArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(249, "op'%");
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("op'%", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=op'%,offset=249,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(249, simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(249);
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(249, spreadsheetDate0.toSerial());
      assertEquals(5, spreadsheetDate0.getDayOfMonth());
      assertEquals(9, spreadsheetDate0.getMonth());
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertNotNull(spreadsheetDate0);
      
      double[][] doubleArray0 = new double[5][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 7;
      doubleArray1[1] = (double) 9999;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 4;
      doubleArray2[1] = (-389.52837);
      doubleArray2[2] = (double) 5;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 2;
      doubleArray3[1] = (double) 2;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (double) 0;
      doubleArray4[1] = (double) 1900;
      doubleArray4[2] = (-389.52837);
      doubleArray4[3] = (double) 3;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      MockDate mockDate0 = new MockDate(1273, 628, 1273);
      assertNotNull(mockDate0);
      
      Month month0 = new Month(mockDate0, timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("Tue Oct 24 00:00:00 GMT 3228", mockDate0.toString());
      assertEquals(3228, month0.getYearValue());
      assertEquals(10, month0.getMonth());
      assertEquals(38746L, month0.getSerialIndex());
      assertEquals(39724300800000L, month0.getFirstMillisecond());
      assertEquals(39724300800000L, month0.getLastMillisecond());
      assertNotNull(month0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(628));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean0 = linkedList0.add((Object) mockDate0);
      assertEquals("Tue Oct 24 00:00:00 GMT 3228", mockDate0.toString());
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(628));
      assertTrue(boolean0);
      
      boolean boolean1 = linkedList0.removeLastOccurrence(mockDate0);
      assertEquals("Tue Oct 24 00:00:00 GMT 3228", mockDate0.toString());
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(628));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, false);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertNull(range0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset1);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      
      boolean boolean2 = linkedList0.add((Object) xIntervalSeriesCollection0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertFalse(linkedList0.contains(628));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset1, (List) linkedList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XIntervalSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(6.2702533055033145, 6.2702533055033145, "");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(xYTaskDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(6.2702533055033145, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(5.7702533055033145, range0.getLowerBound(), 0.01);
      assertEquals(6.7702533055033145, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("Requires 'start' < 'end'.");
      assertFalse(stack0.isEmpty());
      assertEquals("[Requires 'start' < 'end'.]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains("Requires 'start' < 'end'."));
      assertTrue(boolean0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("Requires 'start' < 'end'.");
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, true);
      assertFalse(stack0.isEmpty());
      assertEquals("[Requires 'start' < 'end'.]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNull(range0);
      assertTrue(stack0.contains("Requires 'start' < 'end'."));
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(true));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean1 = linkedList0.add((Object) defaultStatisticalCategoryDataset0);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(true));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = linkedList0.removeLastOccurrence(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(true));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertFalse(stack0.isEmpty());
      assertEquals("[Requires 'start' < 'end'.]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      assertTrue(stack0.contains("Requires 'start' < 'end'."));
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 4733, 2);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(2, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(4733, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertFalse(stack0.isEmpty());
      assertEquals("[Requires 'start' < 'end'.]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertNull(range1);
      assertTrue(stack0.contains("Requires 'start' < 'end'."));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset1);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      
      boolean boolean3 = linkedList0.add((Object) defaultStatisticalCategoryDataset1);
      assertEquals(2, linkedList0.size());
      assertFalse(linkedList0.contains(4733));
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
      assertTrue(boolean3);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      XYDataset xYDataset0 = null;
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("(a<t2C,*XrG#X6Z5/ ");
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[(a<t2C,*XrG#X6Z5/ ]", stack0.toString());
      assertTrue(stack0.contains("(a<t2C,*XrG#X6Z5/ "));
      assertTrue(boolean0);
      
      Range range0 = new Range(Double.NaN, Double.NaN);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = Double.NaN;
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[(a<t2C,*XrG#X6Z5/ ]", stack0.toString());
      assertNull(range1);
      assertTrue(stack0.contains("(a<t2C,*XrG#X6Z5/ "));
      
      doubleArray0[0] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "Missing Q.", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset1 = (DefaultCategoryDataset)defaultCategoryDataset0.clone();
      assertEquals(1, doubleArray0.length);
      assertNotNull(defaultCategoryDataset1);
      assertTrue(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      categoryTableXYDataset0.remove((Number) integer0, "e-Y|Lv(HJ:yr!w~]?D", false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add((-447.27472801881026), (-447.27472801881026), "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("e-Y|Lv(HJ:yr!w~]?D"));
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-447.27472801881026), range0.getUpperBound(), 0.01);
      assertEquals((-447.27472801881026), range0.getCentralValue(), 0.01);
      assertEquals((-447.27472801881026), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      assertFalse(stack0.contains("e-Y|Lv(HJ:yr!w~]?D"));
      
      boolean boolean0 = stack0.add("");
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.contains(""));
      assertFalse(stack0.contains("e-Y|Lv(HJ:yr!w~]?D"));
      assertTrue(boolean0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, true);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals((-447.77472801881026), range1.getLowerBound(), 0.01);
      assertEquals((-446.77472801881026), range1.getUpperBound(), 0.01);
      assertEquals((-447.27472801881026), range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertTrue(stack0.contains(""));
      assertFalse(stack0.contains("e-Y|Lv(HJ:yr!w~]?D"));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-447.27472801881026), range2.getUpperBound(), 0.01);
      assertEquals((-447.27472801881026), range2.getCentralValue(), 0.01);
      assertEquals((-447.27472801881026), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      
      Range range3 = Range.expandToInclude(range1, 127.1613661336);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals((-447.77472801881026), range1.getLowerBound(), 0.01);
      assertEquals((-446.77472801881026), range1.getUpperBound(), 0.01);
      assertEquals((-447.27472801881026), range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals((-447.77472801881026), range3.getLowerBound(), 0.01);
      assertEquals((-160.30668094260514), range3.getCentralValue(), 0.01);
      assertEquals(574.9360941524103, range3.getLength(), 0.01);
      assertEquals(127.1613661336, range3.getUpperBound(), 0.01);
      assertNotNull(range3);
      assertTrue(stack0.contains(""));
      assertFalse(stack0.contains("e-Y|Lv(HJ:yr!w~]?D"));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      assertNotSame(range1, range3);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      
      boolean boolean1 = stack0.add((String) null);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[, null]", stack0.toString());
      assertEquals(2, stack0.size());
      assertTrue(stack0.contains(""));
      assertFalse(stack0.contains("e-Y|Lv(HJ:yr!w~]?D"));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Stack<CategoryTableXYDataset> stack1 = new Stack<CategoryTableXYDataset>();
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertNotNull(stack1);
      assertFalse(stack1.contains(categoryTableXYDataset0));
      
      Range range4 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[, null]", stack0.toString());
      assertEquals(2, stack0.size());
      assertEquals((-447.27472801881026), range4.getUpperBound(), 0.01);
      assertEquals((-447.27472801881026), range4.getLowerBound(), 0.01);
      assertEquals((-447.27472801881026), range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertNotNull(range4);
      assertTrue(stack0.contains(""));
      assertFalse(stack0.contains("e-Y|Lv(HJ:yr!w~]?D"));
      assertTrue(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range3));
      assertTrue(range4.equals((Object)range0));
      assertNotSame(range4, range0);
      assertNotSame(range4, range1);
      assertNotSame(range4, range3);
      assertNotSame(range4, range2);
      
      Range range5 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals((-447.27472801881026), range5.getLowerBound(), 0.01);
      assertEquals((-447.27472801881026), range5.getUpperBound(), 0.01);
      assertEquals((-447.27472801881026), range5.getCentralValue(), 0.01);
      assertNotNull(range5);
      assertTrue(range5.equals((Object)range4));
      assertTrue(range5.equals((Object)range2));
      assertTrue(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range3));
      assertNotSame(range5, range4);
      assertNotSame(range5, range0);
      assertNotSame(range5, range2);
      assertNotSame(range5, range1);
      assertNotSame(range5, range3);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1.5;
      doubleArray1[1] = 0.8;
      doubleArray1[2] = 720.170844068737;
      doubleArray1[3] = (-1194.37);
      doubleArray1[4] = 360.16;
      doubleArray1[5] = (-1771.450889457);
      doubleArray1[6] = 2685.26;
      doubleArray1[7] = 0.5;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("}]Z", "}]Z", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, (-664), 334);
      assertEquals((-664), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(334, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, doubleArray0.length);
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Integer integer0 = new Integer(3119);
      assertNotNull(integer0);
      assertEquals(3119, (int)integer0);
      
      categoryTableXYDataset0.remove((Number) integer0, "Index outside valid range.", false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(516.67827861, 516.67827861, "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("Index outside valid range."));
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(516.67827861, range0.getLowerBound(), 0.01);
      assertEquals(516.67827861, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(516.67827861, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack1 = new Stack<String>();
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertNotNull(stack1);
      assertFalse(stack1.contains(""));
      assertTrue(stack1.equals((Object)stack0));
      
      boolean boolean0 = stack0.add("");
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.contains("Index outside valid range."));
      assertTrue(stack0.contains(""));
      assertFalse(stack0.equals((Object)stack1));
      assertNotSame(stack0, stack1);
      assertTrue(boolean0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) stack1, true);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertNull(range1);
      assertFalse(stack1.contains("Index outside valid range."));
      assertFalse(stack1.equals((Object)stack0));
      assertNotSame(stack1, stack0);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(516.67827861, range2.getUpperBound(), 0.01);
      assertEquals(516.67827861, range2.getCentralValue(), 0.01);
      assertEquals(516.67827861, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertTrue(range2.equals((Object)range0));
      assertNotSame(range2, range0);
      
      Range range3 = Range.expandToInclude(range2, 2103.60050120073);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(516.67827861, range2.getUpperBound(), 0.01);
      assertEquals(516.67827861, range2.getCentralValue(), 0.01);
      assertEquals(516.67827861, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1586.92222259073, range3.getLength(), 0.01);
      assertEquals(1310.139389905365, range3.getCentralValue(), 0.01);
      assertEquals(516.67827861, range3.getLowerBound(), 0.01);
      assertEquals(2103.60050120073, range3.getUpperBound(), 0.01);
      assertNotNull(range3);
      assertTrue(range2.equals((Object)range0));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      
      boolean boolean1 = stack1.add((String) null);
      assertEquals("[null]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.isEmpty());
      assertEquals(1, stack1.size());
      assertFalse(stack1.empty());
      assertFalse(stack1.contains("Index outside valid range."));
      assertFalse(stack1.equals((Object)stack0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(stack1, stack0);
      assertTrue(boolean1);
      
      Stack<CategoryTableXYDataset> stack2 = new Stack<CategoryTableXYDataset>();
      assertTrue(stack2.empty());
      assertTrue(stack2.isEmpty());
      assertEquals(10, stack2.capacity());
      assertEquals("[]", stack2.toString());
      assertEquals(0, stack2.size());
      assertNotNull(stack2);
      assertFalse(stack2.contains(categoryTableXYDataset0));
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains("Index outside valid range."));
      
      Range range4 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) linkedList1, false);
      assertEquals(0, linkedList1.size());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(range4);
      assertFalse(linkedList1.contains("Index outside valid range."));
      
      Range range5 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack0, true);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(517.17827861, range5.getUpperBound(), 0.01);
      assertEquals(516.67827861, range5.getCentralValue(), 0.01);
      assertEquals(516.17827861, range5.getLowerBound(), 0.01);
      assertEquals(1.0, range5.getLength(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(range5);
      assertFalse(stack0.contains("Index outside valid range."));
      assertTrue(stack0.contains(""));
      assertFalse(stack0.equals((Object)stack1));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range2));
      assertNotSame(stack0, stack1);
      assertNotSame(range5, range0);
      assertNotSame(range5, range3);
      assertNotSame(range5, range2);
      
      MockDate mockDate0 = new MockDate(3119, 20, (-59), (-1906), 20, 20);
      assertNotNull(mockDate0);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      Vector<Locale> vector1 = new Vector<Locale>();
      assertTrue(vector1.isEmpty());
      assertEquals(0, vector1.size());
      assertEquals("[]", vector1.toString());
      assertEquals(10, vector1.capacity());
      assertNotNull(vector1);
      
      Locale locale0 = Locale.lookup(vector0, vector1);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector1.isEmpty());
      assertEquals(0, vector1.size());
      assertEquals("[]", vector1.toString());
      assertEquals(10, vector1.capacity());
      assertNull(locale0);
      
      Year year0 = null;
      try {
        year0 = new Year(mockDate0, timeZone0, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[][] doubleArray0 = new double[7][0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = (-1.0);
      doubleArray3[2] = (-1.0);
      doubleArray3[3] = (-1.0);
      doubleArray3[4] = (-1.0);
      doubleArray3[5] = (-1.0);
      doubleArray3[6] = (-1.0);
      doubleArray3[7] = (-1.0);
      doubleArray3[8] = (-1.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 1.5;
      doubleArray4[1] = (-1.0);
      doubleArray4[2] = (-1.0);
      doubleArray4[3] = (-1.0);
      doubleArray4[4] = (-1.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = 1292.6894044;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = (-676.2);
      doubleArray6[1] = 1.5;
      doubleArray6[2] = 1292.6894044;
      doubleArray6[3] = (-1.0);
      doubleArray6[4] = (-1.0);
      doubleArray6[5] = (-1.0);
      doubleArray6[6] = 1.5;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[8];
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      
      doubleArray7[0] = (-1.0);
      doubleArray7[1] = (-169.100243);
      doubleArray7[2] = (-1.0);
      doubleArray7[3] = 1292.6894044;
      doubleArray7[4] = 1.5;
      doubleArray7[5] = 1.5;
      doubleArray7[6] = 1.5;
      doubleArray7[7] = (-676.2);
      doubleArray0[6] = doubleArray7;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", (String) null, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      assertEquals(1292.6894044, range0.getUpperBound(), 0.01);
      assertEquals(1968.8894044, range0.getLength(), 0.01);
      assertEquals((-676.2), range0.getLowerBound(), 0.01);
      assertEquals(308.2447022, range0.getCentralValue(), 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(1.5, 0.5, "");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, range0.getLowerBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(0.5, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      categoryTableXYDataset0.setSelectionState(timeSeriesCollection0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      
      boolean boolean0 = stack0.add("");
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(""));
      assertTrue(boolean0);
      
      Range range1 = Range.expandToInclude(range0, 909.62196);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, range0.getLowerBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(0.5, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.5, range1.getLowerBound(), 0.01);
      assertEquals(455.06098, range1.getCentralValue(), 0.01);
      assertEquals(909.62196, range1.getUpperBound(), 0.01);
      assertEquals(909.12196, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 851.153);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(851.653, range2.getUpperBound(), 0.01);
      assertEquals(851.403, range2.getCentralValue(), 0.01);
      assertEquals(851.153, range2.getLowerBound(), 0.01);
      assertEquals(0.5, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      
      Range range3 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack0, false);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1.5, range3.getUpperBound(), 0.01);
      assertEquals(1.5, range3.getLowerBound(), 0.01);
      assertEquals(1.5, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertNotNull(range3);
      assertTrue(stack0.contains(""));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((-447.27472801881026), (-447.27472801881026), "");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-447.27472801881026), range0.getUpperBound(), 0.01);
      assertEquals((-447.27472801881026), range0.getCentralValue(), 0.01);
      assertEquals((-447.27472801881026), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      
      boolean boolean0 = stack0.add("");
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.contains(""));
      assertTrue(boolean0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, true);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals((-447.27472801881026), range1.getCentralValue(), 0.01);
      assertEquals((-446.77472801881026), range1.getUpperBound(), 0.01);
      assertEquals((-447.77472801881026), range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertTrue(stack0.contains(""));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, false);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-447.27472801881026), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-447.27472801881026), range2.getCentralValue(), 0.01);
      assertEquals((-447.27472801881026), range2.getUpperBound(), 0.01);
      assertNotNull(range2);
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Range range3 = Range.expandToInclude(range1, 127.1613661336);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals((-447.27472801881026), range1.getCentralValue(), 0.01);
      assertEquals((-446.77472801881026), range1.getUpperBound(), 0.01);
      assertEquals((-447.77472801881026), range1.getLowerBound(), 0.01);
      assertEquals((-447.77472801881026), range3.getLowerBound(), 0.01);
      assertEquals(127.1613661336, range3.getUpperBound(), 0.01);
      assertEquals((-160.30668094260514), range3.getCentralValue(), 0.01);
      assertEquals(574.9360941524103, range3.getLength(), 0.01);
      assertNotNull(range3);
      assertTrue(stack0.contains(""));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      
      boolean boolean1 = stack0.add((String) null);
      assertFalse(stack0.empty());
      assertEquals("[, null]", stack0.toString());
      assertEquals(2, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(""));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Stack<CategoryTableXYDataset> stack1 = new Stack<CategoryTableXYDataset>();
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertNotNull(stack1);
      assertFalse(stack1.contains(categoryTableXYDataset0));
      
      Range range4 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, false);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(stack0.empty());
      assertEquals("[, null]", stack0.toString());
      assertEquals(2, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals((-447.27472801881026), range4.getUpperBound(), 0.01);
      assertEquals((-447.27472801881026), range4.getCentralValue(), 0.01);
      assertEquals((-447.27472801881026), range4.getLowerBound(), 0.01);
      assertNotNull(range4);
      assertTrue(stack0.contains(""));
      assertTrue(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range3));
      assertTrue(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range1));
      assertNotSame(range4, range3);
      assertNotSame(range4, range0);
      assertNotSame(range4, range1);
      assertNotSame(range4, range2);
      
      Range range5 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-447.27472801881026), range5.getUpperBound(), 0.01);
      assertEquals((-447.27472801881026), range5.getLowerBound(), 0.01);
      assertEquals((-447.27472801881026), range5.getCentralValue(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertNotNull(range5);
      assertTrue(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range3));
      assertTrue(range5.equals((Object)range2));
      assertTrue(range5.equals((Object)range4));
      assertNotSame(range5, range1);
      assertNotSame(range5, range0);
      assertNotSame(range5, range3);
      assertNotSame(range5, range4);
      assertNotSame(range5, range2);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(1.5, 0.5, "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.5, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getLowerBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      categoryTableXYDataset0.setSelectionState(timeSeriesCollection0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      
      boolean boolean0 = stack0.add("");
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(""));
      assertTrue(boolean0);
      
      Range range1 = Range.expandToInclude(range0, 909.62196);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.5, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getLowerBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(0.5, range1.getLowerBound(), 0.01);
      assertEquals(455.06098, range1.getCentralValue(), 0.01);
      assertEquals(909.12196, range1.getLength(), 0.01);
      assertEquals(909.62196, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 851.153);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(851.153, range2.getLowerBound(), 0.01);
      assertEquals(851.403, range2.getCentralValue(), 0.01);
      assertEquals(851.653, range2.getUpperBound(), 0.01);
      assertEquals(0.5, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      
      Range range3 = Range.expandToInclude(range1, 909.62196);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.5, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getLowerBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(0.5, range1.getLowerBound(), 0.01);
      assertEquals(455.06098, range1.getCentralValue(), 0.01);
      assertEquals(909.12196, range1.getLength(), 0.01);
      assertEquals(909.62196, range1.getUpperBound(), 0.01);
      assertEquals(0.5, range3.getLowerBound(), 0.01);
      assertEquals(909.12196, range3.getLength(), 0.01);
      assertEquals(455.06098, range3.getCentralValue(), 0.01);
      assertEquals(909.62196, range3.getUpperBound(), 0.01);
      assertNotNull(range3);
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertSame(range1, range3);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range3, range0);
      assertSame(range3, range1);
      assertNotSame(range3, range2);
      
      Range range4 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range2, false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(851.153, range2.getLowerBound(), 0.01);
      assertEquals(851.403, range2.getCentralValue(), 0.01);
      assertEquals(851.653, range2.getUpperBound(), 0.01);
      assertEquals(0.5, range2.getLength(), 0.01);
      assertNull(range4);
      assertTrue(stack0.contains(""));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      
      Range range5 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.5, range5.getUpperBound(), 0.01);
      assertEquals(0.5, range5.getCentralValue(), 0.01);
      assertEquals(0.5, range5.getLowerBound(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertNotNull(range5);
      assertFalse(range5.equals((Object)range3));
      assertTrue(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range2));
      assertNotSame(range5, range0);
      assertNotSame(range5, range3);
      assertNotSame(range5, range1);
      assertNotSame(range5, range2);
      
      Range range6 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, false);
      assertEquals(Double.NaN, range6.getLength(), 0.01);
      assertEquals(Double.NaN, range6.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range6.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range6.getLowerBound(), 0.01);
      assertNotNull(range6);
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range5));
      assertNotSame(range6, range1);
      assertNotSame(range6, range3);
      assertNotSame(range6, range0);
      assertNotSame(range6, range2);
      assertNotSame(range6, range5);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      int int0 = categoryTableXYDataset0.getItemCount();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, int0);
      
      categoryTableXYDataset0.add(824.29, (-3214.703), "");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = categoryTableXYDataset0.getDomainBounds(true);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(823.79, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(824.79, range0.getUpperBound(), 0.01);
      assertEquals(824.29, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(823.79, range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals(824.79, range1.getUpperBound(), 0.01);
      assertEquals(824.29, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(3214.703, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals((-3214.703), range2.getLowerBound(), 0.01);
      assertEquals((-1607.3515), range2.getCentralValue(), 0.01);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, false);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-3214.703), range3.getUpperBound(), 0.01);
      assertEquals((-3214.703), range3.getLowerBound(), 0.01);
      assertEquals((-3214.703), range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertNotNull(range3);
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      assertNotNull(localDate0);
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(0L));
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      boolean boolean0 = linkedList1.add((Object) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, linkedList1.size());
      assertFalse(linkedList0.contains(0L));
      assertFalse(linkedList1.contains(0L));
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(boolean0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      boolean boolean1 = linkedList1.removeLastOccurrence(categoryTableXYDataset0);
      assertEquals(1, linkedList1.size());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(linkedList1.contains(0L));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(boolean1);
      
      boolean boolean2 = linkedList0.add((Object) localDate0);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(0L));
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(linkedList0, linkedList1);
      assertTrue(boolean2);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) linkedList0, true);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1, linkedList0.size());
      assertNull(range0);
      assertFalse(linkedList0.contains(true));
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertNotSame(linkedList0, linkedList1);
      
      MockDate mockDate0 = new MockDate(4L);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 4L, 0.5, 1725.322861, 1040.3, (-592.516));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 3.0, 2803.8704154979, 1725.322861, (-962.374220135105), (-962.374220135105));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 1725.322861, 0L, (-99.60117341961), 1229.05, 4L);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem2);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem2, (OHLCDataItem[]) null);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Stack<String> stack1 = new Stack<String>();
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      
      boolean boolean0 = stack0.add("Jk$`.");
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[Jk$`.]", stack0.toString());
      assertTrue(stack0.contains("Jk$`."));
      assertFalse(stack0.equals((Object)stack1));
      assertNotSame(stack0, stack1);
      assertTrue(boolean0);
      
      TimeSeries timeSeries0 = new TimeSeries("T`l>Q+e>rD5", "Null 'columnKey' argument.", "Jk$`.");
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Jk$`.", timeSeries0.getRangeDescription());
      assertEquals("Null 'columnKey' argument.", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNotNull(timeSeries0);
      
      TimeSeries timeSeries1 = new TimeSeries("Null 'columnKey' argument.");
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertTrue(timeSeries1.getNotify());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertNull(timeSeries1.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertNotNull(timeSeries1);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      
      TimeSeries timeSeries2 = timeSeries0.addAndOrUpdate(timeSeries1);
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Jk$`.", timeSeries0.getRangeDescription());
      assertEquals("Null 'columnKey' argument.", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertTrue(timeSeries1.getNotify());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertNull(timeSeries1.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries2.getRangeDescription());
      assertTrue(timeSeries2.getNotify());
      assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries2.getMinY(), 0.01);
      assertEquals("Time", timeSeries2.getDomainDescription());
      assertEquals(0, timeSeries2.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries2.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries2.getMaxY(), 0.01);
      assertNull(timeSeries2.getDescription());
      assertNotNull(timeSeries2);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(timeSeries2.equals((Object)timeSeries0));
      assertFalse(timeSeries2.equals((Object)timeSeries1));
      assertNotSame(timeSeries0, timeSeries2);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries1, timeSeries2);
      assertNotSame(timeSeries2, timeSeries0);
      assertNotSame(timeSeries2, timeSeries1);
      
      timeSeries0.setKey("Jk$`.");
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Jk$`.", timeSeries0.getRangeDescription());
      assertEquals("Null 'columnKey' argument.", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertFalse(timeSeries0.equals((Object)timeSeries2));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertNotSame(timeSeries0, timeSeries2);
      assertNotSame(timeSeries0, timeSeries1);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Jk$`.", timeSeries0.getRangeDescription());
      assertEquals("Null 'columnKey' argument.", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      assertFalse(timeSeries0.equals((Object)timeSeries2));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      
      LinkedList<DefaultIntervalCategoryDataset> linkedList0 = new LinkedList<DefaultIntervalCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) linkedList0, true);
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Jk$`.", timeSeries0.getRangeDescription());
      assertEquals("Null 'columnKey' argument.", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, linkedList0.size());
      assertNull(range0);
      assertFalse(timeSeries0.equals((Object)timeSeries2));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertNotSame(timeSeries0, timeSeries2);
      assertNotSame(timeSeries0, timeSeries1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      String string0 = "";
      categoryTableXYDataset0.add(6.283185307179586, 6.283185307179586, "");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(6.283185307179586));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      assertFalse(stack0.contains(string0));
      
      boolean boolean0 = stack0.add("Time");
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[Time]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains("Time"));
      assertFalse(stack0.contains(string0));
      assertTrue(boolean0);
      
      Range range0 = new Range(6.283185307179586, 6.283185307179586);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(6.283185307179586, range0.getLowerBound(), 0.01);
      assertEquals(6.283185307179586, range0.getCentralValue(), 0.01);
      assertEquals(6.283185307179586, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range1 = Range.shift(range0, 6.283185307179586, false);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(6.283185307179586, range0.getLowerBound(), 0.01);
      assertEquals(6.283185307179586, range0.getCentralValue(), 0.01);
      assertEquals(6.283185307179586, range0.getUpperBound(), 0.01);
      assertEquals(12.566370614359172, range1.getUpperBound(), 0.01);
      assertEquals(12.566370614359172, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(12.566370614359172, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) "Time");
      assertNotNull(pieDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "Time", (KeyedValues) pieDataset0);
      assertNotNull(categoryDataset0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNull(range2);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) null, (List) stack0, range1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1L));
      assertNotNull(mockDate0);
      
      Month month0 = new Month();
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2014, month0.getYearValue());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertNotNull(month0);
      
      Month month1 = (Month)month0.next();
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2014, month0.getYearValue());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month1.getYearValue());
      assertEquals(24171L, month1.getSerialIndex());
      assertEquals(3, month1.getMonth());
      assertEquals(1392409281320L, month1.getFirstMillisecond());
      assertEquals(1392409281320L, month1.getLastMillisecond());
      assertNotNull(month1);
      assertFalse(month1.equals((Object)month0));
      assertNotSame(month0, month1);
      assertNotSame(month1, month0);
      
      Class<DefaultMultiValueCategoryDataset> class0 = DefaultMultiValueCategoryDataset.class;
      Class class1 = RegularTimePeriod.downsize(class0);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class org.jfree.data.time.Millisecond", class1.toString());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(month1);
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2014, month0.getYearValue());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month1.getYearValue());
      assertEquals(24171L, month1.getSerialIndex());
      assertEquals(3, month1.getMonth());
      assertEquals(1392409281320L, month1.getFirstMillisecond());
      assertEquals(1392409281320L, month1.getLastMillisecond());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertFalse(month0.equals((Object)month1));
      assertFalse(month1.equals((Object)month0));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, true);
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2014, month0.getYearValue());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month1.getYearValue());
      assertEquals(24171L, month1.getSerialIndex());
      assertEquals(3, month1.getMonth());
      assertEquals(1392409281320L, month1.getFirstMillisecond());
      assertEquals(1392409281320L, month1.getLastMillisecond());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNull(range0);
      assertFalse(month0.equals((Object)month1));
      assertFalse(month1.equals((Object)month0));
      assertNotSame(month0, month1);
      assertNotSame(month1, month0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2014, month0.getYearValue());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month1.getYearValue());
      assertEquals(24171L, month1.getSerialIndex());
      assertEquals(3, month1.getMonth());
      assertEquals(1392409281320L, month1.getFirstMillisecond());
      assertEquals(1392409281320L, month1.getLastMillisecond());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertFalse(month0.equals((Object)month1));
      assertFalse(month1.equals((Object)month0));
      assertNotSame(month0, month1);
      assertNotSame(month1, month0);
      assertTrue(boolean0);
      
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) (-1L);
      doubleArray1[1] = (double) (-1L);
      doubleArray1[2] = (double) (-1L);
      doubleArray1[3] = (double) (-1L);
      doubleArray1[4] = (double) (-1L);
      doubleArray1[5] = (double) (-1L);
      doubleArray1[6] = (double) (-1L);
      doubleArray1[7] = (double) (-1L);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-1L);
      doubleArray2[1] = (double) (-1L);
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (-1.0));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(0.0, (-3214.703), "ys157JDs^H");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = categoryTableXYDataset0.getDomainBounds(false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains((-3214.703)));
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Spliterator<DefaultHighLowDataset> spliterator0 = stack0.spliterator();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(spliterator0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) linkedList0, false);
      assertEquals(0, linkedList0.size());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range1);
      assertFalse(linkedList0.contains((-3214.703)));
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.5, range2.getUpperBound(), 0.01);
      assertEquals((-0.5), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(1.0, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range0));
      assertNotSame(range2, range0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertEquals(0, doubleArray0.length);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      MockDate mockDate0 = new MockDate(378, (-1), (-1), (-1), 1548);
      assertNotNull(mockDate0);
      
      Stack<DefaultBoxAndWhiskerCategoryDataset> stack0 = new Stack<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.clear();
      LinkedList<ChronoLocalDate> linkedList0 = new LinkedList<ChronoLocalDate>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNull(range0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (-894.5494560376205));
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-894.5494560376205), range1.getUpperBound(), 0.01);
      assertEquals((-894.5494560376205), range1.getLowerBound(), 0.01);
      assertEquals((-894.5494560376205), range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 378, 378, 1548, (-1), 1392.112276);
      assertEquals("Fri Nov 30 00:48:00 GMT 2277", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-894.5494560376205), (-894.5494560376205), (-1), 1548, (-1080.5317));
      assertEquals("Fri Nov 30 00:48:00 GMT 2277", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-2.147483648E9), 1.0, 786.2, (-546.020867), 989.1037678442741);
      assertEquals("Fri Nov 30 00:48:00 GMT 2277", mockDate0.toString());
      assertNotNull(oHLCDataItem2);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 1392.112276, 378, (-1), (-4188.35549551), (-1080.5317));
      assertEquals("Fri Nov 30 00:48:00 GMT 2277", mockDate0.toString());
      assertNotNull(oHLCDataItem3);
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, 1.0, 3161.62354082418, (-894.5494560376205), (-894.5494560376205), (-599.7190226402));
      assertEquals("Fri Nov 30 00:48:00 GMT 2277", mockDate0.toString());
      assertNotNull(oHLCDataItem4);
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem2));
      
      oHLCDataItemArray0[4] = oHLCDataItem4;
      OHLCDataItem oHLCDataItem5 = new OHLCDataItem(mockDate0, 1040.3, 1725.322861, (-2474.352863480769), 2803.8704154979, 786.2);
      assertEquals("Fri Nov 30 00:48:00 GMT 2277", mockDate0.toString());
      assertNotNull(oHLCDataItem5);
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[5] = oHLCDataItem5;
      OHLCDataItem oHLCDataItem6 = new OHLCDataItem(mockDate0, (-894.5494560376205), (-467.0635613357191), 1040.3, Double.NEGATIVE_INFINITY, 1.7976931348623157E308);
      assertEquals("Fri Nov 30 00:48:00 GMT 2277", mockDate0.toString());
      assertNotNull(oHLCDataItem6);
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem5));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem2));
      
      oHLCDataItemArray0[6] = oHLCDataItem6;
      OHLCDataItem oHLCDataItem7 = new OHLCDataItem(mockDate0, (-2475.352863480769), (-447.27472801881026), 1392.112276, 0.8, Double.NEGATIVE_INFINITY);
      assertEquals("Fri Nov 30 00:48:00 GMT 2277", mockDate0.toString());
      assertNotNull(oHLCDataItem7);
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem5));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem6));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem2));
      
      oHLCDataItemArray0[7] = oHLCDataItem7;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertEquals("Fri Nov 30 00:48:00 GMT 2277", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(8, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      assertEquals("Fri Nov 30 00:48:00 GMT 2277", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-2474.352863480769), range2.getLowerBound(), 0.01);
      assertEquals(5635.976404304949, range2.getLength(), 0.01);
      assertEquals(3161.62354082418, range2.getUpperBound(), 0.01);
      assertEquals(343.63533867170554, range2.getCentralValue(), 0.01);
      assertEquals(8, oHLCDataItemArray0.length);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range1));
      assertNotSame(range2, range1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 1.0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-479));
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      PriorityQueue<XIntervalSeriesCollection> priorityQueue0 = new PriorityQueue<XIntervalSeriesCollection>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Range range1 = Range.expand(range0, (-479), (-3226.2578753666144));
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      boolean boolean0 = vector0.add(xIntervalSeriesCollection0);
      assertEquals(0, priorityQueue0.size());
      assertEquals(1, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertFalse(priorityQueue0.contains(xIntervalSeriesCollection0));
      assertTrue(vector0.contains(xIntervalSeriesCollection0));
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) vector0, range0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XIntervalSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertEquals(0, doubleArray0.length);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      MockDate mockDate0 = new MockDate(378, (-1), (-1), (-1), 1592);
      assertNotNull(mockDate0);
      
      Stack<DefaultBoxAndWhiskerCategoryDataset> stack0 = new Stack<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      LinkedList<ChronoLocalDate> linkedList0 = new LinkedList<ChronoLocalDate>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) linkedList0, true);
      assertEquals(0, linkedList0.size());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("ErHaf.Ja5x");
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[ErHaf.Ja5x]", stack0.toString());
      assertTrue(stack0.contains("ErHaf.Ja5x"));
      assertTrue(boolean0);
      
      Range range0 = new Range(1.0, 1.0);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[ErHaf.Ja5x]", stack0.toString());
      assertNull(range1);
      assertTrue(stack0.contains("ErHaf.Ja5x"));
      
      Vector<XYBarDataset> vector0 = new Vector<XYBarDataset>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) vector0, false);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(Double.POSITIVE_INFINITY, 1.0, "");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2543, (-1));
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals((-2), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertNotNull(dynamicTimeSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(dynamicTimeSeriesCollection0);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals((-2), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      
      boolean boolean0 = stack0.add("");
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(""));
      assertTrue(boolean0);
      
      Range range1 = Range.expandToInclude((Range) null, (-1));
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-1481.330407950722));
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, range2.getLength(), 0.01);
      assertEquals((-1480.330407950722), range2.getUpperBound(), 0.01);
      assertEquals((-1481.330407950722), range2.getLowerBound(), 0.01);
      assertEquals((-1480.830407950722), range2.getCentralValue(), 0.01);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range1));
      assertNotSame(range2, range1);
      
      Range range3 = Range.expandToInclude(range2, 1.0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, range2.getLength(), 0.01);
      assertEquals((-1480.330407950722), range2.getUpperBound(), 0.01);
      assertEquals((-1481.330407950722), range2.getLowerBound(), 0.01);
      assertEquals((-1480.830407950722), range2.getCentralValue(), 0.01);
      assertEquals(1482.330407950722, range3.getLength(), 0.01);
      assertEquals((-740.165203975361), range3.getCentralValue(), 0.01);
      assertEquals((-1481.330407950722), range3.getLowerBound(), 0.01);
      assertEquals(1.0, range3.getUpperBound(), 0.01);
      assertNotNull(range3);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      assertNotSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      
      Stack<String> stack1 = new Stack<String>();
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertNotNull(stack1);
      assertFalse(stack1.contains(""));
      assertFalse(stack1.equals((Object)stack0));
      
      boolean boolean1 = stack1.add("");
      assertFalse(stack1.empty());
      assertEquals(1, stack1.size());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.contains(""));
      assertTrue(stack1.equals((Object)stack0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(stack1, stack0);
      assertTrue(boolean1);
      
      Stack<CategoryTableXYDataset> stack2 = new Stack<CategoryTableXYDataset>();
      assertTrue(stack2.empty());
      assertEquals(0, stack2.size());
      assertTrue(stack2.isEmpty());
      assertEquals(10, stack2.capacity());
      assertEquals("[]", stack2.toString());
      assertNotNull(stack2);
      assertFalse(stack2.contains(categoryTableXYDataset0));
      
      Range range4 = DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, (List) stack0, true);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals((-2), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertNull(range4);
      assertTrue(stack0.contains(""));
      assertTrue(stack0.equals((Object)stack1));
      assertNotSame(stack0, stack1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("W[$.JQeJi|>6u'Y");
      assertEquals("[W[$.JQeJi|>6u'Y]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains("W[$.JQeJi|>6u'Y"));
      assertTrue(boolean0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("Requires 'start' < 'end'.");
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, true);
      assertEquals("[W[$.JQeJi|>6u'Y]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNull(range0);
      assertTrue(stack0.contains("W[$.JQeJi|>6u'Y"));
      assertFalse(stack0.contains("Requires 'start' < 'end'."));
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("W[$.JQeJi|>6u'Y"));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean1 = linkedList0.add((Object) defaultStatisticalCategoryDataset0);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains("W[$.JQeJi|>6u'Y"));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = linkedList0.removeLastOccurrence(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains("W[$.JQeJi|>6u'Y"));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset1);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      
      boolean boolean3 = linkedList0.add((Object) null);
      assertEquals(2, linkedList0.size());
      assertFalse(linkedList0.contains("W[$.JQeJi|>6u'Y"));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNull(number0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      assertEquals("[W[$.JQeJi|>6u'Y]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertNull(range1);
      assertTrue(stack0.contains("W[$.JQeJi|>6u'Y"));
      assertFalse(stack0.contains("Requires 'start' < 'end'."));
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((-447.27472801881026), (-447.27472801881026), "");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-447.27472801881026), range0.getUpperBound(), 0.01);
      assertEquals((-447.27472801881026), range0.getLowerBound(), 0.01);
      assertEquals((-447.27472801881026), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      
      boolean boolean0 = stack0.add("LY7N[|_A^u4[Iz+*4");
      assertEquals("[LY7N[|_A^u4[Iz+*4]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.contains(""));
      assertTrue(stack0.contains("LY7N[|_A^u4[Iz+*4"));
      assertTrue(boolean0);
      
      Range range1 = new Range((-1813.0368756762036), (-1.0));
      assertEquals(1812.0368756762036, range1.getLength(), 0.01);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertEquals((-907.0184378381018), range1.getCentralValue(), 0.01);
      assertEquals((-1813.0368756762036), range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-447.27472801881026), range2.getUpperBound(), 0.01);
      assertEquals((-447.27472801881026), range2.getCentralValue(), 0.01);
      assertEquals((-447.27472801881026), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      Minute minute0 = new Minute();
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(374, 2146547559, 59, (-1497), 374, 0);
      assertNotNull(mockGregorianCalendar0);
      
      long long0 = minute0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2014,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=14,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=20,MINUTE=21,SECOND=59,MILLISECOND=999,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0L, long0);
      
      Minute minute1 = (Minute)minute0.next();
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(22, minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute1);
      assertFalse(minute1.equals((Object)minute0));
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      
      jDBCPieDataset0.setValue((Comparable) minute1, (double) 59);
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(22, minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) jDBCPieDataset0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      Minute minute0 = new Minute();
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      Minute minute1 = (Minute)minute0.next();
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(22, minute1.getMinute());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute1);
      assertFalse(minute1.equals((Object)minute0));
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      
      jDBCPieDataset0.setValue((Comparable) minute1, (-549.0622));
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(22, minute1.getMinute());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) jDBCPieDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      Minute minute0 = new Minute();
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      Minute minute1 = (Minute)minute0.next();
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(22, minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute1);
      assertFalse(minute1.equals((Object)minute0));
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMinimumDomainValue(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      Number[][] numberArray0 = new Number[4][3];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = (Number) 59;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[3];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      numberArray2[0] = (Number) bigInteger0;
      numberArray2[1] = (Number) 59;
      numberArray2[2] = (Number) 59;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[0];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[7];
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray3));
      
      numberArray4[0] = (Number) 0;
      numberArray4[1] = (Number) 59;
      numberArray4[2] = (Number) 59;
      numberArray4[3] = (Number) 59;
      numberArray4[4] = (Number) bigInteger0;
      numberArray4[5] = (Number) 59;
      numberArray4[6] = (Number) 0;
      numberArray0[3] = numberArray4;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("{mw", "{mw", numberArray0);
      assertEquals(4, numberArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      Double double1 = (Double)DatasetUtilities.findMinimumStackedRangeValue(defaultCategoryDataset0);
      assertEquals(4, numberArray0.length);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) stack0, true);
      assertEquals("GMT", timeZone0.getID());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(range0);
      assertFalse(stack0.contains("{mw"));
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(118.0, range1.getUpperBound(), 0.01);
      assertEquals(59.0, range1.getCentralValue(), 0.01);
      assertEquals(118.0, range1.getLength(), 0.01);
      assertEquals(4, numberArray0.length);
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertNotNull(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      categoryTableXYDataset1.add(2259.48758947808, 6.283185307179586, "");
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset1);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(6.283185307179586, range0.getUpperBound(), 0.01);
      assertEquals(6.283185307179586, range0.getCentralValue(), 0.01);
      assertEquals(6.283185307179586, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      
      boolean boolean0 = stack0.add("Time");
      assertEquals("[Time]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains("Time"));
      assertFalse(stack0.contains(""));
      assertTrue(boolean0);
      
      Range range1 = Range.expandToInclude(range0, 6.283185307179586);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(6.283185307179586, range0.getUpperBound(), 0.01);
      assertEquals(6.283185307179586, range0.getCentralValue(), 0.01);
      assertEquals(6.283185307179586, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(6.283185307179586, range1.getLowerBound(), 0.01);
      assertEquals(6.283185307179586, range1.getCentralValue(), 0.01);
      assertEquals(6.283185307179586, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertSame(range0, range1);
      assertSame(range1, range0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 2086.4555343305);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(2086.4555343305, range2.getUpperBound(), 0.01);
      assertEquals(2086.4555343305, range2.getCentralValue(), 0.01);
      assertEquals(2086.4555343305, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertFalse(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      
      Range range3 = Range.expandToInclude(range2, 2086.4555343305);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(2086.4555343305, range2.getUpperBound(), 0.01);
      assertEquals(2086.4555343305, range2.getCentralValue(), 0.01);
      assertEquals(2086.4555343305, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(2086.4555343305, range3.getLowerBound(), 0.01);
      assertEquals(2086.4555343305, range3.getUpperBound(), 0.01);
      assertEquals(2086.4555343305, range3.getCentralValue(), 0.01);
      assertNotNull(range3);
      assertFalse(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertSame(range2, range3);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertSame(range3, range2);
      
      Range range4 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset1, (List) stack0, range1, true);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(6.283185307179586, range0.getUpperBound(), 0.01);
      assertEquals(6.283185307179586, range0.getCentralValue(), 0.01);
      assertEquals(6.283185307179586, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals("[Time]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(6.283185307179586, range1.getLowerBound(), 0.01);
      assertEquals(6.283185307179586, range1.getCentralValue(), 0.01);
      assertEquals(6.283185307179586, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNull(range4);
      assertTrue(stack0.contains("Time"));
      assertFalse(stack0.contains(""));
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertNotSame(range0, range2);
      assertSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range1, range3);
      assertNotSame(range1, range2);
      assertSame(range1, range0);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      Range range5 = DatasetUtilities.findDomainBounds((XYDataset) defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(range5);
      
      Range range6 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset1);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(0.0, range6.getLength(), 0.01);
      assertEquals(6.283185307179586, range6.getLowerBound(), 0.01);
      assertEquals(6.283185307179586, range6.getCentralValue(), 0.01);
      assertEquals(6.283185307179586, range6.getUpperBound(), 0.01);
      assertNotNull(range6);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertFalse(range6.equals((Object)range2));
      assertTrue(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range3));
      assertTrue(range6.equals((Object)range0));
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertNotSame(range6, range0);
      assertNotSame(range6, range1);
      assertNotSame(range6, range2);
      assertNotSame(range6, range3);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Minute minute0 = new Minute();
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(minute0);
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) minute0, (double) 0, (-1852628642));
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(pieDataset0);
      assertFalse(pieDataset0.equals((Object)defaultPieDataset0));
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertFalse(defaultPieDataset0.equals((Object)pieDataset0));
      assertFalse(pieDataset0.equals((Object)defaultPieDataset0));
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      Minute minute0 = new Minute();
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      Minute minute1 = (Minute)minute0.next();
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(22, minute1.getMinute());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute1);
      assertFalse(minute1.equals((Object)minute0));
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      
      jDBCPieDataset0.setValue((Comparable) minute1, 0.0);
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(22, minute1.getMinute());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) jDBCPieDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Minute minute0 = new Minute();
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = 2.004817628285971;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = 2.004817628285971;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = 2.004817628285971;
      doubleArray1[8] = (double) 59;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 59;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 59;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = (double) 0;
      doubleArray2[7] = 2.004817628285971;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = 2.004817628285971;
      doubleArray3[2] = (double) 59;
      doubleArray3[3] = (double) 59;
      doubleArray3[4] = (-1176.29);
      doubleArray3[5] = 2.004817628285971;
      doubleArray3[6] = 2.004817628285971;
      doubleArray3[7] = (double) 59;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 0);
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((-447.27472801881026), (-447.27472801881026), "");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-447.27472801881026), range0.getUpperBound(), 0.01);
      assertEquals((-447.27472801881026), range0.getLowerBound(), 0.01);
      assertEquals((-447.27472801881026), range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      
      boolean boolean0 = stack0.add("Time");
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[Time]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(""));
      assertTrue(stack0.contains("Time"));
      assertTrue(boolean0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) jDBCPieDataset0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals((-447.27472801881026), range1.getCentralValue(), 0.01);
      assertEquals((-447.27472801881026), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-447.27472801881026), range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(6.283185307179586, 6.283185307179586, "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      
      boolean boolean0 = stack0.add("Time");
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals("[Time]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.contains(""));
      assertTrue(stack0.contains("Time"));
      assertTrue(boolean0);
      
      Range range0 = new Range(6.283185307179586, 6.283185307179586);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(6.283185307179586, range0.getUpperBound(), 0.01);
      assertEquals(6.283185307179586, range0.getLowerBound(), 0.01);
      assertEquals(6.283185307179586, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      assertNull(number0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, false);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals("[Time]", stack0.toString());
      assertEquals(1, stack0.size());
      assertNull(range1);
      assertFalse(stack0.contains(""));
      assertTrue(stack0.contains("Time"));
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(6.283185307179586, range2.getUpperBound(), 0.01);
      assertEquals(6.283185307179586, range2.getCentralValue(), 0.01);
      assertEquals(6.283185307179586, range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      assertTrue(range2.equals((Object)range0));
      assertNotSame(range2, range0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((-447.27472801881026), (-447.27472801881026), "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains((-447.27472801881026)));
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-447.27472801881026), range0.getLowerBound(), 0.01);
      assertEquals((-447.27472801881026), range0.getUpperBound(), 0.01);
      assertEquals((-447.27472801881026), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      
      boolean boolean0 = stack0.add("Time");
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[Time]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.contains(""));
      assertTrue(stack0.contains("Time"));
      assertTrue(boolean0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      jDBCCategoryDataset0.addValue((-447.27472801881026), (Comparable) "", (Comparable) "Time");
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      jDBCCategoryDataset0.setTranspose(true);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Locale locale0 = JComponent.getDefaultLocale();
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(16, "wg9h3j[<Y_Brop4hJ7");
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(16, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=wg9h3j[<Y_Brop4hJ7,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("wg9h3j[<Y_Brop4hJ7", simpleTimeZone0.getID());
      assertNotNull(simpleTimeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(16, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=wg9h3j[<Y_Brop4hJ7,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("wg9h3j[<Y_Brop4hJ7", simpleTimeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) linkedList0, true);
      assertEquals(0, linkedList0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(16, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=wg9h3j[<Y_Brop4hJ7,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("wg9h3j[<Y_Brop4hJ7", simpleTimeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(range1);
      assertFalse(linkedList0.contains("Time"));
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) jDBCCategoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(447.27472801881026, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals((-223.63736400940513), range2.getCentralValue(), 0.01);
      assertEquals((-447.27472801881026), range2.getLowerBound(), 0.01);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range0));
      assertNotSame(range2, range0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("W[$.JQeJi|>6u'Y");
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[W[$.JQeJi|>6u'Y]", stack0.toString());
      assertTrue(stack0.contains("W[$.JQeJi|>6u'Y"));
      assertTrue(boolean0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("Requires 'start' < 'end'.");
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, true);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[W[$.JQeJi|>6u'Y]", stack0.toString());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNull(range0);
      assertFalse(stack0.contains("Requires 'start' < 'end'."));
      assertTrue(stack0.contains("W[$.JQeJi|>6u'Y"));
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("W[$.JQeJi|>6u'Y"));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean1 = linkedList0.add((Object) defaultStatisticalCategoryDataset0);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains("W[$.JQeJi|>6u'Y"));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean2 = linkedList0.removeLastOccurrence(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(object0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      boolean boolean3 = linkedList0.add(object0);
      assertEquals(2, linkedList0.size());
      assertFalse(linkedList0.contains("W[$.JQeJi|>6u'Y"));
      assertTrue(linkedList0.contains(object0));
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 4733, 2);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(2, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(4733, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[W[$.JQeJi|>6u'Y]", stack0.toString());
      assertNull(range1);
      assertFalse(stack0.contains("Requires 'start' < 'end'."));
      assertTrue(stack0.contains("W[$.JQeJi|>6u'Y"));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset1);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      
      boolean boolean4 = linkedList0.add((Object) defaultStatisticalCategoryDataset1);
      assertEquals(3, linkedList0.size());
      assertFalse(linkedList0.contains(4733));
      assertTrue(linkedList0.contains(object0));
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
      assertTrue(boolean4);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultStatisticalCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      MockDate mockDate0 = new MockDate((-5305), 2407, 170, (-1), (-5305));
      assertNotNull(mockDate0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      String string0 = "Time";
      boolean boolean0 = stack0.add("org.jfree.data.event.DatasetChangeListener");
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[org.jfree.data.event.DatasetChangeListener]", stack0.toString());
      assertFalse(stack0.contains(string0));
      assertTrue(stack0.contains("org.jfree.data.event.DatasetChangeListener"));
      assertTrue(boolean0);
      
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "Time", "Time");
      assertEquals("Mon Jan 13 06:35:00 GMT 3205", mockDate0.toString());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertEquals("Mon Jan 13 06:35:00 GMT 3205", mockDate0.toString());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) stack0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Stack<String> stack1 = new Stack<String>();
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      
      boolean boolean0 = stack1.add("T`l>Q+e>rD5");
      assertEquals(1, stack1.size());
      assertFalse(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.isEmpty());
      assertEquals("[T`l>Q+e>rD5]", stack1.toString());
      assertTrue(stack1.contains("T`l>Q+e>rD5"));
      assertFalse(stack1.equals((Object)stack0));
      assertNotSame(stack1, stack0);
      assertTrue(boolean0);
      
      TimeSeries timeSeries0 = new TimeSeries("org.jfree.data.event.DatasetChangeListener", "org.jfree.data.event.DatasetChangeListener", "");
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals("org.jfree.data.event.DatasetChangeListener", timeSeries0.getDomainDescription());
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals("org.jfree.data.event.DatasetChangeListener", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) stack1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((-466.5635613357191), (-466.5635613357191), "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      
      Range range0 = new Range((-466.5635613357191), (-466.5635613357191));
      assertEquals((-466.5635613357191), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-466.5635613357191), range0.getCentralValue(), 0.01);
      assertEquals((-466.5635613357191), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      
      boolean boolean0 = stack0.add("Time");
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[Time]", stack0.toString());
      assertFalse(stack0.contains(""));
      assertTrue(stack0.contains("Time"));
      assertTrue(boolean0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, true);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[Time]", stack0.toString());
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals((-466.5635613357191), range1.getCentralValue(), 0.01);
      assertEquals((-466.0635613357191), range1.getUpperBound(), 0.01);
      assertEquals((-467.0635613357191), range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertFalse(stack0.contains(""));
      assertTrue(stack0.contains("Time"));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-466.5635613357191), range2.getUpperBound(), 0.01);
      assertEquals((-466.5635613357191), range2.getCentralValue(), 0.01);
      assertEquals((-466.5635613357191), range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Number[][] numberArray0 = new Number[0][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "2&Nd}2+;vBlU8:d", numberArray0);
      assertEquals(0, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range3 = DatasetUtilities.findRangeBounds(categoryDataset0, (List) stack0, false);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[Time]", stack0.toString());
      assertEquals(0, numberArray0.length);
      assertNull(range3);
      assertFalse(stack0.contains(""));
      assertTrue(stack0.contains("Time"));
      
      Range range4 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-467.0635613357191), range4.getLowerBound(), 0.01);
      assertEquals((-466.0635613357191), range4.getUpperBound(), 0.01);
      assertEquals((-466.5635613357191), range4.getCentralValue(), 0.01);
      assertEquals(1.0, range4.getLength(), 0.01);
      assertNotNull(range4);
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range1));
      assertNotSame(range4, range0);
      assertNotSame(range4, range1);
      assertNotSame(range4, range2);
      
      Range range5 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, false);
      assertEquals((-466.5635613357191), range5.getCentralValue(), 0.01);
      assertEquals((-466.5635613357191), range5.getLowerBound(), 0.01);
      assertEquals((-466.5635613357191), range5.getUpperBound(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(range5);
      assertFalse(range5.equals((Object)range4));
      assertTrue(range5.equals((Object)range2));
      assertTrue(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range1));
      assertNotSame(range5, range2);
      assertNotSame(range5, range0);
      assertNotSame(range5, range4);
      assertNotSame(range5, range1);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      categoryTableXYDataset0.add((-1999.87750188272), (-1999.87750188272), "\"qH,tO/s/Y|IIvAy}(");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("\"qH,tO/s/Y|IIvAy}("));
      
      Range range0 = new Range((-3492.63727), (-3492.63727));
      assertEquals((-3492.63727), range0.getUpperBound(), 0.01);
      assertEquals((-3492.63727), range0.getLowerBound(), 0.01);
      assertEquals((-3492.63727), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack1 = new Stack<String>();
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertNotNull(stack1);
      assertFalse(stack1.contains("\"qH,tO/s/Y|IIvAy}("));
      assertTrue(stack1.equals((Object)stack0));
      
      boolean boolean0 = stack0.add("There is no existing value for the specified 'period'.");
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[There is no existing value for the specified 'period'.]", stack0.toString());
      assertFalse(stack0.contains("\"qH,tO/s/Y|IIvAy}("));
      assertTrue(stack0.contains("There is no existing value for the specified 'period'."));
      assertFalse(stack0.equals((Object)stack1));
      assertNotSame(stack0, stack1);
      assertTrue(boolean0);
      
      Range range1 = Range.expandToInclude(range0, 319.937);
      assertEquals((-3492.63727), range0.getUpperBound(), 0.01);
      assertEquals((-3492.63727), range0.getLowerBound(), 0.01);
      assertEquals((-3492.63727), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(319.937, range1.getUpperBound(), 0.01);
      assertEquals((-3492.63727), range1.getLowerBound(), 0.01);
      assertEquals((-1586.3501350000001), range1.getCentralValue(), 0.01);
      assertEquals(3812.57427, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 319.937);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1999.87750188272, range2.getLength(), 0.01);
      assertEquals(319.937, range2.getUpperBound(), 0.01);
      assertEquals((-680.0017509413601), range2.getCentralValue(), 0.01);
      assertEquals((-1679.9405018827201), range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      
      Range range3 = Range.expandToInclude(range2, 319.937);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1999.87750188272, range2.getLength(), 0.01);
      assertEquals(319.937, range2.getUpperBound(), 0.01);
      assertEquals((-680.0017509413601), range2.getCentralValue(), 0.01);
      assertEquals((-1679.9405018827201), range2.getLowerBound(), 0.01);
      assertEquals(319.937, range3.getUpperBound(), 0.01);
      assertEquals((-680.0017509413601), range3.getCentralValue(), 0.01);
      assertEquals((-1679.9405018827201), range3.getLowerBound(), 0.01);
      assertEquals(1999.87750188272, range3.getLength(), 0.01);
      assertNotNull(range3);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertSame(range2, range3);
      assertSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      
      Range range4 = Range.shift(range1, (-1999.87750188272), true);
      assertEquals((-3492.63727), range0.getUpperBound(), 0.01);
      assertEquals((-3492.63727), range0.getLowerBound(), 0.01);
      assertEquals((-3492.63727), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(319.937, range1.getUpperBound(), 0.01);
      assertEquals((-3492.63727), range1.getLowerBound(), 0.01);
      assertEquals((-1586.3501350000001), range1.getCentralValue(), 0.01);
      assertEquals(3812.57427, range1.getLength(), 0.01);
      assertEquals((-5492.51477188272), range4.getLowerBound(), 0.01);
      assertEquals(3812.57427, range4.getLength(), 0.01);
      assertEquals((-1679.9405018827201), range4.getUpperBound(), 0.01);
      assertEquals((-3586.22763688272), range4.getCentralValue(), 0.01);
      assertNotNull(range4);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range1));
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range2);
      assertNotSame(range1, range4);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertNotSame(range4, range0);
      assertNotSame(range4, range1);
      
      Range range5 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack1, range4, true);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-3492.63727), range0.getUpperBound(), 0.01);
      assertEquals((-3492.63727), range0.getLowerBound(), 0.01);
      assertEquals((-3492.63727), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertEquals(319.937, range1.getUpperBound(), 0.01);
      assertEquals((-3492.63727), range1.getLowerBound(), 0.01);
      assertEquals((-1586.3501350000001), range1.getCentralValue(), 0.01);
      assertEquals(3812.57427, range1.getLength(), 0.01);
      assertEquals((-5492.51477188272), range4.getLowerBound(), 0.01);
      assertEquals(3812.57427, range4.getLength(), 0.01);
      assertEquals((-1679.9405018827201), range4.getUpperBound(), 0.01);
      assertEquals((-3586.22763688272), range4.getCentralValue(), 0.01);
      assertNull(range5);
      assertFalse(stack1.contains("\"qH,tO/s/Y|IIvAy}("));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(stack1.equals((Object)stack0));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range1));
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(stack1, stack0);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range2);
      assertNotSame(range1, range4);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertNotSame(range4, range0);
      assertNotSame(range4, range1);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      Range range6 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, range6.getLength(), 0.01);
      assertEquals((-1999.37750188272), range6.getUpperBound(), 0.01);
      assertEquals((-2000.37750188272), range6.getLowerBound(), 0.01);
      assertEquals((-1999.87750188272), range6.getCentralValue(), 0.01);
      assertNotNull(range6);
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range1));
      assertNotSame(range6, range2);
      assertNotSame(range6, range3);
      assertNotSame(range6, range4);
      assertNotSame(range6, range0);
      assertNotSame(range6, range1);
      
      Range range7 = DatasetUtilities.iterateXYRangeBounds(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(range7);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("");
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.contains(""));
      assertTrue(boolean0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("");
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, true);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNull(range0);
      assertTrue(stack0.contains(""));
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(""));
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      boolean boolean1 = linkedList1.removeLastOccurrence(object0);
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(""));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(boolean1);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      boolean boolean2 = linkedList1.add((Object) defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, linkedList1.size());
      assertFalse(linkedList1.contains(""));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(boolean2);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-2598), (-1));
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals((-1), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-2598), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      Vector<XYDatasetTableModel> vector0 = new Vector<XYDatasetTableModel>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) vector0, true);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNull(range1);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) vector0, true);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(jDBCCategoryDataset0, (-1097), (-2760));
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals((-1097), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-2760), slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, 3084);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals((-1097), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-2760), slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(pieDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) jDBCCategoryDataset0, (-246.999527415337));
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(range0);
      
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 3084;
      doubleArray1[1] = (double) (-1097);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-18.3);
      doubleArray2[1] = (double) (-2760);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "Bj4??", doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertEquals((-2778.3), range1.getLowerBound(), 0.01);
      assertEquals(152.8499999999999, range1.getCentralValue(), 0.01);
      assertEquals(5862.3, range1.getLength(), 0.01);
      assertEquals(3084.0, range1.getUpperBound(), 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(range1);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(number0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      List list0 = defaultMultiValueCategoryDataset0.getColumnKeys();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      PieDataset pieDataset1 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, (Comparable) "");
      assertNotNull(pieDataset1);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(pieDataset1, pieDataset0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("Time");
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[Time]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains("Time"));
      assertTrue(boolean0);
      
      Range range0 = new Range(6.283185307179586, 6.283185307179586);
      assertEquals(6.283185307179586, range0.getUpperBound(), 0.01);
      assertEquals(6.283185307179586, range0.getLowerBound(), 0.01);
      assertEquals(6.283185307179586, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.shift(range0, 6.283185307179586, false);
      assertEquals(6.283185307179586, range0.getUpperBound(), 0.01);
      assertEquals(6.283185307179586, range0.getLowerBound(), 0.01);
      assertEquals(6.283185307179586, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(12.566370614359172, range1.getUpperBound(), 0.01);
      assertEquals(12.566370614359172, range1.getLowerBound(), 0.01);
      assertEquals(12.566370614359172, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range1, false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[Time]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(6.283185307179586, range0.getUpperBound(), 0.01);
      assertEquals(6.283185307179586, range0.getLowerBound(), 0.01);
      assertEquals(6.283185307179586, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(12.566370614359172, range1.getUpperBound(), 0.01);
      assertEquals(12.566370614359172, range1.getLowerBound(), 0.01);
      assertEquals(12.566370614359172, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNull(range2);
      assertTrue(stack0.contains("Time"));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) "");
      assertNotNull(pieDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Stack<String> stack1 = new Stack<String>();
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      
      boolean boolean0 = stack1.add("Ti]e");
      assertFalse(stack1.empty());
      assertEquals(1, stack1.size());
      assertFalse(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertEquals("[Ti]e]", stack1.toString());
      assertTrue(stack1.contains("Ti]e"));
      assertFalse(stack1.equals((Object)stack0));
      assertNotSame(stack1, stack0);
      assertTrue(boolean0);
      
      double[][] doubleArray0 = new double[4][9];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[1] = (double) 212;
      doubleArray2[2] = 1282.4;
      doubleArray2[4] = (double) 212;
      doubleArray2[5] = (double) 212;
      doubleArray2[6] = (double) 212;
      doubleArray0[2] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 212;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(212));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = linkedList0.add(object0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(object0));
      assertFalse(linkedList0.contains(212));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("v|EEC!e5Q?m!pn&~");
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[v|EEC!e5Q?m!pn&~]", stack0.toString());
      assertTrue(stack0.contains("v|EEC!e5Q?m!pn&~"));
      assertTrue(boolean0);
      
      Range range0 = new Range(6.283185307179586, 1982.0262588296853);
      assertEquals(994.1547220684324, range0.getCentralValue(), 0.01);
      assertEquals(1975.7430735225057, range0.getLength(), 0.01);
      assertEquals(1982.0262588296853, range0.getUpperBound(), 0.01);
      assertEquals(6.283185307179586, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range1 = Range.combine(range0, range0);
      assertEquals(994.1547220684324, range0.getCentralValue(), 0.01);
      assertEquals(1975.7430735225057, range0.getLength(), 0.01);
      assertEquals(1982.0262588296853, range0.getUpperBound(), 0.01);
      assertEquals(6.283185307179586, range0.getLowerBound(), 0.01);
      assertEquals(1975.7430735225057, range1.getLength(), 0.01);
      assertEquals(1982.0262588296853, range1.getUpperBound(), 0.01);
      assertEquals(6.283185307179586, range1.getLowerBound(), 0.01);
      assertEquals(994.1547220684324, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      Range range2 = Range.shift(range1, 6.283185307179586, true);
      assertEquals(994.1547220684324, range0.getCentralValue(), 0.01);
      assertEquals(1975.7430735225057, range0.getLength(), 0.01);
      assertEquals(1982.0262588296853, range0.getUpperBound(), 0.01);
      assertEquals(6.283185307179586, range0.getLowerBound(), 0.01);
      assertEquals(1975.7430735225057, range1.getLength(), 0.01);
      assertEquals(1982.0262588296853, range1.getUpperBound(), 0.01);
      assertEquals(6.283185307179586, range1.getLowerBound(), 0.01);
      assertEquals(994.1547220684324, range1.getCentralValue(), 0.01);
      assertEquals(12.566370614359172, range2.getLowerBound(), 0.01);
      assertEquals(1975.7430735225057, range2.getLength(), 0.01);
      assertEquals(1000.437907375612, range2.getCentralValue(), 0.01);
      assertEquals(1988.3094441368648, range2.getUpperBound(), 0.01);
      assertNotNull(range2);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) linkedList0, range0, false);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0, linkedList0.size());
      assertEquals(994.1547220684324, range0.getCentralValue(), 0.01);
      assertEquals(1975.7430735225057, range0.getLength(), 0.01);
      assertEquals(1982.0262588296853, range0.getUpperBound(), 0.01);
      assertEquals(6.283185307179586, range0.getLowerBound(), 0.01);
      assertNull(range3);
      assertFalse(linkedList0.contains(1982.0262588296853));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) "v|EEC!e5Q?m!pn&~");
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(6.2702533055033145, 6.2702533055033145, "");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(6.2702533055033145));
      
      Range range0 = new Range(6.2702533055033145, 6.2702533055033145);
      assertEquals(6.2702533055033145, range0.getLowerBound(), 0.01);
      assertEquals(6.2702533055033145, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(6.2702533055033145, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      
      boolean boolean0 = stack0.add("");
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(""));
      assertTrue(boolean0);
      
      Range range1 = Range.expandToInclude(range0, 0.5);
      assertEquals(6.2702533055033145, range0.getLowerBound(), 0.01);
      assertEquals(6.2702533055033145, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(6.2702533055033145, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range1.getLowerBound(), 0.01);
      assertEquals(6.2702533055033145, range1.getUpperBound(), 0.01);
      assertEquals(3.3851266527516573, range1.getCentralValue(), 0.01);
      assertEquals(5.7702533055033145, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 0.5);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(6.2702533055033145, range2.getLength(), 0.01);
      assertEquals(3.6351266527516573, range2.getCentralValue(), 0.01);
      assertEquals(6.7702533055033145, range2.getUpperBound(), 0.01);
      assertEquals(0.5, range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      
      Range range3 = Range.expandToInclude(range1, 0.5);
      assertEquals(6.2702533055033145, range0.getLowerBound(), 0.01);
      assertEquals(6.2702533055033145, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(6.2702533055033145, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range1.getLowerBound(), 0.01);
      assertEquals(6.2702533055033145, range1.getUpperBound(), 0.01);
      assertEquals(3.3851266527516573, range1.getCentralValue(), 0.01);
      assertEquals(5.7702533055033145, range1.getLength(), 0.01);
      assertEquals(3.3851266527516573, range3.getCentralValue(), 0.01);
      assertEquals(5.7702533055033145, range3.getLength(), 0.01);
      assertEquals(6.2702533055033145, range3.getUpperBound(), 0.01);
      assertEquals(0.5, range3.getLowerBound(), 0.01);
      assertNotNull(range3);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range1, range0);
      assertSame(range1, range3);
      assertNotSame(range1, range2);
      assertNotSame(range3, range0);
      assertSame(range3, range1);
      assertNotSame(range3, range2);
      
      Range range4 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range2, true);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(6.2702533055033145, range2.getLength(), 0.01);
      assertEquals(3.6351266527516573, range2.getCentralValue(), 0.01);
      assertEquals(6.7702533055033145, range2.getUpperBound(), 0.01);
      assertEquals(0.5, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(6.2702533055033145, range4.getUpperBound(), 0.01);
      assertEquals(6.2702533055033145, range4.getLowerBound(), 0.01);
      assertEquals(6.2702533055033145, range4.getCentralValue(), 0.01);
      assertNotNull(range4);
      assertTrue(stack0.contains(""));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range3));
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range2, range3);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertNotSame(range4, range1);
      assertNotSame(range4, range3);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      Range range5 = DatasetUtilities.findDomainBounds((XYDataset) defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(range5);
      
      Range range6 = DatasetUtilities.iterateXYRangeBounds(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(range6);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(6.2702533055033145, 6.2702533055033145, "");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(6.2702533055033145));
      
      Range range0 = new Range(6.2702533055033145, 6.2702533055033145);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(6.2702533055033145, range0.getUpperBound(), 0.01);
      assertEquals(6.2702533055033145, range0.getLowerBound(), 0.01);
      assertEquals(6.2702533055033145, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      
      PriorityQueue<XIntervalSeriesCollection> priorityQueue0 = new PriorityQueue<XIntervalSeriesCollection>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) linkedList0, range0, false);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(6.2702533055033145, range0.getUpperBound(), 0.01);
      assertEquals(6.2702533055033145, range0.getLowerBound(), 0.01);
      assertEquals(6.2702533055033145, range0.getCentralValue(), 0.01);
      assertNull(range1);
      assertFalse(linkedList0.contains(6.2702533055033145));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-482));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(6.283185307179586, 6.283185307179586, "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      
      CategoryDataset categoryDataset0 = null;
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      assertTrue(boolean0);
      
      Stack<String> stack1 = new Stack<String>();
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertNotNull(stack1);
      assertFalse(stack1.contains(""));
      assertTrue(stack1.equals((Object)stack0));
      
      boolean boolean1 = stack0.add("Null 'minute' argument.");
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[Null 'minute' argument.]", stack0.toString());
      assertFalse(stack0.empty());
      assertFalse(stack0.contains(""));
      assertTrue(stack0.contains("Null 'minute' argument."));
      assertFalse(stack0.equals((Object)stack1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(stack0, stack1);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      String string0 = "";
      categoryTableXYDataset0.add(6.283185307179586, 6.283185307179586, "");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(6.283185307179586));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      assertFalse(stack0.contains(string0));
      
      boolean boolean0 = stack0.add("Time");
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[Time]", stack0.toString());
      assertTrue(stack0.contains("Time"));
      assertFalse(stack0.contains(string0));
      assertTrue(boolean0);
      
      Range range0 = new Range(6.283185307179586, 6.283185307179586);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(6.283185307179586, range0.getUpperBound(), 0.01);
      assertEquals(6.283185307179586, range0.getCentralValue(), 0.01);
      assertEquals(6.283185307179586, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(6.283185307179586, range1.getLength(), 0.01);
      assertEquals(6.283185307179586, range1.getUpperBound(), 0.01);
      assertEquals(3.141592653589793, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      Range range2 = Range.expand(range1, 1.0, 2555.0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(6.283185307179586, range1.getLength(), 0.01);
      assertEquals(6.283185307179586, range1.getUpperBound(), 0.01);
      assertEquals(3.141592653589793, range1.getCentralValue(), 0.01);
      assertEquals(16059.821645151023, range2.getUpperBound(), 0.01);
      assertEquals(8026.769229921922, range2.getCentralValue(), 0.01);
      assertEquals(16066.104830458204, range2.getLength(), 0.01);
      assertEquals((-6.283185307179586), range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range3 = Range.shift(range0, 6.283185307179586, false);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(6.283185307179586, range0.getUpperBound(), 0.01);
      assertEquals(6.283185307179586, range0.getCentralValue(), 0.01);
      assertEquals(6.283185307179586, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(12.566370614359172, range3.getUpperBound(), 0.01);
      assertEquals(12.566370614359172, range3.getCentralValue(), 0.01);
      assertEquals(12.566370614359172, range3.getLowerBound(), 0.01);
      assertNotNull(range3);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range3, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Number[][] numberArray0 = new Number[9][3];
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-54);
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("U`<hF66H\"yf,e|6", "U`<hF66H\"yf,e|6", numberArray0);
      assertEquals(9, numberArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      defaultCategoryDataset0.fireSelectionEvent();
      assertEquals(9, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, 1803);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1803, Size: 3
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      String string0 = "";
      categoryTableXYDataset0.add(6.283185307179586, 6.283185307179586, "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      assertFalse(stack0.contains(string0));
      
      boolean boolean0 = stack0.add("Time");
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[Time]", stack0.toString());
      assertFalse(stack0.contains(""));
      assertTrue(stack0.contains("Time"));
      assertTrue(boolean0);
      
      Range range0 = new Range(6.283185307179586, 6.283185307179586);
      assertEquals(6.283185307179586, range0.getUpperBound(), 0.01);
      assertEquals(6.283185307179586, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(6.283185307179586, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range1 = Range.shift(range0, 6.283185307179586, false);
      assertEquals(6.283185307179586, range0.getUpperBound(), 0.01);
      assertEquals(6.283185307179586, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(6.283185307179586, range0.getLowerBound(), 0.01);
      assertEquals(12.566370614359172, range1.getLowerBound(), 0.01);
      assertEquals(12.566370614359172, range1.getCentralValue(), 0.01);
      assertEquals(12.566370614359172, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range1, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      assertNotNull(localDate0);
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(0L));
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) jDBCCategoryDataset0, (Comparable) mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(pieDataset0);
      
      Comparable<CategoryTableXYDataset>[] comparableArray0 = (Comparable<CategoryTableXYDataset>[]) Array.newInstance(Comparable.class, 1);
      double[][] doubleArray0 = new double[1][2];
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of column keys does not match the number of columns in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Key not found: ", "Null 'rowData' argument.", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Comparable<DefaultBoxAndWhiskerCategoryDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerCategoryDataset>[]) Array.newInstance(Comparable.class, 1);
      Week week0 = new Week();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) week0;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of column keys does not match the number of columns in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 319.937;
      doubleArray1[1] = 581.42193304;
      doubleArray1[2] = 2682.7771;
      doubleArray1[3] = Double.POSITIVE_INFINITY;
      doubleArray1[4] = (-1764.685474591819);
      doubleArray1[5] = (-466.5635613357191);
      doubleArray1[6] = 2.0;
      doubleArray1[7] = (-1.0);
      doubleArray1[8] = (-842.657654);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2.0;
      doubleArray2[1] = (-466.5635613357191);
      doubleArray2[2] = 2.0;
      doubleArray2[3] = (-842.657654);
      doubleArray2[4] = (-466.5635613357191);
      doubleArray2[5] = (-466.5635613357191);
      doubleArray2[6] = 2682.7771;
      doubleArray2[7] = 581.42193304;
      doubleArray2[8] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-466.5635613357191);
      doubleArray3[1] = 581.42193304;
      doubleArray3[2] = (-1764.685474591819);
      doubleArray3[3] = (-479.0);
      doubleArray3[4] = 2682.7771;
      doubleArray3[5] = (-466.5635613357191);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = Double.POSITIVE_INFINITY;
      doubleArray4[1] = 2682.7771;
      doubleArray4[2] = (-1.0);
      doubleArray4[3] = 581.42193304;
      doubleArray4[4] = 319.937;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = (-1.0);
      doubleArray5[1] = (-1764.685474591819);
      doubleArray5[2] = (-842.657654);
      doubleArray5[3] = 319.937;
      doubleArray5[4] = 2.0;
      doubleArray5[5] = 581.42193304;
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range0 = new Range(6.2702533055033145, 6.2702533055033145);
      assertEquals(6.2702533055033145, range0.getUpperBound(), 0.01);
      assertEquals(6.2702533055033145, range0.getCentralValue(), 0.01);
      assertEquals(6.2702533055033145, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("Time");
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[Time]", stack0.toString());
      assertTrue(stack0.contains("Time"));
      assertTrue(boolean0);
      
      Range range1 = Range.expandToInclude(range0, 6.2702533055033145);
      assertEquals(6.2702533055033145, range0.getUpperBound(), 0.01);
      assertEquals(6.2702533055033145, range0.getCentralValue(), 0.01);
      assertEquals(6.2702533055033145, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(6.2702533055033145, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(6.2702533055033145, range1.getUpperBound(), 0.01);
      assertEquals(6.2702533055033145, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      assertSame(range0, range1);
      assertSame(range1, range0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 6.2702533055033145);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(6.2702533055033145, range2.getUpperBound(), 0.01);
      assertEquals(6.2702533055033145, range2.getLowerBound(), 0.01);
      assertEquals(6.2702533055033145, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      
      Range range3 = Range.scale(range2, 6.2702533055033145);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(6.2702533055033145, range2.getUpperBound(), 0.01);
      assertEquals(6.2702533055033145, range2.getLowerBound(), 0.01);
      assertEquals(6.2702533055033145, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(39.31607651517524, range3.getLowerBound(), 0.01);
      assertEquals(39.31607651517524, range3.getUpperBound(), 0.01);
      assertEquals(39.31607651517524, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertNotNull(range3);
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      
      Range range4 = Range.shift(range2, (-2.147483648E9), true);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(6.2702533055033145, range2.getUpperBound(), 0.01);
      assertEquals(6.2702533055033145, range2.getLowerBound(), 0.01);
      assertEquals(6.2702533055033145, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals((-2.1474836417297466E9), range4.getUpperBound(), 0.01);
      assertEquals((-2.1474836417297466E9), range4.getLowerBound(), 0.01);
      assertEquals((-2.1474836417297466E9), range4.getCentralValue(), 0.01);
      assertNotNull(range4);
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range1));
      assertNotSame(range2, range4);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(range4, range3);
      assertNotSame(range4, range2);
      assertNotSame(range4, range0);
      assertNotSame(range4, range1);
      
      Range range5 = Range.expandToInclude(range1, 6.2702533055033145);
      assertEquals(6.2702533055033145, range0.getUpperBound(), 0.01);
      assertEquals(6.2702533055033145, range0.getCentralValue(), 0.01);
      assertEquals(6.2702533055033145, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(6.2702533055033145, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(6.2702533055033145, range1.getUpperBound(), 0.01);
      assertEquals(6.2702533055033145, range1.getCentralValue(), 0.01);
      assertEquals(6.2702533055033145, range5.getUpperBound(), 0.01);
      assertEquals(6.2702533055033145, range5.getCentralValue(), 0.01);
      assertEquals(6.2702533055033145, range5.getLowerBound(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertNotNull(range5);
      assertFalse(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range4));
      assertSame(range0, range5);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range1, range4);
      assertNotSame(range1, range3);
      assertSame(range1, range0);
      assertSame(range1, range5);
      assertNotSame(range1, range2);
      assertSame(range5, range0);
      assertSame(range5, range1);
      assertNotSame(range5, range3);
      assertNotSame(range5, range4);
      assertNotSame(range5, range2);
      
      Range range6 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range2, true);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[Time]", stack0.toString());
      assertEquals(6.2702533055033145, range2.getUpperBound(), 0.01);
      assertEquals(6.2702533055033145, range2.getLowerBound(), 0.01);
      assertEquals(6.2702533055033145, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNull(range6);
      assertTrue(stack0.contains("Time"));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range5));
      assertNotSame(range2, range4);
      assertNotSame(range2, range5);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      
      Range range7 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(range7);
      
      Range range8 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(range8);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Iterator<String> iterator0 = stack0.iterator();
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(iterator0);
      
      boolean boolean0 = stack0.add("");
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(""));
      assertTrue(boolean0);
      
      Stack<CategoryTableXYDataset> stack1 = new Stack<CategoryTableXYDataset>();
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertNotNull(stack1);
      assertFalse(stack1.contains(categoryTableXYDataset0));
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(range0);
      
      double[][] doubleArray0 = new double[5][9];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-2.147483648E9);
      doubleArray1[1] = 6.2702533055033145;
      doubleArray1[2] = 2099.06948633;
      doubleArray1[3] = 6.2702533055033145;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.NaN;
      doubleArray2[1] = 6.2702533055033145;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 6.2702533055033145;
      doubleArray3[1] = (-2.147483648E9);
      doubleArray3[2] = 6.2702533055033145;
      doubleArray3[3] = 6.2702533055033145;
      doubleArray3[4] = 2099.06948633;
      doubleArray3[5] = 2099.06948633;
      doubleArray3[6] = 6.2702533055033145;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = Double.NaN;
      doubleArray4[1] = (-3412.35765164);
      doubleArray4[2] = 2099.06948633;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = (-2.147483648E9);
      doubleArray4[5] = 6.2702533055033145;
      doubleArray4[6] = (-2.147483648E9);
      doubleArray4[7] = Double.NaN;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = 6.2702533055033145;
      doubleArray5[1] = 6.2702533055033145;
      doubleArray5[2] = (-3412.35765164);
      doubleArray5[3] = Double.NaN;
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertEquals(0, doubleArray0.length);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      MockDate mockDate0 = new MockDate(378, (-1), (-1), (-1), 378);
      assertNotNull(mockDate0);
      
      Number[][] numberArray0 = new Number[2][3];
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-61);
      byteArray0[0] = (byte)32;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(6, byteArray0.length);
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)32, (byte) (-61), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Double double0 = new Double((byte) (-61));
      assertNotNull(double0);
      assertEquals((-61.0), (double)double0, 0.01);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("U`<hF66H\"yf,e|6", "U`<hF66H\"yf,e|6", numberArray0);
      assertEquals(2, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(2, numberArray0.length);
      assertNull(number0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertEquals(2, numberArray0.length);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[][] doubleArray0 = new double[5][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 407.68677729978;
      doubleArray1[1] = (-3058.8937691);
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-158.1188984021382);
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = Double.NEGATIVE_INFINITY;
      doubleArray2[3] = 407.68677729978;
      doubleArray2[4] = (-3058.8937691);
      doubleArray2[5] = (-154.45331396073);
      doubleArray2[6] = (-3058.8937691);
      doubleArray2[7] = 407.68677729978;
      doubleArray2[8] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = Double.NEGATIVE_INFINITY;
      doubleArray3[1] = 407.68677729978;
      doubleArray3[2] = (-158.1188984021382);
      doubleArray3[3] = (-158.1188984021382);
      doubleArray3[4] = (-154.45331396073);
      doubleArray3[5] = (-154.45331396073);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (-154.45331396073);
      doubleArray4[1] = (-3058.8937691);
      doubleArray4[2] = 407.68677729978;
      doubleArray4[3] = 407.68677729978;
      doubleArray4[4] = 407.68677729978;
      doubleArray4[5] = 407.68677729978;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = Double.NEGATIVE_INFINITY;
      doubleArray5[1] = Double.NEGATIVE_INFINITY;
      doubleArray5[2] = Double.NEGATIVE_INFINITY;
      doubleArray5[3] = (-3058.8937691);
      doubleArray5[4] = 407.68677729978;
      doubleArray5[5] = 3774.697040855327;
      doubleArray5[6] = Double.NEGATIVE_INFINITY;
      doubleArray5[7] = (-158.1188984021382);
      doubleArray5[8] = (-356.33);
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(407.68677729978, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      MockDate mockDate0 = new MockDate((-5305), 2387, 170, (-1), (-5305));
      assertNotNull(mockDate0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1611, "Null 'series' argument.");
      assertEquals("Null 'series' argument.", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=Null 'series' argument.,offset=1611,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1611, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      Minute minute0 = new Minute(mockDate0, simpleTimeZone0);
      assertEquals("Tue May 15 06:35:00 GMT 3207", mockDate0.toString());
      assertEquals("Null 'series' argument.", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=Null 'series' argument.,offset=1611,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1611, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(35, minute0.getMinute());
      assertEquals(6, minute0.getHourValue());
      assertEquals((-163329413100000L), minute0.getLastMillisecond());
      assertEquals((-163329413100000L), minute0.getFirstMillisecond());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      Minute minute1 = (Minute)minute0.next();
      assertEquals("Tue May 15 06:35:00 GMT 3207", mockDate0.toString());
      assertEquals("Null 'series' argument.", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=Null 'series' argument.,offset=1611,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1611, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(35, minute0.getMinute());
      assertEquals(6, minute0.getHourValue());
      assertEquals((-163329413100000L), minute0.getLastMillisecond());
      assertEquals((-163329413100000L), minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(36, minute1.getMinute());
      assertEquals(6, minute1.getHourValue());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute1);
      assertFalse(minute1.equals((Object)minute0));
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      
      long long0 = minute1.getLastMillisecond();
      assertEquals("Tue May 15 06:35:00 GMT 3207", mockDate0.toString());
      assertEquals("Null 'series' argument.", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=Null 'series' argument.,offset=1611,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1611, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(35, minute0.getMinute());
      assertEquals(6, minute0.getHourValue());
      assertEquals((-163329413100000L), minute0.getLastMillisecond());
      assertEquals((-163329413100000L), minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(36, minute1.getMinute());
      assertEquals(6, minute1.getHourValue());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertEquals(1392409281320L, long0);
      
      jDBCCategoryDataset0.addValue(0.8, (Comparable) "Null 'series' argument.", (Comparable) minute0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals("Tue May 15 06:35:00 GMT 3207", mockDate0.toString());
      assertEquals("Null 'series' argument.", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=Null 'series' argument.,offset=1611,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1611, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(35, minute0.getMinute());
      assertEquals(6, minute0.getHourValue());
      assertEquals((-163329413100000L), minute0.getLastMillisecond());
      assertEquals((-163329413100000L), minute0.getFirstMillisecond());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertFalse(minute0.equals((Object)minute1));
      assertNotSame(minute0, minute1);
      
      jDBCCategoryDataset0.setTranspose(false);
      assertFalse(jDBCCategoryDataset0.getTranspose());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) jDBCCategoryDataset0);
      assertFalse(jDBCCategoryDataset0.getTranspose());
      assertFalse(boolean0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      assertFalse(stack0.contains("Null 'series' argument."));
      
      boolean boolean1 = stack0.add("Time");
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[Time]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains("Time"));
      assertFalse(stack0.contains("Null 'series' argument."));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) jDBCCategoryDataset0, false);
      assertFalse(jDBCCategoryDataset0.getTranspose());
      assertEquals(0.8, range0.getLowerBound(), 0.01);
      assertEquals(0.8, range0.getUpperBound(), 0.01);
      assertEquals(0.8, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(jDBCCategoryDataset0);
      assertFalse(jDBCCategoryDataset0.getTranspose());
      assertEquals(0.8, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.8, range1.getUpperBound(), 0.01);
      assertEquals(0.4, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      MockDate mockDate0 = new MockDate((-1), 2387, 170, (-1), (-1));
      assertNotNull(mockDate0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Stack<TimeTableXYDataset> stack0 = new Stack<TimeTableXYDataset>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(matrixSeriesCollection0, stack0, true);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNull(range0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(mockDate0);
      assertEquals("Sun May 18 22:59:00 GMT 2098", mockDate0.toString());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, false);
      assertEquals("Sun May 18 22:59:00 GMT 2098", mockDate0.toString());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNull(range1);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(6.283185307179586, 6.283185307179586, "");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 38, 38);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(38, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(38, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingGanttCategoryDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset1 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset1);
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Quarter quarter0 = new Quarter();
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertNotNull(quarter0);
      
      Quarter quarter1 = (Quarter)quarter0.next();
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertNotNull(quarter1);
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      Short short0 = new Short((short)3903);
      assertNotNull(short0);
      assertEquals((short)3903, (short)short0);
      
      boolean boolean0 = linkedList1.add((Object) short0);
      assertEquals(1, linkedList1.size());
      assertTrue(linkedList1.contains((short)3903));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotSame(linkedList1, linkedList0);
      assertTrue(boolean0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(quarter1);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (double) 1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("", 1, 28);
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(28, matrixSeries0.getColumnsCount());
      assertEquals(28, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(28, matrixSeries0.getColumnsCount());
      assertEquals(28, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) matrixSeriesCollection0, (List) linkedList1, range0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.MatrixSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(249, "op'%");
      assertEquals(249, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=op'%,offset=249,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("op'%", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = stack0.add("op'%");
      assertEquals(10, stack0.capacity());
      assertEquals("[op'%]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains("op'%"));
      assertTrue(boolean0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertNotNull(xYSeriesCollection0);
      
      Range range0 = xYSeriesCollection0.getDomainBounds(false);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, 2844.2);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(2844.2, range1.getUpperBound(), 0.01);
      assertEquals(2844.2, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(2844.2, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) stack0, range1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.XYSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(6.283185307179586, 6.283185307179586, "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(6.283185307179586));
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(6.283185307179586, range0.getUpperBound(), 0.01);
      assertEquals(6.283185307179586, range0.getLowerBound(), 0.01);
      assertEquals(6.283185307179586, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      boolean boolean0 = true;
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(6.783185307179586, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals(6.283185307179586, range1.getCentralValue(), 0.01);
      assertEquals(5.783185307179586, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = null;
      try {
        vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>((-616));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -616
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(jDBCXYDataset0);
      
      double double0 = DatasetUtilities.calculateStackTotal(jDBCXYDataset0, 50);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0.0, double0, 0.01);
      
      PriorityQueue<XIntervalSeriesCollection> priorityQueue0 = new PriorityQueue<XIntervalSeriesCollection>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(0, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, (List) stack0, range0, false);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNull(range1);
      
      double double1 = DatasetUtilities.calculateStackTotal(jDBCXYDataset0, 50);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1L));
      assertNotNull(mockDate0);
      
      Long long0 = Long.getLong("", (-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains((-1L)));
      
      boolean boolean0 = linkedList0.removeLastOccurrence("");
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains((-1L)));
      assertFalse(boolean0);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      Long long1 = new Long((-4106L));
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals((-4106L), (long)long1);
      
      boolean boolean1 = linkedList0.add((Object) long1);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains((-1L)));
      assertTrue(linkedList0.contains((-4106L)));
      assertFalse(long1.equals((Object)long0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertNotNull(taskSeriesCollection1);
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection1, 15, 4733);
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(15, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(4733, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingGanttCategoryDataset0);
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) linkedList0, true);
      assertEquals(1, linkedList0.size());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(range0);
      assertFalse(linkedList0.contains((-1L)));
      assertTrue(linkedList0.contains((-4106L)));
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection1);
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNotNull(xYTaskDataset0);
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      
      boolean boolean2 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection1, keyToGroupMap0);
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNull(range1);
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      assertNotSame(taskSeriesCollection1, taskSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(yIntervalSeriesCollection0);
      
      Vector<Short> vector0 = new Vector<Short>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(yIntervalSeriesCollection0, true);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      Range range0 = intervalXYDelegate0.getDomainBounds(true);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNull(range0);
      
      Vector<String> vector1 = new Vector<String>();
      assertEquals(10, vector1.capacity());
      assertEquals(0, vector1.size());
      assertEquals("[]", vector1.toString());
      assertTrue(vector1.isEmpty());
      assertNotNull(vector1);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) yIntervalSeriesCollection0, (List) vector1, true);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertEquals(10, vector1.capacity());
      assertEquals(0, vector1.size());
      assertEquals("[]", vector1.toString());
      assertTrue(vector1.isEmpty());
      assertNull(range1);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, keyToGroupMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-2688), 11);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(11, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-2688), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(11, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-2688), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNull(number0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
      assertEquals(0.0, double0, 0.01);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(taskSeriesCollection0, true);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingGanttCategoryDataset0, (Comparable) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      System.setCurrentTimeMillis((-3640L));
      Week week0 = new Week(2208, 16);
      assertEquals((-3641L), week0.getLastMillisecond());
      assertEquals(16, week0.getYearValue());
      assertEquals(752L, week0.getSerialIndex());
      assertEquals((-3640L), week0.getFirstMillisecond());
      assertEquals((-96), week0.getWeek());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2208, (-684), week0);
      assertEquals((-3641L), week0.getLastMillisecond());
      assertEquals(16, week0.getYearValue());
      assertEquals(752L, week0.getSerialIndex());
      assertEquals((-3640L), week0.getFirstMillisecond());
      assertEquals((-96), week0.getWeek());
      assertEquals((-685), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertNotNull(dynamicTimeSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) dynamicTimeSeriesCollection0);
      assertEquals((-3641L), week0.getLastMillisecond());
      assertEquals(16, week0.getYearValue());
      assertEquals(752L, week0.getSerialIndex());
      assertEquals((-3640L), week0.getFirstMillisecond());
      assertEquals((-96), week0.getWeek());
      assertEquals((-685), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertNull(range0);
      
      Stack<DefaultIntervalCategoryDataset> stack0 = new Stack<DefaultIntervalCategoryDataset>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, (List) stack0, false);
      assertEquals((-3641L), week0.getLastMillisecond());
      assertEquals(16, week0.getYearValue());
      assertEquals(752L, week0.getSerialIndex());
      assertEquals((-3640L), week0.getFirstMillisecond());
      assertEquals((-96), week0.getWeek());
      assertEquals((-685), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertNull(range1);
      
      Number[][] numberArray0 = new Number[5][7];
      Number[] numberArray1 = new Number[6];
      numberArray1[0] = (Number) 2208;
      numberArray1[1] = (Number) 0;
      numberArray1[2] = (Number) 1;
      numberArray1[3] = (Number) 53;
      numberArray1[4] = (Number) 2;
      numberArray1[5] = (Number) 0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'dataset' argument.", "Null 'dataset' argument.", numberArray0);
      assertEquals(5, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertEquals(2208.0, range2.getUpperBound(), 0.01);
      assertEquals(1104.0, range2.getCentralValue(), 0.01);
      assertEquals(2208.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(5, numberArray0.length);
      assertNotNull(range2);
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0, false);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range3.getLength(), 0.01);
      assertEquals(Double.NaN, range3.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range3.getCentralValue(), 0.01);
      assertEquals((-3641L), week0.getLastMillisecond());
      assertEquals(16, week0.getYearValue());
      assertEquals(752L, week0.getSerialIndex());
      assertEquals((-3640L), week0.getFirstMillisecond());
      assertEquals((-96), week0.getWeek());
      assertEquals((-685), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertNotNull(range3);
      assertFalse(range3.equals((Object)range2));
      assertNotSame(range3, range2);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals(5, numberArray0.length);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 1.0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-479));
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, double0, 0.01);
      
      PriorityQueue<XIntervalSeriesCollection> priorityQueue0 = new PriorityQueue<XIntervalSeriesCollection>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      double double1 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-1304));
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 1118.084);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1118.084, range1.getLowerBound(), 0.01);
      assertEquals(1118.084, range1.getUpperBound(), 0.01);
      assertEquals(1118.084, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(yIntervalSeriesCollection0);
      
      boolean boolean0 = linkedList0.removeLastOccurrence(yIntervalSeriesCollection0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertFalse(boolean0);
      
      boolean boolean1 = linkedList0.add((Object) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      boolean boolean2 = linkedList0.add((Object) "");
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(""));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertNotNull(taskSeriesCollection1);
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 30, 38);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(30, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(38, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingGanttCategoryDataset0);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      assertNotNull(localDate0);
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(0L));
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) jDBCCategoryDataset0, (Comparable) mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(pieDataset0);
      
      Comparable<CategoryTableXYDataset>[] comparableArray0 = (Comparable<CategoryTableXYDataset>[]) Array.newInstance(Comparable.class, 1);
      double[][] doubleArray0 = new double[0][2];
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset1, 1.0);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-479));
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertEquals(0.0, double0, 0.01);
      
      PriorityQueue<XIntervalSeriesCollection> priorityQueue0 = new PriorityQueue<XIntervalSeriesCollection>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) vector0, range0, false);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNull(range1);
      assertTrue(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      
      double double1 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-1304));
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertEquals(double1, double0, 0.01);
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((-1764.685474591819), 2502.929189, "");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains((-1764.685474591819)));
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(2502.929189, range0.getUpperBound(), 0.01);
      assertEquals(2502.929189, range0.getLowerBound(), 0.01);
      assertEquals(2502.929189, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      
      boolean boolean0 = stack0.add(")kBx.ihkXfC4 'Lfy@");
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[)kBx.ihkXfC4 'Lfy@]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(")kBx.ihkXfC4 'Lfy@"));
      assertFalse(stack0.contains(""));
      assertTrue(boolean0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) linkedList0, true);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0, linkedList0.size());
      assertNull(range1);
      assertFalse(linkedList0.contains(")kBx.ihkXfC4 'Lfy@"));
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(2502.929189, range2.getLowerBound(), 0.01);
      assertEquals(2502.929189, range2.getCentralValue(), 0.01);
      assertEquals(2502.929189, range2.getUpperBound(), 0.01);
      assertNotNull(range2);
      assertTrue(range2.equals((Object)range0));
      assertNotSame(range2, range0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((-466.5635613357191), (-466.5635613357191), "");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      
      Range range0 = new Range((-466.5635613357191), (-466.5635613357191));
      assertEquals((-466.5635613357191), range0.getUpperBound(), 0.01);
      assertEquals((-466.5635613357191), range0.getLowerBound(), 0.01);
      assertEquals((-466.5635613357191), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      
      boolean boolean0 = stack0.add("Time");
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[Time]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains("Time"));
      assertFalse(stack0.contains(""));
      assertTrue(boolean0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, true);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[Time]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals((-466.0635613357191), range1.getUpperBound(), 0.01);
      assertEquals((-466.5635613357191), range1.getCentralValue(), 0.01);
      assertEquals((-467.0635613357191), range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertTrue(stack0.contains("Time"));
      assertFalse(stack0.contains(""));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, false);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals((-466.5635613357191), range2.getCentralValue(), 0.01);
      assertEquals((-466.5635613357191), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-466.5635613357191), range2.getUpperBound(), 0.01);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      jDBCCategoryDataset0.setValue((double) 1, (Comparable) "Time", (Comparable) "");
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(number0);
      assertEquals(0.0, number0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Range range3 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, linkedList0, false);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0, linkedList0.size());
      assertNull(range3);
      assertFalse(linkedList0.contains(""));
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      int int0 = categoryTableXYDataset0.getItemCount();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, int0);
      
      categoryTableXYDataset0.add((double) 0, (double) 0, "8QDj}dT*x0dW|zW%");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = categoryTableXYDataset0.getDomainBounds(false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(0));
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals((-0.5), range1.getLowerBound(), 0.01);
      assertEquals(0.5, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      
      System.setCurrentTimeMillis((-1L));
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, (KeyToGroupMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      MockDate mockDate0 = new MockDate((-5305), 2387, 170, (-1), (-5305));
      assertNotNull(mockDate0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1611, "Null 'series' argument.");
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=Null 'series' argument.,offset=1611,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("Null 'series' argument.", simpleTimeZone0.getID());
      assertEquals(1611, simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      
      Minute minute0 = new Minute(mockDate0, simpleTimeZone0);
      assertEquals("Tue May 15 06:35:00 GMT 3207", mockDate0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=Null 'series' argument.,offset=1611,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("Null 'series' argument.", simpleTimeZone0.getID());
      assertEquals(1611, simpleTimeZone0.getRawOffset());
      assertEquals((-163329413100000L), minute0.getLastMillisecond());
      assertEquals((-163329413100000L), minute0.getFirstMillisecond());
      assertEquals(6, minute0.getHourValue());
      assertEquals(35, minute0.getMinute());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      Minute minute1 = (Minute)minute0.next();
      assertEquals("Tue May 15 06:35:00 GMT 3207", mockDate0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=Null 'series' argument.,offset=1611,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("Null 'series' argument.", simpleTimeZone0.getID());
      assertEquals(1611, simpleTimeZone0.getRawOffset());
      assertEquals((-163329413100000L), minute0.getLastMillisecond());
      assertEquals((-163329413100000L), minute0.getFirstMillisecond());
      assertEquals(6, minute0.getHourValue());
      assertEquals(35, minute0.getMinute());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(36, minute1.getMinute());
      assertEquals(6, minute1.getHourValue());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute1);
      assertFalse(minute1.equals((Object)minute0));
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      
      long long0 = minute1.getLastMillisecond();
      assertEquals("Tue May 15 06:35:00 GMT 3207", mockDate0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=Null 'series' argument.,offset=1611,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("Null 'series' argument.", simpleTimeZone0.getID());
      assertEquals(1611, simpleTimeZone0.getRawOffset());
      assertEquals((-163329413100000L), minute0.getLastMillisecond());
      assertEquals((-163329413100000L), minute0.getFirstMillisecond());
      assertEquals(6, minute0.getHourValue());
      assertEquals(35, minute0.getMinute());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(36, minute1.getMinute());
      assertEquals(6, minute1.getHourValue());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertEquals(1392409281320L, long0);
      
      jDBCCategoryDataset0.addValue(0.8, (Comparable) "Null 'series' argument.", (Comparable) minute0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals("Tue May 15 06:35:00 GMT 3207", mockDate0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=Null 'series' argument.,offset=1611,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("Null 'series' argument.", simpleTimeZone0.getID());
      assertEquals(1611, simpleTimeZone0.getRawOffset());
      assertEquals((-163329413100000L), minute0.getLastMillisecond());
      assertEquals((-163329413100000L), minute0.getFirstMillisecond());
      assertEquals(6, minute0.getHourValue());
      assertEquals(35, minute0.getMinute());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertFalse(minute0.equals((Object)minute1));
      assertNotSame(minute0, minute1);
      
      jDBCCategoryDataset0.setTranspose(false);
      assertFalse(jDBCCategoryDataset0.getTranspose());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) jDBCCategoryDataset0);
      assertFalse(jDBCCategoryDataset0.getTranspose());
      assertFalse(boolean0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      assertFalse(stack0.contains("Null 'series' argument."));
      
      boolean boolean1 = stack0.add("Time");
      assertEquals("[Time]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.contains("Null 'series' argument."));
      assertTrue(stack0.contains("Time"));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) stack0, true);
      assertEquals("[Time]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(range0);
      assertFalse(stack0.contains("Null 'series' argument."));
      assertTrue(stack0.contains("Time"));
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) jDBCCategoryDataset0, keyToGroupMap0);
      assertFalse(jDBCCategoryDataset0.getTranspose());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.8, range1.getLength(), 0.01);
      assertEquals(0.4, range1.getCentralValue(), 0.01);
      assertEquals(0.8, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) jDBCCategoryDataset0);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.8, range2.getUpperBound(), 0.01);
      assertEquals(0.8, range2.getCentralValue(), 0.01);
      assertEquals(0.8, range2.getLowerBound(), 0.01);
      assertFalse(jDBCCategoryDataset0.getTranspose());
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range1));
      assertNotSame(range2, range1);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("Requires 'start' < 'end'.");
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[Requires 'start' < 'end'.]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains("Requires 'start' < 'end'."));
      assertTrue(boolean0);
      
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(6.2702533055033145, 6.2702533055033145, "");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      
      Range range0 = new Range(6.2702533055033145, 6.2702533055033145);
      assertEquals(6.2702533055033145, range0.getUpperBound(), 0.01);
      assertEquals(6.2702533055033145, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(6.2702533055033145, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      
      PriorityQueue<XIntervalSeriesCollection> priorityQueue0 = new PriorityQueue<XIntervalSeriesCollection>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNull(range0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("W[$.JQeJi|>6u'Y");
      assertEquals("[W[$.JQeJi|>6u'Y]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains("W[$.JQeJi|>6u'Y"));
      assertTrue(boolean0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("Requires 'start' < 'end'.");
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, true);
      assertEquals("[W[$.JQeJi|>6u'Y]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNull(range1);
      assertTrue(stack0.contains("W[$.JQeJi|>6u'Y"));
      assertFalse(stack0.contains("Requires 'start' < 'end'."));
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("W[$.JQeJi|>6u'Y"));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean1 = linkedList0.add((Object) defaultStatisticalCategoryDataset0);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains("W[$.JQeJi|>6u'Y"));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean2 = linkedList0.removeLastOccurrence(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains("W[$.JQeJi|>6u'Y"));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      boolean boolean3 = linkedList0.add((Object) xIntervalSeriesCollection0);
      assertEquals(2, linkedList0.size());
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertFalse(linkedList0.contains("W[$.JQeJi|>6u'Y"));
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1407, 4733);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(4733, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1407, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) linkedList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultStatisticalCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      int int0 = (-1);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((double) (-1), (-2318.97), ").d^93z");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains((-2318.97)));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      assertFalse(stack0.contains(").d^93z"));
      
      boolean boolean0 = stack0.add("Time");
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[Time]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains("Time"));
      assertFalse(stack0.contains(").d^93z"));
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[Time]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertTrue(stack0.contains("Time"));
      assertFalse(stack0.contains(").d^93z"));
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-2318.97), range1.getUpperBound(), 0.01);
      assertEquals((-2318.97), range1.getCentralValue(), 0.01);
      assertEquals((-2318.97), range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      int int1 = 1554;
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Week week0 = new Week(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(2573, "Time", 1554, 53, 661, 1094, (-1), 335, 954437177, 2387, 335);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 1554
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      assertNotNull(localDate0);
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(0L));
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      boolean boolean0 = linkedList1.add((Object) integer0);
      assertEquals(1, linkedList1.size());
      assertFalse(linkedList1.contains(0L));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotSame(linkedList1, linkedList0);
      assertTrue(boolean0);
      
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      assertFalse(linkedList2.contains(0L));
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertFalse(linkedList2.equals((Object)linkedList1));
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      boolean boolean1 = linkedList2.removeLastOccurrence(defaultTableXYDataset0);
      assertEquals(0, linkedList2.size());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(linkedList2.contains(0L));
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(linkedList2, linkedList1);
      assertFalse(boolean1);
      
      MultipleGradientPaint.ColorSpaceType multipleGradientPaint_ColorSpaceType0 = MultipleGradientPaint.ColorSpaceType.SRGB;
      assertEquals(MultipleGradientPaint.ColorSpaceType.SRGB, multipleGradientPaint_ColorSpaceType0);
      
      defaultMultiValueCategoryDataset0.add(linkedList1, multipleGradientPaint_ColorSpaceType0, integer0);
      assertEquals(1, linkedList1.size());
      assertFalse(linkedList1.contains(0L));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList1.equals((Object)linkedList2));
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(linkedList1, linkedList2);
      
      boolean boolean2 = linkedList2.add((Object) multipleGradientPaint_ColorSpaceType0);
      assertEquals(1, linkedList2.size());
      assertFalse(linkedList2.contains(0L));
      assertFalse(linkedList2.equals((Object)linkedList0));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(linkedList2, linkedList1);
      assertTrue(boolean2);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, false);
      assertEquals(0, linkedList0.size());
      assertNull(range0);
      assertFalse(linkedList0.contains(false));
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList0.equals((Object)linkedList2));
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList0, linkedList2);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      boolean boolean3 = linkedList2.add((Object) timePeriodValuesCollection0);
      assertEquals(2, linkedList2.size());
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertFalse(linkedList2.contains(false));
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(linkedList2.equals((Object)linkedList0));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(linkedList2, linkedList1);
      assertTrue(boolean3);
      
      Range range1 = defaultTableXYDataset0.getDomainBounds(true);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(range1);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNull(number0);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNotNull(number1);
      assertEquals((-30000.0), number1);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList1, false);
      assertEquals(1, linkedList1.size());
      assertNull(range2);
      assertFalse(linkedList1.contains(false));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList1.equals((Object)linkedList2));
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(linkedList1, linkedList2);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNotNull(vectorSeriesCollection0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(vectorSeriesCollection0, arrayList0, true);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNull(range1);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      int int0 = defaultMultiValueCategoryDataset0.getRowCount();
      assertEquals(0, int0);
      
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertNotNull(jDBCXYDataset0);
      
      jDBCXYDataset0.close();
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertNotNull(xYDatasetTableModel0);
      
      vectorSeriesCollection0.removeChangeListener(xYDatasetTableModel0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, true);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertNotNull(range2);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Minute minute0 = new Minute();
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(minute0);
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertTrue(boolean0);
      
      Comparable<XIntervalSeriesCollection>[] comparableArray0 = (Comparable<XIntervalSeriesCollection>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      assertNotNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      assertNotNull(localDate0);
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(0L));
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) jDBCCategoryDataset0, (Comparable) mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(pieDataset0);
      
      Comparable<CategoryTableXYDataset>[] comparableArray0 = (Comparable<CategoryTableXYDataset>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      assertNotNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNotNull(vectorSeriesCollection0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(vectorSeriesCollection0, arrayList0, true);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNull(range1);
      
      Short short0 = new Short((short)754);
      assertNotNull(short0);
      assertEquals((short)754, (short)short0);
      
      boolean boolean0 = arrayList0.add(short0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(short0));
      assertTrue(boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>(37);
      assertEquals("[]", vector0.toString());
      assertEquals(37, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, false);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNull(range2);
      assertTrue(arrayList0.contains(short0));
      
      Range range3 = DatasetUtilities.iterateRangeBounds((XYDataset) vectorSeriesCollection0, true);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNull(range3);
      
      Range range4 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertNotNull(range4);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(756.58460494342, 756.58460494342);
      assertEquals(756.58460494342, lineFunction2D0.getSlope(), 0.01);
      assertEquals(756.58460494342, lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, 1.0, 1.0, 626, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((-447.27472801881026), (-447.27472801881026), "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-447.27472801881026), range0.getCentralValue(), 0.01);
      assertEquals((-447.27472801881026), range0.getLowerBound(), 0.01);
      assertEquals((-447.27472801881026), range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      
      boolean boolean0 = stack0.add("Time");
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[Time]", stack0.toString());
      assertTrue(stack0.contains("Time"));
      assertFalse(stack0.contains(""));
      assertTrue(boolean0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      MockDate mockDate0 = new MockDate((-5305), 2387, 170, (-1), (-5305));
      assertNotNull(mockDate0);
      
      String string0 = "";
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(2.0, (-1828.0), "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(170));
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1828.0), range0.getLowerBound(), 0.01);
      assertEquals((-1828.0), range0.getUpperBound(), 0.01);
      assertEquals((-1828.0), range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      assertFalse(stack0.contains(string0));
      
      boolean boolean0 = stack0.add("");
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(""));
      assertTrue(boolean0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(2.0, range1.getUpperBound(), 0.01);
      assertEquals(2.0, range1.getCentralValue(), 0.01);
      assertEquals(2.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertTrue(stack0.contains(""));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNull(range2);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, true);
      assertNull(range3);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(number0);
      assertEquals((-1828.0), number0);
      
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSet) null).when(statement0).executeQuery(anyString());
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0).when(connection1).createStatement();
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Number number1 = DatasetUtilities.findMaximumDomainValue(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(number1);
      assertFalse(number1.equals((Object)number0));
      assertEquals(2.5, number1);
      
      System.setCurrentTimeMillis(2387);
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset(connection1, "org.jfree.data.ComparableObjectItem");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-2679), 38);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(38, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-2679), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(38, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-2679), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNull(number0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset1 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset1);
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertEquals(0, doubleArray0.length);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      MockDate mockDate0 = new MockDate(378, (-1), (-1), (-1), 378);
      assertNotNull(mockDate0);
      
      Number[][] numberArray0 = new Number[2][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) mockDate0, (KeyedValues) defaultKeyedValuesDataset0);
      assertEquals("Thu Nov 29 05:18:00 GMT 2277", mockDate0.toString());
      assertNotNull(categoryDataset0);
      
      ArrayList<JDBCXYDataset> arrayList0 = new ArrayList<JDBCXYDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, (List) arrayList0, false);
      assertEquals("Thu Nov 29 05:18:00 GMT 2277", mockDate0.toString());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range0);
      
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "U`<hF66H\"yf,e|6", "U`<hF66H\"yf,e|6");
      assertEquals("Thu Nov 29 05:18:00 GMT 2277", mockDate0.toString());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("U`<hF66H\"yf,e|6", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("U`<hF66H\"yf,e|6", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNotNull(timeSeries0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      assertEquals("Thu Nov 29 05:18:00 GMT 2277", mockDate0.toString());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("U`<hF66H\"yf,e|6", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("U`<hF66H\"yf,e|6", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      assertEquals("Thu Nov 29 05:18:00 GMT 2277", mockDate0.toString());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("U`<hF66H\"yf,e|6", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("U`<hF66H\"yf,e|6", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset((String) null, "U`<hF66H\"yf,e|6", numberArray0);
      assertEquals(2, numberArray0.length);
      assertNotNull(categoryDataset1);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotSame(categoryDataset1, categoryDataset0);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset1);
      assertEquals(2, numberArray0.length);
      assertNull(number1);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotSame(categoryDataset1, categoryDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Vector<Short> vector0 = new Vector<Short>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset1, (List) arrayList0, true);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(2, numberArray0.length);
      assertNull(range1);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotSame(categoryDataset1, categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Minute minute0 = new Minute();
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(minute0);
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertTrue(boolean0);
      
      double[][] doubleArray0 = new double[9][5];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 59;
      doubleArray1[2] = (double) 59;
      doubleArray1[3] = (double) 59;
      doubleArray1[4] = (double) 59;
      doubleArray1[5] = 4636.9;
      doubleArray1[6] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = 4636.9;
      doubleArray2[4] = (double) 59;
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = (double) 59;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 4636.9;
      doubleArray3[1] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 4636.9;
      doubleArray4[1] = (double) 59;
      doubleArray4[2] = (double) 59;
      doubleArray4[3] = (double) 0;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = 1307.93933917;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = 1283.4;
      doubleArray5[1] = (double) 59;
      doubleArray5[2] = (double) 59;
      doubleArray5[3] = (double) 59;
      doubleArray5[4] = 1307.93933917;
      doubleArray5[5] = 1307.93933917;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      
      doubleArray6[0] = 1283.4;
      doubleArray6[1] = Double.NEGATIVE_INFINITY;
      doubleArray6[2] = 1283.4;
      doubleArray6[3] = 1283.4;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[8];
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      
      doubleArray7[0] = (double) 0;
      doubleArray7[1] = 4636.9;
      doubleArray7[2] = 1283.4;
      doubleArray7[3] = 5029.746517826982;
      doubleArray7[4] = 0.0;
      doubleArray7[5] = 0.0;
      doubleArray7[6] = (-2093.0);
      doubleArray7[7] = 1283.4;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[8];
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      
      doubleArray8[0] = Double.NEGATIVE_INFINITY;
      doubleArray8[1] = 0.0;
      doubleArray8[2] = (-2093.0);
      doubleArray8[3] = 0.0;
      doubleArray8[4] = (-584.5877);
      doubleArray8[5] = 0.0;
      doubleArray8[6] = 1307.93933917;
      doubleArray8[7] = 5029.746517826982;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[0];
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      
      doubleArray0[8] = doubleArray9;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'rowKey' argument.", "Null 'rowKey' argument.", doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertEquals(9, doubleArray0.length);
      assertNotNull(number0);
      assertEquals(Double.NEGATIVE_INFINITY, number0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      assertNotNull(localDate0);
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(0L));
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      boolean boolean0 = linkedList1.add((Object) integer0);
      assertEquals(1, linkedList1.size());
      assertFalse(linkedList1.contains(0L));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotSame(linkedList1, linkedList0);
      assertTrue(boolean0);
      
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      assertFalse(linkedList2.contains(0L));
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertFalse(linkedList2.equals((Object)linkedList1));
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      boolean boolean1 = linkedList2.removeLastOccurrence(defaultTableXYDataset0);
      assertEquals(0, linkedList2.size());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(linkedList2.contains(0L));
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(linkedList2, linkedList1);
      assertFalse(boolean1);
      
      MultipleGradientPaint.ColorSpaceType multipleGradientPaint_ColorSpaceType0 = MultipleGradientPaint.ColorSpaceType.SRGB;
      assertEquals(MultipleGradientPaint.ColorSpaceType.SRGB, multipleGradientPaint_ColorSpaceType0);
      
      boolean boolean2 = linkedList2.add((Object) multipleGradientPaint_ColorSpaceType0);
      assertEquals(1, linkedList2.size());
      assertFalse(linkedList2.contains(0L));
      assertFalse(linkedList2.equals((Object)linkedList0));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(linkedList2, linkedList1);
      assertTrue(boolean2);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, false);
      assertEquals(0, linkedList0.size());
      assertNull(range0);
      assertFalse(linkedList0.contains(0L));
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList0.equals((Object)linkedList2));
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList0, linkedList2);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultTableXYDataset0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection1);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      jDBCCategoryDataset0.setValue((double) 0L, (Comparable) integer0, (Comparable) localDate0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(number1);
      assertFalse(number1.equals((Object)number0));
      assertEquals(0.0, number1);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList1, false);
      assertEquals(1, linkedList1.size());
      assertNull(range1);
      assertFalse(linkedList1.contains(0L));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList1.equals((Object)linkedList2));
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(linkedList1, linkedList2);
      
      double double0 = 0.0;
      NormalDistributionFunction2D normalDistributionFunction2D0 = null;
      try {
        normalDistributionFunction2D0 = new NormalDistributionFunction2D(0L, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'std' > 0.
         //
         verifyException("org.jfree.data.function.NormalDistributionFunction2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(number0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, true);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(range0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>(37);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(37, vector0.capacity());
      assertNotNull(vector0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(range1);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNull(range2);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(range3);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 1.0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("", "", (Number[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(6.283185307179586, 6.283185307179586, "");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(6.283185307179586, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(6.283185307179586, range0.getCentralValue(), 0.01);
      assertEquals(6.283185307179586, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      
      boolean boolean0 = stack0.add("Time");
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[Time]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains("Time"));
      assertFalse(stack0.contains(""));
      assertTrue(boolean0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, false);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[Time]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(6.283185307179586, range1.getLowerBound(), 0.01);
      assertEquals(6.283185307179586, range1.getUpperBound(), 0.01);
      assertEquals(6.283185307179586, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertTrue(stack0.contains("Time"));
      assertFalse(stack0.contains(""));
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNull(range2);
      
      int int0 = categoryTableXYDataset0.indexOf("Time");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals((-1), int0);
      
      Range range3 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, false);
      assertEquals(Double.NaN, range3.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range3.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range3.getLength(), 0.01);
      assertEquals(Double.NaN, range3.getLowerBound(), 0.01);
      assertNotNull(range3);
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      
      Range range4 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, false);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(6.283185307179586, range4.getCentralValue(), 0.01);
      assertEquals(6.283185307179586, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(6.283185307179586, range4.getLowerBound(), 0.01);
      assertNotNull(range4);
      assertTrue(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range3));
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertNotSame(range4, range3);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      MockDate mockDate0 = new MockDate((-5305), 2387, 170, (-1), (-5305));
      assertNotNull(mockDate0);
      
      String string0 = "";
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(2.0, (-1828.0), "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains((-5305)));
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-1828.0), range0.getUpperBound(), 0.01);
      assertEquals((-1828.0), range0.getLowerBound(), 0.01);
      assertEquals((-1828.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      assertFalse(stack0.contains(string0));
      
      boolean boolean0 = stack0.add("");
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.contains(""));
      assertTrue(boolean0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(2.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(2.0, range1.getUpperBound(), 0.01);
      assertEquals(2.0, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      assertTrue(stack0.contains(""));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNull(range2);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, true);
      assertNull(range3);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(number0);
      assertEquals((-1828.0), number0);
      
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection1).createStatement();
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset(connection1, "org.jfree.data.ComparableObjectItem");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(6.283185307179586, 6.283185307179586, "");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(6.283185307179586));
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(6.283185307179586, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(6.283185307179586, range0.getUpperBound(), 0.01);
      assertEquals(6.283185307179586, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      
      boolean boolean0 = stack0.add("Time");
      assertFalse(stack0.empty());
      assertEquals("[Time]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains("Time"));
      assertFalse(stack0.contains(""));
      assertTrue(boolean0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, true);
      assertNull(range1);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(number0);
      assertEquals(6.283185307179586, number0);
      
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset((Connection) null, "DajkyVc,B_GH");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // A connection must be supplied.
         //
         verifyException("org.jfree.data.jdbc.JDBCPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      MockDate mockDate0 = new MockDate((-1L));
      assertNotNull(mockDate0);
      
      Month month0 = new Month(mockDate0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(23640L, month0.getSerialIndex());
      assertEquals(1969, month0.getYearValue());
      assertEquals(12, month0.getMonth());
      assertEquals((-1L), month0.getFirstMillisecond());
      assertEquals((-1L), month0.getLastMillisecond());
      assertNotNull(month0);
      
      Month month1 = (Month)month0.next();
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(23640L, month0.getSerialIndex());
      assertEquals(1969, month0.getYearValue());
      assertEquals(12, month0.getMonth());
      assertEquals((-1L), month0.getFirstMillisecond());
      assertEquals((-1L), month0.getLastMillisecond());
      assertEquals(1392409281320L, month1.getFirstMillisecond());
      assertEquals(1392409281320L, month1.getLastMillisecond());
      assertEquals(23641L, month1.getSerialIndex());
      assertEquals(1970, month1.getYearValue());
      assertEquals(1, month1.getMonth());
      assertNotNull(month1);
      assertFalse(month1.equals((Object)month0));
      assertNotSame(month0, month1);
      assertNotSame(month1, month0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(month1);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(23640L, month0.getSerialIndex());
      assertEquals(1969, month0.getYearValue());
      assertEquals(12, month0.getMonth());
      assertEquals((-1L), month0.getFirstMillisecond());
      assertEquals((-1L), month0.getLastMillisecond());
      assertEquals(1392409281320L, month1.getFirstMillisecond());
      assertEquals(1392409281320L, month1.getLastMillisecond());
      assertEquals(23641L, month1.getSerialIndex());
      assertEquals(1970, month1.getYearValue());
      assertEquals(1, month1.getMonth());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertFalse(month0.equals((Object)month1));
      assertFalse(month1.equals((Object)month0));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, true);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(23640L, month0.getSerialIndex());
      assertEquals(1969, month0.getYearValue());
      assertEquals(12, month0.getMonth());
      assertEquals((-1L), month0.getFirstMillisecond());
      assertEquals((-1L), month0.getLastMillisecond());
      assertEquals(1392409281320L, month1.getFirstMillisecond());
      assertEquals(1392409281320L, month1.getLastMillisecond());
      assertEquals(23641L, month1.getSerialIndex());
      assertEquals(1970, month1.getYearValue());
      assertEquals(1, month1.getMonth());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNull(range0);
      assertFalse(month0.equals((Object)month1));
      assertFalse(month1.equals((Object)month0));
      assertNotSame(month0, month1);
      assertNotSame(month1, month0);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-479));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(23640L, month0.getSerialIndex());
      assertEquals(1969, month0.getYearValue());
      assertEquals(12, month0.getMonth());
      assertEquals((-1L), month0.getFirstMillisecond());
      assertEquals((-1L), month0.getLastMillisecond());
      assertEquals(1392409281320L, month1.getFirstMillisecond());
      assertEquals(1392409281320L, month1.getLastMillisecond());
      assertEquals(23641L, month1.getSerialIndex());
      assertEquals(1970, month1.getYearValue());
      assertEquals(1, month1.getMonth());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertFalse(month0.equals((Object)month1));
      assertFalse(month1.equals((Object)month0));
      assertNotSame(month0, month1);
      assertNotSame(month1, month0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNull(number0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      System.setCurrentTimeMillis((-3640L));
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((-437.45505834), (-1764.685474591819), "");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains((-437.45505834)));
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-1764.685474591819), range0.getUpperBound(), 0.01);
      assertEquals((-1764.685474591819), range0.getLowerBound(), 0.01);
      assertEquals((-1764.685474591819), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      
      boolean boolean0 = stack0.add("Time");
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[Time]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(""));
      assertTrue(stack0.contains("Time"));
      assertTrue(boolean0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, true);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[Time]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals((-437.45505834), range1.getCentralValue(), 0.01);
      assertEquals((-436.95505834), range1.getUpperBound(), 0.01);
      assertEquals((-437.95505834), range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertFalse(stack0.contains(""));
      assertTrue(stack0.contains("Time"));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(number0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(boolean0);
      
      int int0 = (-1290);
      Minute minute0 = new Minute();
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      Minute minute1 = (Minute)minute0.next();
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(22, minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute1);
      assertFalse(minute1.equals((Object)minute0));
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      
      String string0 = minute1.toString();
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(22, minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(string0);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", string0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (Comparable) minute1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(22, minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(defaultPieDataset0);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((Comparable) minute0, (KeyedValues) defaultPieDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(22, minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(defaultCategoryDataset0);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, (Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 182, 0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(182, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNotNull(vectorSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) vectorSeriesCollection0, true);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>(37);
      assertEquals(37, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean1 = vector0.add(defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(37, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertTrue(vector0.contains(defaultBoxAndWhiskerCategoryDataset0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) vector0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(number0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, true);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(range0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>(606);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(606, vector0.capacity());
      assertNotNull(vector0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) null, (List) vector0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      defaultKeyedValues0.setValue((Comparable) "U`<htrF66H\"yf,e|6", (Number) null);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "U`<htrF66H\"yf,e|6", (KeyedValues) defaultKeyedValues0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertNotNull(categoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, (Comparable) "U`<htrF66H\"yf,e|6");
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertNotNull(pieDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertNull(number0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("Requires 'start' < 'end'.");
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[Requires 'start' < 'end'.]", stack0.toString());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains("Requires 'start' < 'end'."));
      assertTrue(boolean0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("Requires 'start' < 'end'.");
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, false);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[Requires 'start' < 'end'.]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNull(range0);
      assertTrue(stack0.contains("Requires 'start' < 'end'."));
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNull(range1);
      
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset1 = new JDBCCategoryDataset(connection1);
      assertTrue(jDBCCategoryDataset1.getTranspose());
      assertNotNull(jDBCCategoryDataset1);
      assertTrue(jDBCCategoryDataset1.equals((Object)jDBCCategoryDataset0));
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) jDBCCategoryDataset1, (Comparable) "Requires 'start' < 'end'.");
      assertTrue(jDBCCategoryDataset1.getTranspose());
      assertNotNull(pieDataset0);
      assertTrue(jDBCCategoryDataset1.equals((Object)jDBCCategoryDataset0));
      assertNotSame(jDBCCategoryDataset1, jDBCCategoryDataset0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(pieDataset0);
      assertTrue(jDBCCategoryDataset1.getTranspose());
      assertNotNull(defaultPieDataset0);
      assertTrue(jDBCCategoryDataset1.equals((Object)jDBCCategoryDataset0));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(yIntervalSeriesCollection0);
      
      YIntervalSeriesCollection yIntervalSeriesCollection1 = new YIntervalSeriesCollection();
      assertEquals(0, yIntervalSeriesCollection1.getSeriesCount());
      assertNotNull(yIntervalSeriesCollection1);
      assertTrue(yIntervalSeriesCollection1.equals((Object)yIntervalSeriesCollection0));
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(jDBCCategoryDataset1.getTranspose());
      assertTrue(jDBCCategoryDataset1.equals((Object)jDBCCategoryDataset0));
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(jDBCCategoryDataset1, jDBCCategoryDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertTrue(boolean1);
      
      Range range2 = DatasetUtilities.iterateXYRangeBounds(yIntervalSeriesCollection1);
      assertEquals(0, yIntervalSeriesCollection1.getSeriesCount());
      assertNull(range2);
      assertTrue(yIntervalSeriesCollection1.equals((Object)yIntervalSeriesCollection0));
      assertNotSame(yIntervalSeriesCollection1, yIntervalSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNull(number0);
      assertTrue(yIntervalSeriesCollection0.equals((Object)yIntervalSeriesCollection1));
      assertNotSame(yIntervalSeriesCollection0, yIntervalSeriesCollection1);
      
      Range range3 = DatasetUtilities.findDomainBounds((XYDataset) yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNull(range3);
      assertTrue(yIntervalSeriesCollection0.equals((Object)yIntervalSeriesCollection1));
      assertNotSame(yIntervalSeriesCollection0, yIntervalSeriesCollection1);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      System.setCurrentTimeMillis((-3640L));
      Week week0 = new Week(2208, 16);
      assertEquals((-3640L), week0.getFirstMillisecond());
      assertEquals(752L, week0.getSerialIndex());
      assertEquals((-96), week0.getWeek());
      assertEquals((-3641L), week0.getLastMillisecond());
      assertEquals(16, week0.getYearValue());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2208, (-684), week0);
      assertEquals((-3640L), week0.getFirstMillisecond());
      assertEquals(752L, week0.getSerialIndex());
      assertEquals((-96), week0.getWeek());
      assertEquals((-3641L), week0.getLastMillisecond());
      assertEquals(16, week0.getYearValue());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-685), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertNotNull(dynamicTimeSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) dynamicTimeSeriesCollection0);
      assertEquals((-3640L), week0.getFirstMillisecond());
      assertEquals(752L, week0.getSerialIndex());
      assertEquals((-96), week0.getWeek());
      assertEquals((-3641L), week0.getLastMillisecond());
      assertEquals(16, week0.getYearValue());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-685), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertNull(range0);
      
      Stack<DefaultIntervalCategoryDataset> stack0 = new Stack<DefaultIntervalCategoryDataset>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, (List) stack0, false);
      assertEquals((-3640L), week0.getFirstMillisecond());
      assertEquals(752L, week0.getSerialIndex());
      assertEquals((-96), week0.getWeek());
      assertEquals((-3641L), week0.getLastMillisecond());
      assertEquals(16, week0.getYearValue());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-685), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertNull(range1);
      
      Number[][] numberArray0 = new Number[1][7];
      Number[] numberArray1 = new Number[6];
      numberArray1[0] = (Number) 0;
      numberArray1[1] = (Number) 0;
      numberArray1[2] = (Number) 1;
      numberArray1[3] = (Number) 53;
      numberArray1[4] = (Number) 2;
      numberArray1[5] = (Number) 0;
      numberArray0[0] = numberArray1;
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(boolean0);
      
      Range range2 = DatasetUtilities.iterateXYRangeBounds(dynamicTimeSeriesCollection0);
      assertEquals((-3640L), week0.getFirstMillisecond());
      assertEquals(752L, week0.getSerialIndex());
      assertEquals((-96), week0.getWeek());
      assertEquals((-3641L), week0.getLastMillisecond());
      assertEquals(16, week0.getYearValue());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-685), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertNull(range2);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) dynamicTimeSeriesCollection0);
      assertEquals((-3640L), week0.getFirstMillisecond());
      assertEquals(752L, week0.getSerialIndex());
      assertEquals((-96), week0.getWeek());
      assertEquals((-3641L), week0.getLastMillisecond());
      assertEquals(16, week0.getYearValue());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-685), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      MockDate mockDate0 = new MockDate(378, (-1), (-1), (-1), 378);
      assertNotNull(mockDate0);
      
      Number[][] numberArray0 = new Number[1][3];
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-54);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("U`<hF66H\"yf,e|6", "U`<hF66H\"yf,e|6", numberArray0);
      assertEquals(1, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("U`<hF66H\"yf,e|6");
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      MockDate mockDate1 = new MockDate(2811, (-1), 2811, 2811, (byte) (-54));
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      ZoneId zoneId0 = ZoneId.systemDefault();
      assertNotNull(zoneId0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Minute minute0 = new Minute(mockDate1, timeZone0);
      assertEquals("Fri Dec 06 02:06:00 GMT 4718", mockDate1.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(86747767560000L, minute0.getLastMillisecond());
      assertEquals(86747767560000L, minute0.getFirstMillisecond());
      assertEquals(6, minute0.getMinute());
      assertEquals(2, minute0.getHourValue());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      Minute minute1 = (Minute)minute0.previous();
      assertEquals("Fri Dec 06 02:06:00 GMT 4718", mockDate1.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(86747767560000L, minute0.getLastMillisecond());
      assertEquals(86747767560000L, minute0.getFirstMillisecond());
      assertEquals(6, minute0.getMinute());
      assertEquals(2, minute0.getHourValue());
      assertEquals(5, minute1.getMinute());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(2, minute1.getHourValue());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(minute1.equals((Object)minute0));
      assertNotSame(mockDate1, mockDate0);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (-316));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      double[][] doubleArray0 = new double[6][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 2534.93432021936;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 457.0;
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = 2534.93432021936;
      doubleArray2[3] = (-1.0);
      doubleArray2[4] = 2534.93432021936;
      doubleArray2[5] = 1.0;
      doubleArray2[6] = 2534.93432021936;
      doubleArray2[7] = (-1.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 2534.93432021936;
      doubleArray3[1] = 457.0;
      doubleArray3[2] = 2534.93432021936;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 457.0;
      doubleArray4[1] = 2534.93432021936;
      doubleArray4[2] = 1.0;
      doubleArray4[3] = 2534.93432021936;
      doubleArray4[4] = 1.0;
      doubleArray4[5] = 2534.93432021936;
      doubleArray4[6] = 2534.93432021936;
      doubleArray4[7] = (-1.0);
      doubleArray4[8] = (-1.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = 1.0;
      doubleArray5[1] = 1.0;
      doubleArray5[2] = 2534.93432021936;
      doubleArray5[3] = (-1.0);
      doubleArray5[4] = 2534.93432021936;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      
      doubleArray0[5] = doubleArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertEquals(0, doubleArray0.length);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      MockDate mockDate0 = new MockDate(378, (-1), (-1), (-1), 1592);
      assertNotNull(mockDate0);
      
      Number[][] numberArray0 = new Number[2][3];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)32;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(6, byteArray0.length);
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)87, (byte) (-61), (byte)32, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Double double0 = new Double((byte)32);
      assertNotNull(double0);
      assertEquals(32.0, (double)double0, 0.01);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("U`<hF66H\"yf,e|6", "U`<hF66H\"yf,e|6", numberArray0);
      assertEquals(2, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(2, numberArray0.length);
      assertNull(number0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(2, numberArray0.length);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[6];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte) (-54);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      double[][] doubleArray1 = new double[5][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, doubleArray1.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap1 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap1.getGroupCount());
      assertNotNull(keyToGroupMap1);
      assertTrue(keyToGroupMap1.equals((Object)keyToGroupMap0));
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap1);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, keyToGroupMap1.getGroupCount());
      assertEquals(270.0, range0.getLength(), 0.01);
      assertEquals((-135.0), range0.getCentralValue(), 0.01);
      assertEquals((-270.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(5, doubleArray1.length);
      assertNotNull(range0);
      assertTrue(keyToGroupMap1.equals((Object)keyToGroupMap0));
      assertNotSame(keyToGroupMap1, keyToGroupMap0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null, timeZone0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertTrue(boolean0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals((-54.0), range1.getLowerBound(), 0.01);
      assertEquals((-27.0), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(54.0, range1.getLength(), 0.01);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, doubleArray1.length);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      MockDate mockDate0 = new MockDate((-5305), 2387, 170, (-1), (-5305));
      assertNotNull(mockDate0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1611, "Null 'series' argument.");
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("Null 'series' argument.", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=Null 'series' argument.,offset=1611,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1611, simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      
      Minute minute0 = new Minute(mockDate0, simpleTimeZone0);
      assertEquals("Tue May 15 06:35:00 GMT 3207", mockDate0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("Null 'series' argument.", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=Null 'series' argument.,offset=1611,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1611, simpleTimeZone0.getRawOffset());
      assertEquals((-163329413100000L), minute0.getLastMillisecond());
      assertEquals(6, minute0.getHourValue());
      assertEquals((-163329413100000L), minute0.getFirstMillisecond());
      assertEquals(35, minute0.getMinute());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      Minute minute1 = (Minute)minute0.next();
      assertEquals("Tue May 15 06:35:00 GMT 3207", mockDate0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("Null 'series' argument.", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=Null 'series' argument.,offset=1611,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1611, simpleTimeZone0.getRawOffset());
      assertEquals((-163329413100000L), minute0.getLastMillisecond());
      assertEquals(6, minute0.getHourValue());
      assertEquals((-163329413100000L), minute0.getFirstMillisecond());
      assertEquals(35, minute0.getMinute());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(6, minute1.getHourValue());
      assertEquals(36, minute1.getMinute());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute1);
      assertFalse(minute1.equals((Object)minute0));
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      
      Hour hour0 = minute1.getHour();
      assertEquals("Tue May 15 06:35:00 GMT 3207", mockDate0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("Null 'series' argument.", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=Null 'series' argument.,offset=1611,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1611, simpleTimeZone0.getRawOffset());
      assertEquals((-163329413100000L), minute0.getLastMillisecond());
      assertEquals(6, minute0.getHourValue());
      assertEquals((-163329413100000L), minute0.getFirstMillisecond());
      assertEquals(35, minute0.getMinute());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(6, minute1.getHourValue());
      assertEquals(36, minute1.getMinute());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(6, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      
      long long0 = minute1.getLastMillisecond();
      assertEquals("Tue May 15 06:35:00 GMT 3207", mockDate0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("Null 'series' argument.", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=Null 'series' argument.,offset=1611,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1611, simpleTimeZone0.getRawOffset());
      assertEquals((-163329413100000L), minute0.getLastMillisecond());
      assertEquals(6, minute0.getHourValue());
      assertEquals((-163329413100000L), minute0.getFirstMillisecond());
      assertEquals(35, minute0.getMinute());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(6, minute1.getHourValue());
      assertEquals(36, minute1.getMinute());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertEquals(1392409281320L, long0);
      
      jDBCCategoryDataset0.addValue(0.8, (Comparable) "Null 'series' argument.", (Comparable) minute0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals("Tue May 15 06:35:00 GMT 3207", mockDate0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("Null 'series' argument.", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=Null 'series' argument.,offset=1611,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1611, simpleTimeZone0.getRawOffset());
      assertEquals((-163329413100000L), minute0.getLastMillisecond());
      assertEquals(6, minute0.getHourValue());
      assertEquals((-163329413100000L), minute0.getFirstMillisecond());
      assertEquals(35, minute0.getMinute());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertFalse(minute0.equals((Object)minute1));
      assertNotSame(minute0, minute1);
      
      jDBCCategoryDataset0.setTranspose(false);
      assertFalse(jDBCCategoryDataset0.getTranspose());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) jDBCCategoryDataset0);
      assertFalse(jDBCCategoryDataset0.getTranspose());
      assertFalse(boolean0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      assertFalse(stack0.contains("Null 'series' argument."));
      
      boolean boolean1 = stack0.add("");
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.contains(""));
      assertFalse(stack0.contains("Null 'series' argument."));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("Null 'series' argument.", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=Null 'series' argument.,offset=1611,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1611, simpleTimeZone0.getRawOffset());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) stack0, false);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("Null 'series' argument.", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=Null 'series' argument.,offset=1611,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1611, simpleTimeZone0.getRawOffset());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[]", stack0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(range0);
      assertTrue(stack0.contains(""));
      assertFalse(stack0.contains("Null 'series' argument."));
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) jDBCCategoryDataset0, keyToGroupMap0);
      assertEquals(0.8, range1.getUpperBound(), 0.01);
      assertEquals(0.4, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.8, range1.getLength(), 0.01);
      assertFalse(jDBCCategoryDataset0.getTranspose());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(range1);
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(0.8, 1392409281320L);
      assertEquals(0.8, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1.39240928132E12, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertNotNull(normalDistributionFunction2D0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, (-458.3513), (-1764.685474591819), 23, "Null 'series' argument.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(6.283185307179586, 6.283185307179586, "");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(6.283185307179586));
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(6.283185307179586, range0.getLowerBound(), 0.01);
      assertEquals(6.283185307179586, range0.getUpperBound(), 0.01);
      assertEquals(6.283185307179586, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      
      boolean boolean0 = stack0.add("Time");
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[Time]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.contains(""));
      assertTrue(stack0.contains("Time"));
      assertTrue(boolean0);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, false);
      assertNull(range2);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) "", 416.5428, 9);
      assertNotNull(pieDataset0);
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      
      Range range3 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, false);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(6.283185307179586, range3.getUpperBound(), 0.01);
      assertEquals(6.283185307179586, range3.getLowerBound(), 0.01);
      assertEquals(6.283185307179586, range3.getCentralValue(), 0.01);
      assertNotNull(range3);
      assertTrue(range3.equals((Object)range0));
      assertNotSame(range3, range0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(number0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(boolean0);
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1130, 0);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals((-1), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertNotNull(dynamicTimeSeriesCollection0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0, true);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals((-1), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertNotNull(range0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>(1);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(1, vector0.capacity());
      assertNotNull(vector0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) vector0, true);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(1, vector0.capacity());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) dynamicTimeSeriesCollection0, true);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals((-1), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(6.283185307179586, 6.283185307179586, "");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(6.283185307179586));
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(6.283185307179586, range0.getUpperBound(), 0.01);
      assertEquals(6.283185307179586, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(6.283185307179586, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      
      boolean boolean0 = stack0.add("Nearest");
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[Nearest]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains("Nearest"));
      assertFalse(stack0.contains(""));
      assertTrue(boolean0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList0, true);
      assertEquals(0, linkedList0.size());
      assertNull(range1);
      assertFalse(linkedList0.contains(true));
      
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset1);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset1, true);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertNull(range2);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, false);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, false);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(range1);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, true);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(range2);
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(range3);
      
      Range range4 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, true);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(range4);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      System.setCurrentTimeMillis((-3640L));
      Week week0 = new Week(2208, 16);
      assertEquals(752L, week0.getSerialIndex());
      assertEquals((-3640L), week0.getFirstMillisecond());
      assertEquals(16, week0.getYearValue());
      assertEquals((-96), week0.getWeek());
      assertEquals((-3641L), week0.getLastMillisecond());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2208, (-684), week0);
      assertEquals(752L, week0.getSerialIndex());
      assertEquals((-3640L), week0.getFirstMillisecond());
      assertEquals(16, week0.getYearValue());
      assertEquals((-96), week0.getWeek());
      assertEquals((-3641L), week0.getLastMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals((-685), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertNotNull(dynamicTimeSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) dynamicTimeSeriesCollection0);
      assertEquals(752L, week0.getSerialIndex());
      assertEquals((-3640L), week0.getFirstMillisecond());
      assertEquals(16, week0.getYearValue());
      assertEquals((-96), week0.getWeek());
      assertEquals((-3641L), week0.getLastMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals((-685), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertNull(range0);
      
      Stack<DefaultIntervalCategoryDataset> stack0 = new Stack<DefaultIntervalCategoryDataset>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, (List) stack0, false);
      assertEquals(752L, week0.getSerialIndex());
      assertEquals((-3640L), week0.getFirstMillisecond());
      assertEquals(16, week0.getYearValue());
      assertEquals((-96), week0.getWeek());
      assertEquals((-3641L), week0.getLastMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals((-685), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertNull(range1);
      
      Number[][] numberArray0 = new Number[1][7];
      Number[] numberArray1 = new Number[6];
      numberArray1[0] = (Number) 0;
      numberArray1[1] = (Number) 0;
      numberArray1[2] = (Number) 1;
      numberArray1[3] = (Number) 53;
      numberArray1[4] = (Number) 2;
      numberArray1[5] = (Number) 0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'dataset' argument.", "Null 'dataset' argument.", numberArray0);
      assertEquals(1, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(53.0, range2.getLength(), 0.01);
      assertEquals(53.0, range2.getUpperBound(), 0.01);
      assertEquals(26.5, range2.getCentralValue(), 0.01);
      assertEquals(1, numberArray0.length);
      assertNotNull(range2);
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) stack0, range2, true);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(53.0, range2.getLength(), 0.01);
      assertEquals(53.0, range2.getUpperBound(), 0.01);
      assertEquals(26.5, range2.getCentralValue(), 0.01);
      assertEquals(752L, week0.getSerialIndex());
      assertEquals((-3640L), week0.getFirstMillisecond());
      assertEquals(16, week0.getYearValue());
      assertEquals((-96), week0.getWeek());
      assertEquals((-3641L), week0.getLastMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals((-685), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, numberArray0.length);
      assertNull(range3);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) week0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      assertNotNull(localDate0);
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(0L));
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      Short short0 = new Short((short)366);
      assertNotNull(short0);
      assertEquals((short)366, (short)short0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedList1.add(object0);
      assertEquals(1, linkedList1.size());
      assertTrue(linkedList1.contains(object0));
      assertFalse(linkedList1.contains((short)366));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotSame(linkedList1, linkedList0);
      assertTrue(boolean0);
      
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>((short)366);
      assertTrue(vector0.isEmpty());
      assertEquals(366, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList1, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((-159.002538995384), Double.POSITIVE_INFINITY, "U`<h'RF66Hyf,e|6");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      assertFalse(stack0.contains("U`<h'RF66Hyf,e|6"));
      
      boolean boolean0 = stack0.add("a084 %IMkE");
      assertEquals(10, stack0.capacity());
      assertEquals("[a084 %IMkE]", stack0.toString());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.contains("U`<h'RF66Hyf,e|6"));
      assertTrue(stack0.contains("a084 %IMkE"));
      assertTrue(boolean0);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNotNull(histogramDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) histogramDataset0, (List) stack0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      MockDate mockDate0 = new MockDate(2387, (-577), (-577), (-1), 2387);
      assertNotNull(mockDate0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1611, "Null 'series' argument.");
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1611, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=Null 'series' argument.,offset=1611,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("Null 'series' argument.", simpleTimeZone0.getID());
      assertNotNull(simpleTimeZone0);
      
      Minute minute0 = new Minute(mockDate0, simpleTimeZone0);
      assertEquals("Wed May 03 14:47:00 GMT 4237", mockDate0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1611, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=Null 'series' argument.,offset=1611,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("Null 'series' argument.", simpleTimeZone0.getID());
      assertEquals(71550226020000L, minute0.getFirstMillisecond());
      assertEquals(71550226020000L, minute0.getLastMillisecond());
      assertEquals(47, minute0.getMinute());
      assertEquals(14, minute0.getHourValue());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      Minute minute1 = (Minute)minute0.next();
      assertEquals("Wed May 03 14:47:00 GMT 4237", mockDate0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1611, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=Null 'series' argument.,offset=1611,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("Null 'series' argument.", simpleTimeZone0.getID());
      assertEquals(71550226020000L, minute0.getFirstMillisecond());
      assertEquals(71550226020000L, minute0.getLastMillisecond());
      assertEquals(47, minute0.getMinute());
      assertEquals(14, minute0.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(48, minute1.getMinute());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(14, minute1.getHourValue());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute1);
      assertFalse(minute1.equals((Object)minute0));
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      
      long long0 = minute1.getLastMillisecond();
      assertEquals("Wed May 03 14:47:00 GMT 4237", mockDate0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1611, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=Null 'series' argument.,offset=1611,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("Null 'series' argument.", simpleTimeZone0.getID());
      assertEquals(71550226020000L, minute0.getFirstMillisecond());
      assertEquals(71550226020000L, minute0.getLastMillisecond());
      assertEquals(47, minute0.getMinute());
      assertEquals(14, minute0.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(48, minute1.getMinute());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(14, minute1.getHourValue());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertEquals(1392409281320L, long0);
      
      jDBCCategoryDataset0.addValue(2461.649288348025, (Comparable) minute1, (Comparable) mockDate0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals("Wed May 03 14:47:00 GMT 4237", mockDate0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1611, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=Null 'series' argument.,offset=1611,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("Null 'series' argument.", simpleTimeZone0.getID());
      assertEquals(71550226020000L, minute0.getFirstMillisecond());
      assertEquals(71550226020000L, minute0.getLastMillisecond());
      assertEquals(47, minute0.getMinute());
      assertEquals(14, minute0.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(48, minute1.getMinute());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(14, minute1.getHourValue());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      
      jDBCCategoryDataset0.setTranspose(true);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertFalse(boolean0);
      
      Double double0 = (Double)DatasetUtilities.findMaximumStackedRangeValue(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(double0);
      assertEquals(2461.649288348025, (double)double0, 0.01);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNotNull(histogramDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(2461.649288348025, range1.getUpperBound(), 0.01);
      assertEquals(1230.8246441740125, range1.getCentralValue(), 0.01);
      assertEquals(2461.649288348025, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      Number[] numberArray0 = new Number[9];
      Float float0 = new Float(106.19793507328325);
      assertNotNull(float0);
      assertEquals(106.19794F, (float)float0, 0.01F);
      
      numberArray0[0] = (Number) float0;
      numberArray0[1] = (Number) 0;
      numberArray0[2] = (Number) 0;
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNull(range2);
      
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Range range3 = DatasetUtilities.iterateRangeBounds((CategoryDataset) jDBCCategoryDataset0, false);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(2461.649288348025, range3.getUpperBound(), 0.01);
      assertEquals(2461.649288348025, range3.getCentralValue(), 0.01);
      assertEquals(2461.649288348025, range3.getLowerBound(), 0.01);
      assertNotNull(range3);
      assertFalse(range3.equals((Object)range1));
      assertNotSame(range3, range1);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) float0, (double) 0, 0);
      assertNotNull(defaultPieDataset1);
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) histogramDataset0, (List) null, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      byte byte0 = (byte) (-54);
      Range range0 = Range.combine((Range) null, (Range) null);
      assertNull(range0);
      
      Range range1 = Range.expandToInclude((Range) null, (byte) (-54));
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-54.0), range1.getUpperBound(), 0.01);
      assertEquals((-54.0), range1.getLowerBound(), 0.01);
      assertEquals((-54.0), range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      
      TimeSeries timeSeries0 = new TimeSeries("U`<hF66H\"yf,e|6");
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Range range2 = timeSeriesCollection0.getDomainBounds(false);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(range2);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeSeriesCollection0, (List) null, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(number0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, true);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(range0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>(37);
      assertEquals(37, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0, false);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1611, "Null 'series' arument.");
      assertEquals("Null 'series' arument.", simpleTimeZone0.getID());
      assertEquals(1611, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=Null 'series' arument.,offset=1611,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      jDBCCategoryDataset0.setTranspose(true);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertTrue(boolean0);
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNull(number0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      assertFalse(stack0.contains("Null 'series' arument."));
      
      boolean boolean1 = stack0.add("c");
      assertFalse(stack0.isEmpty());
      assertEquals("[c]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.contains("Null 'series' arument."));
      assertTrue(stack0.contains("c"));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultWindDataset0, (List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      assertNotNull(localDate0);
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(0L));
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      boolean boolean0 = linkedList1.add((Object) localDate0);
      assertEquals(1, linkedList1.size());
      assertFalse(linkedList1.contains(0L));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotSame(linkedList1, linkedList0);
      assertTrue(boolean0);
      
      boolean boolean1 = linkedList1.removeLastOccurrence(localDate0);
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(0L));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(boolean1);
      
      boolean boolean2 = linkedList1.add((Object) localDate0);
      assertEquals(1, linkedList1.size());
      assertFalse(linkedList1.contains(0L));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(boolean2);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList1, true);
      assertEquals(1, linkedList1.size());
      assertNull(range0);
      assertFalse(linkedList1.contains(true));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotSame(linkedList1, linkedList0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultIntervalXYDataset0, (List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds((CategoryDataset) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Quarter quarter0 = new Quarter();
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertNotNull(quarter0);
      
      Year year0 = quarter0.getYear();
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotNull(year0);
      
      Quarter quarter1 = (Quarter)quarter0.next();
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNotNull(quarter1);
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      Short short0 = new Short((short)3903);
      assertNotNull(short0);
      assertEquals((short)3903, (short)short0);
      
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>(2657);
      assertEquals(2657, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 2, (-370));
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals((-370), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(2, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) linkedList1, false);
      assertEquals(0, linkedList1.size());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals((-370), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(2, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNull(range0);
      assertFalse(linkedList1.contains(false));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotSame(linkedList1, linkedList0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      assertNotNull(localDate0);
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(0L));
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      Short short0 = new Short((short)3903);
      assertNotNull(short0);
      assertEquals((short)3903, (short)short0);
      
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>((short)3903);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(3903, vector0.capacity());
      assertNotNull(vector0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList1, true);
      assertEquals(0, linkedList1.size());
      assertNull(range0);
      assertFalse(linkedList1.contains((short)3903));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotSame(linkedList1, linkedList0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultIntervalXYDataset0, false);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNull(range1);
      
      Date[] dateArray0 = new Date[7];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      dateArray0[5] = (Date) mockDate0;
      dateArray0[6] = (Date) mockDate0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (short)3903;
      Instant instant0 = mockDate0.toInstant();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(instant0);
      
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(2, doubleArray0.length);
      assertEquals(7, dateArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {0.0, 3903.0}, doubleArray0, 0.01);
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1.39240928132E12, range2.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range2.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range2.getCentralValue(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(7, dateArray0.length);
      assertNotNull(range2);
      assertArrayEquals(new double[] {0.0, 3903.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Quarter quarter0 = new Quarter();
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNotNull(quarter0);
      
      Quarter quarter1 = (Quarter)quarter0.next();
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertNotNull(quarter1);
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      
      String string0 = quarter1.toString();
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertNotNull(string0);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      assertEquals("Q2/2014", string0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((Comparable) quarter1, (KeyedValues) defaultKeyedValuesDataset0);
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertNotNull(defaultCategoryDataset0);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      assertTrue(boolean0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, 1);
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertNotNull(defaultPieDataset0);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal((TableXYDataset) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(number0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(number1);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, false);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(range1);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      SpreadsheetDate spreadsheetDate0 = null;
      try {
        spreadsheetDate0 = new SpreadsheetDate((-1247));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SpreadsheetDate: Serial must be in range 2 to 2958465.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      MockDate mockDate0 = new MockDate(212, 1592, 212, 3, 1592);
      assertNotNull(mockDate0);
      
      Millisecond millisecond0 = new Millisecond(mockDate0, timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("Tue Apr 01 05:32:00 GMT 2245", mockDate0.toString());
      assertEquals(8685984720000L, millisecond0.getLastMillisecond());
      assertEquals(8685984720000L, millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertNotNull(millisecond0);
      
      Stack<String> stack1 = new Stack<String>();
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.empty());
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      
      boolean boolean0 = stack1.add("Time");
      assertFalse(stack1.empty());
      assertEquals("[Time]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.isEmpty());
      assertEquals(1, stack1.size());
      assertTrue(stack1.contains("Time"));
      assertFalse(stack1.equals((Object)stack0));
      assertNotSame(stack1, stack0);
      assertTrue(boolean0);
      
      double[][] doubleArray0 = new double[4][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 1592;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 1592;
      doubleArray2[1] = (double) 212;
      doubleArray2[2] = 1282.4;
      doubleArray2[3] = (double) 1592;
      doubleArray2[4] = (double) 212;
      doubleArray2[5] = (double) 212;
      doubleArray2[6] = (double) 212;
      doubleArray2[7] = (double) 3;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 212;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (double) 0;
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1592.0, range0.getUpperBound(), 0.01);
      assertEquals(796.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1592.0, range0.getLength(), 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(range0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(796.0, range1.getCentralValue(), 0.01);
      assertEquals(1592.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1592.0, range1.getLength(), 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Quarter quarter0 = new Quarter();
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNotNull(quarter0);
      
      Quarter quarter1 = (Quarter)quarter0.next();
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNotNull(quarter1);
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      
      String string0 = quarter1.toString();
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNotNull(string0);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      assertEquals("Q2/2014", string0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((Comparable) quarter1, (KeyedValues) defaultKeyedValuesDataset0);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNotNull(defaultCategoryDataset0);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      assertTrue(boolean0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, 1);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNotNull(defaultPieDataset0);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNull(range0);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(1));
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1);
      assertNotNull(localDate0);
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(true));
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      Short short0 = new Short((short)3903);
      assertNotNull(short0);
      assertEquals((short)3903, (short)short0);
      
      boolean boolean1 = linkedList1.add((Object) short0);
      assertEquals(1, linkedList1.size());
      assertFalse(linkedList1.contains(true));
      assertTrue(linkedList1.contains((short)3903));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 4;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(4, polynomialFunction2D0.getOrder());
      assertEquals(5, doubleArray0.length);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {1.0, Double.NaN, 4.0, 1.0, 4.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, Double.NEGATIVE_INFINITY, 4.0, 274, 4.0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(number0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(boolean0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (-1290));
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(pieDataset0);
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(true));
      
      boolean boolean1 = linkedList0.add((Object) null);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(true));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Range range1 = Range.combine((Range) null, (Range) null);
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) linkedList0, true);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1, linkedList0.size());
      assertNull(range2);
      assertFalse(linkedList0.contains(true));
      
      Instant instant0 = MockInstant.ofEpochSecond((long) (-1290), (long) (-1290));
      assertNotNull(instant0);
      
      Instant instant1 = MockInstant.plusSeconds(instant0, (-1290));
      assertNotNull(instant1);
      assertFalse(instant1.equals((Object)instant0));
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      
      Date date0 = Date.from(instant1);
      assertEquals("Wed Dec 31 23:16:59 GMT 1969", date0.toString());
      assertNotNull(date0);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      
      Millisecond millisecond0 = new Millisecond(date0);
      assertEquals("Wed Dec 31 23:16:59 GMT 1969", date0.toString());
      assertEquals((-2580001L), millisecond0.getFirstMillisecond());
      assertEquals(999L, millisecond0.getMillisecond());
      assertEquals((-2580001L), millisecond0.getLastMillisecond());
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertNotNull(millisecond0);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(millisecond0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals("Wed Dec 31 23:16:59 GMT 1969", date0.toString());
      assertEquals((-2580001L), millisecond0.getFirstMillisecond());
      assertEquals(999L, millisecond0.getMillisecond());
      assertEquals((-2580001L), millisecond0.getLastMillisecond());
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals("Wed Dec 31 23:16:59 GMT 1969", date0.toString());
      assertEquals((-2580001L), millisecond0.getFirstMillisecond());
      assertEquals(999L, millisecond0.getMillisecond());
      assertEquals((-2580001L), millisecond0.getLastMillisecond());
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertNull(number1);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      
      Number number2 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(number2);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Number number3 = DatasetUtilities.findMinimumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNull(number3);
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      Range range3 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNull(range3);
      
      Range range4 = DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, linkedList0, false);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1, linkedList0.size());
      assertEquals("Wed Dec 31 23:16:59 GMT 1969", date0.toString());
      assertEquals((-2580001L), millisecond0.getFirstMillisecond());
      assertEquals(999L, millisecond0.getMillisecond());
      assertEquals((-2580001L), millisecond0.getLastMillisecond());
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertNull(range4);
      assertFalse(linkedList0.contains(true));
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 1.0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-479));
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      Comparable<Double>[] comparableArray0 = (Comparable<Double>[]) Array.newInstance(Comparable.class, 1);
      Month month0 = new Month();
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertNotNull(month0);
      
      Month month1 = (Month)month0.previous();
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month1.getFirstMillisecond());
      assertEquals(1, month1.getMonth());
      assertEquals(24169L, month1.getSerialIndex());
      assertEquals(2014, month1.getYearValue());
      assertEquals(1392409281320L, month1.getLastMillisecond());
      assertNotNull(month1);
      assertFalse(month1.equals((Object)month0));
      assertNotSame(month0, month1);
      assertNotSame(month1, month0);
      
      comparableArray0[0] = (Comparable<Double>) month1;
      Comparable<DefaultTableXYDataset>[] comparableArray1 = (Comparable<DefaultTableXYDataset>[]) Array.newInstance(Comparable.class, 9);
      comparableArray1[0] = (Comparable<DefaultTableXYDataset>) month1;
      comparableArray1[1] = (Comparable<DefaultTableXYDataset>) month1;
      comparableArray1[2] = (Comparable<DefaultTableXYDataset>) month0;
      comparableArray1[3] = (Comparable<DefaultTableXYDataset>) month1;
      comparableArray1[4] = (Comparable<DefaultTableXYDataset>) month1;
      comparableArray1[5] = (Comparable<DefaultTableXYDataset>) month0;
      comparableArray1[6] = (Comparable<DefaultTableXYDataset>) month0;
      comparableArray1[7] = (Comparable<DefaultTableXYDataset>) month1;
      comparableArray1[8] = (Comparable<DefaultTableXYDataset>) month0;
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'columnKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(6.283185307179586, 6.283185307179586, "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = categoryTableXYDataset0.getDomainBounds(true);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(5.783185307179586, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(6.783185307179586, range0.getUpperBound(), 0.01);
      assertEquals(6.283185307179586, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(6.283185307179586, range1.getUpperBound(), 0.01);
      assertEquals(6.283185307179586, range1.getCentralValue(), 0.01);
      assertEquals(6.283185307179586, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultTableXYDataset0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertTrue(boolean0);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNull(range2);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, false);
      assertNull(range3);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) double0, 6.283185307179586, (-1247));
      assertNotNull(defaultPieDataset1);
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(number0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Stack<String> stack1 = new Stack<String>();
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      
      boolean boolean0 = stack0.add("]Gc");
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[]Gc]", stack0.toString());
      assertTrue(stack0.contains("]Gc"));
      assertFalse(stack0.equals((Object)stack1));
      assertNotSame(stack0, stack1);
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) stack0, true);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[]Gc]", stack0.toString());
      assertNull(range0);
      assertTrue(stack0.contains("]Gc"));
      assertFalse(stack0.equals((Object)stack1));
      assertNotSame(stack0, stack1);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0, true);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(number0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(boolean0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (-1290));
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(pieDataset0);
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(range0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains((-1290)));
      
      Object object0 = linkedList0.poll();
      assertEquals(0, linkedList0.size());
      assertNull(object0);
      assertFalse(linkedList0.contains((-1290)));
      
      boolean boolean1 = linkedList0.add((Object) null);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains((-1290)));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) linkedList0, true);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1, linkedList0.size());
      assertNull(range1);
      assertFalse(linkedList0.contains(true));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1290);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, doubleArray0.length);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-1290.0)}, doubleArray0, 0.01);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(number1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(range0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, false);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(range2);
      
      Range range3 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(range3);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNotNull(vectorSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) vectorSeriesCollection0, true);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>(37);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(37, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) vector0, false);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(37, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) vectorSeriesCollection0, true);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Quarter quarter0 = new Quarter();
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNotNull(quarter0);
      
      Quarter quarter1 = (Quarter)quarter0.next();
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertNotNull(quarter1);
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      
      String string0 = quarter1.toString();
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertNotNull(string0);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      assertEquals("Q2/2014", string0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((Comparable) quarter1, (KeyedValues) defaultKeyedValuesDataset0);
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertNotNull(defaultCategoryDataset0);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      assertTrue(boolean0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, 1);
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertNotNull(defaultPieDataset0);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertNull(range0);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(true));
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1);
      assertNotNull(localDate0);
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(true));
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>(3345);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(3345, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) linkedList0, true);
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(0, linkedList0.size());
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertNull(range1);
      assertFalse(linkedList0.contains(true));
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      assertNotSame(linkedList0, linkedList1);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, false);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNull(range2);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, 1);
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertNotNull(defaultPieDataset1);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      
      DefaultPieDataset defaultPieDataset2 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset1, (Comparable) localDate0, 109.1435);
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertNotNull(defaultPieDataset2);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotSame(defaultPieDataset1, defaultPieDataset2);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      assertNotSame(defaultPieDataset2, defaultPieDataset0);
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(number0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Stack<String> stack1 = new Stack<String>();
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(jDBCCategoryDataset0, (-640), (-640));
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals((-640), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-640), slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, (Comparable) "]Gc");
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals((-640), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-640), slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(pieDataset0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(pieDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals((-640), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-640), slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(defaultPieDataset0);
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) "]Gc", (double) (-640), 1572);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals((-640), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-640), slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(pieDataset1);
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertTrue(pieDataset1.equals((Object)defaultPieDataset0));
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(pieDataset1, defaultPieDataset0);
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(151);
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertEquals(151, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(30, spreadsheetDate0.getDayOfMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertNotNull(spreadsheetDate0);
      
      PieDataset pieDataset2 = DatasetUtilities.createConsolidatedPieDataset(pieDataset1, (Comparable) spreadsheetDate0, 2208.8666585);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals((-640), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-640), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertEquals(151, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(30, spreadsheetDate0.getDayOfMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertNotNull(pieDataset2);
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertTrue(pieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(pieDataset2.equals((Object)pieDataset0));
      assertTrue(pieDataset2.equals((Object)defaultPieDataset0));
      assertTrue(pieDataset2.equals((Object)pieDataset1));
      assertNotSame(pieDataset0, pieDataset2);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset2);
      assertNotSame(defaultPieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(pieDataset1, defaultPieDataset0);
      assertNotSame(pieDataset1, pieDataset2);
      assertNotSame(pieDataset2, pieDataset1);
      assertNotSame(pieDataset2, pieDataset0);
      assertNotSame(pieDataset2, defaultPieDataset0);
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset(pieDataset2);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals((-640), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-640), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertEquals(151, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(30, spreadsheetDate0.getDayOfMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertNotNull(defaultPieDataset1);
      assertTrue(pieDataset0.equals((Object)pieDataset2));
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset2));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset1.equals((Object)pieDataset2));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertTrue(pieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(pieDataset2.equals((Object)pieDataset0));
      assertTrue(pieDataset2.equals((Object)defaultPieDataset0));
      assertTrue(pieDataset2.equals((Object)pieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)pieDataset0));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset1.equals((Object)pieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)pieDataset2));
      
      PieDataset pieDataset3 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "]Gc", (double) 2, (-1175));
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals((-640), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-640), slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(pieDataset3);
      assertTrue(pieDataset0.equals((Object)pieDataset2));
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertFalse(pieDataset3.equals((Object)pieDataset0));
      assertFalse(pieDataset3.equals((Object)defaultPieDataset1));
      assertFalse(pieDataset3.equals((Object)defaultPieDataset0));
      assertFalse(pieDataset3.equals((Object)pieDataset2));
      assertFalse(pieDataset3.equals((Object)pieDataset1));
      assertNotSame(pieDataset0, defaultPieDataset1);
      assertNotSame(pieDataset0, pieDataset3);
      assertNotSame(pieDataset0, pieDataset2);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(pieDataset3, pieDataset0);
      assertNotSame(pieDataset3, defaultPieDataset1);
      assertNotSame(pieDataset3, defaultPieDataset0);
      assertNotSame(pieDataset3, pieDataset2);
      assertNotSame(pieDataset3, pieDataset1);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(yIntervalSeriesCollection0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("]Gc");
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      boolean boolean0 = defaultBoxAndWhiskerXYDataset0.equals(pieDataset1);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals((-640), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-640), slidingCategoryDataset0.getFirstCategoryIndex());
      assertFalse(pieDataset0.equals((Object)pieDataset3));
      assertTrue(pieDataset0.equals((Object)pieDataset2));
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset2));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset1));
      assertFalse(defaultPieDataset0.equals((Object)pieDataset3));
      assertTrue(pieDataset1.equals((Object)pieDataset2));
      assertFalse(pieDataset1.equals((Object)pieDataset3));
      assertTrue(pieDataset1.equals((Object)defaultPieDataset1));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertTrue(pieDataset1.equals((Object)defaultPieDataset0));
      assertNotSame(pieDataset0, defaultPieDataset1);
      assertNotSame(pieDataset0, pieDataset3);
      assertNotSame(pieDataset0, pieDataset2);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset2);
      assertNotSame(defaultPieDataset0, pieDataset1);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset0, pieDataset3);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(pieDataset1, defaultPieDataset0);
      assertNotSame(pieDataset1, defaultPieDataset1);
      assertNotSame(pieDataset1, pieDataset3);
      assertNotSame(pieDataset1, pieDataset2);
      assertFalse(boolean0);
      
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection1);
      assertNotNull(jDBCPieDataset0);
      
      PieDataset pieDataset4 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) spreadsheetDate0, (double) 1, 5);
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertEquals(151, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(30, spreadsheetDate0.getDayOfMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertNotNull(pieDataset4);
      assertTrue(pieDataset4.equals((Object)defaultPieDataset0));
      assertTrue(pieDataset4.equals((Object)pieDataset2));
      assertTrue(pieDataset4.equals((Object)pieDataset1));
      assertTrue(pieDataset4.equals((Object)defaultPieDataset1));
      assertFalse(pieDataset4.equals((Object)pieDataset3));
      assertTrue(pieDataset4.equals((Object)pieDataset0));
      assertNotSame(pieDataset4, pieDataset0);
      assertNotSame(pieDataset4, defaultPieDataset1);
      assertNotSame(pieDataset4, pieDataset3);
      assertNotSame(pieDataset4, defaultPieDataset0);
      assertNotSame(pieDataset4, pieDataset2);
      assertNotSame(pieDataset4, pieDataset1);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(range0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset2);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals((-640), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-640), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertEquals(151, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(30, spreadsheetDate0.getDayOfMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertTrue(pieDataset0.equals((Object)pieDataset4));
      assertFalse(pieDataset0.equals((Object)pieDataset3));
      assertTrue(pieDataset0.equals((Object)pieDataset2));
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset4));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset2));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset1));
      assertFalse(defaultPieDataset0.equals((Object)pieDataset3));
      assertTrue(pieDataset1.equals((Object)pieDataset4));
      assertTrue(pieDataset1.equals((Object)pieDataset2));
      assertFalse(pieDataset1.equals((Object)pieDataset3));
      assertTrue(pieDataset1.equals((Object)defaultPieDataset1));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertTrue(pieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(pieDataset2.equals((Object)defaultPieDataset1));
      assertTrue(pieDataset2.equals((Object)pieDataset0));
      assertTrue(pieDataset2.equals((Object)defaultPieDataset0));
      assertTrue(pieDataset2.equals((Object)pieDataset4));
      assertFalse(pieDataset2.equals((Object)pieDataset3));
      assertTrue(pieDataset2.equals((Object)pieDataset1));
      assertNotSame(pieDataset0, defaultPieDataset1);
      assertNotSame(pieDataset0, pieDataset3);
      assertNotSame(pieDataset0, pieDataset2);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset0, pieDataset4);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset2);
      assertNotSame(defaultPieDataset0, pieDataset1);
      assertNotSame(defaultPieDataset0, pieDataset4);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset0, pieDataset3);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(pieDataset1, defaultPieDataset0);
      assertNotSame(pieDataset1, defaultPieDataset1);
      assertNotSame(pieDataset1, pieDataset3);
      assertNotSame(pieDataset1, pieDataset2);
      assertNotSame(pieDataset1, pieDataset4);
      assertNotSame(pieDataset2, pieDataset1);
      assertNotSame(pieDataset2, pieDataset4);
      assertNotSame(pieDataset2, pieDataset0);
      assertNotSame(pieDataset2, defaultPieDataset0);
      assertNotSame(pieDataset2, defaultPieDataset1);
      assertNotSame(pieDataset2, pieDataset3);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, false);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("Requires 'start' < 'end'.");
      assertEquals("[Requires 'start' < 'end'.]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains("Requires 'start' < 'end'."));
      assertTrue(boolean0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("Requires 'start' < 'end'.");
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Short short0 = new Short((short) (-2605));
      assertNotNull(short0);
      assertEquals((short) (-2605), (short)short0);
      
      boolean boolean1 = defaultBoxAndWhiskerXYDataset0.equals(short0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, false);
      assertEquals("[Requires 'start' < 'end'.]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNull(range1);
      assertTrue(stack0.contains("Requires 'start' < 'end'."));
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(range2);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) jDBCCategoryDataset0, (Comparable) "Requires 'start' < 'end'.");
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(pieDataset0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = (double) (short) (-2605);
      doubleArray0[2] = (double) (short) (-2605);
      doubleArray0[3] = (double) (short) (-2605);
      doubleArray0[4] = (double) (short) (-2605);
      doubleArray0[5] = 4275.5969534767;
      doubleArray0[6] = (double) (short) (-2605);
      doubleArray0[7] = (double) (short) (-2605);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertEquals(8, doubleArray0.length);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, (-2605.0), (-2605.0), (-2605.0), (-2605.0), 4275.5969534767, (-2605.0), (-2605.0)}, doubleArray0, 0.01);
      
      PolynomialFunction2D polynomialFunction2D1 = new PolynomialFunction2D(doubleArray0);
      assertEquals(7, polynomialFunction2D1.getOrder());
      assertEquals(8, doubleArray0.length);
      assertNotNull(polynomialFunction2D1);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, (-2605.0), (-2605.0), (-2605.0), (-2605.0), 4275.5969534767, (-2605.0), (-2605.0)}, doubleArray0, 0.01);
      assertTrue(polynomialFunction2D1.equals((Object)polynomialFunction2D0));
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D1, Double.NEGATIVE_INFINITY, 4275.5969534767, 4, (-2605.0));
      assertEquals(7, polynomialFunction2D1.getOrder());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(4, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(8, doubleArray0.length);
      assertNotNull(xYSeries0);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, (-2605.0), (-2605.0), (-2605.0), (-2605.0), 4275.5969534767, (-2605.0), (-2605.0)}, doubleArray0, 0.01);
      assertTrue(polynomialFunction2D1.equals((Object)polynomialFunction2D0));
      assertNotSame(polynomialFunction2D1, polynomialFunction2D0);
      
      Range range3 = DatasetUtilities.findRangeBounds((CategoryDataset) jDBCCategoryDataset0, false);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(range3);
      
      Range range4 = DatasetUtilities.iterateCategoryRangeBounds(jDBCCategoryDataset0, false);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(range4);
      
      Range range5 = DatasetUtilities.iterateRangeBounds((CategoryDataset) jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(range5);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) (-2605.0), Double.NEGATIVE_INFINITY, (int) (short) (-2605));
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(pieDataset1);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(pieDataset0, pieDataset1);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, false);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("Requires 'start' < 'end'.");
      assertFalse(stack0.isEmpty());
      assertEquals("[Requires 'start' < 'end'.]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains("Requires 'start' < 'end'."));
      assertTrue(boolean0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("Requires 'start' < 'end'.");
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Short short0 = new Short((short) (-2605));
      assertNotNull(short0);
      assertEquals((short) (-2605), (short)short0);
      
      boolean boolean1 = defaultBoxAndWhiskerXYDataset0.equals(short0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, false);
      assertFalse(stack0.isEmpty());
      assertEquals("[Requires 'start' < 'end'.]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNull(range1);
      assertTrue(stack0.contains("Requires 'start' < 'end'."));
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(range2);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) jDBCCategoryDataset0, (Comparable) "Requires 'start' < 'end'.");
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(pieDataset0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(pieDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(defaultPieDataset0);
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(number1);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Number number2 = DatasetUtilities.findMinimumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNull(number2);
      
      Range range3 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNull(range3);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, false);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("Requires 'start' < 'end'.");
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[Requires 'start' < 'end'.]", stack0.toString());
      assertTrue(stack0.contains("Requires 'start' < 'end'."));
      assertTrue(boolean0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("Requires 'start' < 'end'.");
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(xYTaskDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Week week0 = new Week(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(240.8351226, 1);
      assertEquals(240.8351226, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertNotNull(lineFunction2D0);
      
      Comparable<DefaultBoxAndWhiskerXYDataset> comparable0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) null, (KeyedValues) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TableXYDataset tableXYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null, 2.2665027909433393);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Week week0 = new Week(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(1, 1);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1.0, lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) week0, (KeyedValues) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowData' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(number0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(boolean0);
      
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Quarter quarter0 = new Quarter();
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertNotNull(quarter0);
      
      Quarter quarter1 = (Quarter)quarter0.next();
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNotNull(quarter1);
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      
      String string0 = quarter1.toString();
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNotNull(string0);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      assertEquals("Q2/2014", string0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((Comparable) quarter1, (KeyedValues) defaultKeyedValuesDataset0);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNotNull(defaultCategoryDataset0);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      assertTrue(boolean0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, 1);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNotNull(defaultPieDataset0);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNull(range0);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(true));
      
      boolean boolean1 = linkedList0.add((Object) quarter1);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(1, linkedList0.size());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertFalse(linkedList0.contains(true));
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      assertTrue(boolean1);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) linkedList0, true);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(1, linkedList0.size());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNull(range1);
      assertFalse(linkedList0.contains(true));
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1290);
      doubleArray0[1] = (double) 1;
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset(defaultPieDataset0);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNotNull(defaultPieDataset1);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      DefaultPieDataset defaultPieDataset2 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) quarter1, 29.0, 1);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNotNull(defaultPieDataset2);
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset0));
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      assertNotSame(defaultPieDataset2, defaultPieDataset0);
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(yIntervalSeriesCollection0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(quarter0);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertFalse(quarter0.equals((Object)quarter1));
      
      boolean boolean2 = defaultBoxAndWhiskerXYDataset0.equals((Object) null);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(quarter0, quarter1);
      assertFalse(boolean2);
      
      DefaultPieDataset defaultPieDataset3 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) quarter0, Double.POSITIVE_INFINITY, 15);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNotNull(defaultPieDataset3);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertTrue(defaultPieDataset3.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset3.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset3.equals((Object)defaultPieDataset2));
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset2));
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      assertNotSame(defaultPieDataset3, defaultPieDataset1);
      assertNotSame(defaultPieDataset3, defaultPieDataset2);
      assertNotSame(defaultPieDataset3, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset0, defaultPieDataset2);
      assertNotSame(defaultPieDataset0, defaultPieDataset3);
      
      Range range2 = DatasetUtilities.iterateXYRangeBounds(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertNull(range2);
      assertFalse(quarter0.equals((Object)quarter1));
      assertNotSame(quarter0, quarter1);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset1 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset1);
      assertTrue(defaultKeyedValuesDataset1.equals((Object)defaultKeyedValuesDataset0));
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset1);
      assertTrue(defaultKeyedValuesDataset1.equals((Object)defaultKeyedValuesDataset0));
      assertNotSame(defaultKeyedValuesDataset1, defaultKeyedValuesDataset0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[8];
      doubleArray1[1] = 3561.49074;
      doubleArray1[2] = 0.0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'rowData' argument.", ":tI-Okt3V0sN0p", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range0);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("Null 'rowData' argument.", (String) null, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset1);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotSame(categoryDataset1, categoryDataset0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 1.0);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range1);
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(categoryDataset0, categoryDataset1);
      assertNotSame(range1, range0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("Null 'rowData' argument.");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Week week0 = new Week(mockDate0, timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range2);
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertNotSame(categoryDataset0, categoryDataset1);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(29, 6, timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(5, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertNotNull(dynamicTimeSeriesCollection0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) dynamicTimeSeriesCollection0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(5, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertTrue(boolean0);
      
      Range range3 = DatasetUtilities.iterateDomainBounds((XYDataset) dynamicTimeSeriesCollection0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(5, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertNull(range3);
      
      Comparable<DynamicTimeSeriesCollection>[] comparableArray0 = (Comparable<DynamicTimeSeriesCollection>[]) Array.newInstance(Comparable.class, 6);
      comparableArray0[0] = (Comparable<DynamicTimeSeriesCollection>) week0;
      comparableArray0[1] = (Comparable<DynamicTimeSeriesCollection>) week0;
      comparableArray0[2] = (Comparable<DynamicTimeSeriesCollection>) week0;
      comparableArray0[3] = (Comparable<DynamicTimeSeriesCollection>) week0;
      comparableArray0[4] = (Comparable<DynamicTimeSeriesCollection>) week0;
      comparableArray0[5] = (Comparable<DynamicTimeSeriesCollection>) week0;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'rowKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Week week0 = new Week(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNull(number0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 299.0;
      Number number1 = DatasetUtilities.findMaximumDomainValue(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNull(number1);
      
      MultipleGradientPaint.ColorSpaceType multipleGradientPaint_ColorSpaceType0 = MultipleGradientPaint.ColorSpaceType.SRGB;
      assertEquals(MultipleGradientPaint.ColorSpaceType.SRGB, multipleGradientPaint_ColorSpaceType0);
      
      SeriesChangeType seriesChangeType0 = SeriesChangeType.REMOVE;
      assertEquals("SeriesChangeType.REMOVE", seriesChangeType0.toString());
      assertNotNull(seriesChangeType0);
      
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo(seriesChangeType0, 1, 53);
      assertEquals("SeriesChangeType.REMOVE", seriesChangeType0.toString());
      assertEquals(53, seriesChangeInfo0.getIndex2());
      assertEquals(1, seriesChangeInfo0.getIndex1());
      assertNotNull(seriesChangeInfo0);
      
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(multipleGradientPaint_ColorSpaceType0, seriesChangeInfo0);
      assertEquals("SeriesChangeType.REMOVE", seriesChangeType0.toString());
      assertEquals(53, seriesChangeInfo0.getIndex2());
      assertEquals(1, seriesChangeInfo0.getIndex1());
      assertNotNull(seriesChangeEvent0);
      
      xIntervalSeriesCollection0.seriesChanged(seriesChangeEvent0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertEquals("SeriesChangeType.REMOVE", seriesChangeType0.toString());
      assertEquals(53, seriesChangeInfo0.getIndex2());
      assertEquals(1, seriesChangeInfo0.getIndex1());
      
      MockDate mockDate1 = new MockDate();
      assertNotNull(mockDate1);
      assertTrue(mockDate1.equals((Object)mockDate0));
      
      boolean boolean0 = false;
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xIntervalSeriesCollection0, false);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      Range range1 = Range.expandToInclude((Range) null, 299.0);
      assertEquals(299.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(299.0, range1.getLowerBound(), 0.01);
      assertEquals(299.0, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, 53);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, false);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("Requires 'start' < 'end'.");
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[Requires 'start' < 'end'.]", stack0.toString());
      assertTrue(stack0.contains("Requires 'start' < 'end'."));
      assertTrue(boolean0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("Requires 'start' < 'end'.");
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Short short0 = new Short((short) (-2605));
      assertNotNull(short0);
      assertEquals((short) (-2605), (short)short0);
      
      boolean boolean1 = defaultBoxAndWhiskerXYDataset0.equals(short0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, false);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[Requires 'start' < 'end'.]", stack0.toString());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNull(range1);
      assertTrue(stack0.contains("Requires 'start' < 'end'."));
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(range2);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) jDBCCategoryDataset0, (Comparable) "Requires 'start' < 'end'.");
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(pieDataset0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(pieDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(defaultPieDataset0);
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) short0, (double) (short) (-2605), (int) (short) (-2605));
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(pieDataset1);
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertFalse(pieDataset1.equals((Object)defaultPieDataset0));
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(defaultPieDataset0, pieDataset1);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset1, defaultPieDataset0);
      assertNotSame(pieDataset1, pieDataset0);
      
      PieDataset pieDataset2 = DatasetUtilities.createConsolidatedPieDataset(pieDataset1, (Comparable) "Requires 'start' < 'end'.", 0.0, (int) (short) (-2605));
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(pieDataset2);
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertFalse(pieDataset0.equals((Object)pieDataset1));
      assertFalse(defaultPieDataset0.equals((Object)pieDataset1));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertFalse(pieDataset1.equals((Object)defaultPieDataset0));
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertFalse(pieDataset2.equals((Object)pieDataset1));
      assertFalse(pieDataset2.equals((Object)pieDataset0));
      assertFalse(pieDataset2.equals((Object)defaultPieDataset0));
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(pieDataset0, pieDataset2);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(defaultPieDataset0, pieDataset1);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset2);
      assertNotSame(pieDataset1, pieDataset2);
      assertNotSame(pieDataset1, defaultPieDataset0);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(pieDataset2, pieDataset1);
      assertNotSame(pieDataset2, pieDataset0);
      assertNotSame(pieDataset2, defaultPieDataset0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "Null 'rowData' argument.", (-739.77798739672), (-1691));
      assertNotNull(pieDataset0);
      
      MockDate mockDate0 = new MockDate(184, 184, 184);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertEquals("Sat Oct 31 00:00:00 GMT 2099", mockDate0.toString());
      assertEquals(4097088000000L, hour0.getLastMillisecond());
      assertEquals(4097088000000L, hour0.getFirstMillisecond());
      assertEquals(0, hour0.getHour());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      
      Hour hour1 = (Hour)hour0.previous();
      assertEquals("Sat Oct 31 00:00:00 GMT 2099", mockDate0.toString());
      assertEquals(4097088000000L, hour0.getLastMillisecond());
      assertEquals(4097088000000L, hour0.getFirstMillisecond());
      assertEquals(0, hour0.getHour());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(23, hour1.getHour());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour1);
      assertFalse(hour1.equals((Object)hour0));
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) mockDate0, (double) 23);
      assertEquals("Sat Oct 31 00:00:00 GMT 2099", mockDate0.toString());
      assertNotNull(defaultPieDataset0);
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset0);
      
      Comparable<Long>[] comparableArray0 = (Comparable<Long>[]) Array.newInstance(Comparable.class, 0);
      Number[][] numberArray0 = new Number[0][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(comparableArray0, comparableArray0, numberArray0, numberArray0);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, comparableArray0.length);
      assertEquals(0, numberArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(range0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(range1);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-479));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(false));
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) linkedList0, false);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(0, linkedList0.size());
      assertNull(range2);
      assertFalse(linkedList0.contains(false));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNotNull(vectorSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      assertNotNull(localDate0);
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(0L));
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      Short short0 = new Short((short)3903);
      assertNotNull(short0);
      assertEquals((short)3903, (short)short0);
      
      boolean boolean0 = linkedList1.add((Object) localDate0);
      assertEquals(1, linkedList1.size());
      assertFalse(linkedList1.contains(0L));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotSame(linkedList1, linkedList0);
      assertTrue(boolean0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Double double0 = new Double((short)3903);
      assertNotNull(double0);
      assertEquals(3903.0, (double)double0, 0.01);
      
      boolean boolean1 = linkedList1.add((Object) double0);
      assertEquals(2, linkedList1.size());
      assertFalse(linkedList1.contains((short)3903));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(boolean1);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) linkedList1, true);
      assertEquals(2, linkedList1.size());
      assertNull(range0);
      assertFalse(linkedList1.contains((short)3903));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotSame(linkedList1, linkedList0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(localDate0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[8];
      doubleArray1[1] = 3561.49074;
      doubleArray1[2] = 0.0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'rowData' argument.", ":tI-Okt3V0sN0p", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range0);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("Null 'rowData' argument.", (String) null, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset1);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotSame(categoryDataset1, categoryDataset0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 1.0);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range1);
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(categoryDataset0, categoryDataset1);
      assertNotSame(range1, range0);
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      String string0 = null;
      Number[][] numberArray0 = new Number[3][2];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = (Number) 0.0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[0];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[4];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) 3561.49074;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Week week0 = new Week(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xYIntervalSeriesCollection0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Quarter quarter0 = new Quarter();
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertNotNull(quarter0);
      
      Quarter quarter1 = (Quarter)quarter0.next();
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNotNull(quarter1);
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      
      String string0 = quarter1.toString();
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNotNull(string0);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      assertEquals("Q2/2014", string0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((Comparable) quarter1, (KeyedValues) defaultKeyedValuesDataset0);
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNotNull(defaultCategoryDataset0);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      assertTrue(boolean0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, 1);
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNotNull(defaultPieDataset0);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNull(range0);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(true));
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1);
      assertNotNull(localDate0);
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      Short short0 = new Short((short)3903);
      assertNotNull(short0);
      assertEquals((short)3903, (short)short0);
      
      boolean boolean1 = linkedList1.add((Object) short0);
      assertEquals(1, linkedList1.size());
      assertTrue(linkedList1.contains((short)3903));
      assertFalse(linkedList1.contains(1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(boolean1);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) linkedList0, false);
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(0, linkedList0.size());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNull(range1);
      assertFalse(linkedList0.contains(1));
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      assertNotSame(linkedList0, linkedList1);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(quarter1);
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNull(number0);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNull(number1);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Number number2 = DatasetUtilities.findMinimumStackedRangeValue(defaultCategoryDataset0);
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNull(number2);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNull(range2);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(range0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset1, true);
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertNull(range1);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(true));
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(63L);
      assertNotNull(localDate0);
      
      boolean boolean0 = linkedList0.add((Object) localDate0);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(63L));
      assertTrue(boolean0);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) linkedList0, true);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(1, linkedList0.size());
      assertNull(range2);
      assertFalse(linkedList0.contains(true));
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(categoryTableXYDataset1);
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertNotNull(number0);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertEquals(Double.NaN, number0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(number1);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Number number2 = DatasetUtilities.findMinimumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNull(number2);
      
      Range range3 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset1);
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertNull(range3);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Week week0 = new Week(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(1, 1);
      assertEquals(1.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertNotNull(lineFunction2D0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, 0.0, 1, 29, week0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotNull(xYSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals((-0.5), range0.getLowerBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(2.0, range0.getLength(), 0.01);
      assertEquals(1.5, range0.getUpperBound(), 0.01);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotNull(range0);
      
      int int0 = 32;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 53, 32);
      assertEquals(32, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(53, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, 29);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      double[][] doubleArray0 = new double[7][0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = 2649.783818507;
      doubleArray1[2] = 817.51227188847;
      doubleArray1[3] = 2225.112016046466;
      doubleArray1[4] = 1359.04466;
      doubleArray1[5] = 0.5000000000001137;
      doubleArray1[6] = (-970.123064);
      doubleArray1[7] = (-3411.35765164);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 817.51227188847;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 817.51227188847;
      doubleArray4[1] = 1359.04466;
      doubleArray4[2] = 2649.783818507;
      doubleArray4[3] = 817.51227188847;
      doubleArray4[4] = 1359.04466;
      doubleArray4[5] = 1359.04466;
      doubleArray4[6] = 2649.783818507;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = 2225.112016046466;
      doubleArray5[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      
      doubleArray7[0] = 0.5000000000001137;
      doubleArray7[1] = 1359.04466;
      doubleArray7[2] = 2649.783818507;
      doubleArray7[3] = 2225.112016046466;
      doubleArray7[4] = 1359.04466;
      doubleArray7[5] = 2649.783818507;
      doubleArray7[6] = 2649.783818507;
      doubleArray0[6] = doubleArray7;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("VU", (String) null, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, true);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(2649.783818507, range0.getUpperBound(), 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(249, "Vp6)j");
      assertEquals("java.util.SimpleTimeZone[id=Vp6)j,offset=249,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(249, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("Vp6)j", simpleTimeZone0.getID());
      assertNotNull(simpleTimeZone0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 1992, 2214);
      assertEquals(1992, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2214, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingGanttCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      double double0 = 6.283185307179586;
      categoryTableXYDataset0.add(6.283185307179586, 6.283185307179586, "");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      
      Range range0 = categoryTableXYDataset1.getDomainBounds(false);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertNull(range0);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(false));
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertNull(range1);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertTrue(boolean0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertNotNull(number0);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertFalse(number0.equals((Object)double0));
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertEquals(Double.NaN, number0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = null;
      try {
        defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((double[][]) null, (double[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'data' argument.
         //
         verifyException("org.jfree.data.DataUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[8];
      doubleArray1[1] = 3561.49074;
      doubleArray1[2] = 0.0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'rowData' argument.", ":tI-Okt3V0sN0p", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range0);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("Null 'rowData' argument.", (String) null, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset1);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotSame(categoryDataset1, categoryDataset0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 1.0);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range1);
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(categoryDataset0, categoryDataset1);
      assertNotSame(range1, range0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range2);
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertNotSame(categoryDataset0, categoryDataset1);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(29, 27);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(26, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertNotNull(dynamicTimeSeriesCollection0);
      
      boolean boolean0 = timePeriodValuesCollection0.equals(dynamicTimeSeriesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(26, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertFalse(boolean0);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, false);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNull(range3);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 3561.49074;
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Week week0 = new Week(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNull(number0);
      
      Comparable<DefaultIntervalXYDataset>[] comparableArray0 = (Comparable<DefaultIntervalXYDataset>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[9][9];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 2169.8042199;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (double) 53;
      doubleArray1[3] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2169.8042199;
      doubleArray2[1] = (double) 1;
      doubleArray2[2] = (double) 53;
      doubleArray2[3] = 2169.8042199;
      doubleArray2[4] = (double) 1;
      doubleArray2[5] = (double) 1;
      doubleArray2[6] = (double) 1;
      doubleArray2[7] = (double) 1;
      doubleArray2[8] = (double) 53;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 1;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (-1588.4);
      doubleArray4[1] = (-1.0);
      doubleArray4[2] = (double) 1;
      doubleArray4[3] = (double) 1;
      doubleArray4[4] = (double) 1;
      doubleArray4[5] = (double) 53;
      doubleArray4[6] = (-1.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = 2169.8042199;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      
      doubleArray6[0] = (-1.7976931348623157E308);
      doubleArray6[1] = 2169.8042199;
      doubleArray6[2] = (double) 53;
      doubleArray6[3] = (-1588.4);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      
      doubleArray7[0] = 2169.8042199;
      doubleArray7[1] = (-1.7976931348623157E308);
      doubleArray7[2] = (double) 1;
      doubleArray7[3] = 2169.8042199;
      doubleArray7[4] = (-1588.4);
      doubleArray7[5] = (-1.7976931348623157E308);
      doubleArray7[6] = (-1.0);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[6];
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      
      doubleArray8[0] = 2169.8042199;
      doubleArray8[1] = 2169.8042199;
      doubleArray8[2] = (-1588.4);
      doubleArray8[3] = 2169.8042199;
      doubleArray8[4] = (-1.0);
      doubleArray8[5] = (double) 53;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[1];
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      
      doubleArray9[0] = 2169.8042199;
      doubleArray0[8] = doubleArray9;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      categoryTableXYDataset0.add(6.283185307179586, 6.283185307179586, "");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertFalse(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      
      Range range0 = categoryTableXYDataset1.getDomainBounds(false);
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertNull(range0);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(false));
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset1);
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertNull(range1);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(range0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(range1);
      
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      double double0 = 6.283185307179586;
      String string0 = "";
      categoryTableXYDataset0.add(6.283185307179586, 6.283185307179586, "");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      
      boolean boolean0 = false;
      Range range2 = categoryTableXYDataset1.getDomainBounds(false);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertNull(range2);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(6.283185307179586));
      
      Range range3 = DatasetUtilities.findRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) linkedList0, true);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(0, linkedList0.size());
      assertNull(range3);
      assertFalse(linkedList0.contains(6.283185307179586));
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(number0);
      
      Range range4 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset1);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertNull(range4);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      MockDate mockDate0 = new MockDate((-1L));
      assertNotNull(mockDate0);
      
      double double1 = (-2880.327247);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-966.967184), 1737.0184844442, (-2880.327247), 1556.45, 6.283185307179586);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      double double2 = 366.025;
      double double3 = 197.0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 366.025, 366.025, 1550.1762, 1737.0184844442, 197.0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals((-1L), simpleTimePeriod0.getStartMillis());
      assertEquals((-1L), simpleTimePeriod0.getEndMillis());
      assertNotNull(simpleTimePeriod0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(simpleTimePeriod0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals((-1L), simpleTimePeriod0.getStartMillis());
      assertEquals((-1L), simpleTimePeriod0.getEndMillis());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      int int0 = (-2763);
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getXDate(0, (-2763));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(number0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(boolean0);
      
      String string0 = ":tI-Okt3V0sN0p";
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(":tI-Okt3V0sN0p", ":tI-Okt3V0sN0p", (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("Requires 'start' < 'end'.");
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[Requires 'start' < 'end'.]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains("Requires 'start' < 'end'."));
      assertTrue(boolean0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("Requires 'start' < 'end'.");
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, true);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[Requires 'start' < 'end'.]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNull(range0);
      assertTrue(stack0.contains("Requires 'start' < 'end'."));
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("Requires 'start' < 'end'."));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean1 = linkedList0.add((Object) defaultStatisticalCategoryDataset0);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains("Requires 'start' < 'end'."));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, false);
      assertNull(range1);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset((Connection) null, "qqh-1@-z");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // A connection must be supplied.
         //
         verifyException("org.jfree.data.jdbc.JDBCPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(number0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(boolean0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (-1));
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(pieDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.0, double0, 0.01);
      
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = true;
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, (Comparable) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((-447.27472801881026), (-447.27472801881026), "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains((-447.27472801881026)));
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-447.27472801881026), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-447.27472801881026), range0.getUpperBound(), 0.01);
      assertEquals((-447.27472801881026), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      
      boolean boolean0 = stack0.add("Time");
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[Time]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains("Time"));
      assertFalse(stack0.contains(""));
      assertTrue(boolean0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-447.27472801881026), range1.getUpperBound(), 0.01);
      assertEquals((-447.27472801881026), range1.getCentralValue(), 0.01);
      assertEquals((-447.27472801881026), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Week week0 = new Week(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      int int0 = categoryTableXYDataset0.getItemCount();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, int0);
      
      categoryTableXYDataset0.add((double) 0, (double) 0, "8QDj}dT*x0dW|zW%");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = categoryTableXYDataset0.getDomainBounds(false);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(0));
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals(0.5, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals((-0.5), range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(range0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 1.0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(1.0, range2.getLowerBound(), 0.01);
      assertEquals(1.0, range2.getCentralValue(), 0.01);
      assertNotNull(range2);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-479));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, doubleArray0.length);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(polynomialFunction2D0, Double.NaN, 0.0, (-479), 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[8];
      doubleArray1[1] = 3561.49074;
      doubleArray1[2] = 0.0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'rowData' argument.", ":tI-Okt3V0sN0p", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range0);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("Null 'rowData' argument.", (String) null, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset1);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotSame(categoryDataset1, categoryDataset0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 1.0);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range1);
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(categoryDataset0, categoryDataset1);
      assertNotSame(range1, range0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range2);
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertNotSame(categoryDataset0, categoryDataset1);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 6);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertEquals(8, doubleArray1.length);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {0.0, 3561.49074, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 0.0, 6, 6, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Week week0 = new Week(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(53, 1);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(53.0, lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Week week1 = new Week(mockDate0, timeZone0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(106749L, week1.getSerialIndex());
      assertEquals(7, week1.getWeek());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week1);
      assertTrue(week1.equals((Object)week0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(range0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(range1);
      
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      categoryTableXYDataset0.add(6.283185307179586, 6.283185307179586, "");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertFalse(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      
      Range range2 = categoryTableXYDataset0.getDomainBounds(false);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(6.283185307179586, range2.getUpperBound(), 0.01);
      assertEquals(6.283185307179586, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(6.283185307179586, range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      assertFalse(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(false));
      
      Range range3 = DatasetUtilities.findRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) linkedList0, true);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(0, linkedList0.size());
      assertNull(range3);
      assertFalse(linkedList0.contains(false));
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(number0);
      
      Range range4 = DatasetUtilities.iterateCategoryRangeBounds(jDBCCategoryDataset0, false);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(range4);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[3];
      double[] doubleArray0 = new double[8];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(3, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Instant instant0 = mockDate0.toInstant();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(instant0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(3, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertNotNull(number0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, number0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(3, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertNotNull(number1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(number1.equals((Object)number0));
      assertEquals(0.0, number1);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue(defaultHighLowDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      int int0 = 2;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, 2);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertNotNull(dynamicTimeSeriesCollection0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue(dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, false);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNull(range0);
      
      Year year0 = new Year();
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotNull(year0);
      
      // Undeclared exception!
      try { 
        year0.getFirstMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[8];
      doubleArray1[1] = 3561.49074;
      doubleArray1[2] = 0.0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'rowData' argument.", ":tI-Okt3V0sN0p", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range0);
      
      String string0 = null;
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("Null 'rowData' argument.", (String) null, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset1);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotSame(categoryDataset1, categoryDataset0);
      
      CategoryDataset categoryDataset2 = DatasetUtilities.createCategoryDataset("[$)>UOe@Z=mxI(r}s", (String) null, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset2);
      assertFalse(categoryDataset2.equals((Object)categoryDataset0));
      assertFalse(categoryDataset2.equals((Object)categoryDataset1));
      assertNotSame(categoryDataset2, categoryDataset0);
      assertNotSame(categoryDataset2, categoryDataset1);
      
      CategoryDataset categoryDataset3 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, true);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      Range range1 = Range.combine((Range) null, (Range) null);
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      MockDate mockDate0 = new MockDate(378, (-1), (-1), (-1), 378);
      assertNotNull(mockDate0);
      
      Number[][] numberArray0 = new Number[1][3];
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-54);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("U`<hF66H\"yf,e|6", "U`<hF66H\"yf,e|6", numberArray0);
      assertEquals(1, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      Byte byte0 = new Byte((byte) (-54));
      assertNotNull(byte0);
      assertEquals((byte) (-54), (byte)byte0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Week week0 = new Week(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(53, 1);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(53.0, lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, 0.0, 1, 53, week0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(53.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotNull(xYSeriesCollection0);
      
      Number[][] numberArray0 = new Number[4][1];
      Number[] numberArray1 = new Number[3];
      numberArray1[0] = (Number) 53;
      numberArray1[1] = (Number) 53;
      numberArray1[2] = (Number) 1;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[0];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[4];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) 1;
      numberArray3[1] = (Number) 1;
      numberArray3[2] = (Number) 1;
      numberArray3[3] = (Number) 1;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[7];
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray1));
      
      numberArray4[0] = (Number) 53;
      numberArray4[1] = (Number) 53;
      numberArray4[2] = (Number) 53;
      numberArray4[3] = (Number) 53;
      numberArray4[4] = (Number) 53;
      numberArray4[5] = (Number) 53;
      numberArray4[6] = (Number) 1;
      numberArray0[3] = numberArray4;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("9JU6Y)m`9h,.OO", "1<x[Y", numberArray0);
      assertEquals(4, numberArray0.length);
      assertNotNull(defaultCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      MockDate mockDate0 = new MockDate(2387, (-577), (-577), (-1), 182);
      assertNotNull(mockDate0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1611, "Null 'series' argument.");
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1611, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=Null 'series' argument.,offset=1611,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("Null 'series' argument.", simpleTimeZone0.getID());
      assertNotNull(simpleTimeZone0);
      
      Minute minute0 = new Minute(mockDate0, simpleTimeZone0);
      assertEquals("Tue May 02 02:02:00 GMT 4237", mockDate0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1611, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=Null 'series' argument.,offset=1611,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("Null 'series' argument.", simpleTimeZone0.getID());
      assertEquals(71550093720000L, minute0.getLastMillisecond());
      assertEquals(2, minute0.getMinute());
      assertEquals(71550093720000L, minute0.getFirstMillisecond());
      assertEquals(2, minute0.getHourValue());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      Minute minute1 = (Minute)minute0.next();
      assertEquals("Tue May 02 02:02:00 GMT 4237", mockDate0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1611, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=Null 'series' argument.,offset=1611,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("Null 'series' argument.", simpleTimeZone0.getID());
      assertEquals(71550093720000L, minute0.getLastMillisecond());
      assertEquals(2, minute0.getMinute());
      assertEquals(71550093720000L, minute0.getFirstMillisecond());
      assertEquals(2, minute0.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(2, minute1.getHourValue());
      assertEquals(3, minute1.getMinute());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute1);
      assertFalse(minute1.equals((Object)minute0));
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      
      long long0 = minute1.getLastMillisecond();
      assertEquals("Tue May 02 02:02:00 GMT 4237", mockDate0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1611, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=Null 'series' argument.,offset=1611,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("Null 'series' argument.", simpleTimeZone0.getID());
      assertEquals(71550093720000L, minute0.getLastMillisecond());
      assertEquals(2, minute0.getMinute());
      assertEquals(71550093720000L, minute0.getFirstMillisecond());
      assertEquals(2, minute0.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(2, minute1.getHourValue());
      assertEquals(3, minute1.getMinute());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertEquals(1392409281320L, long0);
      
      jDBCCategoryDataset0.addValue(2461.649288348025, (Comparable) minute1, (Comparable) mockDate0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals("Tue May 02 02:02:00 GMT 4237", mockDate0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1611, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=Null 'series' argument.,offset=1611,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("Null 'series' argument.", simpleTimeZone0.getID());
      assertEquals(71550093720000L, minute0.getLastMillisecond());
      assertEquals(2, minute0.getMinute());
      assertEquals(71550093720000L, minute0.getFirstMillisecond());
      assertEquals(2, minute0.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(2, minute1.getHourValue());
      assertEquals(3, minute1.getMinute());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      
      jDBCCategoryDataset0.setTranspose(true);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertFalse(boolean0);
      
      Double double0 = (Double)DatasetUtilities.findMaximumStackedRangeValue(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(double0);
      assertEquals(2461.649288348025, (double)double0, 0.01);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      double double1 = DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
      assertEquals(0.0, double1, 0.01);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNotNull(histogramDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(2461.649288348025, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(2461.649288348025, range1.getUpperBound(), 0.01);
      assertEquals(1230.8246441740125, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      
      Number[][] numberArray0 = new Number[4][6];
      Number[] numberArray1 = new Number[9];
      Float float0 = new Float(106.19793507328325);
      assertNotNull(float0);
      assertEquals(106.19794F, (float)float0, 0.01F);
      
      numberArray1[0] = (Number) float0;
      numberArray1[1] = (Number) 0;
      numberArray1[2] = (Number) 0;
      numberArray1[3] = (Number) double0;
      numberArray1[4] = (Number) double0;
      numberArray1[5] = (Number) double0;
      numberArray1[6] = (Number) 59;
      numberArray1[7] = (Number) 59;
      numberArray1[8] = (Number) 0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[5];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) 0;
      numberArray2[1] = (Number) float0;
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      numberArray2[2] = (Number) integer0;
      numberArray2[3] = (Number) 59;
      numberArray2[4] = (Number) double0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[7];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) integer0;
      numberArray3[1] = (Number) double0;
      numberArray3[2] = (Number) integer0;
      numberArray3[3] = (Number) float0;
      numberArray3[4] = (Number) 0;
      numberArray3[5] = (Number) integer0;
      numberArray3[6] = (Number) double0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[1];
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray1));
      
      numberArray4[0] = (Number) float0;
      numberArray0[3] = numberArray4;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("Null 'series' argument.", "Null 'series' argument.", numberArray0);
      assertEquals(4, numberArray0.length);
      assertNotNull(defaultCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNotNull(vectorSeriesCollection0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(range0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) vectorSeriesCollection0, true);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNull(range1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(true));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 3561.49074;
      doubleArray1[1] = 3561.49074;
      doubleArray1[2] = (-0.4047177432303332);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("N2Hv\"[BLcb\"r^B-", ")q6FM^F{efAB", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, (-3473.49));
      assertEquals((-3473.89471774323), range0.getLowerBound(), 0.01);
      assertEquals(3561.8954577432305, range0.getLength(), 0.01);
      assertEquals((-1692.9469888716148), range0.getCentralValue(), 0.01);
      assertEquals(88.0007400000004, range0.getUpperBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(3561.49074, 707.26355);
      assertEquals(3561.49074, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(707.26355, lineFunction2D0.getSlope(), 0.01);
      assertNotNull(lineFunction2D0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-1243.187687), (-3663.0), (-1), ")q6FM^F{efAB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(timePeriodValuesCollection0, arrayList0, false);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNull(range1);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      String string0 = "Null 'xRange' argument";
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-338.7079209308);
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray1[2] = (-863.49);
      doubleArray1[3] = 366.025;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (-338.7079209308);
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'xRange' argument", "", doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 366.025);
      assertEquals(Double.POSITIVE_INFINITY, range2.getLength(), 0.01);
      assertEquals((-497.46500000000003), range2.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range2.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range2.getUpperBound(), 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(range2);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Week week0 = null;
      try {
        week0 = new Week((Date) null, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[8];
      doubleArray1[1] = 3561.49074;
      doubleArray1[2] = 0.0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'rowData' argument.", ":tI-Okt3V0sN0p", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range0);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("Null 'rowData' argument.", (String) null, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset1);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotSame(categoryDataset1, categoryDataset0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 1.0);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range1);
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(categoryDataset0, categoryDataset1);
      assertNotSame(range1, range0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("Null 'rowData' argument.");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Week week0 = new Week(mockDate0, timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range2);
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertNotSame(categoryDataset0, categoryDataset1);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(29, 6, timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(5, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertNotNull(dynamicTimeSeriesCollection0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) dynamicTimeSeriesCollection0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(5, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue(dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      MockDate mockDate0 = new MockDate((-6), (-6), (-6), (-6), (-6));
      assertNotNull(mockDate0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-6));
      assertNotNull(localDate0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains((-6)));
      
      boolean boolean0 = linkedList0.offerLast(mockDate0);
      assertEquals("Fri Jun 23 17:54:00 GMT 1893", mockDate0.toString());
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains((-6)));
      assertTrue(boolean0);
      
      boolean boolean1 = linkedList0.add((Object) keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(2, linkedList0.size());
      assertFalse(linkedList0.contains((-6)));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      boolean boolean2 = linkedList0.add((Object) localDate0);
      assertEquals(3, linkedList0.size());
      assertFalse(linkedList0.contains((-6)));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      assertNotNull(defaultTableColumnModel0);
      
      JTableHeader jTableHeader0 = new JTableHeader(defaultTableColumnModel0);
      assertFalse(jTableHeader0.isFocusTraversalPolicyProvider());
      assertFalse(jTableHeader0.isFocusTraversalPolicySet());
      assertFalse(jTableHeader0.isFocusCycleRoot());
      assertFalse(jTableHeader0.getIgnoreRepaint());
      assertTrue(jTableHeader0.getFocusTraversalKeysEnabled());
      assertNotNull(jTableHeader0);
      
      boolean boolean3 = categoryTableXYDataset0.hasListener(jTableHeader0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(jTableHeader0.isFocusTraversalPolicyProvider());
      assertFalse(jTableHeader0.isFocusTraversalPolicySet());
      assertFalse(jTableHeader0.isFocusCycleRoot());
      assertFalse(jTableHeader0.getIgnoreRepaint());
      assertTrue(jTableHeader0.getFocusTraversalKeysEnabled());
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-6), 1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-6), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) linkedList0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Week week0 = new Week(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(1, 1);
      assertEquals(1.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertNotNull(lineFunction2D0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      double[][] doubleArray0 = new double[6][7];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (-1294.6650338236213);
      doubleArray1[2] = (-2319.97);
      doubleArray1[3] = (double) 53;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1294.6650338236213);
      doubleArray2[1] = (double) 1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 1.0);
      assertEquals(54.0, range0.getUpperBound(), 0.01);
      assertEquals(2372.97, range0.getLength(), 0.01);
      assertEquals((-1132.485), range0.getCentralValue(), 0.01);
      assertEquals((-2318.97), range0.getLowerBound(), 0.01);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, doubleArray0.length);
      assertNotNull(range0);
      
      MockDate mockDate1 = new MockDate();
      assertNotNull(mockDate1);
      assertTrue(mockDate1.equals((Object)mockDate0));
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains((-1294.6650338236213)));
      
      Vector<DefaultHighLowDataset> vector0 = new Vector<DefaultHighLowDataset>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) vector0, true);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, doubleArray0.length);
      assertNull(range1);
      
      Number number1 = DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, doubleArray0.length);
      assertNotNull(number1);
      assertEquals(53.0, number1);
      
      Range range2 = DatasetUtilities.iterateXYRangeBounds(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNull(range2);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 1);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, doubleArray0.length);
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("Requires 'start' < 'end'.");
      assertFalse(stack0.isEmpty());
      assertEquals("[Requires 'start' < 'end'.]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains("Requires 'start' < 'end'."));
      assertTrue(boolean0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(true));
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(true));
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      boolean boolean1 = linkedList1.add((Object) null);
      assertEquals(1, linkedList1.size());
      assertFalse(linkedList1.contains(true));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(boolean1);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) linkedList1, true);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1, linkedList1.size());
      assertNull(range1);
      assertFalse(linkedList1.contains("Requires 'start' < 'end'."));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotSame(linkedList1, linkedList0);
      
      boolean boolean2 = linkedList1.add((Object) matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertEquals(2, linkedList1.size());
      assertFalse(linkedList1.contains("Requires 'start' < 'end'."));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(boolean2);
      
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertEquals(0, doubleArray0.length);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-3107.748573), Double.POSITIVE_INFINITY, 49, "Requires 'start' < 'end'.");
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMaxX(), 0.01);
      assertEquals(49, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, doubleArray0.length);
      assertNotNull(xYSeries0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range2);
      
      Range range3 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) linkedList0, true);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, linkedList0.size());
      assertNull(range3);
      assertFalse(linkedList0.contains(true));
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertNotSame(linkedList0, linkedList1);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(number0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(boolean0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (-1));
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(pieDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.0, double0, 0.01);
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains((-1)));
      
      boolean boolean1 = linkedList0.add((Object) null);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains((-1)));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) linkedList0, true);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1, linkedList0.size());
      assertNull(range1);
      assertFalse(linkedList0.contains((-1)));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, doubleArray0.length);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-1.0), (-1.0), (-1), (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(range0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, false);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(range1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(false));
      
      boolean boolean0 = linkedList0.add((Object) null);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(false));
      assertTrue(boolean0);
      
      Range range2 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, linkedList0, true);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1, linkedList0.size());
      assertNull(range2);
      assertFalse(linkedList0.contains(false));
      
      Year year0 = new Year();
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertNotNull(year0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) jDBCCategoryDataset0, (Comparable) year0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertNotNull(pieDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getRowCount();
      assertEquals(0, int0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(yIntervalSeriesCollection0);
      
      boolean boolean0 = linkedList0.removeLastOccurrence(yIntervalSeriesCollection0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertFalse(boolean0);
      
      boolean boolean1 = linkedList0.add((Object) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      boolean boolean2 = linkedList0.add((Object) "");
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(""));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      int int1 = xIntervalSeriesCollection0.indexOf("");
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      boolean boolean3 = stack0.add("Time");
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[Time]", stack0.toString());
      assertFalse(stack0.contains(""));
      assertTrue(stack0.contains("Time"));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) xIntervalSeriesCollection0, (List) linkedList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Week week0 = new Week(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(53, 1);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(53.0, lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      // Undeclared exception!
      DatasetUtilities.sampleFunction2D(lineFunction2D0, 53, 105.69793507328329, 1157, week0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(number0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(boolean0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (-1290));
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(pieDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(6.283185307179586, (double) (-1290), "");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = categoryTableXYDataset0.getDomainBounds(true);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(5.783185307179586, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(6.283185307179586, range0.getCentralValue(), 0.01);
      assertEquals(6.783185307179586, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains((-1290)));
      
      Vector<DefaultHighLowDataset> vector0 = new Vector<DefaultHighLowDataset>();
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) linkedList0, false);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, linkedList0.size());
      assertNull(range1);
      assertFalse(linkedList0.contains(""));
      
      Number number1 = DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(number1);
      
      Range range2 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-1290.0), range2.getUpperBound(), 0.01);
      assertEquals((-1290.0), range2.getCentralValue(), 0.01);
      assertEquals((-1290.0), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range0));
      assertNotSame(range2, range0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((-447.27472801881026), (-447.27472801881026), "");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals((-447.27472801881026), range0.getUpperBound(), 0.01);
      assertEquals((-447.27472801881026), range0.getLowerBound(), 0.01);
      assertEquals((-447.27472801881026), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      
      boolean boolean0 = stack0.add("Time");
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[Time]", stack0.toString());
      assertTrue(stack0.contains("Time"));
      assertFalse(stack0.contains(""));
      assertTrue(boolean0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, true);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[Time]", stack0.toString());
      assertEquals((-446.77472801881026), range1.getUpperBound(), 0.01);
      assertEquals((-447.27472801881026), range1.getCentralValue(), 0.01);
      assertEquals((-447.77472801881026), range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertTrue(stack0.contains("Time"));
      assertFalse(stack0.contains(""));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, false);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals((-447.27472801881026), range2.getUpperBound(), 0.01);
      assertEquals((-447.27472801881026), range2.getLowerBound(), 0.01);
      assertEquals((-447.27472801881026), range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[8];
      doubleArray1[4] = 3561.49074;
      doubleArray1[2] = (-0.4047177432303332);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'rowData' argument.", ":tI-Oxt3V0sN0p", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 1.0);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(3561.49074));
      
      Vector<DefaultHighLowDataset> vector0 = new Vector<DefaultHighLowDataset>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Range range1 = DatasetUtilities.findRangeBounds(categoryDataset0, (List) linkedList0, true);
      assertEquals(0, linkedList0.size());
      assertEquals(1, doubleArray0.length);
      assertNull(range1);
      assertFalse(linkedList0.contains(3561.49074));
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Number[][] numberArray0 = new Number[2][3];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      DefaultCategoryDataset defaultCategoryDataset1 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("Quarter outside valDd rPnge.", "Quarter outside valDd rPnge.", numberArray0);
      assertEquals(2, numberArray0.length);
      assertNotNull(defaultCategoryDataset1);
      assertFalse(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
      
      defaultCategoryDataset1.setSelectionState(defaultCategoryDataset0);
      assertEquals(2, numberArray0.length);
      assertFalse(defaultCategoryDataset0.equals((Object)defaultCategoryDataset1));
      assertFalse(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset1);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(2, numberArray0.length);
      assertNotNull(range0);
      assertFalse(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset1);
      assertEquals(2, numberArray0.length);
      assertNull(number0);
      assertFalse(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      Number number1 = DatasetUtilities.findMaximumDomainValue(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNull(number1);
      
      Number number2 = DatasetUtilities.findMaximumStackedRangeValue(defaultCategoryDataset1);
      assertEquals(2, numberArray0.length);
      assertNull(number2);
      assertFalse(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Week week0 = new Week(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(53, 1);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(53.0, lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, (-966.467184), 105.69793507328329, 53, mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(53.0, lineFunction2D0.getIntercept(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(53.0, lineFunction2D0.getIntercept(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(106.19793507328325, range0.getUpperBound(), 0.01);
      assertEquals((-966.967184), range0.getLowerBound(), 0.01);
      assertEquals(1073.1651190732832, range0.getLength(), 0.01);
      assertEquals((-430.38462446335836), range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(number1);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(xYSeriesCollection0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(53.0, lineFunction2D0.getIntercept(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1072.1651190732832, range1.getLength(), 0.01);
      assertEquals((-377.38462446335836), range1.getCentralValue(), 0.01);
      assertEquals(158.69793507328325, range1.getUpperBound(), 0.01);
      assertEquals((-913.467184), range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(range0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(range1);
      
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      categoryTableXYDataset0.add(6.283185307179586, 6.283185307179586, "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      
      Range range2 = categoryTableXYDataset0.getDomainBounds(false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(6.283185307179586, range2.getUpperBound(), 0.01);
      assertEquals(6.283185307179586, range2.getCentralValue(), 0.01);
      assertEquals(6.283185307179586, range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      assertFalse(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(6.283185307179586));
      
      Range range3 = DatasetUtilities.findRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) linkedList0, true);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(0, linkedList0.size());
      assertNull(range3);
      assertFalse(linkedList0.contains(6.283185307179586));
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(number0);
      
      Range range4 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(6.283185307179586, range4.getUpperBound(), 0.01);
      assertEquals(6.283185307179586, range4.getCentralValue(), 0.01);
      assertEquals(6.283185307179586, range4.getLowerBound(), 0.01);
      assertNotNull(range4);
      assertFalse(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertTrue(range4.equals((Object)range2));
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotSame(range4, range2);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      double double0 = 6.283185307179586;
      categoryTableXYDataset0.add(6.283185307179586, 6.283185307179586, "");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(6.283185307179586));
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      
      XYIntervalSeriesCollection[] xYIntervalSeriesCollectionArray0 = new XYIntervalSeriesCollection[4];
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xYIntervalSeriesCollection0);
      
      xYIntervalSeriesCollectionArray0[0] = xYIntervalSeriesCollection0;
      XYIntervalSeriesCollection xYIntervalSeriesCollection1 = new XYIntervalSeriesCollection();
      assertEquals(0, xYIntervalSeriesCollection1.getSeriesCount());
      assertNotNull(xYIntervalSeriesCollection1);
      assertTrue(xYIntervalSeriesCollection1.equals((Object)xYIntervalSeriesCollection0));
      
      xYIntervalSeriesCollectionArray0[1] = xYIntervalSeriesCollection1;
      XYIntervalSeriesCollection xYIntervalSeriesCollection2 = new XYIntervalSeriesCollection();
      assertEquals(0, xYIntervalSeriesCollection2.getSeriesCount());
      assertNotNull(xYIntervalSeriesCollection2);
      assertTrue(xYIntervalSeriesCollection2.equals((Object)xYIntervalSeriesCollection1));
      assertTrue(xYIntervalSeriesCollection2.equals((Object)xYIntervalSeriesCollection0));
      
      xYIntervalSeriesCollectionArray0[2] = xYIntervalSeriesCollection2;
      XYIntervalSeriesCollection xYIntervalSeriesCollection3 = new XYIntervalSeriesCollection();
      assertEquals(0, xYIntervalSeriesCollection3.getSeriesCount());
      assertNotNull(xYIntervalSeriesCollection3);
      assertTrue(xYIntervalSeriesCollection3.equals((Object)xYIntervalSeriesCollection0));
      assertTrue(xYIntervalSeriesCollection3.equals((Object)xYIntervalSeriesCollection1));
      assertTrue(xYIntervalSeriesCollection3.equals((Object)xYIntervalSeriesCollection2));
      
      xYIntervalSeriesCollectionArray0[3] = xYIntervalSeriesCollection3;
      XYIntervalSeriesCollection[] xYIntervalSeriesCollectionArray1 = stack0.toArray(xYIntervalSeriesCollectionArray0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(4, xYIntervalSeriesCollectionArray0.length);
      assertEquals(4, xYIntervalSeriesCollectionArray1.length);
      assertNotNull(xYIntervalSeriesCollectionArray1);
      assertFalse(stack0.contains(""));
      assertSame(xYIntervalSeriesCollectionArray0, xYIntervalSeriesCollectionArray1);
      assertSame(xYIntervalSeriesCollectionArray1, xYIntervalSeriesCollectionArray0);
      
      boolean boolean0 = stack0.add("Time");
      assertFalse(stack0.isEmpty());
      assertEquals("[Time]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(""));
      assertTrue(stack0.contains("Time"));
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, false);
      assertEquals(6.283185307179586, range0.getCentralValue(), 0.01);
      assertEquals(6.283185307179586, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(6.283185307179586, range0.getLowerBound(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertFalse(stack0.isEmpty());
      assertEquals("[Time]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertNotNull(range0);
      assertFalse(stack0.contains(""));
      assertTrue(stack0.contains("Time"));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNull(range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("", "9tJ)``Iyo{", (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(range0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(Double.POSITIVE_INFINITY, 6.283185307179586, "V<03c'W5oc.");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, false);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("V<03c'W5oc."));
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) linkedList0, true);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(0, linkedList0.size());
      assertNull(range2);
      assertFalse(linkedList0.contains("V<03c'W5oc."));
      
      Range range3 = DatasetUtilities.findRangeBounds((CategoryDataset) jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(range3);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(range0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Range range1 = Range.combine((Range) null, (Range) null);
      assertNull(range1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      boolean boolean0 = linkedList0.add((Object) timePeriodValuesCollection0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(boolean0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-2569.4), (-2569.4));
      assertEquals((-2569.4), lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-2569.4), lineFunction2D0.getSlope(), 0.01);
      assertNotNull(lineFunction2D0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertNotNull(fixedMillisecond0);
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281321L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281321L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281321L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1392409281321L, regularTimePeriod0.getMiddleMillisecond());
      assertNotNull(regularTimePeriod0);
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, (-4823.194510760527), (-3411.35765164), 2, regularTimePeriod0);
      assertEquals((-2569.4), lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-2569.4), lineFunction2D0.getSlope(), 0.01);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281321L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281321L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281321L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1392409281321L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNotNull(xYSeriesCollection0);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNotNull(vectorSeriesCollection0);
      
      Range range2 = Range.expandToInclude((Range) null, (-4823.194510760527));
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-4823.194510760527), range2.getLowerBound(), 0.01);
      assertEquals((-4823.194510760527), range2.getUpperBound(), 0.01);
      assertEquals((-4823.194510760527), range2.getCentralValue(), 0.01);
      assertNotNull(range2);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      PieDataset pieDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal((PieDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNotNull(vectorSeriesCollection0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal((PieDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[8];
      doubleArray1[1] = 3561.49074;
      doubleArray1[2] = 0.0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'rowData' argument.", ":tI-Okt3V0sN0p", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range0);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("Null 'rowData' argument.", (String) null, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset1);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotSame(categoryDataset1, categoryDataset0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 1.0);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range1);
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(categoryDataset0, categoryDataset1);
      assertNotSame(range1, range0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("Null 'rowData' argument.");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(3561.49074, (-1410.0137));
      assertEquals(3561.49074, lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-1410.0137), lineFunction2D0.getSlope(), 0.01);
      assertNotNull(lineFunction2D0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, 1.0, 366.650293, (-1), ":tI-Okt3V0sN0p");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(range0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, false);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNull(range1);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("");
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(""));
      assertTrue(boolean0);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, false);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertNull(range2);
      assertTrue(stack0.contains(""));
      
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries((Function2D) null, (-1939.858), (-1020.90209991205), (-969), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Quarter quarter0 = new Quarter();
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertNotNull(quarter0);
      
      Quarter quarter1 = (Quarter)quarter0.next();
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNotNull(quarter1);
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      
      String string0 = quarter1.toString();
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNotNull(string0);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      assertEquals("Q2/2014", string0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((Comparable) quarter1, (KeyedValues) defaultKeyedValuesDataset0);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNotNull(defaultCategoryDataset0);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      assertTrue(boolean0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, 1);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNotNull(defaultPieDataset0);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNull(range0);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(true));
      
      boolean boolean1 = linkedList0.add((Object) quarter1);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(1, linkedList0.size());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertFalse(linkedList0.contains(true));
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      assertTrue(boolean1);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) linkedList0, true);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(1, linkedList0.size());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNull(range1);
      assertFalse(linkedList0.contains(true));
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1290);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertEquals(3, doubleArray0.length);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-1290.0), 1.0, 1.0}, doubleArray0, 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-2122.40744615), (-1290), 4, (-1290.0));
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertEquals(4, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals((-1290.0), xYSeries0.getMaxX(), 0.01);
      assertEquals(4501200.9600268155, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals((-2122.40744615), xYSeries0.getMinX(), 0.01);
      assertEquals(1661520.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(3, doubleArray0.length);
      assertNotNull(xYSeries0);
      assertArrayEquals(new double[] {(-1290.0), 1.0, 1.0}, doubleArray0, 0.01);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, false);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNull(range2);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      
      Range range3 = DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, true);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNull(range3);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(range0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, false);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(range1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(false));
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      boolean boolean0 = linkedList0.add((Object) timePeriodValuesCollection0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertFalse(linkedList0.contains(false));
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, linkedList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.TimePeriodValuesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(1301.4, 2574.373328570809, "");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(1301.4));
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(2574.373328570809, range0.getUpperBound(), 0.01);
      assertEquals(2574.373328570809, range0.getCentralValue(), 0.01);
      assertEquals(2574.373328570809, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      
      boolean boolean0 = stack0.add("`v");
      assertEquals(10, stack0.capacity());
      assertEquals("[`v]", stack0.toString());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.contains(""));
      assertTrue(stack0.contains("`v"));
      assertTrue(boolean0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, true);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(10, stack0.capacity());
      assertEquals("[`v]", stack0.toString());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(1301.4, range1.getCentralValue(), 0.01);
      assertEquals(1301.9, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals(1300.9, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertFalse(stack0.contains(""));
      assertTrue(stack0.contains("`v"));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      KeyToGroupMap keyToGroupMap1 = new KeyToGroupMap("`v");
      assertEquals(1, keyToGroupMap1.getGroupCount());
      assertNotNull(keyToGroupMap1);
      assertFalse(keyToGroupMap1.equals((Object)keyToGroupMap0));
      
      int int0 = keyToGroupMap1.getKeyCount("`v");
      assertEquals(1, keyToGroupMap1.getGroupCount());
      assertFalse(keyToGroupMap1.equals((Object)keyToGroupMap0));
      assertNotSame(keyToGroupMap1, keyToGroupMap0);
      assertEquals(0, int0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, keyToGroupMap1);
      assertEquals(1, keyToGroupMap1.getGroupCount());
      assertNull(range2);
      assertFalse(keyToGroupMap1.equals((Object)keyToGroupMap0));
      assertNotSame(keyToGroupMap1, keyToGroupMap0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'rowData' argument.", ":tI-Okt3V0sN0p", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range0);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("Null 'rowData' argument.", (String) null, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset1);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotSame(categoryDataset1, categoryDataset0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 1.0);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range1);
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(categoryDataset0, categoryDataset1);
      assertNotSame(range1, range0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("Null 'rowData' argument.");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1.0, 2649.783818507);
      assertEquals(1.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(2649.783818507, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertNotNull(normalDistributionFunction2D0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, Double.NEGATIVE_INFINITY, 0.0, 1, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(6.283185307179586, 6.283185307179586, "");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = categoryTableXYDataset0.getDomainBounds(true);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(6.783185307179586, range0.getUpperBound(), 0.01);
      assertEquals(5.783185307179586, range0.getLowerBound(), 0.01);
      assertEquals(6.283185307179586, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(6.283185307179586));
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(6.283185307179586, range1.getUpperBound(), 0.01);
      assertEquals(6.283185307179586, range1.getLowerBound(), 0.01);
      assertEquals(6.283185307179586, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(6.2702533055033145, 6.2702533055033145, "");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(6.2702533055033145));
      
      Range range0 = new Range(6.2702533055033145, 6.2702533055033145);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(6.2702533055033145, range0.getUpperBound(), 0.01);
      assertEquals(6.2702533055033145, range0.getLowerBound(), 0.01);
      assertEquals(6.2702533055033145, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      
      boolean boolean0 = stack0.add("Time");
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[Time]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains("Time"));
      assertFalse(stack0.contains(""));
      assertTrue(boolean0);
      
      Range range1 = Range.expandToInclude(range0, 6.2702533055033145);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(6.2702533055033145, range0.getUpperBound(), 0.01);
      assertEquals(6.2702533055033145, range0.getLowerBound(), 0.01);
      assertEquals(6.2702533055033145, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(6.2702533055033145, range1.getLowerBound(), 0.01);
      assertEquals(6.2702533055033145, range1.getUpperBound(), 0.01);
      assertEquals(6.2702533055033145, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      assertSame(range0, range1);
      assertSame(range1, range0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 6.2702533055033145);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(12.540506611006629, range2.getUpperBound(), 0.01);
      assertEquals(6.2702533055033145, range2.getLowerBound(), 0.01);
      assertEquals(9.405379958254972, range2.getCentralValue(), 0.01);
      assertEquals(6.2702533055033145, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      
      Range range3 = Range.expandToInclude(range1, 6.2702533055033145);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(6.2702533055033145, range0.getUpperBound(), 0.01);
      assertEquals(6.2702533055033145, range0.getLowerBound(), 0.01);
      assertEquals(6.2702533055033145, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(6.2702533055033145, range1.getLowerBound(), 0.01);
      assertEquals(6.2702533055033145, range1.getUpperBound(), 0.01);
      assertEquals(6.2702533055033145, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(6.2702533055033145, range3.getLowerBound(), 0.01);
      assertEquals(6.2702533055033145, range3.getUpperBound(), 0.01);
      assertEquals(6.2702533055033145, range3.getCentralValue(), 0.01);
      assertNotNull(range3);
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range3.equals((Object)range2));
      assertSame(range0, range1);
      assertSame(range0, range3);
      assertNotSame(range0, range2);
      assertSame(range1, range0);
      assertNotSame(range1, range2);
      assertSame(range1, range3);
      assertSame(range3, range0);
      assertNotSame(range3, range2);
      assertSame(range3, range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range2, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(range0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(range1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(false));
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) linkedList0, false);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(0, linkedList0.size());
      assertNull(range2);
      assertFalse(linkedList0.contains(false));
      
      Range range3 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-966.467184));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-966.467184), range3.getLowerBound(), 0.01);
      assertEquals((-966.467184), range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals((-966.467184), range3.getUpperBound(), 0.01);
      assertNotNull(range3);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      double[][] doubleArray0 = new double[0][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Ccs\"hhHh~.?h%ns#]", "", doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 2);
      assertEquals(0, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      List list0 = ((DefaultPieDataset) pieDataset0).getKeys();
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, doubleArray0.length);
      assertNotNull(list0);
      
      int int0 = ((DefaultPieDataset) pieDataset0).getIndex("Ccs\"hhHh~.?h%ns#]");
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "", 1.0, 2);
      assertEquals(0, doubleArray0.length);
      assertNotNull(pieDataset1);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, false);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((-447.27472801881026), (-447.27472801881026), "");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains((-447.27472801881026)));
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-447.27472801881026), range0.getLowerBound(), 0.01);
      assertEquals((-447.27472801881026), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-447.27472801881026), range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      
      boolean boolean0 = stack0.add("Time");
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[Time]", stack0.toString());
      assertTrue(stack0.contains("Time"));
      assertFalse(stack0.contains(""));
      assertTrue(boolean0);
      
      Range range1 = Range.expandToInclude(range0, 0.5);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-447.27472801881026), range0.getLowerBound(), 0.01);
      assertEquals((-447.27472801881026), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-447.27472801881026), range0.getUpperBound(), 0.01);
      assertEquals((-223.38736400940513), range1.getCentralValue(), 0.01);
      assertEquals((-447.27472801881026), range1.getLowerBound(), 0.01);
      assertEquals(447.77472801881026, range1.getLength(), 0.01);
      assertEquals(0.5, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-447.27472801881026));
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-447.27472801881026), range2.getUpperBound(), 0.01);
      assertEquals((-894.5494560376205), range2.getLowerBound(), 0.01);
      assertEquals((-670.9120920282154), range2.getCentralValue(), 0.01);
      assertEquals(447.27472801881026, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      
      Range range3 = Range.expandToInclude(range0, (-1.0));
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-447.27472801881026), range0.getLowerBound(), 0.01);
      assertEquals((-447.27472801881026), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-447.27472801881026), range0.getUpperBound(), 0.01);
      assertEquals((-224.13736400940513), range3.getCentralValue(), 0.01);
      assertEquals(446.27472801881026, range3.getLength(), 0.01);
      assertEquals((-447.27472801881026), range3.getLowerBound(), 0.01);
      assertEquals((-1.0), range3.getUpperBound(), 0.01);
      assertNotNull(range3);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range2, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(range0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-3412.35765164);
      doubleArray2[1] = (-1956.0);
      doubleArray2[2] = (-149.7437);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("Null 'rowData' argument.", "Null 'rowData' argument.", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset1);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotSame(categoryDataset1, categoryDataset0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 1.0);
      assertEquals(3412.35765164, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals((-3411.35765164), range1.getLowerBound(), 0.01);
      assertEquals((-1705.17882582), range1.getCentralValue(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(range1);
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      assertNotSame(categoryDataset0, categoryDataset1);
      
      TimeZone timeZone0 = TimeZone.getTimeZone(":tI-Okt3V0sN0p");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Week week0 = new Week(mockDate0, timeZone0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds(categoryDataset1);
      assertEquals((-3412.35765164), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(3412.35765164, range2.getLength(), 0.01);
      assertEquals((-1706.17882582), range2.getCentralValue(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range1));
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotSame(range2, range1);
      assertNotSame(categoryDataset1, categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      XYDataset xYDataset0 = null;
      LinkedList<XYIntervalSeriesCollection> linkedList0 = new LinkedList<XYIntervalSeriesCollection>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Vector<XYIntervalSeriesCollection> vector0 = new Vector<XYIntervalSeriesCollection>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.capacity());
      assertNotNull(vector0);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds((XYDataset) null, vector0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      categoryTableXYDataset0.remove((Number) integer0, "6Q1-s=ylYV:L-nRPt", false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add((-84.0396586694), (-84.0396586694), "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("6Q1-s=ylYV:L-nRPt"));
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-84.0396586694), range0.getUpperBound(), 0.01);
      assertEquals((-84.0396586694), range0.getLowerBound(), 0.01);
      assertEquals((-84.0396586694), range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      assertFalse(stack0.contains("6Q1-s=ylYV:L-nRPt"));
      
      boolean boolean0 = stack0.add("");
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains("6Q1-s=ylYV:L-nRPt"));
      assertTrue(stack0.contains(""));
      assertTrue(boolean0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals((-84.0396586694), range1.getLowerBound(), 0.01);
      assertEquals((-84.0396586694), range1.getUpperBound(), 0.01);
      assertEquals((-84.0396586694), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertFalse(stack0.contains("6Q1-s=ylYV:L-nRPt"));
      assertTrue(stack0.contains(""));
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-84.0396586694), range2.getUpperBound(), 0.01);
      assertEquals((-84.0396586694), range2.getCentralValue(), 0.01);
      assertEquals((-84.0396586694), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      
      Range range3 = Range.expandToInclude(range0, Double.NEGATIVE_INFINITY);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-84.0396586694), range0.getUpperBound(), 0.01);
      assertEquals((-84.0396586694), range0.getLowerBound(), 0.01);
      assertEquals((-84.0396586694), range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range3.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range3.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range3.getLength(), 0.01);
      assertEquals((-84.0396586694), range3.getUpperBound(), 0.01);
      assertNotNull(range3);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      
      Stack<CategoryTableXYDataset> stack1 = new Stack<CategoryTableXYDataset>();
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertNotNull(stack1);
      assertFalse(stack1.contains(categoryTableXYDataset0));
      
      Range range4 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, true);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(1.0, range4.getLength(), 0.01);
      assertEquals((-84.5396586694), range4.getLowerBound(), 0.01);
      assertEquals((-84.0396586694), range4.getCentralValue(), 0.01);
      assertEquals((-83.5396586694), range4.getUpperBound(), 0.01);
      assertNotNull(range4);
      assertFalse(stack0.contains("6Q1-s=ylYV:L-nRPt"));
      assertTrue(stack0.contains(""));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range0));
      assertNotSame(range4, range1);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertNotSame(range4, range0);
      
      Range range5 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack1, false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertNull(range5);
      assertFalse(stack1.contains(categoryTableXYDataset0));
      
      Range range6 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-84.0396586694), range6.getUpperBound(), 0.01);
      assertEquals((-84.0396586694), range6.getCentralValue(), 0.01);
      assertEquals((-84.0396586694), range6.getLowerBound(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertNotNull(range6);
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range4));
      assertTrue(range6.equals((Object)range1));
      assertTrue(range6.equals((Object)range2));
      assertTrue(range6.equals((Object)range0));
      assertNotSame(range6, range3);
      assertNotSame(range6, range4);
      assertNotSame(range6, range1);
      assertNotSame(range6, range2);
      assertNotSame(range6, range0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range7 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range7);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) "", (-5130.422817730749), (-4164));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(range0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNull(range1);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("");
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.contains(""));
      assertTrue(boolean0);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNull(range2);
      assertTrue(stack0.contains(""));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) "", (-1704.5876415405), 21);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      System.setCurrentTimeMillis((-3640L));
      Week week0 = new Week(2208, 16);
      assertEquals((-3641L), week0.getLastMillisecond());
      assertEquals((-3640L), week0.getFirstMillisecond());
      assertEquals(752L, week0.getSerialIndex());
      assertEquals((-96), week0.getWeek());
      assertEquals(16, week0.getYearValue());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2208, (-684), week0);
      assertEquals((-3641L), week0.getLastMillisecond());
      assertEquals((-3640L), week0.getFirstMillisecond());
      assertEquals(752L, week0.getSerialIndex());
      assertEquals((-96), week0.getWeek());
      assertEquals(16, week0.getYearValue());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-685), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertNotNull(dynamicTimeSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) dynamicTimeSeriesCollection0);
      assertEquals((-3641L), week0.getLastMillisecond());
      assertEquals((-3640L), week0.getFirstMillisecond());
      assertEquals(752L, week0.getSerialIndex());
      assertEquals((-96), week0.getWeek());
      assertEquals(16, week0.getYearValue());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-685), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertNull(range0);
      
      Stack<DefaultIntervalCategoryDataset> stack0 = new Stack<DefaultIntervalCategoryDataset>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      MockDate mockDate0 = new MockDate(975, 1421, 0, 16, 1342);
      assertNotNull(mockDate0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(17, "Duplicate items in 'rowKeys'.");
      assertEquals("java.util.SimpleTimeZone[id=Duplicate items in 'rowKeys'.,offset=17,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("Duplicate items in 'rowKeys'.", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(17, simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      
      Millisecond millisecond0 = new Millisecond(mockDate0, simpleTimeZone0);
      assertEquals("Sat Jun 01 14:22:00 GMT 2993", mockDate0.toString());
      assertEquals("java.util.SimpleTimeZone[id=Duplicate items in 'rowKeys'.,offset=17,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("Duplicate items in 'rowKeys'.", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(17, simpleTimeZone0.getRawOffset());
      assertEquals(32295939720000L, millisecond0.getLastMillisecond());
      assertEquals(17L, millisecond0.getMillisecond());
      assertEquals(32295939720000L, millisecond0.getFirstMillisecond());
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertNotNull(millisecond0);
      
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertEquals("Sat Jun 01 14:22:00 GMT 2993", mockDate0.toString());
      assertEquals("java.util.SimpleTimeZone[id=Duplicate items in 'rowKeys'.,offset=17,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("Duplicate items in 'rowKeys'.", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(17, simpleTimeZone0.getRawOffset());
      assertEquals(32295939720000L, millisecond0.getLastMillisecond());
      assertEquals(17L, millisecond0.getMillisecond());
      assertEquals(32295939720000L, millisecond0.getFirstMillisecond());
      assertEquals((-3640L), millisecond1.getFirstMillisecond());
      assertEquals(18L, millisecond1.getMillisecond());
      assertEquals((-3640L), millisecond1.getLastMillisecond());
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertNotNull(millisecond1);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertNotNull(locale0);
      
      Quarter quarter0 = new Quarter(mockDate0, simpleTimeZone0, locale0);
      assertEquals("Sat Jun 01 14:22:00 GMT 2993", mockDate0.toString());
      assertEquals("java.util.SimpleTimeZone[id=Duplicate items in 'rowKeys'.,offset=17,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("Duplicate items in 'rowKeys'.", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(17, simpleTimeZone0.getRawOffset());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals(32295939720000L, quarter0.getLastMillisecond());
      assertEquals(32295939720000L, quarter0.getFirstMillisecond());
      assertEquals(11974L, quarter0.getSerialIndex());
      assertEquals(2, quarter0.getQuarter());
      assertEquals(2993, quarter0.getYearValue());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertNotNull(quarter0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) 0, (-988.63422));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) xIntervalSeriesCollection0, false);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-1302.019);
      doubleArray1[1] = 4905.59051323;
      doubleArray1[2] = 2231.06842;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(".[oyV~K", "B'i?hc}?BB7h{:[r6", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertEquals(6207.609513230001, range1.getLength(), 0.01);
      assertEquals(1801.785756615, range1.getCentralValue(), 0.01);
      assertEquals(4905.59051323, range1.getUpperBound(), 0.01);
      assertEquals((-1302.019), range1.getLowerBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range1);
      
      Date date0 = null;
      String string0 = "";
      TimeZone timeZone0 = TimeZone.getTimeZone("B'i?hc}?BB7h{:[r6");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Week week0 = null;
      try {
        week0 = new Week((Date) null, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(range0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, false);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNull(range1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(false));
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      boolean boolean0 = linkedList0.add((Object) timePeriodValuesCollection0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertFalse(linkedList0.contains(false));
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) linkedList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.TimePeriodValuesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[8];
      doubleArray1[1] = 3561.49074;
      doubleArray1[2] = 0.0;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("Null 'rowData' argument.", ":tI-Okt3V0sN0p", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      defaultCategoryDataset0.clear();
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertNull(range0);
      
      DefaultCategoryDataset defaultCategoryDataset1 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("Null 'rowData' argument.", (String) null, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(defaultCategoryDataset1);
      assertFalse(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(":tI-Okt3V0sN0p", ":tI-Okt3V0sN0p", "");
      assertEquals(":tI-Okt3V0sN0p", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNotNull(timePeriodValues0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertEquals(":tI-Okt3V0sN0p", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) timePeriodValuesCollection0, false);
      assertEquals(":tI-Okt3V0sN0p", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNull(range1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("Null 'rowData' argument."));
      
      boolean boolean0 = linkedList0.add((Object) null);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains("Null 'rowData' argument."));
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset1, (List) linkedList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(0.0, (-1.0));
      assertEquals(0.0, powerFunction2D0.getA(), 0.01);
      assertEquals((-1.0), powerFunction2D0.getB(), 0.01);
      assertNotNull(powerFunction2D0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultCategoryDataset0);
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, (Comparable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(6.7702533055033145, Double.NEGATIVE_INFINITY);
      assertEquals(Double.NEGATIVE_INFINITY, lineFunction2D0.getSlope(), 0.01);
      assertEquals(6.7702533055033145, lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, false);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) stack0, (Range) null, false);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1.0, (-825.125635842991));
      assertEquals((-825.125635842991), powerFunction2D0.getB(), 0.01);
      assertEquals(1.0, powerFunction2D0.getA(), 0.01);
      assertNotNull(powerFunction2D0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultCategoryDataset0);
      assertNull(range0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, (Comparable) mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(pieDataset0);
      
      ArrayList<DefaultIntervalCategoryDataset> arrayList0 = new ArrayList<DefaultIntervalCategoryDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(yIntervalSeriesCollection0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) yIntervalSeriesCollection0, (List) arrayList0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNotNull(vectorSeriesCollection0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(vectorSeriesCollection0, arrayList0, true);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNull(range1);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      int int0 = defaultMultiValueCategoryDataset0.getRowCount();
      assertEquals(0, int0);
      
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(xYDatasetTableModel0);
      
      vectorSeriesCollection0.removeChangeListener(xYDatasetTableModel0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, 0.5);
      assertNull(range2);
      
      Range range3 = DatasetUtilities.findDomainBounds((XYDataset) vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNull(range3);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) vectorSeriesCollection0, (List) arrayList0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 3561.49074;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, 27);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(pieDataset0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(27));
      
      boolean boolean0 = linkedList0.add((Object) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(27));
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) linkedList0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.gantt.TaskSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, false);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      String string0 = "Requires 'start' < 'end'.";
      boolean boolean0 = stack0.add("Requires 'start' < 'end'.");
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[Requires 'start' < 'end'.]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(string0));
      assertTrue(boolean0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("Requires 'start' < 'end'.");
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      short short0 = (short) (-2605);
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, false);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[Requires 'start' < 'end'.]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNull(range1);
      assertTrue(stack0.contains("Requires 'start' < 'end'."));
      
      double double0 = (-2594.5701053543);
      LineFunction2D lineFunction2D0 = new LineFunction2D((-2594.5701053543), (short) (-2605));
      assertEquals((-2605.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-2594.5701053543), lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      double double1 = (-1290.0);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(lineFunction2D0, (-1290.0), (-1290.0), (short) (-2605), "Requires 'start' < 'end'.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) xIntervalSeriesCollection0, false);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Week week0 = new Week(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(53, 0);
      assertEquals(53.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(0.0, lineFunction2D0.getSlope(), 0.01);
      assertNotNull(lineFunction2D0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(lineFunction2D0, (-2319.97), Double.POSITIVE_INFINITY, 1, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[8];
      doubleArray1[1] = 3561.49074;
      doubleArray1[2] = 0.0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'rowData' argument.", ":tI-Okt3V0sN0p", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range0);
      
      Date date0 = null;
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Week week0 = null;
      try {
        week0 = new Week((Date) null, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      double[][] doubleArray0 = new double[4][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1020.90209991205);
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = (-1020.90209991205);
      doubleArray2[3] = Double.NEGATIVE_INFINITY;
      doubleArray2[4] = (-1020.90209991205);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-1020.90209991205);
      doubleArray3[1] = Double.NEGATIVE_INFINITY;
      doubleArray3[2] = Double.NEGATIVE_INFINITY;
      doubleArray3[3] = (-1020.90209991205);
      doubleArray3[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (-1020.90209991205);
      doubleArray4[1] = (-1020.90209991205);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("SerialDate.weekInMonthToString(): invalid code.", "8eyj%a[rN=^IB~>r,", doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-2788), 247);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(247, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-2788), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingGanttCategoryDataset0, (-2788));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(6.283185307179586, 6.283185307179586, "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = categoryTableXYDataset0.getDomainBounds(true);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(5.783185307179586, range0.getLowerBound(), 0.01);
      assertEquals(6.783185307179586, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(6.283185307179586, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(true));
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(6.283185307179586, range1.getUpperBound(), 0.01);
      assertEquals(6.283185307179586, range1.getLowerBound(), 0.01);
      assertEquals(6.283185307179586, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      
      boolean boolean0 = stack0.add("Time");
      assertEquals("[Time]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.contains(""));
      assertTrue(stack0.contains("Time"));
      assertTrue(boolean0);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals("[Time]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(6.283185307179586, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(6.283185307179586, range2.getCentralValue(), 0.01);
      assertEquals(6.283185307179586, range2.getUpperBound(), 0.01);
      assertNotNull(range2);
      assertFalse(stack0.contains(""));
      assertTrue(stack0.contains("Time"));
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range3 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNull(range3);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      long long0 = (-1L);
      System.setCurrentTimeMillis((-1L));
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      double[][] doubleArray0 = new double[4][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1020.90209991205);
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = (-1020.90209991205);
      doubleArray2[3] = Double.NEGATIVE_INFINITY;
      doubleArray2[4] = (-1020.90209991205);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-1020.90209991205);
      doubleArray3[1] = Double.NEGATIVE_INFINITY;
      doubleArray3[2] = Double.NEGATIVE_INFINITY;
      doubleArray3[3] = (-1020.90209991205);
      doubleArray3[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (-1020.90209991205);
      doubleArray4[1] = (-1020.90209991205);
      doubleArray4[2] = Double.NEGATIVE_INFINITY;
      doubleArray4[3] = Double.NEGATIVE_INFINITY;
      doubleArray4[4] = Double.NEGATIVE_INFINITY;
      doubleArray4[5] = (-1020.90209991205);
      doubleArray4[6] = Double.NEGATIVE_INFINITY;
      doubleArray4[7] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("-:k1U;E,4#';", "-:k1U;E,4#';", doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, Double.NEGATIVE_INFINITY);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(range0);
      
      Comparable<JDBCXYDataset>[] comparableArray0 = (Comparable<JDBCXYDataset>[]) Array.newInstance(Comparable.class, 7);
      Date date0 = null;
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Week week0 = null;
      try {
        week0 = new Week((Date) null, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 992.7863406723;
      doubleArray1[1] = 3561.49074;
      doubleArray1[2] = 0.0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(":tI-Okt3V0sN0p", "SerialDate.weekInMonthToString(): invalid code.", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 247, (-2788));
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals((-2788), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(247, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingGanttCategoryDataset0, 247);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals((-2788), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(247, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(pieDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) 992.7863406723, 3561.49074, 3);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals((-2788), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(247, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(pieDataset1);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNotNull(xYTaskDataset0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 5043.41604740765;
      doubleArray1[3] = (-1354.751);
      doubleArray1[4] = 730.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 5043.41604740765;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (-1354.751);
      doubleArray2[4] = 5043.41604740765;
      doubleArray2[5] = (-1354.751);
      doubleArray2[6] = 5043.41604740765;
      doubleArray2[7] = 0.0;
      doubleArray2[8] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(true));
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      boolean boolean0 = linkedList0.add((Object) defaultIntervalXYDataset0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertFalse(linkedList0.contains(true));
      assertTrue(boolean0);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNull(range1);
      
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertEquals(0, doubleArray0.length);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      PolynomialFunction2D polynomialFunction2D1 = new PolynomialFunction2D(doubleArray0);
      assertEquals((-1), polynomialFunction2D1.getOrder());
      assertEquals(0, doubleArray0.length);
      assertNotNull(polynomialFunction2D1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(polynomialFunction2D1.equals((Object)polynomialFunction2D0));
      
      double[] doubleArray1 = polynomialFunction2D1.getCoefficients();
      assertEquals((-1), polynomialFunction2D1.getOrder());
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertTrue(polynomialFunction2D1.equals((Object)polynomialFunction2D0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(polynomialFunction2D1, polynomialFunction2D0);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D1, 1.5, 1.5, 348, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("Key not found: ");
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[Key not found: ]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains("Key not found: "));
      assertTrue(boolean0);
      
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[2];
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[Key not found: ]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNull(range0);
      assertTrue(stack0.contains("Key not found: "));
      
      doubleArray0[0] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "Missing Q.", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      defaultCategoryDataset0.setValue(2573.25289, (Comparable) "Key not found: ", (Comparable) "");
      assertEquals(1, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) stack0, true);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[Key not found: ]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(2573.25289, range1.getUpperBound(), 0.01);
      assertEquals(2573.25289, range1.getCentralValue(), 0.01);
      assertEquals(2573.25289, range1.getLowerBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range1);
      assertFalse(stack0.contains("Missing Q."));
      assertTrue(stack0.contains("Key not found: "));
      
      Range range2 = DatasetUtilities.findCumulativeRangeBounds(defaultMultiValueCategoryDataset0);
      assertNull(range2);
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(double0);
      assertEquals(2573.25289, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      double[][] doubleArray0 = new double[4][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1020.90209991205);
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = (-1020.90209991205);
      doubleArray2[3] = Double.NEGATIVE_INFINITY;
      doubleArray2[4] = (-1020.90209991205);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-1020.90209991205);
      doubleArray3[1] = Double.NEGATIVE_INFINITY;
      doubleArray3[2] = Double.NEGATIVE_INFINITY;
      doubleArray3[3] = (-1020.90209991205);
      doubleArray3[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (-1020.90209991205);
      doubleArray4[1] = (-1020.90209991205);
      doubleArray4[2] = Double.NEGATIVE_INFINITY;
      doubleArray4[3] = Double.NEGATIVE_INFINITY;
      doubleArray4[4] = Double.NEGATIVE_INFINITY;
      doubleArray4[5] = (-1020.90209991205);
      doubleArray4[6] = Double.NEGATIVE_INFINITY;
      doubleArray4[7] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("-:k1U;E,4#';", "-:k1U;E,4#';", doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, Double.NEGATIVE_INFINITY);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(range0);
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNotNull(vectorSeriesCollection0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) vectorSeriesCollection0, false);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNull(range1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(Double.NEGATIVE_INFINITY));
      
      Range range2 = DatasetUtilities.findRangeBounds(categoryDataset0, (List) linkedList0, false);
      assertEquals(0, linkedList0.size());
      assertEquals(4, doubleArray0.length);
      assertNull(range2);
      assertFalse(linkedList0.contains((-1020.90209991205)));
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      Vector<Byte> vector0 = new Vector<Byte>();
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      Object[] objectArray0 = new Object[0];
      JTable jTable0 = new JTable((Object[][]) null, objectArray0);
      xYDatasetTableModel0.removeTableModelListener(jTable0);
      xYIntervalSeriesCollection0.removeChangeListener(xYDatasetTableModel0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findCumulativeRangeBounds(taskSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'columnKey' argument.
         //
         verifyException("org.jfree.data.gantt.TaskSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(Double.POSITIVE_INFINITY, 0.8420628257148763, "Null 'time' argument.");
      categoryTableXYDataset0.add(0.8420628257148763, 0.8420628257148763, "");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 169);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 169, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, true);
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      TaskSeries taskSeries0 = new TaskSeries("");
      taskSeriesCollection0.add(taskSeries0);
      taskSeriesCollection0.getSeriesCount();
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) (-1);
      doubleArray2[1] = (double) (-1);
      doubleArray2[2] = 1.7976931348623157E308;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) (-1);
      doubleArray2[6] = (double) 1716;
      doubleArray2[7] = (double) 1204;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (double) 59;
      doubleArray3[1] = (double) 0;
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultWindDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[8];
      doubleArray1[1] = 3561.49074;
      doubleArray1[2] = 0.0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2728), "]B9!DgatBh<4d");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(simpleTimeZone0);
      DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, true);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("]B9!DgatBh<4d", "]B9!DgatBh<4d", doubleArray0);
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, true);
      Range.shift(range0, 0.0, true);
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 3561.49074;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 3561.49074;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 3561.49074;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 0.8;
      doubleArray3[1] = 3561.49074;
      doubleArray3[2] = 3561.49074;
      doubleArray3[3] = 3561.49074;
      doubleArray3[4] = 3561.49074;
      doubleArray3[5] = 0.0;
      doubleArray0[2] = doubleArray3;
      DatasetUtilities.createCategoryDataset("Null 'rowData' argument.", "Null 'rowData' argument.", doubleArray0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0);
      DatasetUtilities.createCategoryDataset(":tI-Okt3V0sN0p", (String) null, doubleArray0);
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultWindDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      int int0 = (-1);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (-1));
      DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSet) null).when(statement0).executeQuery(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0).when(connection0).createStatement();
      String string0 = "";
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null);
      DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0);
      JDBCXYDataset jDBCXYDataset0 = null;
      try {
        jDBCXYDataset0 = new JDBCXYDataset(connection0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      DatasetUtilities.findRangeBounds((XYDataset) xYIntervalSeriesCollection0, true);
      Month month0 = null;
      try {
        month0 = new Month((-1833), 1485);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Month outside valid range.
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) null);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) linkedList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultIntervalXYDataset0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultIntervalXYDataset0);
      double[][] doubleArray0 = new double[4][8];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-2028.253128174);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 594.7404307;
      doubleArray1[4] = 0.0;
      doubleArray0[0] = doubleArray1;
      MockDate mockDate0 = new MockDate();
      Week week0 = new Week(mockDate0);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D((Function2D) null, (-2097.04372), 1, 53, week0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      defaultPieDataset0.setValue((Comparable) "#`<DF6H\"yfoe6", (-351.0));
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "#`<DF6H\"yfoe6", (KeyedValues) defaultPieDataset0);
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals((-351.0), number0);
      assertNotNull(number0);
      
      Number number1 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number1);
      assertNotNull(number1);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) "#`<DF6H\"yfoe6", 6.283185307179586, 1);
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Month month0 = new Month();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) month0);
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) month0, (-72.12519), 261);
      DatasetUtilities.createConsolidatedPieDataset(pieDataset1, (Comparable) month0, 2076.459, (-605));
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1.0, 2076.459);
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>(261);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = null;
      try {
        dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection((-1), (-1), (TimeZone) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      Vector<Byte> vector0 = new Vector<Byte>();
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 730.0;
      doubleArray2[1] = 730.0;
      doubleArray2[2] = 730.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 730.0;
      doubleArray2[5] = 730.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 730.0;
      doubleArray3[2] = 730.0;
      doubleArray3[3] = 0.0;
      doubleArray0[2] = doubleArray3;
      DatasetUtilities.createCategoryDataset("Ecq", "Ecq", doubleArray0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) jDBCCategoryDataset0, 1096);
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) 0.0, (-1.0), 1096);
      assertNotSame(pieDataset1, pieDataset0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      DatasetUtilities.iterateToFindDomainBounds(vectorSeriesCollection0, arrayList0, true);
      DatasetUtilities.findDomainBounds((XYDataset) vectorSeriesCollection0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      double[][] doubleArray0 = new double[0][9];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, 0.0);
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Week week0 = null;
      try {
        week0 = new Week((Date) null, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, false);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      linkedList0.add((Object) xYIntervalSeriesCollection0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, linkedList0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYIntervalSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      DatasetUtilities.findCumulativeRangeBounds(jDBCCategoryDataset0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, false);
      Stack<String> stack0 = new Stack<String>();
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, false);
      SpreadsheetDate spreadsheetDate0 = null;
      try {
        spreadsheetDate0 = new SpreadsheetDate((-1213));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SpreadsheetDate: Serial must be in range 2 to 2958465.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timeTableXYDataset0);
      Stack<String> stack0 = new Stack<String>();
      DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) stack0, true);
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2958465);
      LineFunction2D lineFunction2D0 = new LineFunction2D(0.0, 1);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(lineFunction2D0, 1046.80822, 2, 0, spreadsheetDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.validateObject();
      DatasetUtilities.findCumulativeRangeBounds(defaultStatisticalCategoryDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      double[][] doubleArray0 = new double[8][7];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray0[0] = doubleArray1;
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(Double.NEGATIVE_INFINITY, (-1.0));
      MockDate mockDate0 = new MockDate();
      Week week0 = new Week(mockDate0);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(powerFunction2D0, 1, 2.0, 281, 0.0);
      DatasetUtilities.iterateDomainBounds(xYDataset0);
      ArrayList<TimeTableXYDataset> arrayList0 = new ArrayList<TimeTableXYDataset>(53);
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(xYDataset0, arrayList0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findCumulativeRangeBounds(defaultStatisticalCategoryDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      double[][] doubleArray0 = new double[8][7];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 2.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = 2250.10596756;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 2250.10596756;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = 0.0;
      doubleArray6[4] = 2012.695231;
      doubleArray6[5] = 0.0;
      doubleArray6[6] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      doubleArray7[0] = 0.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[0];
      doubleArray0[7] = doubleArray8;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) null, (Comparable[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, false);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      linkedList1.add((Object) xYSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, (List) linkedList1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      Vector<Byte> vector0 = new Vector<Byte>();
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      Object[] objectArray0 = new Object[0];
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYIntervalSeriesCollection0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultIntervalXYDataset0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultIntervalXYDataset0);
      double[][] doubleArray0 = new double[4][8];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-2028.253128174);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 594.7404307;
      doubleArray1[4] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (-546.859208179405);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = (-546.859208179405);
      doubleArray4[1] = (-1322.834588373669);
      doubleArray4[2] = (-546.859208179405);
      doubleArray4[3] = 0.0;
      doubleArray4[4] = (-546.859208179405);
      doubleArray4[5] = 2307.425;
      doubleArray4[6] = (-546.859208179405);
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      Vector<Byte> vector0 = new Vector<Byte>();
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      Object[] objectArray0 = new Object[0];
      JTable jTable0 = new JTable((Object[][]) null, objectArray0);
      xYDatasetTableModel0.removeTableModelListener(jTable0);
      xYIntervalSeriesCollection0.removeChangeListener(xYDatasetTableModel0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findCumulativeRangeBounds(taskSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYIntervalSeriesCollection0, (List) vector0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 992.7863406723;
      doubleArray1[1] = 3561.49074;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = Double.POSITIVE_INFINITY;
      doubleArray1[5] = 58.37;
      doubleArray1[6] = (-1.7976931348623157E308);
      doubleArray1[7] = 0.0;
      doubleArray0[0] = doubleArray1;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) null, (Comparable[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      XYDataset xYDataset0 = null;
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Byte byte0 = new Byte((byte) (-32));
      linkedList0.removeFirstOccurrence(byte0);
      Long.getLong("Null 'columnKeys' argument.");
      linkedList0.add((Long) null);
      Long long0 = new Long((-1895L));
      linkedList0.add(long0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, (List) linkedList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(0.0, (-1.0));
      MockDate mockDate0 = new MockDate();
      Week week0 = new Week(mockDate0);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(powerFunction2D0, 0.0, 0.0, 0, week0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset("", "", "1T#@E^", "=_jb\bBB*U&]I{Gn");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 5043.41604740765;
      doubleArray1[3] = (-1354.751);
      doubleArray1[4] = 730.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 5043.41604740765;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (-1354.751);
      doubleArray2[4] = 5043.41604740765;
      doubleArray2[5] = (-1354.751);
      doubleArray2[6] = 5043.41604740765;
      doubleArray2[7] = 0.0;
      doubleArray2[8] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 5043.41604740765;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 730.0;
      doubleArray3[6] = (-1354.751);
      doubleArray3[7] = 0.0;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Duplicate items in 'columnKeys'.", "Duplicate items in 'columnKeys'.", doubleArray0);
      int int0 = 1096;
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, 1096);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1096, Size: 3
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      TimeZone.getDefault();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      MockDate mockDate0 = new MockDate(378, (-1), (-1), (-1), 1592);
      Number[][] numberArray0 = new Number[2][3];
      Number[] numberArray1 = new Number[1];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)38;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      numberArray1[0] = (Number) bigInteger0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[3];
      numberArray2[0] = (Number) (byte) (-61);
      numberArray2[1] = (Number) (byte)38;
      Double double0 = new Double((byte)39);
      numberArray2[2] = (Number) double0;
      numberArray0[1] = numberArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("U`<hF66H\"yf,e|6", "U`<hF66H\"yf,e|6", numberArray0);
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(9.6495578392358E13, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Minute minute0 = new Minute();
      Stack<String> stack0 = new Stack<String>();
      stack0.add("");
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.add(stack0, "", minute0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, (Comparable) minute0);
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) minute0, (-3943.9));
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      
      PieDataset pieDataset2 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, (Comparable) "");
      assertFalse(pieDataset2.equals((Object)pieDataset1));
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Short short0 = new Short((short)3903);
      linkedList1.add((Object) localDate0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList1, true);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(mockDate0);
      DatasetUtilities.findMinimumDomainValue(defaultIntervalXYDataset0);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findMinimumStackedRangeValue(defaultMultiValueCategoryDataset0);
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[8];
      doubleArray1[1] = 3561.49074;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timeTableXYDataset0);
      double[][] doubleArray0 = new double[0][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("ot.tUq7m/ttXs{j)", "ot.tUq7m/ttXs{j)", doubleArray0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 2);
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "ot.tUq7m/ttXs{j)", 3609.7644259396, 2448);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-1), (-691.0));
      MockDate mockDate0 = new MockDate();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findCumulativeRangeBounds(defaultCategoryDataset0);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (Comparable) mockDate0);
      ArrayList<DefaultIntervalCategoryDataset> arrayList0 = new ArrayList<DefaultIntervalCategoryDataset>();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) yIntervalSeriesCollection0, (List) arrayList0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      int int0 = 244;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultKeyedValues2DDataset0, tableOrder0, 244);
      defaultKeyedValues2DDataset0.removeChangeListener(categoryToPieDataset0);
      defaultKeyedValues2DDataset0.addChangeListener((DatasetChangeListener) null);
      int int1 = 267;
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, 267);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection((XYSeries) null);
      DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0);
      DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
      String string0 = "DefaultIntervalCategoryDataset.setCategoryKeys(): null category not permitted.";
      Number[][] numberArray0 = new Number[5][4];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[6];
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      int int2 = 2650;
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getMaxRegularValue(249, 2650);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 249, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      int int0 = (-1);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (-1));
      DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      String string0 = "";
      JDBCXYDataset jDBCXYDataset0 = null;
      try {
        jDBCXYDataset0 = new JDBCXYDataset(connection0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      int int0 = (-2756);
      String string0 = "";
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(52, (-2756), timeZone0);
      DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = null;
      try {
        defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((double[][]) null, (double[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'data' argument.
         //
         verifyException("org.jfree.data.DataUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      String string0 = "";
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[7];
      Date[] dateArray0 = new Date[6];
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("<gGD:k<5{BqPw", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      DatasetUtilities.findRangeBounds((XYDataset) xIntervalSeriesCollection0, false);
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 6);
      int int0 = 1485;
      Month month0 = null;
      try {
        month0 = new Month(1485, 1485);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Month outside valid range.
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      double[][] doubleArray0 = new double[8][6];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2.0;
      doubleArray1[2] = 3692.874276;
      doubleArray1[3] = 3051.582;
      doubleArray1[4] = Double.NEGATIVE_INFINITY;
      doubleArray1[5] = 1749.71351365042;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 3692.874276;
      doubleArray2[1] = 1063.255;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 1.7976931348623157E308;
      doubleArray2[4] = 2.0;
      doubleArray2[5] = 3051.582;
      doubleArray2[6] = 3051.582;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 1063.255;
      doubleArray4[2] = Double.NEGATIVE_INFINITY;
      doubleArray4[3] = 1749.71351365042;
      doubleArray4[4] = 1749.71351365042;
      doubleArray4[5] = 1913.597752;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = 2.0;
      doubleArray5[1] = 2.0;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = (-4786.102883579579);
      doubleArray5[4] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = Double.NEGATIVE_INFINITY;
      doubleArray6[1] = Double.NEGATIVE_INFINITY;
      doubleArray6[2] = 3051.582;
      doubleArray6[3] = 1749.71351365042;
      doubleArray6[4] = (-515.6348217164849);
      doubleArray6[5] = 1913.597752;
      doubleArray6[6] = 2.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      doubleArray7[0] = 1.7976931348623157E308;
      doubleArray7[1] = 2.0;
      doubleArray7[2] = 1749.71351365042;
      doubleArray7[3] = (-515.6348217164849);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[0];
      doubleArray0[7] = doubleArray8;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'visibleSeriesKeys' argument.", "Null 'visibleSeriesKeys' argument.", doubleArray0);
      assertNotNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timeTableXYDataset0);
      Function2D function2D0 = null;
      double double0 = 1.0;
      double double1 = 3609.7644259396;
      int int0 = (-2301);
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate("Null 'rowKey' argument.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }
}
