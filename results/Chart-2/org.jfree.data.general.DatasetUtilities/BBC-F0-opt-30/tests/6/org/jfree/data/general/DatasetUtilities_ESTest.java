/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 11:27:29 GMT 2021
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.beans.PropertyChangeListener;
import java.lang.reflect.Array;
import java.math.BigInteger;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DateFormatSymbols;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Comparator;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import javax.swing.DropMode;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JTable;
import javax.swing.event.TableModelListener;
import javax.swing.plaf.basic.BasicSplitPaneDivider;
import javax.swing.plaf.basic.BasicSplitPaneUI;
import javax.swing.plaf.synth.SynthColorChooserUI;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.DomainOrder;
import org.jfree.data.KeyToGroupMap;
import org.jfree.data.KeyedValues;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.event.DatasetChangeListener;
import org.jfree.data.event.SeriesChangeEvent;
import org.jfree.data.function.Function2D;
import org.jfree.data.function.LineFunction2D;
import org.jfree.data.function.NormalDistributionFunction2D;
import org.jfree.data.function.PolynomialFunction2D;
import org.jfree.data.function.PowerFunction2D;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DatasetUtilities;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.SeriesChangeInfo;
import org.jfree.data.general.SeriesChangeType;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.pie.DefaultPieDataset;
import org.jfree.data.pie.PieDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.IntervalXYDelegate;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYDatasetTableModel;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DatasetUtilities_ESTest extends DatasetUtilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Short short0 = new Short((short) (-985));
      assertNotNull(short0);
      assertEquals((short) (-985), (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertFalse(stack0.contains((short) (-985)));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains((short) (-985)));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[-985]", stack0.toString());
      assertTrue(boolean0);
      
      XYSeries xYSeries0 = new XYSeries(short0, true, false);
      assertNotNull(xYSeries0);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      xYSeries0.add((Number) short0, (Number) short0, false);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getNotify());
      assertEquals((-985.0), xYSeries0.getMinX(), 0.01);
      assertEquals((-985.0), xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-985.0), xYSeries0.getMaxY(), 0.01);
      assertEquals((-985.0), xYSeries0.getMaxX(), 0.01);
      
      xYSeries0.fireSeriesChanged();
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getNotify());
      assertEquals((-985.0), xYSeries0.getMinX(), 0.01);
      assertEquals((-985.0), xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-985.0), xYSeries0.getMaxY(), 0.01);
      assertEquals((-985.0), xYSeries0.getMaxX(), 0.01);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) stack0, range0, true);
      assertNull(range1);
      assertTrue(stack0.contains((short) (-985)));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[-985]", stack0.toString());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getNotify());
      assertEquals((-985.0), xYSeries0.getMinX(), 0.01);
      assertEquals((-985.0), xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-985.0), xYSeries0.getMaxY(), 0.01);
      assertEquals((-985.0), xYSeries0.getMaxX(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries(":%H0{9{=uX>+", 90, 90);
      assertNotNull(matrixSeries0);
      assertEquals(8100, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(90, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(90, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(8100, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(90, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(90, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(matrixSeriesCollection0, Double.NEGATIVE_INFINITY);
      assertNotNull(xYBarDataset0);
      assertEquals(8100, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(90, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(90, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(Double.NEGATIVE_INFINITY, xYBarDataset0.getBarWidth(), 0.01);
      
      matrixSeriesCollection0.removeChangeListener(xYBarDataset0);
      assertEquals(8100, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(90, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(90, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(Double.NEGATIVE_INFINITY, xYBarDataset0.getBarWidth(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(8100, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(90, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(90, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(89.0, number0);
      
      // Undeclared exception!
      DatasetUtilities.iterateXYRangeBounds(xYBarDataset0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 23.0;
      doubleArray1[1] = (-2323.8794);
      doubleArray1[2] = 6.283185307179586;
      doubleArray1[3] = 1.39240928132E12;
      doubleArray1[4] = (-201.6);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2323.8794);
      doubleArray2[1] = (-2323.8794);
      doubleArray2[2] = 6.283185307179586;
      doubleArray2[3] = 23.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-2323.8794);
      doubleArray3[1] = (-201.6);
      doubleArray3[2] = 6.283185307179586;
      doubleArray3[3] = 6.283185307179586;
      doubleArray3[4] = 23.0;
      doubleArray3[5] = 0.8;
      doubleArray3[6] = (-2323.8794);
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      int int0 = 1;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 1);
      assertNotNull(categoryToPieDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries(":%H0{9{=uX>+", 90, 90);
      assertNotNull(matrixSeries0);
      assertEquals(8100, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(90, matrixSeries0.getColumnsCount());
      assertEquals(90, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(8100, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(90, matrixSeries0.getColumnsCount());
      assertEquals(90, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(8100, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(90, matrixSeries0.getColumnsCount());
      assertEquals(90, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(89.0, number0);
      
      // Undeclared exception!
      DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      Short short0 = new Short((short)5);
      assertNotNull(short0);
      assertEquals((short)5, (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains((short)5));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[5]", stack0.toString());
      assertTrue(boolean0);
      
      boolean boolean1 = stack0.add(short0);
      assertTrue(stack0.contains((short)5));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertEquals("[5, 5]", stack0.toString());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      XYSeries xYSeries0 = new XYSeries(short0, true, true);
      assertNotNull(xYSeries0);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      xYSeries0.add((Number) short0, (Number) short0, false);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(5.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(5.0, xYSeries0.getMinX(), 0.01);
      
      XYSeries xYSeries1 = new XYSeries(short0);
      assertNotNull(xYSeries1);
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAutoSort());
      assertNull(xYSeries1.getDescription());
      assertTrue(xYSeries1.getNotify());
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      
      xYSeries1.setMaximumItemCount(12);
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertEquals(12, xYSeries1.getMaximumItemCount());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertTrue(xYSeries1.getAutoSort());
      assertNull(xYSeries1.getDescription());
      assertTrue(xYSeries1.getNotify());
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      
      Range range0 = new Range(3035.4, 3035.4);
      assertNotNull(range0);
      assertEquals(3035.4, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(3035.4, range0.getCentralValue(), 0.01);
      assertEquals(3035.4, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) stack0, range0, false);
      assertNull(range1);
      assertTrue(stack0.contains((short)5));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertEquals("[5, 5]", stack0.toString());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(5.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(5.0, xYSeries0.getMinX(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(3035.4, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(3035.4, range0.getCentralValue(), 0.01);
      assertEquals(3035.4, range0.getUpperBound(), 0.01);
      assertNotSame(xYSeries0, xYSeries1);
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset("null6", "null6", "dn}7-`yVv{q;7q1KiYb", "null6");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Short short0 = new Short((short)60);
      assertNotNull(short0);
      assertEquals((short)60, (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertFalse(stack0.contains((short)60));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains((short)60));
      assertEquals("[60]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(boolean0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((Number) short0, (Number) short0, (Comparable) short0, (Comparable) short0);
      Object object0 = defaultStatisticalCategoryDataset0.clone();
      assertNotNull(object0);
      assertNotSame(defaultStatisticalCategoryDataset0, object0);
      assertNotSame(object0, defaultStatisticalCategoryDataset0);
      assertTrue(object0.equals((Object)defaultStatisticalCategoryDataset0));
      
      defaultStatisticalCategoryDataset0.add((Number) short0, (Number) null, (Comparable) short0, (Comparable) short0);
      assertNotSame(defaultStatisticalCategoryDataset0, object0);
      assertFalse(defaultStatisticalCategoryDataset0.equals((Object)object0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertNotNull(range0);
      assertTrue(stack0.contains((short)60));
      assertEquals("[60]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(60.0, range0.getUpperBound(), 0.01);
      assertEquals(60.0, range0.getLowerBound(), 0.01);
      assertEquals(60.0, range0.getCentralValue(), 0.01);
      assertNotSame(defaultStatisticalCategoryDataset0, object0);
      assertFalse(defaultStatisticalCategoryDataset0.equals((Object)object0));
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "p0xuLv3X)";
      stringArray0[1] = "null1";
      stringArray0[2] = "5";
      Number[][] numberArray0 = new Number[0][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, stringArray0.length);
      assertEquals(0, numberArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) "null1");
      assertNotNull(pieDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, stringArray0.length);
      assertEquals(0, numberArray0.length);
      
      // Undeclared exception!
      try { 
        SerialDate.getFollowingDayOfWeek((int) (short)60, (SerialDate) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid day-of-the-week code.
         //
         verifyException("org.jfree.data.time.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      Short short0 = new Short((short)23);
      assertNotNull(short0);
      assertEquals((short)23, (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains(short0));
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[23]", stack0.toString());
      assertEquals(1, stack0.size());
      assertTrue(boolean0);
      
      XYSeries xYSeries0 = new XYSeries(short0, true, true);
      assertNotNull(xYSeries0);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      xYSeries0.add((Number) short0, (Number) short0, true);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(23.0, xYSeries0.getMinY(), 0.01);
      assertEquals(23.0, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(23.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(23.0, xYSeries0.getMaxX(), 0.01);
      
      xYSeries0.setMaximumItemCount((short)23);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(23, xYSeries0.getMaximumItemCount());
      assertEquals(23.0, xYSeries0.getMinY(), 0.01);
      assertEquals(23.0, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(23.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(23.0, xYSeries0.getMaxX(), 0.01);
      
      Range range0 = new Range((short)23, (short)23);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(23.0, range0.getLowerBound(), 0.01);
      assertEquals(23.0, range0.getCentralValue(), 0.01);
      assertEquals(23.0, range0.getUpperBound(), 0.01);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(stack0, short0, short0);
      assertTrue(stack0.contains(short0));
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[23]", stack0.toString());
      assertEquals(1, stack0.size());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertNotNull(range1);
      assertTrue(stack0.contains(short0));
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[23]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(23.0, range1.getLowerBound(), 0.01);
      assertEquals(23.0, range1.getCentralValue(), 0.01);
      assertEquals(23.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      
      Range range2 = DatasetUtilities.iterateToFindDomainBounds(xYSeriesCollection0, stack0, false);
      assertNotNull(range2);
      assertTrue(stack0.contains(short0));
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[23]", stack0.toString());
      assertEquals(1, stack0.size());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(23, xYSeries0.getMaximumItemCount());
      assertEquals(23.0, xYSeries0.getMinY(), 0.01);
      assertEquals(23.0, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(23.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(23.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(23.0, range2.getLowerBound(), 0.01);
      assertEquals(23.0, range2.getUpperBound(), 0.01);
      assertEquals(23.0, range2.getCentralValue(), 0.01);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      Short short0 = new Short((short)23);
      assertNotNull(short0);
      assertEquals((short)23, (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains((short)23));
      assertEquals("[23]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(boolean0);
      
      XYSeries xYSeries0 = new XYSeries(short0, true, true);
      assertNotNull(xYSeries0);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      xYSeries0.add((Number) short0, (Number) short0, true);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(23.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(23.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(23.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(23.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      
      xYSeries0.setMaximumItemCount((short)23);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(23, xYSeries0.getMaximumItemCount());
      assertEquals(23.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(23.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(23.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(23.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      
      Range range0 = new Range((short)23, (short)23);
      assertNotNull(range0);
      assertEquals(23.0, range0.getCentralValue(), 0.01);
      assertEquals(23.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(23.0, range0.getLowerBound(), 0.01);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(stack0, short0, short0);
      assertTrue(stack0.contains((short)23));
      assertEquals("[23]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertNotNull(range1);
      assertTrue(stack0.contains((short)23));
      assertEquals("[23]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(23.0, range1.getLowerBound(), 0.01);
      assertEquals(23.0, range1.getCentralValue(), 0.01);
      assertEquals(23.0, range1.getUpperBound(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) stack0, true);
      assertNotNull(range2);
      assertTrue(stack0.contains((short)23));
      assertEquals("[23]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(23, xYSeries0.getMaximumItemCount());
      assertEquals(23.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(23.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(23.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(23.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(22.5, range2.getLowerBound(), 0.01);
      assertEquals(23.0, range2.getCentralValue(), 0.01);
      assertEquals(23.5, range2.getUpperBound(), 0.01);
      assertEquals(1.0, range2.getLength(), 0.01);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      
      Short short0 = new Short((short)23);
      assertNotNull(short0);
      assertEquals((short)23, (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains(short0));
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[23]", stack0.toString());
      assertTrue(boolean0);
      
      XYSeries xYSeries0 = new XYSeries(short0, true, true);
      assertNotNull(xYSeries0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      xYSeries0.add((Number) short0, (Number) short0, true);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(23.0, xYSeries0.getMinX(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(23.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(23.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(23.0, xYSeries0.getMaxY(), 0.01);
      
      xYSeries0.setMaximumItemCount((short)23);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(23.0, xYSeries0.getMinX(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(23, xYSeries0.getMaximumItemCount());
      assertEquals(23.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(23.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(23.0, xYSeries0.getMaxY(), 0.01);
      
      Range range0 = new Range((short)23, (short)23);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(23.0, range0.getLowerBound(), 0.01);
      assertEquals(23.0, range0.getCentralValue(), 0.01);
      assertEquals(23.0, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) stack0, range0, false);
      assertNotNull(range1);
      assertTrue(stack0.contains(short0));
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[23]", stack0.toString());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(23.0, xYSeries0.getMinX(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(23, xYSeries0.getMaximumItemCount());
      assertEquals(23.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(23.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(23.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(23.0, range0.getLowerBound(), 0.01);
      assertEquals(23.0, range0.getCentralValue(), 0.01);
      assertEquals(23.0, range0.getUpperBound(), 0.01);
      assertEquals(23.0, range1.getCentralValue(), 0.01);
      assertEquals(23.0, range1.getUpperBound(), 0.01);
      assertEquals(23.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[][] doubleArray0 = new double[12][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(12, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(12, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(12, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 1);
      assertNotNull(categoryToPieDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(12, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(12, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(12, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(12, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(12, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertTrue(boolean0);
      assertEquals(12, doubleArray0.length);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("Series 5", 1, 1);
      assertNotNull(matrixSeries0);
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      ArrayList<IntervalXYDelegate> arrayList0 = new ArrayList<IntervalXYDelegate>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, (List) arrayList0, range0, true);
      assertNull(range1);
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      XYSeries xYSeries0 = new XYSeries("Duplicate items in 'columnKeys'.", true, false);
      assertNotNull(xYSeries0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate(Double.NaN, Double.NaN);
      assertNull(xYDataItem0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      assertNull(range0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertNull(range1);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      Short short0 = new Short((short) (-1399));
      assertNotNull(short0);
      assertEquals((short) (-1399), (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains(short0));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[-1399]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Elb.]Q'8kI5-");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(stack0, "Elb.]Q'8kI5-", short0);
      assertTrue(stack0.contains(short0));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[-1399]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Short short0 = new Short((short) (-816));
      assertNotNull(short0);
      assertEquals((short) (-816), (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains((short) (-816)));
      assertEquals("[-816]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean0);
      
      XYSeries xYSeries0 = new XYSeries(short0, true, true);
      assertNotNull(xYSeries0);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      
      XYSeries xYSeries1 = new XYSeries(short0);
      assertNotNull(xYSeries1);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertTrue(xYSeries1.getAutoSort());
      assertNull(xYSeries1.getDescription());
      assertTrue(xYSeries1.getNotify());
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertEquals(0, xYSeries1.getItemCount());
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries1);
      assertNotNull(xYSeriesCollection0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertTrue(xYSeries1.getAutoSort());
      assertNull(xYSeries1.getDescription());
      assertTrue(xYSeries1.getNotify());
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      
      xYSeries1.add((Number) short0, (Number) short0, true);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertTrue(xYSeries1.getAutoSort());
      assertNull(xYSeries1.getDescription());
      assertTrue(xYSeries1.getNotify());
      assertEquals((-816.0), xYSeries1.getMaxY(), 0.01);
      assertEquals((-816.0), xYSeries1.getMaxX(), 0.01);
      assertEquals((-816.0), xYSeries1.getMinY(), 0.01);
      assertEquals((-816.0), xYSeries1.getMinX(), 0.01);
      assertEquals(1, xYSeries1.getItemCount());
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      
      Range range0 = new Range((short) (-816), (-625.95056));
      assertNotNull(range0);
      assertEquals((-816.0), range0.getLowerBound(), 0.01);
      assertEquals((-720.97528), range0.getCentralValue(), 0.01);
      assertEquals((-625.95056), range0.getUpperBound(), 0.01);
      assertEquals(190.04944, range0.getLength(), 0.01);
      
      xYSeries0.fireSeriesChanged();
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertNotSame(xYSeries0, xYSeries1);
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, (List) stack0, range0, true);
      assertNotNull(range1);
      assertTrue(stack0.contains(short0));
      assertEquals("[-816]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertTrue(xYSeries1.getAutoSort());
      assertNull(xYSeries1.getDescription());
      assertTrue(xYSeries1.getNotify());
      assertEquals((-816.0), xYSeries1.getMaxY(), 0.01);
      assertEquals((-816.0), xYSeries1.getMaxX(), 0.01);
      assertEquals((-816.0), xYSeries1.getMinY(), 0.01);
      assertEquals((-816.0), xYSeries1.getMinX(), 0.01);
      assertEquals(1, xYSeries1.getItemCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals((-816.0), range0.getLowerBound(), 0.01);
      assertEquals((-720.97528), range0.getCentralValue(), 0.01);
      assertEquals((-625.95056), range0.getUpperBound(), 0.01);
      assertEquals(190.04944, range0.getLength(), 0.01);
      assertEquals((-816.0), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-816.0), range1.getCentralValue(), 0.01);
      assertEquals((-816.0), range1.getUpperBound(), 0.01);
      assertNotSame(xYSeries1, xYSeries0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 847.0, 501.065, 1504.343, (-1.0), (-1.0));
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(4, oHLCDataItemArray0.length);
      
      DefaultOHLCDataset defaultOHLCDataset1 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertEquals(4, oHLCDataItemArray0.length);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      
      defaultOHLCDataset1.validateObject();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      
      defaultOHLCDataset0.sortDataByDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertEquals(4, oHLCDataItemArray0.length);
      assertFalse(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (1504.343) <= upper (501.065).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[][] doubleArray0 = new double[7][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("?$h8R&TIgA1f(7``,", "?$h8R&TIgA1f(7``,", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(7, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 0.0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains((short)0));
      assertFalse(stack0.empty());
      assertEquals("[0]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean0);
      
      XYSeries xYSeries0 = new XYSeries(short0, true, true);
      assertNotNull(xYSeries0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      xYSeries0.add((Number) short0, (Number) short0, true);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      
      Range range0 = new Range((short)0, (short)0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      xYSeries0.fireSeriesChanged();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) stack0, false);
      assertNotNull(range1);
      assertTrue(stack0.contains((short)0));
      assertFalse(stack0.empty());
      assertEquals("[0]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Short short0 = new Short((short)61);
      assertNotNull(short0);
      assertEquals((short)61, (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(short0));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains(short0));
      assertEquals("[61]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((Number) short0, (Number) short0, (Comparable) short0, (Comparable) short0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertNotNull(range0);
      assertTrue(stack0.contains(short0));
      assertEquals("[61]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(122.0, range0.getLength(), 0.01);
      assertEquals(61.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(122.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 1, 13);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(13, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(slidingGanttCategoryDataset0, tableOrder0, (-49));
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(13, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-49), categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      
      Short short0 = new Short((short)1362);
      assertNotNull(short0);
      assertEquals((short)1362, (short)short0);
      
      Short short1 = new Short((short) (-326));
      assertNotNull(short1);
      assertEquals((short) (-326), (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      boolean boolean0 = stack0.add(short1);
      assertFalse(stack0.contains(short0));
      assertTrue(stack0.contains(short1));
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[-326]", stack0.toString());
      assertTrue(boolean0);
      assertFalse(short1.equals((Object)short0));
      
      XYSeries xYSeries0 = new XYSeries(short1, true, true);
      assertNotNull(xYSeries0);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertFalse(short1.equals((Object)short0));
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(short1.equals((Object)short0));
      
      xYSeries0.add((Number) short1, (Number) short0, true);
      assertEquals(1362.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-326.0), xYSeries0.getMaxX(), 0.01);
      assertEquals((-326.0), xYSeries0.getMinX(), 0.01);
      assertEquals(1362.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertFalse(short0.equals((Object)short1));
      assertFalse(short1.equals((Object)short0));
      
      Range range0 = new Range((-492.45), (-492.45));
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-492.45), range0.getLowerBound(), 0.01);
      assertEquals((-492.45), range0.getUpperBound(), 0.01);
      assertEquals((-492.45), range0.getCentralValue(), 0.01);
      
      xYSeries0.fireSeriesChanged();
      assertEquals(1362.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-326.0), xYSeries0.getMaxX(), 0.01);
      assertEquals((-326.0), xYSeries0.getMinX(), 0.01);
      assertEquals(1362.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertFalse(short1.equals((Object)short0));
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) stack0, true);
      assertNotNull(range1);
      assertFalse(stack0.contains(short0));
      assertTrue(stack0.contains(short1));
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[-326]", stack0.toString());
      assertEquals(1362.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-326.0), xYSeries0.getMaxX(), 0.01);
      assertEquals((-326.0), xYSeries0.getMinX(), 0.01);
      assertEquals(1362.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals((-326.5), range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals((-326.0), range1.getCentralValue(), 0.01);
      assertEquals((-325.5), range1.getUpperBound(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(short1.equals((Object)short0));
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("#M7|TWlS.iRtj6x<f", 43, 152);
      assertNotNull(matrixSeries0);
      assertEquals(6536, matrixSeries0.getItemCount());
      assertEquals(43, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(152, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(6536, matrixSeries0.getItemCount());
      assertEquals(43, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(152, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertEquals(6536, matrixSeries0.getItemCount());
      assertEquals(43, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(152, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(42.0, range0.getLength(), 0.01);
      assertEquals(21.0, range0.getCentralValue(), 0.01);
      assertEquals(42.0, range0.getUpperBound(), 0.01);
      
      // Undeclared exception!
      DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray1[2] = (-1.7976931348623157E308);
      doubleArray1[3] = 2265.520276844;
      doubleArray1[4] = 6.283185307179586;
      doubleArray1[5] = 2820.74681216631;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1.7976931348623157E308);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 2265.520276844;
      doubleArray3[1] = (-1.7976931348623157E308);
      doubleArray3[2] = 6.283185307179586;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = Double.POSITIVE_INFINITY;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = Double.POSITIVE_INFINITY;
      doubleArray4[3] = 2265.520276844;
      doubleArray4[4] = 2820.74681216631;
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, doubleArray0.length);
      
      int int0 = defaultIntervalCategoryDataset0.getColumnIndex((-1.7976931348623157E308));
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals((-1), int0);
      assertEquals(4, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, doubleArray0.length);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      MockDate mockDate0 = new MockDate((-1705), 273, 18, 273, (-2831), 52);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 273, Double.NaN, (-1705), (-2831), (-920.7826931));
      assertNotNull(oHLCDataItem0);
      assertEquals("Mon Oct 27 09:49:52 GMT 217", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Mon Oct 27 09:49:52 GMT 217", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3, oHLCDataItemArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (-1705.0) <= upper (-Infinity).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      assertNotNull(serialDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertEquals(2014, serialDate0.getYYYY());
      assertEquals(41684, serialDate0.toSerial());
      assertEquals(2, serialDate0.getMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(14, serialDate0.getDayOfMonth());
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.NEAREST);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 5, 3, 3, 3, 1);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-73);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-73)}, byteArray0);
      
      MockDate mockDate1 = new MockDate((byte) (-1), 4060, (byte) (-1), 1896, (byte) (-73));
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      int int0 = 1;
      MockDate mockDate2 = new MockDate(3, (byte) (-73), 2, 1, 1900);
      assertNotNull(mockDate2);
      assertFalse(mockDate2.equals((Object)mockDate1));
      assertFalse(mockDate2.equals((Object)mockDate0));
      
      Date[] dateArray0 = new Date[5];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate1;
      dateArray0[2] = (Date) mockDate1;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2958465;
      doubleArray0[1] = (double) 1;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(oHLCDataItem0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(2, doubleArray0.length);
      assertEquals(5, dateArray0.length);
      assertArrayEquals(new double[] {2958465.0, 1.0}, doubleArray0, 0.01);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(mockDate0.equals((Object)mockDate2));
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotNull(range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(4.91757685066E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(8.44274442E12, range0.getUpperBound(), 0.01);
      assertEquals(7.05033513868E12, range0.getLength(), 0.01);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(mockDate0, mockDate2);
      assertEquals(2, doubleArray0.length);
      assertEquals(5, dateArray0.length);
      assertArrayEquals(new double[] {2958465.0, 1.0}, doubleArray0, 0.01);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(mockDate0.equals((Object)mockDate2));
      
      Vector<DefaultTableModel> vector0 = new Vector<DefaultTableModel>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      DefaultTableModel defaultTableModel0 = new DefaultTableModel((Object[][]) null, (Object[]) null);
      assertNotNull(defaultTableModel0);
      
      boolean boolean1 = vector0.add(defaultTableModel0);
      assertTrue(vector0.contains(defaultTableModel0));
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Range range1 = Range.scale(range0, 0);
      assertNotNull(range1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(4.91757685066E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(8.44274442E12, range0.getUpperBound(), 0.01);
      assertEquals(7.05033513868E12, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(mockDate0, mockDate2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(2, doubleArray0.length);
      assertEquals(5, dateArray0.length);
      assertArrayEquals(new double[] {2958465.0, 1.0}, doubleArray0, 0.01);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(mockDate0.equals((Object)mockDate2));
      assertFalse(range1.equals((Object)range0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) vector0, range1, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.table.DefaultTableModel cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      
      Short short0 = new Short((short) (-833));
      assertNotNull(short0);
      assertEquals((short) (-833), (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains((short) (-833)));
      assertEquals("[-833]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((Number) short0, (Number) short0, (Comparable) short0, (Comparable) short0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, false);
      assertNotNull(range0);
      assertTrue(stack0.contains((short) (-833)));
      assertEquals("[-833]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals((-833.0), range0.getCentralValue(), 0.01);
      assertEquals((-833.0), range0.getUpperBound(), 0.01);
      assertEquals((-833.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      TimeSeries timeSeries0 = new TimeSeries(short0, "/", "Series 1");
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("/", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Series 1", timeSeries0.getRangeDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      assertNotNull(timeSeriesCollection0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("/", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Series 1", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("/", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Series 1", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMaximumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNotNull(number1);
      assertEquals(0.0, number1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Date[] dateArray0 = new Date[2];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-73);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-57), (byte) (-66), (byte) (-26), (byte) (-46), (byte)8, (byte)65, (byte) (-1), (byte) (-73)}, byteArray0);
      
      MockDate mockDate0 = new MockDate((-3395), 1343, 1343, 1343, 1343);
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(1343, (-3631), (-3395), (-3631), (-3631));
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      dateArray0[1] = (Date) mockDate1;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1343;
      doubleArray1[1] = 45.0;
      doubleArray1[2] = (double) 1343;
      doubleArray1[3] = (double) 1343;
      doubleArray1[4] = (double) 1343;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("There is no database to execute the q{ery.", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1, doubleArray1);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(5, doubleArray1.length);
      assertEquals(2, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {1343.0, 45.0, 1343.0, 1343.0, 1343.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotNull(range0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(3.031665294E13, range0.getUpperBound(), 0.01);
      assertEquals((-3.768832464E13), range0.getCentralValue(), 0.01);
      assertEquals((-1.0569330222E14), range0.getLowerBound(), 0.01);
      assertEquals(1.3600995516E14, range0.getLength(), 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertEquals(2, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {1343.0, 45.0, 1343.0, 1343.0, 1343.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      Vector<DefaultTableModel> vector0 = new Vector<DefaultTableModel>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) vector0, range0, true);
      assertNull(range1);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(3.031665294E13, range0.getUpperBound(), 0.01);
      assertEquals((-3.768832464E13), range0.getCentralValue(), 0.01);
      assertEquals((-1.0569330222E14), range0.getLowerBound(), 0.01);
      assertEquals(1.3600995516E14, range0.getLength(), 0.01);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertEquals(2, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {1343.0, 45.0, 1343.0, 1343.0, 1343.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      Short short0 = new Short((short)30);
      assertNotNull(short0);
      assertEquals((short)30, (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains(short0));
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[30]", stack0.toString());
      assertTrue(boolean0);
      
      ArrayList<DefaultHighLowDataset> arrayList0 = new ArrayList<DefaultHighLowDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      XYSeries xYSeries0 = new XYSeries(short0, true, true);
      assertNotNull(xYSeries0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      xYSeries0.add((Number) short0, (Number) short0, true);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(30.0, xYSeries0.getMinY(), 0.01);
      assertEquals(30.0, xYSeries0.getMinX(), 0.01);
      assertEquals(30.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(30.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      
      Range range0 = new Range((short)30, (short)30);
      assertNotNull(range0);
      assertEquals(30.0, range0.getLowerBound(), 0.01);
      assertEquals(30.0, range0.getCentralValue(), 0.01);
      assertEquals(30.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      xYSeries0.fireSeriesChanged();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(30.0, xYSeries0.getMinY(), 0.01);
      assertEquals(30.0, xYSeries0.getMinX(), 0.01);
      assertEquals(30.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(30.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(xYSeriesCollection0, arrayList0, true);
      assertNull(range1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(30.0, xYSeries0.getMinY(), 0.01);
      assertEquals(30.0, xYSeries0.getMinX(), 0.01);
      assertEquals(30.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(30.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) arrayList0, false);
      assertNull(range2);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(30.0, xYSeries0.getMinY(), 0.01);
      assertEquals(30.0, xYSeries0.getMinX(), 0.01);
      assertEquals(30.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(30.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Range range3 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) stack0, false);
      assertNotNull(range3);
      assertTrue(stack0.contains((short)30));
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[30]", stack0.toString());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(30.0, xYSeries0.getMinY(), 0.01);
      assertEquals(30.0, xYSeries0.getMinX(), 0.01);
      assertEquals(30.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(30.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(30.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(30.0, range3.getCentralValue(), 0.01);
      assertEquals(30.0, range3.getUpperBound(), 0.01);
      assertNotSame(range3, range0);
      assertTrue(range3.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      ArrayList<DefaultBoxAndWhiskerCategoryDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 704.3;
      doubleArray1[1] = 1860.259;
      doubleArray1[2] = (-777.0);
      doubleArray1[3] = (-2.147483648E9);
      doubleArray1[0] = 2283.9;
      doubleArray1[5] = 1145.27274;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 1169.33654348;
      doubleArray1[8] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-3391.0);
      doubleArray2[1] = 704.3;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("null1", (String) null, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(2564.559, number0);
      assertEquals(2, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, (-1134.074));
      assertNotNull(range0);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(1430.485, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(2, doubleArray0.length);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultXYDataset0);
      assertNull(number1);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset1);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      
      Number number2 = DatasetUtilities.findMinimumDomainValue(defaultXYDataset0);
      assertNull(number2);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 3);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(3, categoryToPieDataset0.getExtractIndex());
      assertEquals(2, doubleArray0.length);
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains(short0));
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertTrue(boolean0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((Number) short0, (Number) short0, (Comparable) short0, (Comparable) short0);
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertNotNull(range0);
      assertTrue(stack0.contains(short0));
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      timeTableXYDataset0.add((TimePeriod) second0, 1.0, "nu=l1");
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal(timeTableXYDataset0, (-1761));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 82);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      Short short0 = new Short((short)30);
      assertNotNull(short0);
      assertEquals((short)30, (short)short0);
      
      Short short1 = stack0.push(short0);
      assertNotNull(short1);
      assertTrue(stack0.contains((short)30));
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[30]", stack0.toString());
      assertEquals((short)30, (short)short1);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains((short)30));
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[30, 30]", stack0.toString());
      assertTrue(boolean0);
      
      ArrayList<DefaultHighLowDataset> arrayList0 = new ArrayList<DefaultHighLowDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      XYSeries xYSeries0 = new XYSeries(short0, true, true);
      assertNotNull(xYSeries0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      xYSeries0.add((Number) short0, (Number) short0, true);
      assertEquals(30.0, xYSeries0.getMinY(), 0.01);
      assertEquals(30.0, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(30.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(30.0, xYSeries0.getMaxX(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(30.0, xYSeries0.getMinY(), 0.01);
      assertEquals(30.0, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(30.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(30.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(30.0, range0.getCentralValue(), 0.01);
      assertEquals(30.5, range0.getUpperBound(), 0.01);
      assertEquals(29.5, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      
      Short short0 = new Short((short)30);
      assertNotNull(short0);
      assertEquals((short)30, (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains(short0));
      assertEquals("[30]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertTrue(boolean0);
      
      ArrayList<DefaultHighLowDataset> arrayList0 = new ArrayList<DefaultHighLowDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      XYSeries xYSeries0 = new XYSeries(short0, true, true);
      assertNotNull(xYSeries0);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      xYSeries0.add((Number) short0, (Number) short0, true);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(30.0, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(30.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(30.0, xYSeries0.getMinX(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(30.0, xYSeries0.getMinY(), 0.01);
      
      Range range0 = new Range((short)30, (short)30);
      assertNotNull(range0);
      assertEquals(30.0, range0.getCentralValue(), 0.01);
      assertEquals(30.0, range0.getUpperBound(), 0.01);
      assertEquals(30.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      xYSeries0.fireSeriesChanged();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(30.0, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(30.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(30.0, xYSeries0.getMinX(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(30.0, xYSeries0.getMinY(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, (List) stack0, range0, true);
      assertNotNull(range1);
      assertTrue(stack0.contains((short)30));
      assertEquals("[30]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(30.0, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(30.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(30.0, xYSeries0.getMinX(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(30.0, xYSeries0.getMinY(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(30.0, range0.getCentralValue(), 0.01);
      assertEquals(30.0, range0.getUpperBound(), 0.01);
      assertEquals(30.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(30.0, range1.getCentralValue(), 0.01);
      assertEquals(30.0, range1.getUpperBound(), 0.01);
      assertEquals(30.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      
      System.setCurrentTimeMillis((short)30);
      double[][] doubleArray0 = new double[7][9];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) (short)30;
      doubleArray1[1] = (double) (short)30;
      doubleArray1[2] = (double) (short)30;
      doubleArray1[3] = (double) (short)30;
      doubleArray1[4] = (double) (short)30;
      doubleArray1[5] = 2862.7036285;
      doubleArray1[6] = (double) (short)30;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2862.7036285;
      doubleArray2[1] = 2862.7036285;
      doubleArray2[2] = Double.NaN;
      doubleArray2[3] = 2862.7036285;
      doubleArray2[4] = (double) (short)30;
      doubleArray2[5] = 2862.7036285;
      doubleArray2[6] = 2862.7036285;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = (double) (short)30;
      doubleArray5[1] = Double.NaN;
      doubleArray5[2] = Double.NaN;
      doubleArray5[3] = (double) (short)30;
      doubleArray5[4] = Double.NaN;
      doubleArray5[5] = Double.NaN;
      doubleArray5[6] = 2862.7036285;
      doubleArray5[7] = 2862.7036285;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      
      doubleArray6[0] = Double.NaN;
      doubleArray6[1] = Double.NaN;
      doubleArray6[2] = (double) (short)30;
      doubleArray6[3] = Double.NaN;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      
      doubleArray7[0] = Double.NaN;
      doubleArray7[1] = Double.NaN;
      doubleArray7[2] = (double) (short)30;
      doubleArray7[3] = 2862.7036285;
      doubleArray7[4] = 2862.7036285;
      doubleArray7[5] = 2862.7036285;
      doubleArray7[6] = Double.NaN;
      doubleArray7[7] = Double.NaN;
      doubleArray7[8] = (double) (short)30;
      doubleArray0[6] = doubleArray7;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[][] doubleArray0 = new double[16][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(16, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(16, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(16, doubleArray0.length);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("null7", 805, 1);
      assertNotNull(matrixSeries0);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(805, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(805, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(805, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(805, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(805, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(805, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      Short short0 = new Short((short) (-1818));
      assertNotNull(short0);
      assertEquals((short) (-1818), (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains(short0));
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[-1818]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertTrue(boolean0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      assertNull(range0);
      assertTrue(stack0.contains(short0));
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[-1818]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      double[][] doubleArray0 = new double[8][0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) (short) (-1818);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (short) (-1818);
      doubleArray2[1] = (double) (short) (-1818);
      doubleArray2[2] = (double) (short) (-1818);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) (short) (-1818);
      doubleArray3[1] = (double) (short) (-1818);
      doubleArray3[2] = (double) (short) (-1818);
      doubleArray3[3] = (double) (short) (-1818);
      doubleArray3[4] = (double) (short) (-1818);
      doubleArray3[5] = (double) (short) (-1818);
      doubleArray3[6] = (double) (short) (-1818);
      doubleArray3[7] = Double.NEGATIVE_INFINITY;
      doubleArray3[8] = (double) (short) (-1818);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = (double) (short) (-1818);
      doubleArray5[1] = (double) (short) (-1818);
      doubleArray5[2] = (double) (short) (-1818);
      doubleArray5[3] = 270.8026;
      doubleArray5[4] = (double) (short) (-1818);
      doubleArray5[5] = Double.NEGATIVE_INFINITY;
      doubleArray5[6] = Double.NEGATIVE_INFINITY;
      doubleArray5[7] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray6[0] = 270.8026;
      doubleArray6[1] = (double) (short) (-1818);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[0];
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[2];
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      
      doubleArray8[0] = Double.NEGATIVE_INFINITY;
      doubleArray8[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[7] = doubleArray8;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(8, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertNotNull(range1);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertEquals(270.8026, range1.getUpperBound(), 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Short short0 = new Short((short) (-853));
      assertNotNull(short0);
      assertEquals((short) (-853), (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains(short0));
      assertFalse(stack0.isEmpty());
      assertEquals("[-853]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(boolean0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, (short) (-853), (short) (-853));
      assertNotNull(slidingCategoryDataset0);
      assertEquals((-853), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-853), slidingCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      
      Class<SpreadsheetDate> class0 = SpreadsheetDate.class;
      Class class1 = RegularTimePeriod.downsize(class0);
      assertNotNull(class1);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals("class org.jfree.data.time.Millisecond", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      jDBCPieDataset0.setValue((Comparable) fixedMillisecond0, (Number) 1);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) fixedMillisecond0, (double) 53, 1);
      assertNotNull(pieDataset0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("null9", 7, 7);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(7, matrixSeries0.getRowCount());
      assertEquals(7, matrixSeries0.getColumnsCount());
      assertEquals(49, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 2, 8625);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(2, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(8625, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("org.jfree.data.time.TimePeriodAnchor", 7, 7);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(7, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(49, matrixSeries0.getItemCount());
      assertEquals(7, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(7, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(49, matrixSeries0.getItemCount());
      assertEquals(7, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      assertNotNull(number0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(7, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(49, matrixSeries0.getItemCount());
      assertEquals(7, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(6.0, number0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, 720);
      assertNotNull(pieDataset0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNotNull(number1);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(7, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(49, matrixSeries0.getItemCount());
      assertEquals(7, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, number1);
      assertFalse(number1.equals((Object)number0));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      Short short0 = new Short((short)30);
      assertNotNull(short0);
      assertEquals((short)30, (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains(short0));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[30]", stack0.toString());
      assertTrue(boolean0);
      
      ArrayList<DefaultHighLowDataset> arrayList0 = new ArrayList<DefaultHighLowDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      XYSeries xYSeries0 = new XYSeries(short0, true, true);
      assertNotNull(xYSeries0);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      xYSeries0.add((Number) short0, (Number) short0, false);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(30.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(30.0, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(30.0, xYSeries0.getMinX(), 0.01);
      assertEquals(30.0, xYSeries0.getMinY(), 0.01);
      
      Range range0 = new Range((short)30, (short)30);
      assertNotNull(range0);
      assertEquals(30.0, range0.getLowerBound(), 0.01);
      assertEquals(30.0, range0.getUpperBound(), 0.01);
      assertEquals(30.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      xYSeries0.add((double) (short)30, (Number) short0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(30.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(30.0, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(30.0, xYSeries0.getMinX(), 0.01);
      assertEquals(30.0, xYSeries0.getMinY(), 0.01);
      assertEquals(2, xYSeries0.getItemCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, (List) stack0, range0, true);
      assertNotNull(range1);
      assertTrue(stack0.contains((short)30));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[30]", stack0.toString());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(30.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(30.0, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(30.0, xYSeries0.getMinX(), 0.01);
      assertEquals(30.0, xYSeries0.getMinY(), 0.01);
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(30.0, range0.getLowerBound(), 0.01);
      assertEquals(30.0, range0.getUpperBound(), 0.01);
      assertEquals(30.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(30.0, range1.getLowerBound(), 0.01);
      assertEquals(30.0, range1.getCentralValue(), 0.01);
      assertEquals(30.0, range1.getUpperBound(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNull(range0);
      
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate(274L);
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      assertNotNull(date0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 4295.70189992982;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("6$+c0b*u", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(2, dateArray0.length);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {4295.70189992982}, doubleArray0, 0.01);
      
      LinkedList<IntervalXYDelegate> linkedList0 = new LinkedList<IntervalXYDelegate>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range1 = Range.expandToInclude((Range) null, 274L);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(274.0, range1.getCentralValue(), 0.01);
      assertEquals(274.0, range1.getUpperBound(), 0.01);
      assertEquals(274.0, range1.getLowerBound(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      
      Short short0 = new Short((short)30);
      assertNotNull(short0);
      assertEquals((short)30, (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains(short0));
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[30]", stack0.toString());
      assertTrue(boolean0);
      
      ArrayList<DefaultHighLowDataset> arrayList0 = new ArrayList<DefaultHighLowDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      XYSeries xYSeries0 = new XYSeries(short0, true, true);
      assertNotNull(xYSeries0);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      xYSeries0.add((Number) short0, (Number) short0, false);
      assertNull(xYSeries0.getDescription());
      assertEquals(30.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(30.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getNotify());
      assertEquals(30.0, xYSeries0.getMinX(), 0.01);
      assertEquals(30.0, xYSeries0.getMinY(), 0.01);
      
      xYSeries0.add((-1.0), (Number) short0);
      assertNull(xYSeries0.getDescription());
      assertEquals(30.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(30.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(30.0, xYSeries0.getMinY(), 0.01);
      assertEquals((-1.0), xYSeries0.getMinX(), 0.01);
      
      Range range0 = new Range(2226.0, 2226.0);
      assertNotNull(range0);
      assertEquals(2226.0, range0.getCentralValue(), 0.01);
      assertEquals(2226.0, range0.getUpperBound(), 0.01);
      assertEquals(2226.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      xYSeries0.add(142.4150738130362, (Number) short0);
      assertNull(xYSeries0.getDescription());
      assertEquals(30.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(142.4150738130362, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(3, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(30.0, xYSeries0.getMinY(), 0.01);
      assertEquals((-1.0), xYSeries0.getMinX(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, (List) stack0, range0, false);
      assertNull(range1);
      assertTrue(stack0.contains(short0));
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[30]", stack0.toString());
      assertNull(xYSeries0.getDescription());
      assertEquals(30.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(142.4150738130362, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(3, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(30.0, xYSeries0.getMinY(), 0.01);
      assertEquals((-1.0), xYSeries0.getMinX(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(2226.0, range0.getCentralValue(), 0.01);
      assertEquals(2226.0, range0.getUpperBound(), 0.01);
      assertEquals(2226.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) xYSeriesCollection0);
      assertNotNull(number0);
      assertNull(xYSeries0.getDescription());
      assertEquals(30.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(142.4150738130362, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(3, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(30.0, xYSeries0.getMinY(), 0.01);
      assertEquals((-1.0), xYSeries0.getMinX(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(30.0, number0);
      
      Number number1 = DatasetUtilities.findMaximumDomainValue(xYSeriesCollection0);
      assertNotNull(number1);
      assertNull(xYSeries0.getDescription());
      assertEquals(30.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(142.4150738130362, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(3, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(30.0, xYSeries0.getMinY(), 0.01);
      assertEquals((-1.0), xYSeries0.getMinX(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(142.9150738130362, number1);
      assertFalse(number1.equals((Object)number0));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      
      Short short0 = new Short((short)30);
      assertNotNull(short0);
      assertEquals((short)30, (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains((short)30));
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[30]", stack0.toString());
      assertTrue(boolean0);
      
      ArrayList<DefaultHighLowDataset> arrayList0 = new ArrayList<DefaultHighLowDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      XYSeries xYSeries0 = new XYSeries(short0, true, true);
      assertNotNull(xYSeries0);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      xYSeries0.add((Number) short0, (Number) short0, false);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(30.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(30.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(30.0, xYSeries0.getMinY(), 0.01);
      assertEquals(30.0, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1, xYSeries0.getItemCount());
      
      Range range0 = new Range((short)30, (short)30);
      assertNotNull(range0);
      assertEquals(30.0, range0.getUpperBound(), 0.01);
      assertEquals(30.0, range0.getCentralValue(), 0.01);
      assertEquals(30.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      xYSeries0.add((double) (short)30, (Number) short0);
      assertEquals(2, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(30.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(30.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(30.0, xYSeries0.getMinY(), 0.01);
      assertEquals(30.0, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, (List) stack0, range0, false);
      assertNotNull(range1);
      assertTrue(stack0.contains((short)30));
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[30]", stack0.toString());
      assertEquals(2, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(30.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(30.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(30.0, xYSeries0.getMinY(), 0.01);
      assertEquals(30.0, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(30.0, range0.getUpperBound(), 0.01);
      assertEquals(30.0, range0.getCentralValue(), 0.01);
      assertEquals(30.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(30.0, range1.getLowerBound(), 0.01);
      assertEquals(30.0, range1.getCentralValue(), 0.01);
      assertEquals(30.0, range1.getUpperBound(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) xYSeriesCollection0);
      assertNotNull(number0);
      assertEquals(2, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(30.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(30.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(30.0, xYSeries0.getMinY(), 0.01);
      assertEquals(30.0, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(30.0, number0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      
      Short short0 = new Short((short)20);
      assertNotNull(short0);
      assertEquals((short)20, (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains(short0));
      assertEquals("[20]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertTrue(boolean0);
      
      XYSeries xYSeries0 = new XYSeries(short0, true, true);
      assertNotNull(xYSeries0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      xYSeries0.add(2053.44639659152, (Number) short0, false);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(20.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2053.44639659152, xYSeries0.getMaxX(), 0.01);
      assertEquals(2053.44639659152, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(20.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      
      Range range0 = new Range((short)20, (short)20);
      assertNotNull(range0);
      assertEquals(20.0, range0.getLowerBound(), 0.01);
      assertEquals(20.0, range0.getUpperBound(), 0.01);
      assertEquals(20.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, (List) stack0, range0, true);
      assertNull(range1);
      assertTrue(stack0.contains((short)20));
      assertEquals("[20]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(20.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2053.44639659152, xYSeries0.getMaxX(), 0.01);
      assertEquals(2053.44639659152, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(20.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(20.0, range0.getLowerBound(), 0.01);
      assertEquals(20.0, range0.getUpperBound(), 0.01);
      assertEquals(20.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[][] doubleArray0 = new double[7][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, doubleArray0.length);
      
      Range range0 = new Range((-4778.12479214), 1.0);
      assertNotNull(range0);
      assertEquals((-4778.12479214), range0.getLowerBound(), 0.01);
      assertEquals((-2388.56239607), range0.getCentralValue(), 0.01);
      assertEquals(4779.12479214, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = vector0.add(xIntervalSeriesCollection0);
      assertTrue(vector0.contains(xIntervalSeriesCollection0));
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) vector0, range0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XIntervalSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(boolean0);
      
      double[][] doubleArray0 = new double[5][2];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 2715.853723;
      doubleArray1[1] = (-2.147483648E9);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 2715.853723;
      doubleArray4[1] = 2715.853723;
      doubleArray4[2] = 2715.853723;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = (-2.147483648E9);
      doubleArray5[1] = 2715.853723;
      doubleArray5[2] = 2715.853723;
      doubleArray5[3] = 2715.853723;
      doubleArray5[4] = 2715.853723;
      doubleArray5[5] = (-2536.59967871);
      doubleArray5[6] = 2715.853723;
      doubleArray5[7] = (-2.147483648E9);
      doubleArray0[4] = doubleArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Series 4", "Series 4", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(5, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals((-1.0737404660731385E9), range0.getCentralValue(), 0.01);
      assertEquals((-2.147483648E9), range0.getLowerBound(), 0.01);
      assertEquals(2.147486363853723E9, range0.getLength(), 0.01);
      assertEquals(2715.853723, range0.getUpperBound(), 0.01);
      assertEquals(5, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range1);
      assertEquals(8147.5611690000005, range1.getUpperBound(), 0.01);
      assertEquals((-4.2949562533310633E9), range1.getLowerBound(), 0.01);
      assertEquals((-2.147474052884947E9), range1.getCentralValue(), 0.01);
      assertEquals(4.2949644008922324E9, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertEquals(5, doubleArray0.length);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      
      Short short0 = new Short((short) (-853));
      assertNotNull(short0);
      assertEquals((short) (-853), (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains((short) (-853)));
      assertEquals("[-853]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(boolean0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((Number) short0, (Number) short0, (Comparable) short0, (Comparable) short0);
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, false);
      assertNotNull(range0);
      assertTrue(stack0.contains((short) (-853)));
      assertEquals("[-853]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-853.0), range0.getLowerBound(), 0.01);
      assertEquals((-853.0), range0.getUpperBound(), 0.01);
      assertEquals((-853.0), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[][] doubleArray0 = new double[7][6];
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray1 = new double[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("?$h8R&TIgA1f(7``,", dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Short short0 = new Short((short)30);
      assertNotNull(short0);
      assertEquals((short)30, (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains((short)30));
      assertFalse(stack0.isEmpty());
      assertEquals("[30]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(boolean0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      ArrayList<DefaultHighLowDataset> arrayList0 = new ArrayList<DefaultHighLowDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      XYSeries xYSeries0 = new XYSeries(short0, true, true);
      assertNotNull(xYSeries0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      Range range0 = new Range((short)30, 89.985491);
      assertNotNull(range0);
      assertEquals(59.9927455, range0.getCentralValue(), 0.01);
      assertEquals(30.0, range0.getLowerBound(), 0.01);
      assertEquals(59.985490999999996, range0.getLength(), 0.01);
      assertEquals(89.985491, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, (List) stack0, range0, true);
      assertNull(range1);
      assertTrue(stack0.contains(short0));
      assertFalse(stack0.isEmpty());
      assertEquals("[30]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(59.9927455, range0.getCentralValue(), 0.01);
      assertEquals(30.0, range0.getLowerBound(), 0.01);
      assertEquals(59.985490999999996, range0.getLength(), 0.01);
      assertEquals(89.985491, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      MockDate mockDate0 = new MockDate(1159L);
      assertNotNull(mockDate0);
      
      Week week0 = new Week(mockDate0, timeZone0, locale0);
      assertNotNull(week0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(1158L, week0.getLastMillisecond());
      assertEquals(1159L, week0.getFirstMillisecond());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(1970, week0.getYearValue());
      assertEquals(1, week0.getWeek());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) week0, (-2.147483648E9), (-9999));
      assertNotNull(defaultPieDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(1158L, week0.getLastMillisecond());
      assertEquals(1159L, week0.getFirstMillisecond());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(1970, week0.getYearValue());
      assertEquals(1, week0.getWeek());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      
      defaultPieDataset0.setValue((Comparable) week0, (-88.2436619889));
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(1158L, week0.getLastMillisecond());
      assertEquals(1159L, week0.getFirstMillisecond());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(1970, week0.getYearValue());
      assertEquals(1, week0.getWeek());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(1158L, week0.getLastMillisecond());
      assertEquals(1159L, week0.getFirstMillisecond());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(1970, week0.getYearValue());
      assertEquals(1, week0.getWeek());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Short short0 = new Short((short) (-9999));
      assertNotNull(short0);
      assertEquals((short) (-9999), (short)short0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      
      defaultKeyedValuesDataset0.setValue((Comparable) fixedMillisecond0, (Number) short0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) fixedMillisecond0, Double.NEGATIVE_INFINITY, (int) (short) (-9999));
      assertNotNull(pieDataset0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      assertNotNull(serialDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      assertEquals(2014, serialDate0.getYYYY());
      assertEquals(41684, serialDate0.toSerial());
      assertEquals(2, serialDate0.getMonth());
      assertEquals(14, serialDate0.getDayOfMonth());
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 5, 3, 3, 3, 1);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[11];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(11, oHLCDataItemArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1102, 1102);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(1101, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      
      XYSeries xYSeries0 = new XYSeries(1, true);
      assertNotNull(xYSeries0);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((double) 0, 1833.69858);
      assertNull(xYDataItem0);
      assertEquals(1833.69858, xYSeries0.getMinY(), 0.01);
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(1833.69858, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(1833.69858, xYSeries0.getMinY(), 0.01);
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(1833.69858, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range0);
      assertEquals(1833.69858, xYSeries0.getMinY(), 0.01);
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(1833.69858, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals((-0.5), range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.5, range0.getUpperBound(), 0.01);
      
      double double0 = (-1578.571931);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(0.5, (-1578.571931));
      assertNotNull(powerFunction2D0);
      assertEquals(0.5, powerFunction2D0.getA(), 0.01);
      assertEquals((-1578.571931), powerFunction2D0.getB(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(powerFunction2D0, (-1058.38659607), (-1058.38659607), (-621), (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-27.2560641);
      doubleArray1[1] = 0.8;
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray1[3] = (-497.170914);
      doubleArray1[4] = (-2511.4716193);
      doubleArray1[5] = 1702.6;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 1.5;
      doubleArray1[8] = 1180.0;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, doubleArray0.length);
      
      int int0 = defaultIntervalCategoryDataset0.indexOf(0.0);
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals((-2511.4716193), range0.getLowerBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      TimeSeries timeSeries0 = new TimeSeries(1702.6, "Series 6", (String) null);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Series 6", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Series 6", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
      assertNull(range1);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Series 6", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(783, 783);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(782, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(defaultKeyedValuesDataset0);
      assertNotNull(defaultPieDataset0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      
      defaultKeyedValuesDataset0.setValue((Comparable) 2, (Number) 2);
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) 2, (double) 783, 0);
      assertNotNull(pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertFalse(pieDataset0.equals((Object)defaultPieDataset0));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      
      defaultKeyedValuesDataset0.setValue((Comparable) fixedMillisecond0, (Number) null);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) fixedMillisecond0, 283.9503644094, 2315);
      assertNotNull(pieDataset0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Short short0 = new Short((short)1085);
      assertNotNull(short0);
      assertEquals((short)1085, (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertFalse(stack0.contains((short)1085));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Short short1 = new Short((short) (-1));
      assertNotNull(short1);
      assertEquals((short) (-1), (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      boolean boolean0 = stack0.add(short1);
      assertTrue(stack0.contains(short1));
      assertFalse(stack0.contains((short)1085));
      assertEquals("[-1]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(boolean0);
      assertFalse(short1.equals((Object)short0));
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(short1);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertFalse(short1.equals((Object)short0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) short0);
      assertNotNull(pieDataset0);
      assertFalse(short0.equals((Object)short1));
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SU\"S0*UB$2dv");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) short0, 31.0, (-367));
      assertNotNull(pieDataset1);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertFalse(short0.equals((Object)short1));
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) short0, (KeyedValues) pieDataset1);
      assertNotNull(categoryDataset0);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertFalse(short0.equals((Object)short1));
      assertFalse(pieDataset0.equals((Object)pieDataset1));
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertFalse(short0.equals((Object)short1));
      assertFalse(pieDataset0.equals((Object)pieDataset1));
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, range0, false);
      assertNull(range1);
      assertTrue(stack0.contains(short1));
      assertFalse(stack0.contains((short)1085));
      assertEquals("[-1]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertFalse(short0.equals((Object)short1));
      assertFalse(short1.equals((Object)short0));
      assertFalse(pieDataset0.equals((Object)pieDataset1));
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds(categoryDataset0, (List) stack0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      
      MockDate mockDate0 = new MockDate(2, 2, 48, 791, 857, 3);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Tue May 20 13:17:03 GMT 1902", mockDate0.toString());
      assertEquals((-2133859377000L), hour0.getFirstMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals((-2133859377000L), hour0.getLastMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      assertNotNull(xYSeries0);
      assertEquals("Tue May 20 13:17:03 GMT 1902", mockDate0.toString());
      assertEquals((-2133859377000L), hour0.getFirstMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals((-2133859377000L), hour0.getLastMillisecond());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      XYDataItem xYDataItem0 = new XYDataItem((Number) 23, (Number) 0);
      assertNotNull(xYDataItem0);
      assertEquals(23.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
      
      xYSeries0.add(xYDataItem0, true);
      assertEquals("Tue May 20 13:17:03 GMT 1902", mockDate0.toString());
      assertEquals((-2133859377000L), hour0.getFirstMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals((-2133859377000L), hour0.getLastMillisecond());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(23.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(23.0, xYSeries0.getMinX(), 0.01);
      assertEquals(23.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      defaultTableXYDataset0.addSeries(xYSeries0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1, defaultTableXYDataset0.getItemCount());
      assertEquals("Tue May 20 13:17:03 GMT 1902", mockDate0.toString());
      assertEquals((-2133859377000L), hour0.getFirstMillisecond());
      assertEquals(13, hour0.getHour());
      assertEquals((-2133859377000L), hour0.getLastMillisecond());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(23.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(23.0, xYSeries0.getMinX(), 0.01);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, true);
      assertNotNull(range0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1, defaultTableXYDataset0.getItemCount());
      assertEquals(22.5, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(23.0, range0.getCentralValue(), 0.01);
      assertEquals(23.5, range0.getUpperBound(), 0.01);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, (Comparable) mockDate0);
      assertNotNull(pieDataset0);
      assertEquals("Tue May 20 13:17:03 GMT 1902", mockDate0.toString());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertEquals("Tue May 20 13:17:03 GMT 1902", mockDate0.toString());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1, defaultTableXYDataset0.getItemCount());
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultTableXYDataset0);
      assertNotNull(number0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1, defaultTableXYDataset0.getItemCount());
      assertEquals(0.0, number0);
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(defaultCategoryDataset0);
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findCumulativeRangeBounds(defaultCategoryDataset0);
      assertNull(range2);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(defaultTableXYDataset0);
      assertNotNull(number1);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1, defaultTableXYDataset0.getItemCount());
      assertEquals(22.5, number1);
      assertFalse(number1.equals((Object)number0));
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) mockDate0, Double.POSITIVE_INFINITY, 2284);
      assertNotNull(pieDataset1);
      assertEquals("Tue May 20 13:17:03 GMT 1902", mockDate0.toString());
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(pieDataset0, pieDataset1);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      
      Number number2 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultTableXYDataset0);
      assertNotNull(number2);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1, defaultTableXYDataset0.getItemCount());
      assertEquals(0.0, number2);
      assertTrue(number2.equals((Object)number0));
      assertFalse(number2.equals((Object)number1));
      
      Number[][] numberArray0 = new Number[7][5];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = number0;
      numberArray1[1] = number1;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[5];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      numberArray2[0] = (Number) integer0;
      numberArray2[1] = number2;
      numberArray2[2] = number2;
      numberArray2[3] = number1;
      numberArray2[4] = number1;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[9];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray3[0] = number1;
      numberArray3[1] = number0;
      numberArray3[2] = number1;
      numberArray3[3] = number0;
      Integer integer1 = new Integer(857);
      assertNotNull(integer1);
      assertEquals(857, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      numberArray3[4] = (Number) integer1;
      numberArray3[5] = number2;
      Integer integer2 = Integer.getInteger("Series 3");
      assertNull(integer2);
      
      numberArray3[6] = (Number) null;
      numberArray3[7] = number0;
      numberArray3[8] = number0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[4];
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray3));
      
      numberArray4[0] = (Number) integer0;
      numberArray4[1] = (Number) 0;
      numberArray4[2] = number1;
      numberArray4[3] = (Number) integer1;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[5];
      assertFalse(numberArray5.equals((Object)numberArray4));
      assertFalse(numberArray5.equals((Object)numberArray2));
      assertFalse(numberArray5.equals((Object)numberArray3));
      assertFalse(numberArray5.equals((Object)numberArray1));
      
      Integer integer3 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer3);
      assertEquals(300, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      
      numberArray5[0] = (Number) integer3;
      numberArray5[1] = (Number) 0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte)48;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertEquals((byte)48, bigInteger0.byteValue());
      assertEquals((short) (-27856), bigInteger0.shortValue());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)4, (byte)96, (byte) (-5), (byte)1, (byte) (-109), (byte)48}, byteArray0);
      
      numberArray5[2] = (Number) bigInteger0;
      numberArray5[3] = (Number) integer0;
      numberArray5[4] = (Number) integer1;
      numberArray0[4] = numberArray5;
      Number[] numberArray6 = new Number[0];
      assertFalse(numberArray6.equals((Object)numberArray2));
      assertFalse(numberArray6.equals((Object)numberArray5));
      assertFalse(numberArray6.equals((Object)numberArray3));
      assertFalse(numberArray6.equals((Object)numberArray4));
      assertFalse(numberArray6.equals((Object)numberArray1));
      
      numberArray0[5] = numberArray6;
      Number[] numberArray7 = new Number[7];
      assertFalse(numberArray7.equals((Object)numberArray3));
      assertFalse(numberArray7.equals((Object)numberArray2));
      assertFalse(numberArray7.equals((Object)numberArray5));
      assertFalse(numberArray7.equals((Object)numberArray4));
      assertFalse(numberArray7.equals((Object)numberArray1));
      assertFalse(numberArray7.equals((Object)numberArray6));
      
      numberArray7[0] = (Number) (byte)48;
      numberArray7[1] = (Number) integer3;
      numberArray7[2] = number0;
      numberArray7[3] = (Number) bigInteger0;
      numberArray7[4] = (Number) (byte)4;
      numberArray7[5] = (Number) (byte)48;
      numberArray7[6] = (Number) 23;
      numberArray0[6] = numberArray7;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("null8", "null8", numberArray0);
      assertNotNull(categoryDataset0);
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      assertEquals(7, numberArray0.length);
      assertFalse(categoryDataset0.equals((Object)defaultCategoryDataset0));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, oHLCDataItemArray0.length);
      
      defaultOHLCDataset0.validateObject();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, oHLCDataItemArray0.length);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Float float0 = new Float((-1780.4119F));
      assertNotNull(float0);
      assertEquals((-1780.4119F), (float)float0, 0.01F);
      
      defaultStatisticalCategoryDataset0.add((Number) float0, (Number) float0, (Comparable) mockDate0, (Comparable) mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Stack<DefaultTableModel> stack0 = new Stack<DefaultTableModel>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, false);
      assertNull(range0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, false);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1780.411865234375), range1.getLowerBound(), 0.01);
      assertEquals((-1780.411865234375), range1.getCentralValue(), 0.01);
      assertEquals((-1780.411865234375), range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(783, 783);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(782, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      Number[][] numberArray0 = new Number[1][5];
      Number[] numberArray1 = new Number[2];
      Long long0 = new Long(1);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      numberArray1[1] = (Number) 2;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.time.Year", "org.jfree.data.time.Year", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 783);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(783, categoryToPieDataset0.getExtractIndex());
      assertEquals(1, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) long0, (double) 783, 375);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 783, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(783, 783);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(782, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      
      Short short0 = new Short((short) (-619));
      assertNotNull(short0);
      assertEquals((short) (-619), (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertFalse(stack0.contains((short) (-619)));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      
      Short short1 = new Short((short) (-619));
      assertNotNull(short1);
      assertEquals((short) (-619), (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      boolean boolean0 = stack0.add(short1);
      assertTrue(stack0.contains(short1));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[-619]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(boolean0);
      assertTrue(short1.equals((Object)short0));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((Number) 2, (Number) 0, (Comparable) short0, (Comparable) 2);
      assertTrue(short0.equals((Object)short1));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertNotNull(range0);
      assertTrue(stack0.contains(short1));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[-619]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(2.0, range0.getLowerBound(), 0.01);
      assertEquals(2.0, range0.getCentralValue(), 0.01);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)19;
      doubleArray0[1] = (double) (short)19;
      doubleArray0[2] = (double) (short)19;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {19.0, 19.0, 19.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertNotNull(doubleArray1);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {19.0, 19.0, 19.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {19.0, 19.0, 19.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-2215.102533768952), (-1501.87479723), 868, 19.0);
      assertNotNull(xYSeries0);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertEquals(868, xYSeries0.getItemCount());
      assertEquals((-1501.87479723), xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals((-2215.102533768952), xYSeries0.getMinX(), 0.01);
      assertEquals(4.282841360339105E7, xYSeries0.getMinY(), 0.01);
      assertEquals(9.31848375189414E7, xYSeries0.getMaxY(), 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {19.0, 19.0, 19.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("6$+c0*b*u", 23, 23);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(529, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(23, matrixSeries0.getColumnsCount());
      assertEquals(23, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(529, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(23, matrixSeries0.getColumnsCount());
      assertEquals(23, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      assertEquals(0.0, double0, 0.01);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      assertNotNull(number0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(529, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(23, matrixSeries0.getColumnsCount());
      assertEquals(23, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(22.0, number0);
      assertFalse(number0.equals((Object)double0));
      
      TimeZone timeZone0 = TimeZone.getTimeZone("Series 6");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, 0.0);
      assertNotNull(range0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNotNull(number1);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(529, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(23, matrixSeries0.getColumnsCount());
      assertEquals(23, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(22.0, number1);
      assertFalse(number1.equals((Object)double0));
      assertTrue(number1.equals((Object)number0));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(783, 783);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(782, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      
      Vector<Float> vector0 = new Vector<Float>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      boolean boolean0 = vector0.add((Float) null);
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals("[null]", vector0.toString());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, (List) vector0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(xIntervalSeriesCollection0, (-1514.550778));
      assertNotNull(xYBarDataset0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertEquals((-1514.550778), xYBarDataset0.getBarWidth(), 0.01);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains((-1514.550778)));
      assertEquals(0, linkedList0.size());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0, (List) linkedList0, true);
      assertNull(range0);
      assertFalse(linkedList0.contains((-1514.550778)));
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertEquals((-1514.550778), xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(0, linkedList0.size());
      
      double[][] doubleArray0 = new double[7][5];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-1514.550778);
      doubleArray1[1] = (-1514.550778);
      doubleArray1[2] = (-1514.550778);
      doubleArray1[3] = (-1514.550778);
      doubleArray1[4] = (-1514.550778);
      doubleArray1[5] = (-1514.550778);
      doubleArray1[6] = (-1514.550778);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1514.550778);
      doubleArray2[1] = (-3933.558);
      doubleArray2[2] = (-1514.550778);
      doubleArray2[3] = (-1514.550778);
      doubleArray2[4] = (-1514.550778);
      doubleArray2[5] = (-1514.550778);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-1514.550778);
      doubleArray3[1] = (-1514.550778);
      doubleArray3[2] = (-3933.558);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (-1514.550778);
      doubleArray4[1] = (-1514.550778);
      doubleArray4[2] = (-3933.558);
      doubleArray4[3] = (-1514.550778);
      doubleArray4[4] = (-1514.550778);
      doubleArray4[5] = (-3933.558);
      doubleArray4[6] = (-3933.558);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = (-1514.550778);
      doubleArray5[1] = (-1514.550778);
      doubleArray5[2] = (-1514.550778);
      doubleArray5[3] = (-1514.550778);
      doubleArray5[4] = (-1514.550778);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = (-1514.550778);
      doubleArray6[1] = (-3933.558);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      
      doubleArray7[0] = (-1514.550778);
      doubleArray7[1] = (-3933.558);
      doubleArray7[2] = (-1514.550778);
      doubleArray7[3] = (-1514.550778);
      doubleArray0[6] = doubleArray7;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1238);
      assertNotNull(spreadsheetDate0);
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, true);
      assertNotNull(xYSeries0);
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((double) 5, (double) 0);
      assertNull(xYDataItem0);
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(5.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(5.0, xYSeries0.getMinX(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(5.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(5.0, xYSeries0.getMinX(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(5.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(5.0, xYSeries0.getMinX(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range1);
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(5.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(5.0, xYSeries0.getMinX(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertTrue(range1.equals((Object)range0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal((PieDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("null9", 7, 7);
      assertNotNull(matrixSeries0);
      assertEquals(7, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(49, matrixSeries0.getItemCount());
      assertEquals(7, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(7, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(49, matrixSeries0.getItemCount());
      assertEquals(7, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(7, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(49, matrixSeries0.getItemCount());
      assertEquals(7, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, number0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertEquals(7, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(49, matrixSeries0.getItemCount());
      assertEquals(7, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(6.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(3.0, range0.getCentralValue(), 0.01);
      assertEquals(6.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[][] doubleArray0 = new double[12][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(12, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(12, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(12, doubleArray0.length);
      
      Short short0 = new Short((short)1085);
      assertNotNull(short0);
      assertEquals((short)1085, (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertFalse(stack0.contains((short)1085));
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains((short)1085));
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[1085]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertTrue(boolean0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(short0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(12, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(12, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(12, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, range0, true);
      assertNull(range1);
      assertTrue(stack0.contains((short)1085));
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(12, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(12, defaultIntervalCategoryDataset0.getRowCount());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[1085]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(12, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Short short0 = new Short((short)1);
      assertNotNull(short0);
      assertEquals((short)1, (short)short0);
      
      Number[][] numberArray0 = new Number[1][6];
      Short short1 = new Short((short)1);
      assertNotNull(short1);
      assertEquals((short)1, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, numberArray0.length);
      
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(short1);
      assertNotNull(seriesChangeEvent0);
      assertTrue(short1.equals((Object)short0));
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertTrue(boolean0);
      assertEquals(1, numberArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNull(range0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("6$+c0b*u", 23, 23);
      assertNotNull(matrixSeries0);
      assertEquals(23, matrixSeries0.getColumnsCount());
      assertEquals(529, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(23, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(23, matrixSeries0.getColumnsCount());
      assertEquals(529, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(23, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(23, matrixSeries0.getColumnsCount());
      assertEquals(529, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(23, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, number0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Series 1";
      stringArray0[1] = "6$+c0b*u";
      stringArray0[2] = "6$+c0b*u";
      stringArray0[3] = "6$+c0b*u";
      Number[][] numberArray0 = new Number[4][6];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = number0;
      Short short0 = new Short((short) (-4));
      assertNotNull(short0);
      assertEquals((short) (-4), (short)short0);
      
      numberArray2[1] = (Number) short0;
      numberArray2[2] = number0;
      numberArray2[3] = number0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[8];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray3[0] = number0;
      numberArray3[1] = number0;
      numberArray3[2] = number0;
      numberArray3[3] = (Number) short0;
      numberArray3[4] = number0;
      numberArray3[5] = (Number) short0;
      numberArray3[6] = (Number) short0;
      numberArray3[7] = number0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[4];
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray3));
      
      numberArray4[0] = number0;
      numberArray4[1] = (Number) short0;
      numberArray4[2] = (Number) short0;
      numberArray4[3] = (Number) short0;
      numberArray0[3] = numberArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, stringArray0.length);
      assertEquals(4, numberArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 23);
      assertNotNull(categoryToPieDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(23, categoryToPieDataset0.getExtractIndex());
      assertEquals(4, stringArray0.length);
      assertEquals(4, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) "6$+c0b*u", (KeyedValues) categoryToPieDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1124, 1124);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(1123, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      
      Vector<Float> vector0 = new Vector<Float>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      XYSeries xYSeries0 = new XYSeries(0, true);
      assertNotNull(xYSeries0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((-1058.38659607), (-631.5576451253493));
      assertNull(xYDataItem0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-631.5576451253493), xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals((-1058.38659607), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-631.5576451253493), xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals((-1058.38659607), xYSeries0.getMaxX(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-631.5576451253493), xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals((-1058.38659607), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-631.5576451253493), xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals((-1058.38659607), xYSeries0.getMaxX(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeZone) null);
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      xYSeriesCollection0.setSelectionState(timeSeriesCollection0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-631.5576451253493), xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals((-1058.38659607), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-631.5576451253493), xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals((-1058.38659607), xYSeries0.getMaxX(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-631.5576451253493), xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals((-1058.38659607), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-631.5576451253493), xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals((-1058.38659607), xYSeries0.getMaxX(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals((-1057.88659607), range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals((-1058.38659607), range0.getCentralValue(), 0.01);
      assertEquals((-1058.88659607), range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range1);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-631.5576451253493), xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals((-1058.38659607), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-631.5576451253493), xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals((-1058.38659607), xYSeries0.getMaxX(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals((-631.5576451253493), range1.getLowerBound(), 0.01);
      assertEquals((-631.5576451253493), range1.getCentralValue(), 0.01);
      assertEquals((-631.5576451253493), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[][] doubleArray0 = new double[8][7];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 533.8286773325751;
      doubleArray1[2] = (-4093.4);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2958465.0;
      doubleArray2[1] = (-4093.4);
      doubleArray2[2] = (-4093.4);
      doubleArray2[3] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 503.0;
      doubleArray3[1] = 533.8286773325751;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 533.8286773325751;
      doubleArray3[5] = 1162.491449566;
      doubleArray3[6] = 2958465.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 503.0;
      doubleArray4[1] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = 0.0;
      doubleArray5[1] = Double.NaN;
      doubleArray5[2] = (-4093.4);
      doubleArray5[3] = 503.0;
      doubleArray5[4] = (-4093.4);
      doubleArray5[5] = 0.0;
      doubleArray5[6] = 1162.491449566;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      
      doubleArray6[0] = Double.POSITIVE_INFINITY;
      doubleArray6[1] = (-4093.4);
      doubleArray6[2] = 2958465.0;
      doubleArray6[3] = 503.0;
      doubleArray6[4] = 0.0;
      doubleArray6[5] = 0.0;
      doubleArray6[6] = 1162.491449566;
      doubleArray6[7] = 1162.491449566;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      
      doubleArray7[0] = 503.0;
      doubleArray7[1] = Double.POSITIVE_INFINITY;
      doubleArray7[2] = 1162.491449566;
      doubleArray7[3] = 2958465.0;
      doubleArray7[4] = 1.0;
      doubleArray7[5] = 1162.491449566;
      doubleArray7[6] = Double.POSITIVE_INFINITY;
      doubleArray7[7] = 2958465.0;
      doubleArray7[8] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[4];
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      
      doubleArray8[0] = 503.0;
      doubleArray8[1] = 503.0;
      doubleArray8[2] = 503.0;
      doubleArray8[3] = 1162.491449566;
      doubleArray0[7] = doubleArray8;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(boolean0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Quarter quarter0 = new Quarter(mockDate0);
      assertNotNull(quarter0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2489, 2489, quarter0, timeZone0);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(2488, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = "6$+c0b*u";
      MatrixSeries matrixSeries0 = new MatrixSeries("6$+c0b*u", 23, 23);
      assertNotNull(matrixSeries0);
      assertEquals(529, matrixSeries0.getItemCount());
      assertEquals(23, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(23, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(529, matrixSeries0.getItemCount());
      assertEquals(23, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(23, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      CategoryDataset categoryDataset0 = null;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 23, 23);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(23, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(23, slidingCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) slidingCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getRowCount();
      assertEquals(0, int0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Short short0 = new Short((short) (-1311));
      assertNotNull(short0);
      assertEquals((short) (-1311), (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains((short) (-1311)));
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[-1311]", stack0.toString());
      assertTrue(boolean0);
      
      TimeSeries timeSeries0 = new TimeSeries(short0, "I5!#", "Invalid 'index': ");
      assertNotNull(timeSeries0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("I5!#", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Invalid 'index': ", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("I5!#", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Invalid 'index': ", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection((TimePeriodValues) null);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      Range range0 = timePeriodValuesCollection0.getDomainBounds(true);
      assertNull(range0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) stack0, (Range) null, true);
      assertNotNull(range1);
      assertTrue(stack0.contains((short) (-1311)));
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[-1311]", stack0.toString());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("I5!#", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Invalid 'index': ", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 847.0, 1148.0, 1148.0, 1148.0, 1.0);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      defaultOHLCDataset0.validateObject();
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      defaultOHLCDataset0.sortDataByDate();
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
      assertNotNull(range0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1148.0, range0.getCentralValue(), 0.01);
      assertEquals(1148.0, range0.getUpperBound(), 0.01);
      assertEquals(1148.0, range0.getLowerBound(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Short short0 = new Short((short) (-1227));
      assertNotNull(short0);
      assertEquals((short) (-1227), (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertFalse(stack0.contains((short) (-1227)));
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains((short) (-1227)));
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[-1227]", stack0.toString());
      assertTrue(boolean0);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) histogramDataset0, (List) stack0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, oHLCDataItemArray0.length);
      
      defaultOHLCDataset0.validateObject();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
      assertNull(range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, oHLCDataItemArray0.length);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      String string0 = "null7";
      JDBCXYDataset jDBCXYDataset0 = null;
      try {
        jDBCXYDataset0 = new JDBCXYDataset(connection0, "null7");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray1[2] = 1.7976931348623157E308;
      doubleArray1[3] = 1.5;
      doubleArray1[4] = 2204.3248208297728;
      doubleArray1[5] = (-2.147483648E9);
      doubleArray1[6] = (-5731.1402004394);
      doubleArray1[7] = 2117.2193;
      doubleArray1[8] = 1.0;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals((-2.147483648E9), range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(1.0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      Stack<TimeSeriesCollection> stack0 = new Stack<TimeSeriesCollection>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, range0, true);
      assertNull(range1);
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals((-2.147483648E9), range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) 2204.3248208297728, (KeyedValues) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowData' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Short short0 = new Short((short)1);
      assertNotNull(short0);
      assertEquals((short)1, (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(short0));
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains(short0));
      assertEquals("[1]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertTrue(boolean0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(short0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      Number[][] numberArray0 = new Number[1][5];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = (Number) short0;
      numberArray1[1] = (Number) short0;
      numberArray1[2] = (Number) short0;
      Integer integer0 = new Integer(828);
      assertNotNull(integer0);
      assertEquals(828, (int)integer0);
      
      numberArray1[3] = (Number) integer0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, numberArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNull(range0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("6$+c0b*u", 109, 23);
      assertNotNull(matrixSeries0);
      assertEquals(2507, matrixSeries0.getItemCount());
      assertEquals(109, matrixSeries0.getRowCount());
      assertEquals(23, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(2507, matrixSeries0.getItemCount());
      assertEquals(109, matrixSeries0.getRowCount());
      assertEquals(23, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(2507, matrixSeries0.getItemCount());
      assertEquals(109, matrixSeries0.getRowCount());
      assertEquals(23, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(22.0, range0.getLength(), 0.01);
      assertEquals(11.0, range0.getCentralValue(), 0.01);
      assertEquals(22.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1238);
      assertNotNull(spreadsheetDate0);
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, true);
      assertNotNull(xYSeries0);
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((-4918.78272038195), (double) 0);
      assertNull(xYDataItem0);
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals((-4918.78272038195), xYSeries0.getMaxX(), 0.01);
      assertEquals((-4918.78272038195), xYSeries0.getMinX(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals((-4918.78272038195), xYSeries0.getMaxX(), 0.01);
      assertEquals((-4918.78272038195), xYSeries0.getMinX(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(xYSeriesCollection0);
      assertNotNull(range0);
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals((-4918.78272038195), xYSeries0.getMaxX(), 0.01);
      assertEquals((-4918.78272038195), xYSeries0.getMinX(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) spreadsheetDate0, (KeyedValues) jDBCPieDataset0);
      assertNotNull(categoryDataset0);
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("6$+c0b*u", 109, 23);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(109, matrixSeries0.getRowCount());
      assertEquals(23, matrixSeries0.getColumnsCount());
      assertEquals(2507, matrixSeries0.getItemCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(109, matrixSeries0.getRowCount());
      assertEquals(23, matrixSeries0.getColumnsCount());
      assertEquals(2507, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, false);
      assertNotNull(range0);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(109, matrixSeries0.getRowCount());
      assertEquals(23, matrixSeries0.getColumnsCount());
      assertEquals(2507, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(108.0, range0.getLength(), 0.01);
      assertEquals(54.0, range0.getCentralValue(), 0.01);
      assertEquals(108.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      assertNotNull(number0);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(109, matrixSeries0.getRowCount());
      assertEquals(23, matrixSeries0.getColumnsCount());
      assertEquals(2507, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(22.0, number0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range1);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(109, matrixSeries0.getRowCount());
      assertEquals(23, matrixSeries0.getColumnsCount());
      assertEquals(2507, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(22.0, range1.getLength(), 0.01);
      assertEquals(11.0, range1.getCentralValue(), 0.01);
      assertEquals(22.0, range1.getUpperBound(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      ArrayList<DefaultBoxAndWhiskerCategoryDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 704.3;
      doubleArray1[1] = 1860.259;
      doubleArray1[2] = (-777.0);
      doubleArray1[3] = (-2.147483648E9);
      doubleArray1[0] = 2283.9;
      doubleArray1[5] = 1145.27274;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 1169.33654348;
      doubleArray1[8] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-3391.0);
      doubleArray2[1] = 704.3;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("null1", (String) null, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(2564.559, number0);
      assertEquals(2, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, (-1134.074));
      assertNotNull(range0);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(1430.485, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(2, doubleArray0.length);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultXYDataset0);
      assertNull(number1);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset1);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      double[][] doubleArray0 = new double[0][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, doubleArray0.length);
      
      Short short0 = new Short((short)1081);
      assertNotNull(short0);
      assertEquals((short)1081, (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertFalse(stack0.contains((short)1081));
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      Short short1 = new Short((short)1081);
      assertNotNull(short1);
      assertEquals((short)1081, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      boolean boolean0 = stack0.add(short1);
      assertTrue(stack0.contains(short1));
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[1081]", stack0.toString());
      assertTrue(boolean0);
      assertTrue(short1.equals((Object)short0));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((Number) short0, (Number) short0, (Comparable) short0, (Comparable) short1);
      assertTrue(short0.equals((Object)short1));
      assertTrue(short1.equals((Object)short0));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertNotNull(range0);
      assertTrue(stack0.contains(short1));
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[1081]", stack0.toString());
      assertEquals(1081.0, range0.getCentralValue(), 0.01);
      assertEquals(2162.0, range0.getUpperBound(), 0.01);
      assertEquals(2162.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("6$+c0b*u", 109, 23);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2507, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(109, matrixSeries0.getRowCount());
      assertEquals(23, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2507, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(109, matrixSeries0.getRowCount());
      assertEquals(23, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      DomainOrder domainOrder0 = matrixSeriesCollection0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2507, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(109, matrixSeries0.getRowCount());
      assertEquals(23, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, false);
      assertNotNull(range0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2507, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(109, matrixSeries0.getRowCount());
      assertEquals(23, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(108.0, range0.getLength(), 0.01);
      assertEquals(108.0, range0.getUpperBound(), 0.01);
      assertEquals(54.0, range0.getCentralValue(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      assertNotNull(number0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2507, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(109, matrixSeries0.getRowCount());
      assertEquals(23, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(22.0, number0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range1);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2507, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(109, matrixSeries0.getRowCount());
      assertEquals(23, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(54.0, range1.getCentralValue(), 0.01);
      assertEquals(108.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(108.0, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Short short0 = new Short((short) (-1227));
      assertNotNull(short0);
      assertEquals((short) (-1227), (short)short0);
      
      Short short1 = new Short((short) (-1227));
      assertNotNull(short1);
      assertEquals((short) (-1227), (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(short0));
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains(short0));
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[-1227]", stack0.toString());
      assertTrue(boolean0);
      assertTrue(short0.equals((Object)short1));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((Number) short1, (Number) short0, (Comparable) short0, (Comparable) short0);
      assertTrue(short0.equals((Object)short1));
      assertTrue(short1.equals((Object)short0));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(range0);
      assertEquals((-1227.0), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1227.0), range0.getCentralValue(), 0.01);
      assertEquals((-1227.0), range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[][] doubleArray0 = new double[6][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 1238;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 1238;
      doubleArray3[1] = (double) 1238;
      doubleArray3[2] = (double) 1238;
      doubleArray3[3] = (double) 1238;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (-3374.172559450447);
      doubleArray4[1] = (double) 1238;
      doubleArray4[2] = (double) 1238;
      doubleArray4[3] = (double) 1238;
      doubleArray4[4] = (double) 1238;
      doubleArray4[5] = (double) 1238;
      doubleArray4[6] = (double) 1238;
      doubleArray4[7] = (double) 1238;
      doubleArray4[8] = (double) 1238;
      double[] doubleArray5 = new double[5];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = (-3374.172559450447);
      doubleArray5[1] = (-741.314474587);
      doubleArray5[2] = (double) 1238;
      doubleArray5[3] = (double) 1238;
      doubleArray5[4] = (double) 1238;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray0[5] = doubleArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      short short0 = (short)1;
      Short short1 = new Short((short)1);
      assertNotNull(short1);
      assertEquals((short)1, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      boolean boolean0 = stack0.add(short1);
      assertTrue(stack0.contains(short0));
      assertEquals("[1]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertTrue(boolean0);
      assertTrue(short1.equals((Object)short0));
      
      Stack<Short> stack1 = new Stack<Short>();
      assertNotNull(stack1);
      assertFalse(stack1.contains(short0));
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertFalse(stack1.equals((Object)stack0));
      
      Short short2 = null;
      boolean boolean1 = stack0.add((Short) null);
      assertTrue(stack0.contains(short0));
      assertEquals("[1, null]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(2, stack0.size());
      assertNotSame(stack0, stack1);
      assertTrue(boolean1);
      assertFalse(stack0.equals((Object)stack1));
      assertTrue(boolean1 == boolean0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((Number) null, (Number) null, (Comparable) short1, (Comparable) short1);
      assertTrue(short1.equals((Object)short0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-785.2), (-785.2), (-785.2), (-1050.75113061019), 593.0437650784594);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-381.0), (-785.2), (-3694.0169310957), 1519.93, Double.NEGATIVE_INFINITY);
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-1050.75113061019), (-1.0), (-785.2), (-381.0), (-1145.1710866243232));
      assertNotNull(oHLCDataItem2);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      
      oHLCDataItemArray0[0] = oHLCDataItem2;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem1;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      oHLCDataItemArray0[7] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(8, oHLCDataItemArray0.length);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultOHLCDataset0, Double.POSITIVE_INFINITY);
      assertNotNull(xYBarDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(Double.POSITIVE_INFINITY, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(8, oHLCDataItemArray0.length);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      
      DomainOrder domainOrder0 = xYBarDataset0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(Double.POSITIVE_INFINITY, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      assertNotSame(oHLCDataItem0, oHLCDataItem2);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertEquals(8, oHLCDataItemArray0.length);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultOHLCDataset0);
      assertNotNull(number0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotSame(oHLCDataItem0, oHLCDataItem2);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertEquals(1.39240928132E12, number0);
      assertEquals(8, oHLCDataItemArray0.length);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotSame(oHLCDataItem0, oHLCDataItem2);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertEquals(8, oHLCDataItemArray0.length);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCXYDataset jDBCXYDataset0 = null;
      try {
        jDBCXYDataset0 = new JDBCXYDataset(connection0, "d");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MockDate mockDate0 = new MockDate((short) (-1227));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (short) (-1227), (short) (-1227), (short) (-1227), Double.POSITIVE_INFINITY, 2074.79);
      assertNotNull(oHLCDataItem0);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 22.0, 3494.6680266, 1057.56, 1057.56, 1860.259);
      assertNotNull(oHLCDataItem1);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem1, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultOHLCDataset0, 1057.56);
      assertNotNull(xYBarDataset0);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1057.56, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      DomainOrder domainOrder0 = xYBarDataset0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1057.56, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      assertNotSame(oHLCDataItem1, oHLCDataItem0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultOHLCDataset0);
      assertNotNull(number0);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotSame(oHLCDataItem1, oHLCDataItem0);
      assertEquals((-1227.0), number0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1227.0), range0.getCentralValue(), 0.01);
      assertEquals((-1227.0), range0.getUpperBound(), 0.01);
      assertEquals((-1227.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotSame(oHLCDataItem1, oHLCDataItem0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "S=Jujy[Q#? K+";
      stringArray0[1] = "null9";
      stringArray0[2] = "Series 2";
      stringArray0[3] = "Series 4";
      stringArray0[4] = "Series 6";
      stringArray0[5] = "null9";
      stringArray0[6] = "j}F~+ZzbF+DBb";
      stringArray0[7] = "E\"";
      DefaultWindDataset defaultWindDataset0 = null;
      try {
        defaultWindDataset0 = new DefaultWindDataset(stringArray0, (Object[][][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Short short0 = new Short((short) (-777));
      assertNotNull(short0);
      assertEquals((short) (-777), (short)short0);
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(defaultKeyedValuesDataset0);
      assertNotNull(defaultPieDataset0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertNotNull(regularTimePeriod0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getFirstMillisecond());
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      
      defaultPieDataset0.setValue((Comparable) fixedMillisecond0, (Number) short0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) short0, (double) (short) (-777), (int) (short) (-777));
      assertNotNull(pieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertFalse(pieDataset0.equals((Object)defaultPieDataset0));
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) fixedMillisecond0, (KeyedValues) pieDataset0);
      assertNotNull(categoryDataset0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertFalse(defaultPieDataset0.equals((Object)pieDataset0));
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(pieDataset0.equals((Object)defaultPieDataset0));
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1121.0, 1121.0);
      assertNotNull(powerFunction2D0);
      assertEquals(1121.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1121.0, powerFunction2D0.getA(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, 1121.0, 1.39240928132E12, 184, fixedMillisecond0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1121.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1121.0, powerFunction2D0.getA(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1121.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1121.0, powerFunction2D0.getA(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      assertNotNull(serialDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(14, serialDate0.getDayOfMonth());
      assertEquals(41684, serialDate0.toSerial());
      assertEquals(2, serialDate0.getMonth());
      assertEquals(2014, serialDate0.getYYYY());
      assertNull(serialDate0.getDescription());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 5, 3, 3, 3, 1);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(8, oHLCDataItemArray0.length);
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean0 = linkedList0.add(defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(linkedList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(825, 825);
      assertNotNull(powerFunction2D0);
      assertEquals(825.0, powerFunction2D0.getB(), 0.01);
      assertEquals(825.0, powerFunction2D0.getA(), 0.01);
      
      Minute minute0 = new Minute();
      assertNotNull(minute0);
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      Date date0 = minute0.getStart();
      assertNotNull(date0);
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, (-1499.4762), 825, 825, minute0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(825.0, powerFunction2D0.getB(), 0.01);
      assertEquals(825.0, powerFunction2D0.getA(), 0.01);
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range0);
      assertEquals(825.0, powerFunction2D0.getB(), 0.01);
      assertEquals(825.0, powerFunction2D0.getA(), 0.01);
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1238);
      assertNotNull(spreadsheetDate0);
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, true);
      assertNotNull(xYSeries0);
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((-4935.514575625934), (double) 0);
      assertNull(xYDataItem0);
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals((-4935.514575625934), xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals((-4935.514575625934), xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals((-4935.514575625934), xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals((-4935.514575625934), xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals((-4935.514575625934), xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals((-4935.514575625934), xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertNotNull(range1);
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals((-4935.514575625934), xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals((-4935.514575625934), xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      double double0 = DatasetUtilities.calculateStackTotal(jDBCXYDataset0, 3);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0.0, double0, 0.01);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0, 0.0);
      assertNotNull(range2);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      assertNotNull(serialDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(41684, serialDate0.toSerial());
      assertEquals(2, serialDate0.getMonth());
      assertEquals(14, serialDate0.getDayOfMonth());
      assertEquals(2014, serialDate0.getYYYY());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      
      Short short0 = new Short((short) (-2800));
      assertNotNull(short0);
      assertEquals((short) (-2800), (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(short0));
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      
      boolean boolean0 = stack0.add((Short) null);
      assertFalse(stack0.contains(short0));
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(boolean0);
      
      boolean boolean1 = stack0.add(short0);
      assertTrue(stack0.contains(short0));
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[null, -2800]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Short short1 = new Short((short) (-2800));
      assertNotNull(short1);
      assertEquals((short) (-2800), (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      boolean boolean2 = stack0.add(short1);
      assertTrue(stack0.contains(short1));
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[null, -2800, -2800]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(3, stack0.size());
      assertTrue(boolean2);
      assertTrue(short1.equals((Object)short0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(defaultIntervalCategoryDataset0);
      assertNotNull(seriesChangeEvent0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      defaultIntervalCategoryDataset0.seriesChanged(seriesChangeEvent0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2, 646, 646);
      assertNotNull(mockDate0);
      
      Minute minute0 = new Minute(mockDate0);
      assertNotNull(minute0);
      assertEquals("Wed Aug 07 00:00:00 GMT 1957", mockDate0.toString());
      assertEquals((-391392000000L), minute0.getFirstMillisecond());
      assertEquals((-391392000000L), minute0.getLastMillisecond());
      assertEquals(0, minute0.getHourValue());
      assertEquals(0, minute0.getMinute());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(minute0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals("Wed Aug 07 00:00:00 GMT 1957", mockDate0.toString());
      assertEquals((-391392000000L), minute0.getFirstMillisecond());
      assertEquals((-391392000000L), minute0.getLastMillisecond());
      assertEquals(0, minute0.getHourValue());
      assertEquals(0, minute0.getMinute());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, true);
      assertNull(range0);
      assertEquals("Wed Aug 07 00:00:00 GMT 1957", mockDate0.toString());
      assertEquals((-391392000000L), minute0.getFirstMillisecond());
      assertEquals((-391392000000L), minute0.getLastMillisecond());
      assertEquals(0, minute0.getHourValue());
      assertEquals(0, minute0.getMinute());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1), (-3279), (-3279), (-1), 9999);
      assertNotNull(mockDate0);
      
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      Short short1 = new Short((short) (-2046));
      assertNotNull(short1);
      assertEquals((short) (-2046), (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(short1));
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      
      Short short2 = new Short((short) (-777));
      assertNotNull(short2);
      assertEquals((short) (-777), (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      
      boolean boolean0 = stack0.add(short2);
      assertFalse(stack0.contains(short1));
      assertTrue(stack0.contains((short) (-777)));
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[-777]", stack0.toString());
      assertTrue(boolean0);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((Number) short2, (Number) short1, (Comparable) mockDate0, (Comparable) short0);
      assertEquals("Fri Oct 14 21:39:00 GMT 1616", mockDate0.toString());
      assertFalse(short0.equals((Object)short1));
      assertFalse(short0.equals((Object)short2));
      assertFalse(short1.equals((Object)short2));
      assertFalse(short1.equals((Object)short0));
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Short short0 = new Short((short) (-20127));
      assertNotNull(short0);
      assertEquals((short) (-20127), (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertFalse(stack0.contains((short) (-20127)));
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains((short) (-20127)));
      assertFalse(stack0.isEmpty());
      assertEquals("[-20127]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertTrue(boolean0);
      
      Number[][] numberArray0 = new Number[0][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, numberArray0.length);
      
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(defaultIntervalCategoryDataset0);
      assertNotNull(seriesChangeEvent0);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, numberArray0.length);
      
      defaultIntervalCategoryDataset0.seriesChanged(seriesChangeEvent0);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, numberArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, true);
      assertNull(range0);
      assertTrue(stack0.contains((short) (-20127)));
      assertFalse(stack0.isEmpty());
      assertEquals("[-20127]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, numberArray0.length);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-19), "de]4|c%>j");
      assertNotNull(simpleTimeZone0);
      assertEquals((-19), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=de]4|c%>j,offset=-19,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("de]4|c%>j", simpleTimeZone0.getID());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertEquals((-19), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=de]4|c%>j,offset=-19,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("de]4|c%>j", simpleTimeZone0.getID());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (double) (-19));
      assertNotNull(range1);
      assertEquals((-19), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=de]4|c%>j,offset=-19,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("de]4|c%>j", simpleTimeZone0.getID());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals((-19.0), range1.getLowerBound(), 0.01);
      assertEquals((-19.0), range1.getUpperBound(), 0.01);
      assertEquals((-19.0), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) xIntervalSeriesCollection0, (List) stack0, range1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.XIntervalSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      assertNotNull(serialDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(2, serialDate0.getMonth());
      assertEquals(41684, serialDate0.toSerial());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      assertEquals(2014, serialDate0.getYYYY());
      assertEquals(14, serialDate0.getDayOfMonth());
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 2, (-222.0715392669525), (-2112.247583515476), (-1750.24774486979), 3);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNull(range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, oHLCDataItemArray0.length);
      
      Number[][] numberArray0 = new Number[3][4];
      Number[] numberArray1 = new Number[5];
      numberArray1[0] = (Number) 2;
      numberArray1[1] = (Number) 0;
      numberArray1[2] = (Number) 7;
      numberArray1[3] = (Number) 4;
      numberArray1[4] = (Number) 4;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[2];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      numberArray2[0] = (Number) bigInteger0;
      numberArray2[1] = (Number) 3;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[0];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray0[2] = numberArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, numberArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 0);
      assertNotNull(categoryToPieDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) bigInteger0, (-381.0));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      
      int int0 = (-1840);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, (-1840), 1073);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(1073, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-1840), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      
      Short short0 = new Short((short) (-3699));
      assertNotNull(short0);
      assertEquals((short) (-3699), (short)short0);
      
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) (short) (-3699);
      doubleArray1[1] = 2012.075608933866;
      doubleArray1[2] = (double) (short) (-3699);
      doubleArray1[3] = (double) (short) (-3699);
      doubleArray1[4] = (double) (short) (-3699);
      doubleArray1[5] = (double) (short) (-3699);
      doubleArray1[6] = (double) (short) (-3699);
      doubleArray1[7] = (double) (short) (-3699);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2012.075608933866;
      doubleArray2[1] = (double) (short) (-3699);
      doubleArray2[2] = 2012.075608933866;
      doubleArray2[3] = 2012.075608933866;
      doubleArray2[4] = 2012.075608933866;
      doubleArray2[5] = 2012.075608933866;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 2012.075608933866;
      doubleArray3[1] = 2012.075608933866;
      doubleArray3[2] = (double) (short) (-3699);
      doubleArray3[3] = (double) (short) (-3699);
      doubleArray3[4] = (double) (short) (-3699);
      doubleArray3[5] = (double) (short) (-3699);
      doubleArray3[6] = (double) (short) (-3699);
      doubleArray3[7] = (double) (short) (-3699);
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(yIntervalSeriesCollection0);
      assertNull(number0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      Short short0 = new Short((short)999);
      assertNotNull(short0);
      assertEquals((short)999, (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains((short)999));
      assertEquals("[999]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(boolean0);
      
      Number[][] numberArray0 = new Number[3][3];
      Number[] numberArray1 = new Number[5];
      numberArray1[0] = null;
      Integer integer0 = new Integer((short)999);
      assertNotNull(integer0);
      assertEquals(999, (int)integer0);
      
      numberArray1[1] = (Number) integer0;
      numberArray1[2] = null;
      Integer integer1 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer1);
      assertEquals(100, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      numberArray1[3] = (Number) integer1;
      numberArray1[4] = null;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[0];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray0[1] = numberArray1;
      Number[] numberArray3 = new Number[8];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) integer1;
      numberArray3[1] = (Number) integer0;
      numberArray3[2] = (Number) integer0;
      numberArray3[3] = (Number) short0;
      numberArray3[4] = (Number) integer1;
      numberArray3[5] = (Number) integer1;
      numberArray3[6] = null;
      numberArray3[7] = (Number) integer1;
      numberArray0[2] = numberArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, numberArray0.length);
      
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(stack0);
      assertNotNull(seriesChangeEvent0);
      assertTrue(stack0.contains((short)999));
      assertEquals("[999]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      
      defaultIntervalCategoryDataset0.seriesChanged(seriesChangeEvent0);
      assertTrue(stack0.contains((short)999));
      assertEquals("[999]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, numberArray0.length);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertFalse(boolean1);
      assertEquals(3, numberArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains(short0));
      assertEquals("[0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertTrue(boolean0);
      
      Number[][] numberArray0 = new Number[2][6];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = (Number) short0;
      Short short1 = new Short((short)1800);
      assertNotNull(short1);
      assertEquals((short)1800, (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      boolean boolean1 = stack0.add(short1);
      assertTrue(stack0.contains(short1));
      assertEquals("[0, 1800]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertTrue(boolean1);
      assertFalse(short1.equals((Object)short0));
      assertTrue(boolean1 == boolean0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, numberArray0.length);
      
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(defaultIntervalCategoryDataset0);
      assertNotNull(seriesChangeEvent0);
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, numberArray0.length);
      
      defaultIntervalCategoryDataset0.seriesChanged((SeriesChangeEvent) null);
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, numberArray0.length);
      
      boolean boolean2 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(boolean2);
      assertEquals(2, numberArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Short short0 = new Short((short)1);
      assertNotNull(short0);
      assertEquals((short)1, (short)short0);
      
      Number[][] numberArray0 = new Number[2][6];
      Short short1 = new Short((short)1);
      assertNotNull(short1);
      assertEquals((short)1, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, numberArray0.length);
      
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(short0);
      assertNotNull(seriesChangeEvent0);
      assertTrue(short0.equals((Object)short1));
      
      SeriesChangeType seriesChangeType0 = SeriesChangeType.UPDATE;
      assertNotNull(seriesChangeType0);
      assertEquals("SeriesChangeType.UPDATE", seriesChangeType0.toString());
      
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo(seriesChangeType0, (short)1, 2507);
      assertNotNull(seriesChangeInfo0);
      assertEquals("SeriesChangeType.UPDATE", seriesChangeType0.toString());
      assertEquals(2507, seriesChangeInfo0.getIndex2());
      assertEquals(1, seriesChangeInfo0.getIndex1());
      
      seriesChangeEvent0.setSummary(seriesChangeInfo0);
      assertEquals("SeriesChangeType.UPDATE", seriesChangeType0.toString());
      assertEquals(2507, seriesChangeInfo0.getIndex2());
      assertEquals(1, seriesChangeInfo0.getIndex1());
      assertTrue(short0.equals((Object)short1));
      
      defaultIntervalCategoryDataset0.seriesChanged(seriesChangeEvent0);
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, numberArray0.length);
      assertTrue(short0.equals((Object)short1));
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(boolean0);
      assertEquals(2, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1090, 1090);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(1089, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      
      XYSeries xYSeries0 = new XYSeries(2, true);
      assertNotNull(xYSeries0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((-688.8987561752), (double) 1);
      assertNull(xYDataItem0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1.0, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals((-688.8987561752), xYSeries0.getMaxX(), 0.01);
      assertEquals(1.0, xYSeries0.getMaxY(), 0.01);
      assertEquals((-688.8987561752), xYSeries0.getMinX(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1.0, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals((-688.8987561752), xYSeries0.getMaxX(), 0.01);
      assertEquals(1.0, xYSeries0.getMaxY(), 0.01);
      assertEquals((-688.8987561752), xYSeries0.getMinX(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      BasicSplitPaneUI basicSplitPaneUI0 = new BasicSplitPaneUI();
      assertNotNull(basicSplitPaneUI0);
      
      BasicSplitPaneDivider basicSplitPaneDivider0 = basicSplitPaneUI0.getDivider();
      assertNull(basicSplitPaneDivider0);
      
      xYSeries0.removePropertyChangeListener((PropertyChangeListener) null);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1.0, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals((-688.8987561752), xYSeries0.getMaxX(), 0.01);
      assertEquals(1.0, xYSeries0.getMaxY(), 0.01);
      assertEquals((-688.8987561752), xYSeries0.getMinX(), 0.01);
      
      DomainOrder domainOrder0 = xYSeriesCollection0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1.0, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals((-688.8987561752), xYSeries0.getMaxX(), 0.01);
      assertEquals(1.0, xYSeries0.getMaxY(), 0.01);
      assertEquals((-688.8987561752), xYSeries0.getMinX(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals("DomainOrder.ASCENDING", domainOrder0.toString());
      
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, 1090);
      assertNotNull(xYBarDataset0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1.0, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals((-688.8987561752), xYSeries0.getMaxX(), 0.01);
      assertEquals(1.0, xYSeries0.getMaxY(), 0.01);
      assertEquals((-688.8987561752), xYSeries0.getMinX(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1090.0, xYBarDataset0.getBarWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1.0, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals((-688.8987561752), xYSeries0.getMaxX(), 0.01);
      assertEquals(1.0, xYSeries0.getMaxY(), 0.01);
      assertEquals((-688.8987561752), xYSeries0.getMinX(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals((-689.3987561752), range0.getLowerBound(), 0.01);
      assertEquals((-688.8987561752), range0.getCentralValue(), 0.01);
      assertEquals((-688.3987561752), range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(xYSeriesCollection0);
      assertNotNull(range1);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1.0, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals((-688.8987561752), xYSeries0.getMaxX(), 0.01);
      assertEquals(1.0, xYSeries0.getMaxY(), 0.01);
      assertEquals((-688.8987561752), xYSeries0.getMinX(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(jDBCCategoryDataset0);
      assertNull(number0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1238);
      assertNotNull(spreadsheetDate0);
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      
      Short short0 = new Short((short)1900);
      assertNotNull(short0);
      assertEquals((short)1900, (short)short0);
      
      boolean boolean0 = spreadsheetDate0.equals(short0);
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertFalse(boolean0);
      
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, false);
      assertNotNull(xYSeries0);
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((-688.8987561752), (double) 4);
      assertNull(xYDataItem0);
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals((-688.8987561752), xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(4.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(4.0, xYSeries0.getMaxY(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals((-688.8987561752), xYSeries0.getMinX(), 0.01);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals((-688.8987561752), xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(4.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(4.0, xYSeries0.getMaxY(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals((-688.8987561752), xYSeries0.getMinX(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      
      BasicSplitPaneUI basicSplitPaneUI0 = new BasicSplitPaneUI();
      assertNotNull(basicSplitPaneUI0);
      
      BasicSplitPaneDivider basicSplitPaneDivider0 = basicSplitPaneUI0.getDivider();
      assertNull(basicSplitPaneDivider0);
      
      xYSeries0.removePropertyChangeListener((PropertyChangeListener) null);
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals((-688.8987561752), xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(4.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(4.0, xYSeries0.getMaxY(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals((-688.8987561752), xYSeries0.getMinX(), 0.01);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      
      DomainOrder domainOrder0 = xYSeriesCollection0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals((-688.8987561752), xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(4.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(4.0, xYSeries0.getMaxY(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals((-688.8987561752), xYSeries0.getMinX(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      assertNotNull(range0);
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals((-688.8987561752), xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(4.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(4.0, xYSeries0.getMaxY(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals((-688.8987561752), xYSeries0.getMinX(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4.0, range0.getCentralValue(), 0.01);
      assertEquals(4.0, range0.getUpperBound(), 0.01);
      assertEquals(4.0, range0.getLowerBound(), 0.01);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, (-1));
      assertNotNull(xYBarDataset0);
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals((-688.8987561752), xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(4.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(4.0, xYSeries0.getMaxY(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals((-688.8987561752), xYSeries0.getMinX(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals((-1.0), xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) xYBarDataset0);
      assertNull(range1);
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals((-688.8987561752), xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(4.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(4.0, xYSeries0.getMaxY(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals((-688.8987561752), xYSeries0.getMinX(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals((-1.0), xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      
      Range range2 = DatasetUtilities.iterateXYRangeBounds(xYBarDataset0);
      assertNotNull(range2);
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals((-688.8987561752), xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(4.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(4.0, xYSeries0.getMaxY(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals((-688.8987561752), xYSeries0.getMinX(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals((-1.0), xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(4.0, range2.getCentralValue(), 0.01);
      assertEquals(4.0, range2.getUpperBound(), 0.01);
      assertEquals(4.0, range2.getLowerBound(), 0.01);
      assertNotSame(range2, range0);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertTrue(range2.equals((Object)range0));
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(jDBCCategoryDataset0);
      assertNull(number0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range3);
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(4.0, range3.getCentralValue(), 0.01);
      assertEquals(4.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(4.0, range3.getLowerBound(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals((-688.8987561752), xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(4.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(4.0, xYSeries0.getMaxY(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals((-688.8987561752), xYSeries0.getMinX(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[][] doubleArray0 = new double[5][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, doubleArray0.length);
      
      short short0 = (short) (-805);
      Short short1 = new Short((short) (-805));
      assertNotNull(short1);
      assertEquals((short) (-805), (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertFalse(stack0.contains((short) (-805)));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      boolean boolean0 = stack0.add(short1);
      assertTrue(stack0.contains((short) (-805)));
      assertEquals("[-805]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertTrue(boolean0);
      assertTrue(short1.equals((Object)short0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      
      Short short0 = new Short((short) (-3699));
      assertNotNull(short0);
      assertEquals((short) (-3699), (short)short0);
      
      Short short1 = new Short((short) (-777));
      assertNotNull(short1);
      assertEquals((short) (-777), (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      boolean boolean0 = stack0.add(short1);
      assertTrue(stack0.contains(short1));
      assertFalse(stack0.contains((short) (-3699)));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[-777]", stack0.toString());
      assertTrue(boolean0);
      assertFalse(short1.equals((Object)short0));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((Number) short0, (Number) short0, (Comparable) short1, (Comparable) short0);
      assertFalse(short0.equals((Object)short1));
      assertFalse(short1.equals((Object)short0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-7398.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      Second second1 = (Second)second0.next();
      assertNotNull(second1);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(22, second1.getSecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertFalse(second1.equals((Object)second0));
      
      Range range0 = new Range(59, Double.POSITIVE_INFINITY);
      assertNotNull(range0);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(59.0, range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Comparable<XYIntervalSeriesCollection>[] comparableArray0 = (Comparable<XYIntervalSeriesCollection>[]) Array.newInstance(Comparable.class, 1);
      comparableArray0[0] = (Comparable<XYIntervalSeriesCollection>) second0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(comparableArray0, comparableArray0, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, comparableArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Short short0 = new Short((short) (-20127));
      assertNotNull(short0);
      assertEquals((short) (-20127), (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(short0));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains(short0));
      assertEquals("[-20127]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertTrue(boolean0);
      
      Number[][] numberArray0 = new Number[0][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, numberArray0.length);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, true);
      assertNull(range0);
      assertTrue(stack0.contains(short0));
      assertEquals("[-20127]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, numberArray0.length);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNull(range1);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, numberArray0.length);
      
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, doubleArray0.length);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(Double.NEGATIVE_INFINITY, 1.5);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(1.5, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, normalDistributionFunction2D0.getMean(), 0.01);
      
      double double0 = 814.0;
      int int0 = 2;
      Class<XYIntervalSeriesCollection> class0 = XYIntervalSeriesCollection.class;
      MockDate mockDate0 = new MockDate(2);
      assertNotNull(mockDate0);
      
      int int1 = (-1594);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1594), "m6NZ=Cro-");
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=m6NZ=Cro-,offset=-1594,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-1594), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("m6NZ=Cro-", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      RegularTimePeriod regularTimePeriod0 = RegularTimePeriod.createInstance(class0, mockDate0, simpleTimeZone0);
      assertNull(regularTimePeriod0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals("java.util.SimpleTimeZone[id=m6NZ=Cro-,offset=-1594,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-1594), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("m6NZ=Cro-", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, 814.0, Double.NEGATIVE_INFINITY, 2, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1238);
      assertNotNull(spreadsheetDate0);
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(7, SerialDate.SATURDAY);
      
      Short short0 = new Short((short)1900);
      assertNotNull(short0);
      assertEquals((short)1900, (short)short0);
      
      boolean boolean0 = spreadsheetDate0.equals(short0);
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(7, SerialDate.SATURDAY);
      assertFalse(boolean0);
      
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, false);
      assertNotNull(xYSeries0);
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(7, SerialDate.SATURDAY);
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((-688.8987561752), (double) 4);
      assertNull(xYDataItem0);
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-688.8987561752), xYSeries0.getMinX(), 0.01);
      assertEquals(4.0, xYSeries0.getMinY(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals((-688.8987561752), xYSeries0.getMaxX(), 0.01);
      assertEquals(4.0, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(7, SerialDate.SATURDAY);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-688.8987561752), xYSeries0.getMinX(), 0.01);
      assertEquals(4.0, xYSeries0.getMinY(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals((-688.8987561752), xYSeries0.getMaxX(), 0.01);
      assertEquals(4.0, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(7, SerialDate.SATURDAY);
      
      BasicSplitPaneUI basicSplitPaneUI0 = new BasicSplitPaneUI();
      assertNotNull(basicSplitPaneUI0);
      
      BasicSplitPaneDivider basicSplitPaneDivider0 = basicSplitPaneUI0.getDivider();
      assertNull(basicSplitPaneDivider0);
      
      xYSeries0.removePropertyChangeListener((PropertyChangeListener) null);
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-688.8987561752), xYSeries0.getMinX(), 0.01);
      assertEquals(4.0, xYSeries0.getMinY(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals((-688.8987561752), xYSeries0.getMaxX(), 0.01);
      assertEquals(4.0, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(7, SerialDate.SATURDAY);
      
      double double0 = xYSeriesCollection0.getDomainUpperBound(false);
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-688.8987561752), xYSeries0.getMinX(), 0.01);
      assertEquals(4.0, xYSeries0.getMinY(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals((-688.8987561752), xYSeries0.getMaxX(), 0.01);
      assertEquals(4.0, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-688.8987561752), double0, 0.01);
      
      DomainOrder domainOrder0 = xYSeriesCollection0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-688.8987561752), xYSeries0.getMinX(), 0.01);
      assertEquals(4.0, xYSeries0.getMinY(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals((-688.8987561752), xYSeries0.getMaxX(), 0.01);
      assertEquals(4.0, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(7, SerialDate.SATURDAY);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      assertNotNull(range0);
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-688.8987561752), xYSeries0.getMinX(), 0.01);
      assertEquals(4.0, xYSeries0.getMinY(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals((-688.8987561752), xYSeries0.getMaxX(), 0.01);
      assertEquals(4.0, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4.0, range0.getUpperBound(), 0.01);
      assertEquals(4.0, range0.getLowerBound(), 0.01);
      assertEquals(4.0, range0.getCentralValue(), 0.01);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(7, SerialDate.SATURDAY);
      
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, (-1));
      assertNotNull(xYBarDataset0);
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-688.8987561752), xYSeries0.getMinX(), 0.01);
      assertEquals(4.0, xYSeries0.getMinY(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals((-688.8987561752), xYSeries0.getMaxX(), 0.01);
      assertEquals(4.0, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals((-1.0), xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(7, SerialDate.SATURDAY);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) xYBarDataset0);
      assertNull(range1);
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-688.8987561752), xYSeries0.getMinX(), 0.01);
      assertEquals(4.0, xYSeries0.getMinY(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals((-688.8987561752), xYSeries0.getMaxX(), 0.01);
      assertEquals(4.0, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals((-1.0), xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(7, SerialDate.SATURDAY);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(range2);
      
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYBarDataset0, (List) stack0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      Comparable<DefaultIntervalXYDataset>[] comparableArray0 = (Comparable<DefaultIntervalXYDataset>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Comparable<DefaultIntervalXYDataset>[] comparableArray0 = (Comparable<DefaultIntervalXYDataset>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Short short0 = new Short((short) (-3014));
      assertNotNull(short0);
      assertEquals((short) (-3014), (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains((short) (-3014)));
      assertEquals("[-3014]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(boolean0);
      
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection1);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      double double0 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, (short) (-3014));
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.0, double0, 0.01);
      
      Number[][] numberArray0 = new Number[6][5];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = (Number) short0;
      numberArray1[1] = (Number) short0;
      numberArray1[2] = (Number) short0;
      numberArray1[3] = (Number) short0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) short0;
      numberArray2[1] = (Number) short0;
      numberArray2[2] = (Number) short0;
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultStatisticalCategoryDataset0, tableOrder0, (-1027));
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-1027), categoryToPieDataset0.getExtractIndex());
      
      Number number0 = categoryToPieDataset0.getValue((Comparable) "JbW");
      assertNull(number0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-1027), categoryToPieDataset0.getExtractIndex());
      
      numberArray2[3] = null;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[0];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[3];
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray2));
      
      numberArray4[0] = null;
      numberArray4[1] = null;
      numberArray4[2] = (Number) short0;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[7];
      assertFalse(numberArray5.equals((Object)numberArray2));
      assertFalse(numberArray5.equals((Object)numberArray1));
      assertFalse(numberArray5.equals((Object)numberArray3));
      assertFalse(numberArray5.equals((Object)numberArray4));
      
      numberArray5[0] = null;
      numberArray5[1] = (Number) short0;
      numberArray5[2] = (Number) short0;
      numberArray5[3] = null;
      numberArray5[4] = (Number) short0;
      numberArray5[5] = (Number) short0;
      numberArray5[6] = (Number) short0;
      numberArray0[4] = numberArray5;
      Number[] numberArray6 = new Number[1];
      assertFalse(numberArray6.equals((Object)numberArray1));
      assertFalse(numberArray6.equals((Object)numberArray5));
      assertFalse(numberArray6.equals((Object)numberArray2));
      assertFalse(numberArray6.equals((Object)numberArray3));
      assertFalse(numberArray6.equals((Object)numberArray4));
      
      numberArray6[0] = null;
      numberArray0[5] = numberArray6;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("JbW", "null4", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(6, numberArray0.length);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertNotNull(number1);
      assertEquals((-12056.0), number1);
      assertEquals(6, numberArray0.length);
      assertFalse(number1.equals((Object)double0));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("QGdV~Pn", 14, 14);
      assertNotNull(matrixSeries0);
      assertEquals(196, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(14, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(14, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(196, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(14, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(14, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(196, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(14, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(14, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, number0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertEquals(196, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(14, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(14, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(6.5, range0.getCentralValue(), 0.01);
      assertEquals(13.0, range0.getUpperBound(), 0.01);
      assertEquals(13.0, range0.getLength(), 0.01);
      
      Number[][] numberArray0 = new Number[5][9];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[1];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = number0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[2];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = number0;
      numberArray3[1] = number0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[6];
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray3));
      
      numberArray4[0] = number0;
      numberArray4[1] = number0;
      numberArray4[2] = number0;
      numberArray4[3] = number0;
      numberArray4[4] = number0;
      numberArray4[5] = number0;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[5];
      assertFalse(numberArray5.equals((Object)numberArray2));
      assertFalse(numberArray5.equals((Object)numberArray1));
      assertFalse(numberArray5.equals((Object)numberArray4));
      assertFalse(numberArray5.equals((Object)numberArray3));
      
      numberArray5[0] = number0;
      numberArray5[1] = number0;
      numberArray5[2] = number0;
      numberArray5[3] = number0;
      numberArray5[4] = number0;
      numberArray0[4] = numberArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("QGdV~Pn", "QGdV~Pn", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(5, numberArray0.length);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertNotNull(number1);
      assertEquals(0.0, number1);
      assertEquals(5, numberArray0.length);
      assertTrue(number1.equals((Object)number0));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      Short short0 = new Short((short)1);
      assertNotNull(short0);
      assertEquals((short)1, (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains(short0));
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[1]", stack0.toString());
      assertEquals(1, stack0.size());
      assertTrue(boolean0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      ArrayList<DefaultHighLowDataset> arrayList0 = new ArrayList<DefaultHighLowDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) arrayList0, false);
      assertNull(range0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(1, doubleArray0.length);
      
      XYSeries xYSeries0 = new XYSeries(short0, true, false);
      assertNotNull(xYSeries0);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      Range range1 = new Range((short)1, 89.985491);
      assertNotNull(range1);
      assertEquals(45.4927455, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(88.985491, range1.getLength(), 0.01);
      assertEquals(89.985491, range1.getUpperBound(), 0.01);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, (List) stack0, range1, false);
      assertNull(range2);
      assertTrue(stack0.contains(short0));
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[1]", stack0.toString());
      assertEquals(1, stack0.size());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(45.4927455, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(88.985491, range1.getLength(), 0.01);
      assertEquals(89.985491, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1, 1, millisecond0, timeZone0);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Short short0 = new Short((short)26);
      assertNotNull(short0);
      assertEquals((short)26, (short)short0);
      
      Short short1 = new Short((short)26);
      assertNotNull(short1);
      assertEquals((short)26, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertFalse(stack0.contains((short)26));
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains((short)26));
      assertFalse(stack0.isEmpty());
      assertEquals("[26]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean0);
      assertTrue(short0.equals((Object)short1));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((Number) short1, (Number) short1, (Comparable) short0, (Comparable) short1);
      assertTrue(short0.equals((Object)short1));
      assertTrue(short1.equals((Object)short0));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, false);
      assertNotNull(range0);
      assertTrue(stack0.contains((short)26));
      assertFalse(stack0.isEmpty());
      assertEquals("[26]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(26.0, range0.getLowerBound(), 0.01);
      assertEquals(26.0, range0.getCentralValue(), 0.01);
      assertEquals(26.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      Short short0 = new Short((short)1865);
      assertNotNull(short0);
      assertEquals((short)1865, (short)short0);
      
      Short short1 = new Short((short)1865);
      assertNotNull(short1);
      assertEquals((short)1865, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      boolean boolean0 = stack0.add(short1);
      assertTrue(stack0.contains(short1));
      assertFalse(stack0.isEmpty());
      assertEquals("[1865]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertTrue(boolean0);
      assertTrue(short1.equals((Object)short0));
      
      Number[][] numberArray0 = new Number[4][2];
      Number[] numberArray1 = new Number[6];
      numberArray1[0] = (Number) short1;
      numberArray1[1] = (Number) short1;
      numberArray1[2] = (Number) short1;
      numberArray1[3] = (Number) short0;
      numberArray1[4] = (Number) short1;
      numberArray1[5] = (Number) short0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[5];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) short1;
      numberArray2[1] = (Number) short1;
      numberArray2[2] = (Number) short1;
      numberArray2[3] = (Number) short1;
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      numberArray2[4] = (Number) bigInteger0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[2];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      numberArray3[0] = (Number) integer0;
      numberArray3[1] = (Number) short1;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[4];
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray3));
      
      numberArray4[0] = (Number) short0;
      numberArray4[1] = (Number) short0;
      numberArray4[2] = (Number) bigInteger0;
      numberArray4[3] = (Number) short1;
      numberArray0[3] = numberArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("null1", "(2L", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds(categoryDataset0, (List) stack0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1617), "Series 1");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("Series 1", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=Series 1,offset=-1617,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-1617), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      JTable jTable0 = new JTable();
      assertNotNull(jTable0);
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      
      Locale locale0 = jTable0.getLocale();
      assertNotNull(locale0);
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      
      String string0 = locale0.toLanguageTag();
      assertNotNull(string0);
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("en", string0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("Series 1", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=Series 1,offset=-1617,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-1617), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      timeTableXYDataset0.clear();
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("Series 1", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=Series 1,offset=-1617,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-1617), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, (-1268));
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("Series 1", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=Series 1,offset=-1617,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-1617), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, double0, 0.01);
      
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (-1617);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) (-1617);
      doubleArray1[3] = (double) (-1268);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals((-808.5), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(1617.0, range0.getLength(), 0.01);
      assertEquals((-1617.0), range0.getLowerBound(), 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Short short0 = new Short((short) (-20127));
      assertNotNull(short0);
      assertEquals((short) (-20127), (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertFalse(stack0.contains((short) (-20127)));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains((short) (-20127)));
      assertEquals("[-20127]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset1);
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset1, (List) stack0, true);
      assertNull(range0);
      assertTrue(stack0.contains((short) (-20127)));
      assertEquals("[-20127]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset1);
      assertNull(range1);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      ArrayList<DefaultBoxAndWhiskerCategoryDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultXYDataset0, (List) arrayList0, true);
      assertNull(range0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultBoxAndWhiskerCategoryDataset0, (-729), 2);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(2, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-729), slidingCategoryDataset0.getFirstCategoryIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingCategoryDataset0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      Second second1 = (Second)second0.next();
      assertNotNull(second1);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(22, second1.getSecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertFalse(second1.equals((Object)second0));
      
      Range range0 = new Range(59, Double.POSITIVE_INFINITY);
      assertNotNull(range0);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(59.0, range0.getLowerBound(), 0.01);
      
      MockDate mockDate0 = new MockDate(400, 59, 169);
      assertNotNull(mockDate0);
      
      Day day0 = new Day(mockDate0);
      assertNotNull(day0);
      assertEquals("Thu May 18 00:00:00 GMT 2305", mockDate0.toString());
      assertEquals(10583395200000L, day0.getFirstMillisecond());
      assertEquals(10583395200000L, day0.getLastMillisecond());
      
      PieDataset pieDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) second1, 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      
      Short short0 = new Short((short) (-3014));
      assertNotNull(short0);
      assertEquals((short) (-3014), (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains(short0));
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[-3014]", stack0.toString());
      assertTrue(boolean0);
      
      Number[][] numberArray0 = new Number[2][6];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = (Number) short0;
      numberArray1[1] = (Number) short0;
      numberArray1[2] = (Number) short0;
      numberArray1[3] = (Number) short0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[3];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) short0;
      numberArray2[1] = (Number) short0;
      numberArray2[2] = (Number) short0;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[3] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, doubleArray0.length);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Short short0 = new Short((short) (-6));
      assertNotNull(short0);
      assertEquals((short) (-6), (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertFalse(stack0.contains((short) (-6)));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      
      Short short1 = new Short((short) (-6));
      assertNotNull(short1);
      assertEquals((short) (-6), (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      boolean boolean0 = stack0.add(short1);
      assertTrue(stack0.contains(short1));
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[-6]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(boolean0);
      assertTrue(short1.equals((Object)short0));
      
      Number[][] numberArray0 = new Number[1][4];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = (Number) short1;
      numberArray1[1] = (Number) short1;
      numberArray1[2] = (Number) short0;
      numberArray1[3] = (Number) short0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset1);
      assertEquals(4, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(1, numberArray0.length);
      assertFalse(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(defaultMultiValueCategoryDataset0);
      assertNotNull(seriesChangeEvent0);
      
      defaultIntervalCategoryDataset0.seriesChanged(seriesChangeEvent0);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertEquals(4, doubleArray0.length);
      assertFalse(defaultIntervalCategoryDataset0.equals((Object)defaultIntervalCategoryDataset1));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset1, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, doubleArray0.length);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Double double0 = (Double)DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNotNull(double0);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      jDBCCategoryDataset0.setValue((-1.0), (Comparable) double0, (Comparable) double0);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(3, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) jDBCCategoryDataset0, true);
      assertNotNull(range0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, doubleArray0.length);
      
      MockDate mockDate0 = new MockDate(1070, 1070, 3477, 0, 3477, (-6));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1.0, 1.0, (-6), Double.POSITIVE_INFINITY, 1.0);
      assertNotNull(oHLCDataItem0);
      assertEquals("Mon Sep 07 09:56:54 GMT 3068", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[7];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      MockDate mockDate1 = new MockDate(0L);
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      boolean boolean0 = mockDate0.before(mockDate1);
      assertEquals("Mon Sep 07 09:56:54 GMT 3068", mockDate0.toString());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(mockDate1, mockDate0);
      assertFalse(boolean0);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Mon Sep 07 09:56:54 GMT 3068", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(7, oHLCDataItemArray0.length);
      assertFalse(mockDate0.equals((Object)mockDate1));
      
      int int0 = defaultOHLCDataset0.indexOf(oHLCDataItem0);
      assertEquals("Mon Sep 07 09:56:54 GMT 3068", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotSame(mockDate0, mockDate1);
      assertEquals(0, int0);
      assertEquals(7, oHLCDataItemArray0.length);
      assertFalse(mockDate0.equals((Object)mockDate1));
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals((-6.0), range0.getLowerBound(), 0.01);
      assertEquals((-2.5), range0.getCentralValue(), 0.01);
      assertEquals(7.0, range0.getLength(), 0.01);
      assertEquals("Mon Sep 07 09:56:54 GMT 3068", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotSame(mockDate0, mockDate1);
      assertEquals(7, oHLCDataItemArray0.length);
      assertFalse(mockDate0.equals((Object)mockDate1));
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertNotNull(number0);
      assertEquals("Mon Sep 07 09:56:54 GMT 3068", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotSame(mockDate0, mockDate1);
      assertEquals(3.4671146214E13, number0);
      assertEquals(7, oHLCDataItemArray0.length);
      assertFalse(mockDate0.equals((Object)mockDate1));
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      assertNotNull(range1);
      assertEquals(7.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals((-2.5), range1.getCentralValue(), 0.01);
      assertEquals((-6.0), range1.getLowerBound(), 0.01);
      assertEquals("Mon Sep 07 09:56:54 GMT 3068", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotSame(range1, range0);
      assertNotSame(mockDate0, mockDate1);
      assertEquals(7, oHLCDataItemArray0.length);
      assertTrue(range1.equals((Object)range0));
      assertFalse(mockDate0.equals((Object)mockDate1));
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[][] doubleArray0 = new double[13][3];
      Number[][] numberArray0 = new Number[1][1];
      Number[] numberArray1 = new Number[2];
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      numberArray1[0] = (Number) integer0;
      Byte byte0 = new Byte((byte)68);
      assertNotNull(byte0);
      assertEquals((byte)68, (byte)byte0);
      
      numberArray1[1] = (Number) byte0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("&S:,PFP8e", "Null 'x' argument.", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals(132.0, range0.getLength(), 0.01);
      assertEquals(134.0, range0.getCentralValue(), 0.01);
      assertEquals(200.0, range0.getUpperBound(), 0.01);
      assertEquals(68.0, range0.getLowerBound(), 0.01);
      assertEquals(1, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = new Range(Double.NEGATIVE_INFINITY, 0.0);
      assertNotNull(range0);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean0 = linkedList0.add(defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(linkedList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      boolean boolean1 = true;
      Range range1 = Range.shift(range0, Double.NEGATIVE_INFINITY, true);
      assertNotNull(range1);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYTaskDataset0, (List) linkedList0, range1, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertNotNull(range0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null item not allowed.", "Null item not allowed.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (Comparable) "Null item not allowed.");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      Short short0 = new Short((short) (-3699));
      assertNotNull(short0);
      assertEquals((short) (-3699), (short)short0);
      
      Short short1 = new Short((short) (-777));
      assertNotNull(short1);
      assertEquals((short) (-777), (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      boolean boolean0 = stack0.add(short1);
      assertFalse(stack0.contains((short) (-3699)));
      assertTrue(stack0.contains((short) (-777)));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[-777]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertTrue(boolean0);
      assertFalse(short1.equals((Object)short0));
      
      Vector<Float> vector0 = new Vector<Float>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertNull(range0);
      assertFalse(stack0.contains((short) (-3699)));
      assertTrue(stack0.contains((short) (-777)));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[-777]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1238);
      assertNotNull(spreadsheetDate0);
      assertEquals(5, spreadsheetDate0.getMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      
      SpreadsheetDate spreadsheetDate1 = new SpreadsheetDate(6);
      assertNotNull(spreadsheetDate1);
      assertEquals(6, spreadsheetDate1.toSerial());
      assertEquals(6, spreadsheetDate1.getDayOfWeek());
      assertEquals(1, spreadsheetDate1.getMonth());
      assertNull(spreadsheetDate1.getDescription());
      assertEquals(1900, spreadsheetDate1.getYYYY());
      assertEquals(5, spreadsheetDate1.getDayOfMonth());
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertFalse(spreadsheetDate1.equals((Object)spreadsheetDate0));
      
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate1, true);
      assertNotNull(xYSeries0);
      assertEquals(6, spreadsheetDate1.toSerial());
      assertEquals(6, spreadsheetDate1.getDayOfWeek());
      assertEquals(1, spreadsheetDate1.getMonth());
      assertNull(spreadsheetDate1.getDescription());
      assertEquals(1900, spreadsheetDate1.getYYYY());
      assertEquals(5, spreadsheetDate1.getDayOfMonth());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertFalse(spreadsheetDate1.equals((Object)spreadsheetDate0));
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate(2.0, (double) 0);
      assertNull(xYDataItem0);
      assertEquals(6, spreadsheetDate1.toSerial());
      assertEquals(6, spreadsheetDate1.getDayOfWeek());
      assertEquals(1, spreadsheetDate1.getMonth());
      assertNull(spreadsheetDate1.getDescription());
      assertEquals(1900, spreadsheetDate1.getYYYY());
      assertEquals(5, spreadsheetDate1.getDayOfMonth());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(2.0, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getNotify());
      assertNotSame(spreadsheetDate1, spreadsheetDate0);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertFalse(spreadsheetDate1.equals((Object)spreadsheetDate0));
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(6, spreadsheetDate1.toSerial());
      assertEquals(6, spreadsheetDate1.getDayOfWeek());
      assertEquals(1, spreadsheetDate1.getMonth());
      assertNull(spreadsheetDate1.getDescription());
      assertEquals(1900, spreadsheetDate1.getYYYY());
      assertEquals(5, spreadsheetDate1.getDayOfMonth());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(2.0, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertFalse(spreadsheetDate1.equals((Object)spreadsheetDate0));
      
      DomainOrder domainOrder0 = xYSeriesCollection0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertEquals(6, spreadsheetDate1.toSerial());
      assertEquals(6, spreadsheetDate1.getDayOfWeek());
      assertEquals(1, spreadsheetDate1.getMonth());
      assertNull(spreadsheetDate1.getDescription());
      assertEquals(1900, spreadsheetDate1.getYYYY());
      assertEquals(5, spreadsheetDate1.getDayOfMonth());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(2.0, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals("DomainOrder.ASCENDING", domainOrder0.toString());
      assertNotSame(spreadsheetDate1, spreadsheetDate0);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertFalse(spreadsheetDate1.equals((Object)spreadsheetDate0));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(6, spreadsheetDate1.toSerial());
      assertEquals(6, spreadsheetDate1.getDayOfWeek());
      assertEquals(1, spreadsheetDate1.getMonth());
      assertNull(spreadsheetDate1.getDescription());
      assertEquals(1900, spreadsheetDate1.getYYYY());
      assertEquals(5, spreadsheetDate1.getDayOfMonth());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(2.0, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotSame(spreadsheetDate1, spreadsheetDate0);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertFalse(spreadsheetDate1.equals((Object)spreadsheetDate0));
      
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range1);
      assertEquals(6, spreadsheetDate1.toSerial());
      assertEquals(6, spreadsheetDate1.getDayOfWeek());
      assertEquals(1, spreadsheetDate1.getMonth());
      assertNull(spreadsheetDate1.getDescription());
      assertEquals(1900, spreadsheetDate1.getYYYY());
      assertEquals(5, spreadsheetDate1.getDayOfMonth());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(2.0, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(2.0, range1.getCentralValue(), 0.01);
      assertEquals(2.5, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals(1.5, range1.getLowerBound(), 0.01);
      assertNotSame(spreadsheetDate1, spreadsheetDate0);
      assertNotSame(range1, range0);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertFalse(spreadsheetDate1.equals((Object)spreadsheetDate0));
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.iterateToFindDomainBounds(xYSeriesCollection0, stack0, true);
      assertNull(range2);
      assertEquals(6, spreadsheetDate1.toSerial());
      assertEquals(6, spreadsheetDate1.getDayOfWeek());
      assertEquals(1, spreadsheetDate1.getMonth());
      assertNull(spreadsheetDate1.getDescription());
      assertEquals(1900, spreadsheetDate1.getYYYY());
      assertEquals(5, spreadsheetDate1.getDayOfMonth());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(2.0, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotSame(spreadsheetDate1, spreadsheetDate0);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertFalse(spreadsheetDate1.equals((Object)spreadsheetDate0));
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1030L));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 88.18243120943, 7.50043997, (-1.0), 1113.7117574543, (-1713.63869));
      assertNotNull(oHLCDataItem0);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-1030L), (-1713.63869), 7.50043997, (-1.0), (-2072.8368358123507));
      assertNotNull(oHLCDataItem1);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[9];
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-1713.63869), (-2072.8368358123507), (-2072.8368358123507), (-154.94), (-1.0));
      assertNotNull(oHLCDataItem2);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      
      oHLCDataItemArray0[0] = oHLCDataItem2;
      oHLCDataItemArray0[1] = oHLCDataItem1;
      oHLCDataItemArray0[2] = oHLCDataItem1;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem1;
      oHLCDataItemArray0[7] = oHLCDataItem1;
      oHLCDataItemArray0[8] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(9, oHLCDataItemArray0.length);
      
      SynthColorChooserUI synthColorChooserUI0 = new SynthColorChooserUI();
      assertNotNull(synthColorChooserUI0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals((-1030.0), range0.getCentralValue(), 0.01);
      assertEquals((-1030.0), range0.getUpperBound(), 0.01);
      assertEquals((-1030.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(9, oHLCDataItemArray0.length);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultOHLCDataset0, 7.50043997);
      assertNotNull(xYBarDataset0);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertEquals(7.50043997, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(9, oHLCDataItemArray0.length);
      
      boolean boolean0 = defaultOHLCDataset0.hasListener(xYBarDataset0);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertEquals(7.50043997, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(boolean0);
      assertEquals(9, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(xYBarDataset0);
      assertNotNull(range1);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertEquals(7.50043997, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(479.38587872714993, range1.getCentralValue(), 0.01);
      assertEquals(1113.7117574543, range1.getUpperBound(), 0.01);
      assertEquals((-154.94), range1.getLowerBound(), 0.01);
      assertEquals(1268.6517574543, range1.getLength(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotSame(range1, range0);
      assertEquals(9, oHLCDataItemArray0.length);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      
      Short short0 = new Short((short) (-3699));
      assertNotNull(short0);
      assertEquals((short) (-3699), (short)short0);
      
      Short short1 = new Short((short) (-777));
      assertNotNull(short1);
      assertEquals((short) (-777), (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      boolean boolean0 = stack0.add(short1);
      assertFalse(stack0.contains(short0));
      assertTrue(stack0.contains(short1));
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[-777]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(boolean0);
      assertFalse(short1.equals((Object)short0));
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) vector0, false);
      assertNull(range0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) jDBCCategoryDataset0, (Comparable) short1);
      assertNotNull(defaultPieDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertFalse(short1.equals((Object)short0));
      
      defaultPieDataset0.setValue((Comparable) short0, (Number) short0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertFalse(short0.equals((Object)short1));
      assertFalse(short1.equals((Object)short0));
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) short1, (double) (short) (-3699), (-11));
      assertNotNull(defaultPieDataset1);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertFalse(short1.equals((Object)short0));
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      DefaultPieDataset defaultPieDataset2 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset1, (Comparable) short1, 1130.06);
      assertNotNull(defaultPieDataset2);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotSame(defaultPieDataset0, defaultPieDataset2);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset2);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(defaultPieDataset2, defaultPieDataset0);
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      assertFalse(short1.equals((Object)short0));
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertFalse(defaultPieDataset2.equals((Object)defaultPieDataset0));
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) timePeriodValuesCollection0);
      assertNull(range1);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(short1);
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertFalse(short1.equals((Object)short0));
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) jDBCCategoryDataset0, keyToGroupMap0);
      assertNull(range2);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertFalse(short1.equals((Object)short0));
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1238);
      assertNotNull(spreadsheetDate0);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, true);
      assertNotNull(xYSeries0);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate(2.0, (double) 0);
      assertNull(xYDataItem0);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertTrue(xYSeries0.getNotify());
      assertEquals(2.0, xYSeries0.getMinX(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(2.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertTrue(xYSeries0.getNotify());
      assertEquals(2.0, xYSeries0.getMinX(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(2.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      
      DomainOrder domainOrder0 = xYSeriesCollection0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertTrue(xYSeries0.getNotify());
      assertEquals(2.0, xYSeries0.getMinX(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(2.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals("DomainOrder.ASCENDING", domainOrder0.toString());
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertNotNull(range0);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertTrue(xYSeries0.getNotify());
      assertEquals(2.0, xYSeries0.getMinX(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(2.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1982.756877;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 2958465;
      doubleArray1[3] = (double) 2;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 2;
      doubleArray1[6] = (double) 2;
      doubleArray1[7] = (double) (-1);
      doubleArray1[8] = (double) 9999;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-69.849557211868);
      doubleArray2[1] = 2.0;
      doubleArray2[2] = (double) 7;
      doubleArray2[3] = (double) 2;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 3;
      doubleArray3[1] = (double) 3;
      doubleArray3[2] = (double) 3;
      doubleArray3[3] = (double) 0;
      doubleArray3[4] = (double) 4;
      doubleArray3[5] = (double) 1238;
      doubleArray3[6] = (double) 0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (double) 0;
      doubleArray4[1] = (double) 1;
      doubleArray4[2] = (double) 2958465;
      doubleArray4[3] = 1982.756877;
      doubleArray4[4] = (double) 3;
      doubleArray4[5] = 1.7976931348623157E308;
      doubleArray4[6] = (double) 3;
      doubleArray4[7] = (double) 2;
      doubleArray4[8] = (double) 7;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = (double) 0;
      doubleArray5[1] = (-1.0);
      doubleArray5[2] = 1.7976931348623157E308;
      doubleArray5[3] = (double) 4;
      doubleArray0[4] = doubleArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(5, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 3);
      assertNotNull(pieDataset0);
      assertEquals(5, doubleArray0.length);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) (-69.849557211868), 2.0);
      assertNotNull(pieDataset1);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertEquals(5, doubleArray0.length);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Vector<Float> vector0 = new Vector<Float>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      boolean boolean0 = true;
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[][] doubleArray0 = new double[7][4];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-886.0);
      doubleArray1[1] = (-1078.1406359);
      doubleArray1[2] = (-9999.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-886.0);
      doubleArray2[1] = (-1078.1406359);
      doubleArray2[2] = (-1078.1406359);
      doubleArray2[3] = (-886.0);
      doubleArray2[4] = (-9999.0);
      doubleArray2[5] = (-886.0);
      doubleArray2[6] = (-886.0);
      doubleArray2[7] = (-886.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = Double.POSITIVE_INFINITY;
      doubleArray3[1] = (-1078.1406359);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = Double.POSITIVE_INFINITY;
      doubleArray4[1] = (-9999.0);
      doubleArray4[2] = (-9999.0);
      doubleArray4[3] = (-886.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = (-886.0);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      
      doubleArray6[0] = (-1078.1406359);
      doubleArray6[1] = (-9999.0);
      doubleArray6[2] = Double.POSITIVE_INFINITY;
      doubleArray6[3] = Double.POSITIVE_INFINITY;
      doubleArray6[4] = Double.POSITIVE_INFINITY;
      doubleArray6[5] = Double.POSITIVE_INFINITY;
      doubleArray6[6] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      
      doubleArray7[0] = (-886.0);
      doubleArray0[6] = doubleArray7;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean0 = linkedList0.add(defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(linkedList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      ArrayList<DefaultIntervalCategoryDataset> arrayList0 = new ArrayList<DefaultIntervalCategoryDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) matrixSeriesCollection0, (List) linkedList0, range0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, doubleArray0.length);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      XYDataset xYDataset0 = null;
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = defaultStatisticalCategoryDataset0.getRangeBounds(true);
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, (List) stack0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, (-2784));
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, double0, 0.01);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Short short0 = new Short((short) (-3699));
      assertNotNull(short0);
      assertEquals((short) (-3699), (short)short0);
      
      Short short1 = new Short((short) (-777));
      assertNotNull(short1);
      assertEquals((short) (-777), (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      boolean boolean0 = stack0.add(short1);
      assertFalse(stack0.contains((short) (-3699)));
      assertTrue(stack0.contains(short1));
      assertFalse(stack0.isEmpty());
      assertEquals("[-777]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(boolean0);
      assertFalse(short1.equals((Object)short0));
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, vector0, true);
      assertNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) vector0, true);
      assertNull(range1);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) jDBCCategoryDataset0, (Comparable) short1);
      assertNotNull(pieDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertFalse(short1.equals((Object)short0));
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) short1, (double) (short) (-3699), (-11));
      assertNotNull(pieDataset1);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertFalse(short1.equals((Object)short0));
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      
      PieDataset pieDataset2 = DatasetUtilities.createConsolidatedPieDataset(pieDataset1, (Comparable) short1, 1130.06);
      assertNotNull(pieDataset2);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotSame(pieDataset0, pieDataset2);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(pieDataset1, pieDataset2);
      assertNotSame(pieDataset2, pieDataset0);
      assertNotSame(pieDataset2, pieDataset1);
      assertFalse(short1.equals((Object)short0));
      assertFalse(pieDataset0.equals((Object)pieDataset1));
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertFalse(pieDataset2.equals((Object)pieDataset0));
      assertTrue(pieDataset2.equals((Object)pieDataset1));
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      
      Short short0 = new Short((short) (-3699));
      assertNotNull(short0);
      assertEquals((short) (-3699), (short)short0);
      
      MockDate mockDate0 = new MockDate((-1), 2404, (short) (-777));
      assertNotNull(mockDate0);
      
      Day day0 = new Day(mockDate0);
      assertNotNull(day0);
      assertEquals("Thu Mar 14 00:00:00 GMT 2097", mockDate0.toString());
      assertEquals(4014057600000L, day0.getLastMillisecond());
      assertEquals(4014057600000L, day0.getFirstMillisecond());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultKeyedValues2DDataset0, tableOrder0, (-2874));
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-2874), categoryToPieDataset0.getExtractIndex());
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) short0, (double) (-2874), (int) (short) (-777));
      assertNotNull(pieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-2874), categoryToPieDataset0.getExtractIndex());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(pieDataset0);
      assertNotNull(defaultPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-2874), categoryToPieDataset0.getExtractIndex());
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) short0, Double.NEGATIVE_INFINITY);
      assertNotNull(pieDataset1);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-2874), categoryToPieDataset0.getExtractIndex());
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset1);
      assertNotSame(pieDataset1, defaultPieDataset0);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertTrue(pieDataset1.equals((Object)defaultPieDataset0));
      
      PieDataset pieDataset2 = DatasetUtilities.createConsolidatedPieDataset(pieDataset1, (Comparable) short0, (double) (-1));
      assertNotNull(pieDataset2);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-2874), categoryToPieDataset0.getExtractIndex());
      assertNotSame(pieDataset0, pieDataset2);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(defaultPieDataset0, pieDataset2);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset1);
      assertNotSame(pieDataset1, defaultPieDataset0);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(pieDataset1, pieDataset2);
      assertNotSame(pieDataset2, defaultPieDataset0);
      assertNotSame(pieDataset2, pieDataset0);
      assertNotSame(pieDataset2, pieDataset1);
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertTrue(pieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(pieDataset2.equals((Object)defaultPieDataset0));
      assertTrue(pieDataset2.equals((Object)pieDataset1));
      assertTrue(pieDataset2.equals((Object)pieDataset0));
      
      PieDataset pieDataset3 = DatasetUtilities.createConsolidatedPieDataset(pieDataset1, (Comparable) short0, (double) (-2874), (int) (short) (-3699));
      assertNotNull(pieDataset3);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-2874), categoryToPieDataset0.getExtractIndex());
      assertNotSame(pieDataset0, pieDataset2);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset0, pieDataset3);
      assertNotSame(defaultPieDataset0, pieDataset2);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset3);
      assertNotSame(defaultPieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset3);
      assertNotSame(pieDataset1, defaultPieDataset0);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(pieDataset1, pieDataset2);
      assertNotSame(pieDataset3, defaultPieDataset0);
      assertNotSame(pieDataset3, pieDataset2);
      assertNotSame(pieDataset3, pieDataset0);
      assertNotSame(pieDataset3, pieDataset1);
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset0.equals((Object)pieDataset2));
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset2));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset1.equals((Object)pieDataset2));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertTrue(pieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(pieDataset3.equals((Object)pieDataset2));
      assertTrue(pieDataset3.equals((Object)defaultPieDataset0));
      assertTrue(pieDataset3.equals((Object)pieDataset1));
      assertTrue(pieDataset3.equals((Object)pieDataset0));
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset1);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-2874), categoryToPieDataset0.getExtractIndex());
      assertNotSame(pieDataset0, pieDataset2);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset0, pieDataset3);
      assertNotSame(defaultPieDataset0, pieDataset2);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset3);
      assertNotSame(defaultPieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset3);
      assertNotSame(pieDataset1, defaultPieDataset0);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(pieDataset1, pieDataset2);
      assertTrue(boolean0);
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset0.equals((Object)pieDataset3));
      assertTrue(pieDataset0.equals((Object)pieDataset2));
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset2));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset1));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset3));
      assertTrue(pieDataset1.equals((Object)pieDataset2));
      assertTrue(pieDataset1.equals((Object)pieDataset3));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertTrue(pieDataset1.equals((Object)defaultPieDataset0));
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(825);
      assertNotNull(serialDate0);
      assertEquals(6, serialDate0.getDayOfWeek());
      assertEquals(1902, serialDate0.getYYYY());
      assertNull(serialDate0.getDescription());
      assertEquals(825, serialDate0.toSerial());
      assertEquals(4, serialDate0.getDayOfMonth());
      assertEquals(4, serialDate0.getMonth());
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Number[][] numberArray0 = new Number[1][0];
      Number[] numberArray1 = new Number[6];
      numberArray1[0] = (Number) 4;
      numberArray1[1] = (Number) 4;
      numberArray1[2] = (Number) 4;
      numberArray1[1] = (Number) (-1);
      numberArray1[4] = (Number) 7;
      numberArray1[5] = (Number) 1;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Duplicate items in 'rowKeys'.", "Duplicate items in 'rowKeys'.", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      SerialDate serialDate1 = SerialDate.addDays(3, serialDate0);
      assertNotNull(serialDate1);
      assertEquals(6, serialDate0.getDayOfWeek());
      assertEquals(1902, serialDate0.getYYYY());
      assertNull(serialDate0.getDescription());
      assertEquals(825, serialDate0.toSerial());
      assertEquals(4, serialDate0.getDayOfMonth());
      assertEquals(4, serialDate0.getMonth());
      assertNull(serialDate1.getDescription());
      assertEquals(828, serialDate1.toSerial());
      assertEquals(1902, serialDate1.getYYYY());
      assertEquals(7, serialDate1.getDayOfMonth());
      assertEquals(4, serialDate1.getMonth());
      assertEquals(2, serialDate1.getDayOfWeek());
      assertNotSame(serialDate0, serialDate1);
      assertNotSame(serialDate1, serialDate0);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertFalse(serialDate1.equals((Object)serialDate0));
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      assertNotNull(range0);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(7.0, range0.getUpperBound(), 0.01);
      assertEquals(3.0, range0.getCentralValue(), 0.01);
      assertEquals(8.0, range0.getLength(), 0.01);
      assertEquals(1, numberArray0.length);
      
      Range range1 = DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      assertNotNull(range1);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertEquals(7.0, range1.getUpperBound(), 0.01);
      assertEquals(3.0, range1.getCentralValue(), 0.01);
      assertEquals(8.0, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertEquals(1, numberArray0.length);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][0];
      Number[] numberArray1 = new Number[3];
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer0);
      assertEquals(100, (int)integer0);
      
      numberArray1[0] = (Number) integer0;
      numberArray0[0] = numberArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("1F0R%Rvo%:lJ<", "1F0R%Rvo%:lJ<", numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(1, numberArray0.length);
      
      defaultCategoryDataset0.clear();
      assertEquals(1, numberArray0.length);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(xIntervalSeriesCollection0);
      assertNull(range0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, false);
      assertNull(range1);
      assertEquals(1, numberArray0.length);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = 9999;
      MockDate mockDate0 = new MockDate((-1), (-3279), (-3279), (-1), 9999);
      assertNotNull(mockDate0);
      
      Object object0 = mockDate0.clone();
      assertNotNull(object0);
      assertEquals("Fri Oct 14 21:39:00 GMT 1616", mockDate0.toString());
      assertEquals("Fri Oct 14 21:39:00 GMT 1616", object0.toString());
      assertNotSame(mockDate0, object0);
      assertNotSame(object0, mockDate0);
      assertTrue(object0.equals((Object)mockDate0));
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      
      Year year0 = new Year(mockDate0, timeZone0, locale0);
      assertNotNull(year0);
      assertEquals("Fri Oct 14 21:39:00 GMT 1616", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals((-11146299660000L), year0.getFirstMillisecond());
      assertEquals(1616, year0.getYear());
      assertEquals(1616L, year0.getSerialIndex());
      assertEquals("1616", year0.toString());
      assertEquals((-11146299660000L), year0.getLastMillisecond());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertTrue(mockDate0.equals((Object)object0));
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0);
      assertNotNull(timePeriodValues0);
      assertEquals("Fri Oct 14 21:39:00 GMT 1616", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals((-11146299660000L), year0.getFirstMillisecond());
      assertEquals(1616, year0.getYear());
      assertEquals(1616L, year0.getSerialIndex());
      assertEquals("1616", year0.toString());
      assertEquals((-11146299660000L), year0.getLastMillisecond());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertTrue(mockDate0.equals((Object)object0));
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals("Fri Oct 14 21:39:00 GMT 1616", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals((-11146299660000L), year0.getFirstMillisecond());
      assertEquals(1616, year0.getYear());
      assertEquals(1616L, year0.getSerialIndex());
      assertEquals("1616", year0.toString());
      assertEquals((-11146299660000L), year0.getLastMillisecond());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertTrue(mockDate0.equals((Object)object0));
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(timePeriodValuesCollection0);
      assertNotNull(number0);
      assertEquals("Fri Oct 14 21:39:00 GMT 1616", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals((-11146299660000L), year0.getFirstMillisecond());
      assertEquals(1616, year0.getYear());
      assertEquals(1616L, year0.getSerialIndex());
      assertEquals("1616", year0.toString());
      assertEquals((-11146299660000L), year0.getLastMillisecond());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotSame(mockDate0, object0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(Double.NaN, number0);
      assertTrue(mockDate0.equals((Object)object0));
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) year0, (-395.298531696017), (-9999));
      assertNotNull(pieDataset0);
      assertEquals("Fri Oct 14 21:39:00 GMT 1616", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals((-11146299660000L), year0.getFirstMillisecond());
      assertEquals(1616, year0.getYear());
      assertEquals(1616L, year0.getSerialIndex());
      assertEquals("1616", year0.toString());
      assertEquals((-11146299660000L), year0.getLastMillisecond());
      assertNotSame(mockDate0, object0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertTrue(mockDate0.equals((Object)object0));
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals("Fri Oct 14 21:39:00 GMT 1616", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals((-11146299660000L), year0.getFirstMillisecond());
      assertEquals(1616, year0.getYear());
      assertEquals(1616L, year0.getSerialIndex());
      assertEquals("1616", year0.toString());
      assertEquals((-11146299660000L), year0.getLastMillisecond());
      assertNotSame(mockDate0, object0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(0.0, double0, 0.01);
      assertTrue(mockDate0.equals((Object)object0));
      
      TableXYDataset tableXYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1090, 1090);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(1089, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      
      Vector<Float> vector0 = new Vector<Float>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      vector0.setSize(1090);
      assertFalse(vector0.isEmpty());
      assertEquals(1090, vector0.capacity());
      assertEquals(1090, vector0.size());
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, vector0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      assertNotNull(serialDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(41684, serialDate0.toSerial());
      assertEquals(2014, serialDate0.getYYYY());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      assertEquals(14, serialDate0.getDayOfMonth());
      assertEquals(2, serialDate0.getMonth());
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 5, 3, 3, 3, 1);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      XYSeries xYSeries0 = new XYSeries(serialDate0, true);
      assertNotNull(xYSeries0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(41684, serialDate0.toSerial());
      assertEquals(2014, serialDate0.getYYYY());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      assertEquals(14, serialDate0.getDayOfMonth());
      assertEquals(2, serialDate0.getMonth());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((double) 2, (double) 0);
      assertNull(xYDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(41684, serialDate0.toSerial());
      assertEquals(2014, serialDate0.getYYYY());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      assertEquals(14, serialDate0.getDayOfMonth());
      assertEquals(2, serialDate0.getMonth());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(2.0, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(41684, serialDate0.toSerial());
      assertEquals(2014, serialDate0.getYYYY());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      assertEquals(14, serialDate0.getDayOfMonth());
      assertEquals(2, serialDate0.getMonth());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(2.0, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      
      DomainOrder domainOrder0 = xYSeriesCollection0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(41684, serialDate0.toSerial());
      assertEquals(2014, serialDate0.getYYYY());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      assertEquals(14, serialDate0.getDayOfMonth());
      assertEquals(2, serialDate0.getMonth());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(2.0, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals("DomainOrder.ASCENDING", domainOrder0.toString());
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(41684, serialDate0.toSerial());
      assertEquals(2014, serialDate0.getYYYY());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      assertEquals(14, serialDate0.getDayOfMonth());
      assertEquals(2, serialDate0.getMonth());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(2.0, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      
      Stack<CategoryTableXYDataset> stack1 = new Stack<CategoryTableXYDataset>();
      assertNotNull(stack1);
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack1, true);
      assertNull(range1);
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[][] doubleArray0 = new double[13][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(13, doubleArray0.length);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (KeyToGroupMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1187);
      assertNotNull(spreadsheetDate0);
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1187, spreadsheetDate0.toSerial());
      assertEquals(4, spreadsheetDate0.getMonth());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      
      Short short0 = new Short((short)1900);
      assertNotNull(short0);
      assertEquals((short)1900, (short)short0);
      
      boolean boolean0 = spreadsheetDate0.equals(short0);
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1187, spreadsheetDate0.toSerial());
      assertEquals(4, spreadsheetDate0.getMonth());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertFalse(boolean0);
      
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, false);
      assertNotNull(xYSeries0);
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1187, spreadsheetDate0.toSerial());
      assertEquals(4, spreadsheetDate0.getMonth());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((-688.8987561752), 169.4);
      assertNull(xYDataItem0);
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1187, spreadsheetDate0.toSerial());
      assertEquals(4, spreadsheetDate0.getMonth());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(169.4, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertEquals(169.4, xYSeries0.getMaxY(), 0.01);
      assertEquals((-688.8987561752), xYSeries0.getMaxX(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals((-688.8987561752), xYSeries0.getMinX(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1187, spreadsheetDate0.toSerial());
      assertEquals(4, spreadsheetDate0.getMonth());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(169.4, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertEquals(169.4, xYSeries0.getMaxY(), 0.01);
      assertEquals((-688.8987561752), xYSeries0.getMaxX(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals((-688.8987561752), xYSeries0.getMinX(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      
      DomainOrder domainOrder0 = xYSeriesCollection0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1187, spreadsheetDate0.toSerial());
      assertEquals(4, spreadsheetDate0.getMonth());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(169.4, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertEquals(169.4, xYSeries0.getMaxY(), 0.01);
      assertEquals((-688.8987561752), xYSeries0.getMaxX(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals((-688.8987561752), xYSeries0.getMinX(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      assertNotNull(range0);
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1187, spreadsheetDate0.toSerial());
      assertEquals(4, spreadsheetDate0.getMonth());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(169.4, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertEquals(169.4, xYSeries0.getMaxY(), 0.01);
      assertEquals((-688.8987561752), xYSeries0.getMaxX(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals((-688.8987561752), xYSeries0.getMinX(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(169.4, range0.getLowerBound(), 0.01);
      assertEquals(169.4, range0.getCentralValue(), 0.01);
      assertEquals(169.4, range0.getUpperBound(), 0.01);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "The number of row keys does not match the number of rows in the data array.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) stack0, false);
      assertNull(range1);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(3, doubleArray0.length);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, (-1));
      assertNotNull(xYBarDataset0);
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1187, spreadsheetDate0.toSerial());
      assertEquals(4, spreadsheetDate0.getMonth());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(169.4, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertEquals(169.4, xYSeries0.getMaxY(), 0.01);
      assertEquals((-688.8987561752), xYSeries0.getMaxX(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals((-688.8987561752), xYSeries0.getMinX(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals((-1.0), xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(xYBarDataset0);
      assertNotNull(number0);
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1187, spreadsheetDate0.toSerial());
      assertEquals(4, spreadsheetDate0.getMonth());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(169.4, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertEquals(169.4, xYSeries0.getMaxY(), 0.01);
      assertEquals((-688.8987561752), xYSeries0.getMaxX(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals((-688.8987561752), xYSeries0.getMinX(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals((-1.0), xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals((-688.3987561752), number0);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, (List) stack0, range0, false);
      assertNull(range2);
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1187, spreadsheetDate0.toSerial());
      assertEquals(4, spreadsheetDate0.getMonth());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(169.4, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertEquals(169.4, xYSeries0.getMaxY(), 0.01);
      assertEquals((-688.8987561752), xYSeries0.getMaxX(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals((-688.8987561752), xYSeries0.getMinX(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(169.4, range0.getLowerBound(), 0.01);
      assertEquals(169.4, range0.getCentralValue(), 0.01);
      assertEquals(169.4, range0.getUpperBound(), 0.01);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      XYSeries xYSeries0 = new XYSeries("1F0R%Rvo%:lJ<", false);
      assertNotNull(xYSeries0);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYSeriesCollection0, false);
      assertNotNull(intervalXYDelegate0);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      
      xYSeriesCollection0.removeChangeListener(intervalXYDelegate0);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      assertNull(range0);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      Comparable<XYIntervalSeriesCollection>[] comparableArray0 = (Comparable<XYIntervalSeriesCollection>[]) Array.newInstance(Comparable.class, 1);
      double[][] doubleArray0 = new double[0][8];
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Comparable<DefaultHighLowDataset>[] comparableArray0 = (Comparable<DefaultHighLowDataset>[]) Array.newInstance(Comparable.class, 9);
      SerialDate serialDate0 = SerialDate.createInstance(1804);
      assertNotNull(serialDate0);
      assertEquals(1904, serialDate0.getYYYY());
      assertEquals(1804, serialDate0.toSerial());
      assertEquals(12, serialDate0.getMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(8, serialDate0.getDayOfMonth());
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      
      Day day0 = new Day(serialDate0);
      assertNotNull(day0);
      assertEquals(1904, serialDate0.getYYYY());
      assertEquals(1804, serialDate0.toSerial());
      assertEquals(12, serialDate0.getMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(8, serialDate0.getDayOfMonth());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      
      comparableArray0[2] = (Comparable<DefaultHighLowDataset>) day0;
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      
      comparableArray0[5] = (Comparable<DefaultHighLowDataset>) month0;
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      MatrixSeries matrixSeries0 = new MatrixSeries("Series 1", 1199, 1);
      assertNotNull(matrixSeries0);
      assertEquals(1199, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1199, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(1199, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1199, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertEquals(1199, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1199, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(1198.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(599.0, range0.getCentralValue(), 0.01);
      assertEquals(1198.0, range0.getUpperBound(), 0.01);
      
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, (List) vector0, range0, true);
      assertNull(range1);
      assertEquals(1199, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1199, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(1198.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(599.0, range0.getCentralValue(), 0.01);
      assertEquals(1198.0, range0.getUpperBound(), 0.01);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      
      Minute minute0 = Minute.parseMinute("}ZS'9>aA");
      assertNull(minute0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, (Comparable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("1F0R%Rvo%:lJ<", true);
      assertNotNull(xYSeries0);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      
      XYSeries xYSeries1 = new XYSeries("1F0R%Rvo%:lJ<", false, true);
      assertNotNull(xYSeries1);
      assertTrue(xYSeries1.getNotify());
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertEquals(0, xYSeries1.getItemCount());
      assertFalse(xYSeries1.getAutoSort());
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertNull(xYSeries1.getDescription());
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      
      XYDataItem xYDataItem0 = xYSeries1.addOrUpdate((-729.06891075), (-729.06891075));
      assertNull(xYDataItem0);
      assertTrue(xYSeries1.getNotify());
      assertEquals(1, xYSeries1.getItemCount());
      assertEquals((-729.06891075), xYSeries1.getMaxY(), 0.01);
      assertFalse(xYSeries1.getAutoSort());
      assertEquals((-729.06891075), xYSeries1.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertEquals((-729.06891075), xYSeries1.getMinY(), 0.01);
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals((-729.06891075), xYSeries1.getMinX(), 0.01);
      assertNull(xYSeries1.getDescription());
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYSeriesCollection0, true);
      assertNotNull(intervalXYDelegate0);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      
      xYSeriesCollection0.removeChangeListener((DatasetChangeListener) null);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertNotSame(xYSeries0, xYSeries1);
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertNull(range0);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertNotSame(xYSeries0, xYSeries1);
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      
      LinkedList<DefaultHighLowDataset> linkedList0 = new LinkedList<DefaultHighLowDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      double[][] doubleArray0 = new double[6][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 9999;
      doubleArray1[1] = (-729.06891075);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-9999);
      doubleArray2[1] = (-1319.8);
      doubleArray2[2] = (-729.06891075);
      doubleArray2[3] = (-729.06891075);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) (-9999);
      doubleArray3[1] = (-1319.8);
      doubleArray3[2] = (-1319.8);
      doubleArray3[3] = 428.68948670105;
      doubleArray3[4] = (-1319.8);
      doubleArray3[5] = (double) 9999;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (double) 9999;
      doubleArray4[1] = (double) 9999;
      doubleArray4[2] = (-1319.8);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = (double) (-9999);
      doubleArray5[1] = (double) (-9999);
      doubleArray5[2] = (-729.06891075);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      
      doubleArray6[0] = (double) (-9999);
      doubleArray6[1] = (double) 9999;
      doubleArray6[2] = 1529.19;
      doubleArray0[5] = doubleArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 0);
      assertNotNull(pieDataset0);
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, doubleArray0.length);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) (-9999.0), 428.68948670105, 818);
      assertNotNull(pieDataset1);
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertEquals(6, doubleArray0.length);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      assertNotNull(quarter0);
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      
      double[][] doubleArray0 = new double[4][4];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 4;
      doubleArray1[1] = (double) 4;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = (double) 4;
      doubleArray2[2] = (double) 4;
      doubleArray2[3] = (double) 4;
      doubleArray2[4] = (double) 4;
      doubleArray2[5] = (double) 1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 1;
      doubleArray3[1] = (-1.0);
      doubleArray3[2] = (double) 1;
      doubleArray3[3] = (double) 4;
      doubleArray3[4] = (double) 1;
      doubleArray3[5] = (double) 1;
      doubleArray3[6] = (double) 4;
      doubleArray3[7] = (double) 1;
      doubleArray3[8] = (-1.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, doubleArray0.length);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[][] doubleArray0 = new double[18][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(18, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(18, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(18, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(18, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(18, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, number0);
      assertEquals(18, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 158);
      assertNotNull(categoryToPieDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(18, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(18, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(158, categoryToPieDataset0.getExtractIndex());
      assertEquals(18, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(6.283185307179586, 6.283185307179586);
      assertNotNull(lineFunction2D0);
      assertEquals(6.283185307179586, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(6.283185307179586, lineFunction2D0.getSlope(), 0.01);
      
      Hour hour0 = new Hour();
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, (-526.70579), 6.283185307179586, 2, hour0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(6.283185307179586, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(6.283185307179586, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      assertNotNull(range0);
      assertEquals(6.283185307179586, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(6.283185307179586, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(3348.8684985387736, range0.getLength(), 0.01);
      assertEquals((-1628.6726463578498), range0.getCentralValue(), 0.01);
      assertEquals(45.76160291153688, range0.getUpperBound(), 0.01);
      assertEquals((-3303.1068956272366), range0.getLowerBound(), 0.01);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      DomainOrder domainOrder0 = defaultTableXYDataset0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      int int0 = hour0.compareTo(defaultMultiValueCategoryDataset0);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(1, int0);
      
      XYSeriesCollection xYSeriesCollection1 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection1);
      assertEquals(1.0, xYSeriesCollection1.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection1.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection1.getIntervalPositionFactor(), 0.01);
      assertEquals(0, xYSeriesCollection1.getSeriesCount());
      assertFalse(xYSeriesCollection1.equals((Object)xYSeriesCollection0));
      
      defaultTableXYDataset0.setSelectionState(xYSeriesCollection1);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection1.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection1.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection1.getIntervalPositionFactor(), 0.01);
      assertEquals(0, xYSeriesCollection1.getSeriesCount());
      assertNotSame(xYSeriesCollection1, xYSeriesCollection0);
      assertFalse(xYSeriesCollection1.equals((Object)xYSeriesCollection0));
      
      double double0 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 2);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      // Undeclared exception!
      try { 
        defaultKeyedValues2DDataset0.isSelected(2, 718);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      assertNotNull(serialDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(2014, serialDate0.getYYYY());
      assertNull(serialDate0.getDescription());
      assertEquals(41684, serialDate0.toSerial());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertEquals(14, serialDate0.getDayOfMonth());
      assertEquals(2, serialDate0.getMonth());
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      
      MockDate mockDate1 = new MockDate(193, (-1), 2958465, 1, 1072, 0);
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate1, 878.34614662672, (-450.90584294136755), 0.0, (-2.147483648E9), 7);
      assertNotNull(oHLCDataItem0);
      assertEquals("Sat Dec 01 18:52:00 GMT 10192", mockDate1.toString());
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[7];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate1, 1.5, 2, 2204.2198976811173, 3, 1);
      assertNotNull(oHLCDataItem1);
      assertEquals("Sat Dec 01 18:52:00 GMT 10192", mockDate1.toString());
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[6] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Sat Dec 01 18:52:00 GMT 10192", mockDate1.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(7, oHLCDataItemArray0.length);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      
      int int0 = defaultOHLCDataset0.indexOf(oHLCDataItem0);
      assertEquals("Sat Dec 01 18:52:00 GMT 10192", mockDate1.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotSame(mockDate1, mockDate0);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertEquals(0, int0);
      assertEquals(7, oHLCDataItemArray0.length);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals(2.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertEquals("Sat Dec 01 18:52:00 GMT 10192", mockDate1.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotSame(mockDate1, mockDate0);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertEquals(7, oHLCDataItemArray0.length);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertNotNull(number0);
      assertEquals("Sat Dec 01 18:52:00 GMT 10192", mockDate1.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotSame(mockDate1, mockDate0);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertEquals(2.5949028552E14, number0);
      assertEquals(7, oHLCDataItemArray0.length);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      
      MockDate mockDate0 = new MockDate(1070, 1070, 3477, 0, 3477, (-6));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1.0, 1.0, (-6), Double.POSITIVE_INFINITY, 1.0);
      assertNotNull(oHLCDataItem0);
      assertEquals("Mon Sep 07 09:56:54 GMT 3068", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[7];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Mon Sep 07 09:56:54 GMT 3068", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(7, oHLCDataItemArray0.length);
      
      int int0 = defaultOHLCDataset0.indexOf(oHLCDataItem0);
      assertEquals("Mon Sep 07 09:56:54 GMT 3068", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, int0);
      assertEquals(7, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals("Mon Sep 07 09:56:54 GMT 3068", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals((-2.5), range0.getCentralValue(), 0.01);
      assertEquals((-6.0), range0.getLowerBound(), 0.01);
      assertEquals(7.0, range0.getLength(), 0.01);
      assertEquals(7, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertNotNull(number0);
      assertEquals("Mon Sep 07 09:56:54 GMT 3068", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3.4671146214E13, number0);
      assertEquals(7, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1587.0);
      doubleArray1[1] = 0.5;
      doubleArray1[2] = 4263.152226;
      doubleArray1[3] = 43.2166745873;
      doubleArray1[4] = 1230.0058;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1587.0);
      doubleArray2[1] = 0.5;
      doubleArray2[2] = (-1587.0);
      doubleArray2[3] = 43.2166745873;
      doubleArray2[4] = (-1587.0);
      doubleArray2[5] = (-1362.8986649);
      doubleArray2[6] = 2512.567898724;
      doubleArray2[7] = 4263.152226;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals((-1587.0), range0.getLowerBound(), 0.01);
      assertEquals(5850.152226, range0.getLength(), 0.01);
      assertEquals(1338.076113, range0.getCentralValue(), 0.01);
      assertEquals(4263.152226, range0.getUpperBound(), 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      assertNotNull(serialDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(41684, serialDate0.toSerial());
      assertEquals(2, serialDate0.getMonth());
      assertEquals(14, serialDate0.getDayOfMonth());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertEquals(2014, serialDate0.getYYYY());
      assertNull(serialDate0.getDescription());
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 5, 3, 3, 3, 1);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 1;
      doubleArray3[1] = (double) 1;
      doubleArray3[2] = (double) 7;
      doubleArray3[3] = (double) 3;
      doubleArray3[4] = (double) 7;
      doubleArray3[5] = 1.0;
      doubleArray3[6] = (double) 1;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (double) 0;
      doubleArray4[1] = (double) 3;
      doubleArray4[2] = (double) 1900;
      doubleArray4[3] = (double) 4;
      doubleArray4[4] = (double) 2;
      doubleArray4[5] = (double) 4;
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      assertNotNull(serialDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(41684, serialDate0.toSerial());
      assertEquals(2, serialDate0.getMonth());
      assertEquals(14, serialDate0.getDayOfMonth());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      assertEquals(2014, serialDate0.getYYYY());
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.SUNDAY);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 5, 3, 3, 3, 1);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(6, oHLCDataItemArray0.length);
      
      SynthColorChooserUI synthColorChooserUI0 = new SynthColorChooserUI();
      assertNotNull(synthColorChooserUI0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(6, oHLCDataItemArray0.length);
      
      boolean boolean0 = defaultOHLCDataset0.hasListener(synthColorChooserUI0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(boolean0);
      assertEquals(6, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(3.0, range1.getLowerBound(), 0.01);
      assertEquals(3.0, range1.getCentralValue(), 0.01);
      assertEquals(3.0, range1.getUpperBound(), 0.01);
      assertNotSame(range1, range0);
      assertEquals(6, oHLCDataItemArray0.length);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      assertNotNull(serialDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertEquals(14, serialDate0.getDayOfMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(41684, serialDate0.toSerial());
      assertEquals(2, serialDate0.getMonth());
      assertEquals(2014, serialDate0.getYYYY());
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      
      Object object0 = mockDate0.clone();
      assertNotNull(object0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
      assertNotSame(mockDate0, object0);
      assertNotSame(object0, mockDate0);
      assertTrue(object0.equals((Object)mockDate0));
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 5, 3, 3, 3, 1);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertTrue(mockDate0.equals((Object)object0));
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 2745.0, 1, Double.POSITIVE_INFINITY, 1, 1.0);
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertTrue(mockDate0.equals((Object)object0));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      oHLCDataItemArray0[0] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(8, oHLCDataItemArray0.length);
      assertTrue(mockDate0.equals((Object)object0));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      SerialDate serialDate0 = SerialDate.createInstance(825);
      assertNotNull(serialDate0);
      assertEquals(4, serialDate0.getMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(825, serialDate0.toSerial());
      assertEquals(4, serialDate0.getDayOfMonth());
      assertEquals(1902, serialDate0.getYYYY());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, double0, 0.01);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      
      Short short0 = new Short((short) (-86));
      assertNotNull(short0);
      assertEquals((short) (-86), (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains(short0));
      assertEquals("[-86]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, stack0, true);
      assertNull(range0);
      assertTrue(stack0.contains(short0));
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("[-86]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      assertNull(range1);
      assertTrue(stack0.contains(short0));
      assertEquals("[-86]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      assertNotNull(serialDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(14, serialDate0.getDayOfMonth());
      assertEquals(2014, serialDate0.getYYYY());
      assertNull(serialDate0.getDescription());
      assertEquals(41684, serialDate0.toSerial());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertEquals(2, serialDate0.getMonth());
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      
      Stack<Short> stack1 = new Stack<Short>();
      assertNotNull(stack1);
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      assertNotNull(serialDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(2014, serialDate0.getYYYY());
      assertEquals(41684, serialDate0.toSerial());
      assertEquals(14, serialDate0.getDayOfMonth());
      assertEquals(2, serialDate0.getMonth());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1.0, (-569.44), 2958465, 0, 1.0);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1900, 1270.0, 2, 3, 3);
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      oHLCDataItemArray0[0] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-2085.0), (-1), (-1.7976931348623157E308), Double.POSITIVE_INFINITY, 455.41925807);
      assertNotNull(oHLCDataItem2);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[1] = oHLCDataItem2;
      oHLCDataItemArray0[2] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3, oHLCDataItemArray0.length);
      
      SynthColorChooserUI synthColorChooserUI0 = new SynthColorChooserUI();
      assertNotNull(synthColorChooserUI0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(3, oHLCDataItemArray0.length);
      
      boolean boolean0 = defaultOHLCDataset0.hasListener(synthColorChooserUI0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(boolean0);
      assertEquals(3, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-8.988465674311579E307), range1.getCentralValue(), 0.01);
      assertEquals(1.7976931348623157E308, range1.getLength(), 0.01);
      assertEquals(1270.0, range1.getUpperBound(), 0.01);
      assertEquals((-1.7976931348623157E308), range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertEquals(3, oHLCDataItemArray0.length);
      assertFalse(range1.equals((Object)range0));
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(boolean1);
      assertEquals(3, oHLCDataItemArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = timePeriodValuesCollection0.equals(linkedList0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(0, linkedList0.size());
      assertFalse(boolean0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timePeriodValuesCollection0);
      assertNull(range0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 759, 181);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(759, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(181, slidingCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = new Range((-2430.4951318236403), (-2430.4951318236403));
      assertNotNull(range0);
      assertEquals((-2430.4951318236403), range0.getCentralValue(), 0.01);
      assertEquals((-2430.4951318236403), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2430.4951318236403), range0.getUpperBound(), 0.01);
      
      LinkedList<DefaultTableModel> linkedList0 = new LinkedList<DefaultTableModel>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      MockDate mockDate0 = new MockDate(4, (-2146671955), 4);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-4288.237290562562), (-1844.2448259), (-2430.4951318236403), (-2146671955), (-2430.4951318236403));
      assertNotNull(oHLCDataItem0);
      assertEquals("Wed Jun 04 00:00:00 GMT 178887427", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      oHLCDataItemArray0[7] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Wed Jun 04 00:00:00 GMT 178887427", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(8, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range1);
      assertEquals("Wed Jun 04 00:00:00 GMT 178887427", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(586.2503059236403, range1.getLength(), 0.01);
      assertEquals((-2430.4951318236403), range1.getLowerBound(), 0.01);
      assertEquals((-2137.36997886182), range1.getCentralValue(), 0.01);
      assertEquals((-1844.2448259), range1.getUpperBound(), 0.01);
      assertNotSame(range1, range0);
      assertEquals(8, oHLCDataItemArray0.length);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      Date date0 = second0.getEnd();
      assertNotNull(date0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals("Fri Feb 14 20:21:22 GMT 2014", date0.toString());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      Second second1 = (Second)second0.next();
      assertNotNull(second1);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(22, second1.getSecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertFalse(second1.equals((Object)second0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      assertNotNull(serialDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(41684, serialDate0.toSerial());
      assertEquals(14, serialDate0.getDayOfMonth());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertEquals(2, serialDate0.getMonth());
      assertEquals(2014, serialDate0.getYYYY());
      assertNull(serialDate0.getDescription());
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 5, 3, 3, 3, 1);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 2.0, 2958465.0, 1.0, 1404.3703766248248, 7);
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-3569.9697), 2, 3, (-2.147483648E9), (-3569.9697));
      assertNotNull(oHLCDataItem2);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 0, 9999, 225.8378077268, 6, (-1));
      assertNotNull(oHLCDataItem3);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(6, oHLCDataItemArray0.length);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(2958464.0, range0.getLength(), 0.01);
      assertEquals(2958465.0, range0.getUpperBound(), 0.01);
      assertEquals(1479233.0, range0.getCentralValue(), 0.01);
      assertNotSame(oHLCDataItem0, oHLCDataItem3);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotSame(oHLCDataItem0, oHLCDataItem2);
      assertEquals(6, oHLCDataItemArray0.length);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      assertNotNull(serialDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(14, serialDate0.getDayOfMonth());
      assertEquals(2014, serialDate0.getYYYY());
      assertEquals(41684, serialDate0.toSerial());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      assertEquals(2, serialDate0.getMonth());
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(6, SerialDate.FRIDAY);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 5, 3, 3, 3, 1);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 2745.0, 1, Double.POSITIVE_INFINITY, 1, 1.0);
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      oHLCDataItemArray0[0] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(8, oHLCDataItemArray0.length);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      
      SynthColorChooserUI synthColorChooserUI0 = new SynthColorChooserUI();
      assertNotNull(synthColorChooserUI0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Number[] numberArray0 = new Number[3];
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer0);
      assertEquals(100, (int)integer0);
      
      numberArray0[0] = (Number) integer0;
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate(1949, 1949, (-59));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 583.887, 583.887, (-1750.24774486979), (-3472.9834), 423.0);
      assertNotNull(oHLCDataItem0);
      assertEquals("Sat Apr 02 00:00:00 GMT 4011", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      oHLCDataItemArray0[7] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Sat Apr 02 00:00:00 GMT 4011", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(8, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals(2334.1347448697898, range0.getLength(), 0.01);
      assertEquals((-1750.24774486979), range0.getLowerBound(), 0.01);
      assertEquals(583.887, range0.getUpperBound(), 0.01);
      assertEquals((-583.180372434895), range0.getCentralValue(), 0.01);
      assertEquals("Sat Apr 02 00:00:00 GMT 4011", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(8, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Comparable<DefaultHighLowDataset>[] comparableArray0 = (Comparable<DefaultHighLowDataset>[]) Array.newInstance(Comparable.class, 9);
      SerialDate serialDate0 = SerialDate.createInstance(1804);
      assertNotNull(serialDate0);
      assertEquals(1904, serialDate0.getYYYY());
      assertEquals(8, serialDate0.getDayOfMonth());
      assertEquals(12, serialDate0.getMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(1804, serialDate0.toSerial());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      
      Day day0 = new Day(serialDate0);
      assertNotNull(day0);
      assertEquals(1904, serialDate0.getYYYY());
      assertEquals(8, serialDate0.getDayOfMonth());
      assertEquals(12, serialDate0.getMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(1804, serialDate0.toSerial());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      
      comparableArray0[2] = (Comparable<DefaultHighLowDataset>) day0;
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      
      comparableArray0[5] = (Comparable<DefaultHighLowDataset>) month0;
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(7);
      assertNotNull(fixedMillisecond0);
      assertEquals(7L, fixedMillisecond0.getSerialIndex());
      assertEquals(7L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(7L, fixedMillisecond0.getLastMillisecond());
      assertEquals(7L, fixedMillisecond0.getFirstMillisecond());
      
      double[][] doubleArray0 = new double[5][1];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 3;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 1188.91747;
      doubleArray1[3] = (double) 1900;
      doubleArray1[4] = (double) 5;
      doubleArray1[5] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 2958465;
      doubleArray2[1] = (double) 9999;
      doubleArray2[2] = (double) 1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = (double) 4;
      doubleArray3[2] = (double) 1804;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (double) 2;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = (double) 4;
      doubleArray5[1] = (double) 0;
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, doubleArray0.length);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      assertNotNull(serialDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNull(serialDate0.getDescription());
      assertEquals(14, serialDate0.getDayOfMonth());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertEquals(41684, serialDate0.toSerial());
      assertEquals(2, serialDate0.getMonth());
      assertEquals(2014, serialDate0.getYYYY());
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      
      Instant instant0 = mockDate0.toInstant();
      assertNotNull(instant0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate1 = new MockDate();
      assertNotNull(mockDate1);
      assertTrue(mockDate1.equals((Object)mockDate0));
      
      mockDate0.setTime(0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotSame(mockDate0, mockDate1);
      assertFalse(mockDate0.equals((Object)mockDate1));
      
      Range range0 = defaultStatisticalCategoryDataset0.getRangeBounds(true);
      assertNull(range0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(7, 1075);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(1074, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, stack0, true);
      assertNull(range1);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1074, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertNull(range2);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries((Function2D) null, 4, 1, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      assertNotNull(serialDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      assertEquals(2014, serialDate0.getYYYY());
      assertEquals(41684, serialDate0.toSerial());
      assertEquals(2, serialDate0.getMonth());
      assertEquals(14, serialDate0.getDayOfMonth());
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-6917.307219604228), (-6917.307219604228), 4, 2.0, 1330.096);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      XYSeries xYSeries0 = new XYSeries(oHLCDataItem0, true, true);
      assertNotNull(xYSeries0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      
      boolean boolean0 = ((SpreadsheetDate) serialDate0).equals(xYSeries0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      assertEquals(2014, serialDate0.getYYYY());
      assertEquals(41684, serialDate0.toSerial());
      assertEquals(2, serialDate0.getMonth());
      assertEquals(14, serialDate0.getDayOfMonth());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertFalse(boolean0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3, oHLCDataItemArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (4.0) <= upper (-6917.307219604228).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      assertNotNull(serialDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      assertEquals(2014, serialDate0.getYYYY());
      assertEquals(41684, serialDate0.toSerial());
      assertEquals(2, serialDate0.getMonth());
      assertEquals(14, serialDate0.getDayOfMonth());
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(dateArray0[1], 1769.593, 3, 3, 3, 1);
      assertNotNull(oHLCDataItem0);
      assertEquals(2, dateArray0.length);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(dateArray0[0], 2745.0, 1, (-1), 1, 1.0);
      assertNotNull(oHLCDataItem1);
      assertEquals(2, dateArray0.length);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, dateArray0.length);
      assertEquals(1, oHLCDataItemArray0.length);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertEquals(2, dateArray0.length);
      assertEquals(1, oHLCDataItemArray0.length);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      MockDate mockDate0 = new MockDate((-1992), (-1992), (-1992));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1769.593, 1769.593, (-1992), 1769.593, (-1576.553398938));
      assertNotNull(oHLCDataItem0);
      assertEquals("Sat Jul 18 00:00:00 GMT 265", mockDate0.toString());
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 0.8, Double.POSITIVE_INFINITY, (-1583.4951318236403), 1.0, Double.NEGATIVE_INFINITY);
      assertNotNull(oHLCDataItem1);
      assertEquals("Sat Jul 18 00:00:00 GMT 265", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      oHLCDataItemArray0[0] = oHLCDataItem1;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-2703.78), Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, (-3964.197100082096), (-1992));
      assertNotNull(oHLCDataItem2);
      assertEquals("Sat Jul 18 00:00:00 GMT 265", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      oHLCDataItemArray0[3] = oHLCDataItem1;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Sat Jul 18 00:00:00 GMT 265", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(6, oHLCDataItemArray0.length);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals("Sat Jul 18 00:00:00 GMT 265", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals((-1992.0), range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertNotSame(oHLCDataItem0, oHLCDataItem2);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertEquals(6, oHLCDataItemArray0.length);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, doubleArray0.length);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(">", (String) null, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, doubleArray0.length);
      
      XYSeries xYSeries0 = new XYSeries("`", false);
      assertNotNull(xYSeries0);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate(1.7976931348623157E308, (double) (-231));
      assertNull(xYDataItem0);
      assertEquals(1.7976931348623157E308, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-231.0), xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(1.7976931348623157E308, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-231.0), xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(1.7976931348623157E308, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-231.0), xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(1.7976931348623157E308, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-231.0), xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      assertNotNull(range0);
      assertEquals(1.7976931348623157E308, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-231.0), xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(1.7976931348623157E308, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-231.0), xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-231.0), range0.getLowerBound(), 0.01);
      assertEquals((-231.0), range0.getUpperBound(), 0.01);
      assertEquals((-231.0), range0.getCentralValue(), 0.01);
      
      LinkedList<DefaultHighLowDataset> linkedList0 = new LinkedList<DefaultHighLowDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, false);
      assertNotNull(range1);
      assertEquals(1.7976931348623157E308, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-231.0), xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(1.7976931348623157E308, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-231.0), xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-231.0), range1.getLowerBound(), 0.01);
      assertEquals((-231.0), range1.getCentralValue(), 0.01);
      assertEquals((-231.0), range1.getUpperBound(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertFalse(stack0.contains((-231)));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, true);
      assertNull(range2);
      assertFalse(stack0.contains((-231)));
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, "cVlQi]5", "cVlQi]5");
      assertNotNull(timeSeries0);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("cVlQi]5", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("cVlQi]5", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("cVlQi]5", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("cVlQi]5", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, false);
      assertNull(range0);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("cVlQi]5", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("cVlQi]5", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      assertNotNull(date0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      MockDate mockDate0 = new MockDate(999, (-1606), (-1548), 2, (-5), 999);
      assertNotNull(mockDate0);
      
      boolean boolean0 = mockDate0.before(date0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("Sat Dec 03 02:11:39 GMT 2760", mockDate0.toString());
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-5);
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertNotNull(polynomialFunction2D0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-1548), 169.4, 999, date0);
      assertNotNull(xYSeries0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(169.4000000000001, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(999, xYSeries0.getItemCount());
      assertEquals((-1548.0), xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      mockDate0.setTime(0L);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      VectorSeriesCollection vectorSeriesCollection1 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection1);
      assertEquals(0, vectorSeriesCollection1.getSeriesCount());
      assertTrue(vectorSeriesCollection1.equals((Object)vectorSeriesCollection0));
      
      DomainOrder domainOrder0 = vectorSeriesCollection1.getDomainOrder();
      assertNotNull(domainOrder0);
      assertEquals(0, vectorSeriesCollection1.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      assertNotSame(vectorSeriesCollection1, vectorSeriesCollection0);
      assertTrue(vectorSeriesCollection1.equals((Object)vectorSeriesCollection0));
      
      DomainOrder domainOrder1 = vectorSeriesCollection1.getDomainOrder();
      assertNotNull(domainOrder1);
      assertEquals(0, vectorSeriesCollection1.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder1.toString());
      assertNotSame(vectorSeriesCollection1, vectorSeriesCollection0);
      assertSame(domainOrder1, domainOrder0);
      assertTrue(vectorSeriesCollection1.equals((Object)vectorSeriesCollection0));
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
      assertNull(range1);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("cVlQi]5", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("cVlQi]5", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(825);
      assertNotNull(serialDate0);
      assertEquals(1902, serialDate0.getYYYY());
      assertEquals(825, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertEquals(4, serialDate0.getDayOfMonth());
      assertEquals(4, serialDate0.getMonth());
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, (-1153));
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, double0, 0.01);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      
      Short short0 = new Short((short)12);
      assertNotNull(short0);
      assertEquals((short)12, (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains(short0));
      assertFalse(stack0.empty());
      assertEquals("[12]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, stack0, true);
      assertNull(range0);
      assertTrue(stack0.contains(short0));
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertFalse(stack0.empty());
      assertEquals("[12]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Number[][] numberArray0 = new Number[0][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, numberArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, true);
      assertNull(range1);
      assertTrue(stack0.contains(short0));
      assertFalse(stack0.empty());
      assertEquals("[12]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) histogramDataset0);
      assertNull(number0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      short short0 = (short) (-85);
      Short short1 = new Short((short) (-85));
      assertNotNull(short1);
      assertEquals((short) (-85), (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      boolean boolean0 = stack0.add(short1);
      assertTrue(stack0.contains(short1));
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[-85]", stack0.toString());
      assertEquals(1, stack0.size());
      assertTrue(boolean0);
      assertTrue(short1.equals((Object)short0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds((XYDataset) null, stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Short short0 = new Short((short)443);
      assertNotNull(short0);
      assertEquals((short)443, (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertFalse(stack0.contains((short)443));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Short short1 = new Short((short)6);
      assertNotNull(short1);
      assertEquals((short)6, (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      boolean boolean0 = stack0.add(short1);
      assertFalse(stack0.contains((short)443));
      assertTrue(stack0.contains((short)6));
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[6]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean0);
      assertFalse(short1.equals((Object)short0));
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(196, (-1465));
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals((-1466), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, stack0, true);
      assertNull(range0);
      assertFalse(stack0.contains((short)443));
      assertTrue(stack0.contains((short)6));
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[6]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals((-1466), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      assertNotNull(serialDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(41684, serialDate0.toSerial());
      assertEquals(2, serialDate0.getMonth());
      assertEquals(14, serialDate0.getDayOfMonth());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      assertEquals(2014, serialDate0.getYYYY());
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-6917.307219604228), (-6917.307219604228), 4, 2.0, 1330.096);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      XYSeries xYSeries0 = new XYSeries(oHLCDataItem0, true, true);
      assertNotNull(xYSeries0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      
      boolean boolean0 = ((SpreadsheetDate) serialDate0).equals(xYSeries0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(41684, serialDate0.toSerial());
      assertEquals(2, serialDate0.getMonth());
      assertEquals(14, serialDate0.getDayOfMonth());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      assertEquals(2014, serialDate0.getYYYY());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertFalse(boolean0);
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((double) 7, 2090.39);
      assertNull(xYDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(7.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(2090.39, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2090.39, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(7.0, xYSeries0.getMinX(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(7.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(2090.39, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2090.39, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(7.0, xYSeries0.getMinX(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(7.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(2090.39, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2090.39, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(7.0, xYSeries0.getMinX(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2090.39, range0.getLowerBound(), 0.01);
      assertEquals(2090.39, range0.getCentralValue(), 0.01);
      assertEquals(2090.39, range0.getUpperBound(), 0.01);
      
      LinkedList<DefaultHighLowDataset> linkedList0 = new LinkedList<DefaultHighLowDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      assertNotNull(serialDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(2, serialDate0.getMonth());
      assertEquals(2014, serialDate0.getYYYY());
      assertEquals(14, serialDate0.getDayOfMonth());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertEquals(41684, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 4;
      doubleArray1[2] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 2;
      doubleArray2[1] = (double) 2958465;
      doubleArray2[2] = 1529.19;
      doubleArray2[3] = (double) 3;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("2m]u", ";LR]Up7+E", doubleArray0);
      assertNotNull(categoryDataset0);
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertFalse(categoryDataset0.equals((Object)defaultCategoryDataset0));
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      assertEquals(2958469.0, number0);
      assertEquals(2, doubleArray0.length);
      assertFalse(categoryDataset0.equals((Object)defaultCategoryDataset0));
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2695, "Null 'f' argument.");
      assertNotNull(simpleTimeZone0);
      assertEquals("Null 'f' argument.", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(2695, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=Null 'f' argument.,offset=2695,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(2959999.19, range0.getLength(), 0.01);
      assertEquals(2959999.19, range0.getUpperBound(), 0.01);
      assertEquals(1479999.595, range0.getCentralValue(), 0.01);
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertFalse(categoryDataset0.equals((Object)defaultCategoryDataset0));
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      assertNotNull(serialDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(41684, serialDate0.toSerial());
      assertEquals(2, serialDate0.getMonth());
      assertEquals(2014, serialDate0.getYYYY());
      assertNull(serialDate0.getDescription());
      assertEquals(14, serialDate0.getDayOfMonth());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) 0;
      Object object0 = mockDate0.clone();
      assertNotNull(object0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
      assertNotSame(mockDate0, object0);
      assertNotSame(object0, mockDate0);
      assertTrue(object0.equals((Object)mockDate0));
      
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 1900;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(2, dateArray0.length);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, 2.0, 1900.0}, doubleArray0, 0.01);
      assertTrue(mockDate0.equals((Object)object0));
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      assertNotNull(number0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotSame(mockDate0, object0);
      assertEquals((-1.0), number0);
      assertEquals(2, dateArray0.length);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, 2.0, 1900.0}, doubleArray0, 0.01);
      assertTrue(mockDate0.equals((Object)object0));
      
      LinkedList<DefaultHighLowDataset> linkedList0 = new LinkedList<DefaultHighLowDataset>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(defaultHighLowDataset0));
      assertEquals(0, linkedList0.size());
      
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      System.setCurrentTimeMillis(1);
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      
      Number[][] numberArray0 = new Number[1][2];
      Number[] numberArray1 = new Number[8];
      numberArray1[0] = (Number) (-1);
      numberArray1[1] = (Number) 1;
      numberArray1[2] = (Number) 1;
      numberArray1[3] = (Number) 1;
      numberArray1[4] = (Number) 0;
      numberArray1[5] = (Number) 3;
      numberArray1[6] = number0;
      numberArray1[7] = (Number) 5;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, numberArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(9.0, range0.getUpperBound(), 0.01);
      assertEquals(4.0, range0.getCentralValue(), 0.01);
      assertEquals(1, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      assertNotNull(serialDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNull(serialDate0.getDescription());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertEquals(41684, serialDate0.toSerial());
      assertEquals(14, serialDate0.getDayOfMonth());
      assertEquals(2, serialDate0.getMonth());
      assertEquals(2014, serialDate0.getYYYY());
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(dateArray0[1], 1769.593, 3, 3, 3, 1);
      assertNotNull(oHLCDataItem0);
      assertEquals(2, dateArray0.length);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(dateArray0[0], 2745.0, 1, Double.POSITIVE_INFINITY, 1, 1.0);
      assertNotNull(oHLCDataItem1);
      assertEquals(2, dateArray0.length);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, dateArray0.length);
      assertEquals(1, oHLCDataItemArray0.length);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNull(range0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertEquals(2, dateArray0.length);
      assertEquals(1, oHLCDataItemArray0.length);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      assertNotNull(serialDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(2014, serialDate0.getYYYY());
      assertEquals(14, serialDate0.getDayOfMonth());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertEquals(2, serialDate0.getMonth());
      assertEquals(41684, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate1 = new MockDate();
      assertNotNull(mockDate1);
      assertTrue(mockDate1.equals((Object)mockDate0));
      
      mockDate1.setTime(0L);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertNotSame(mockDate1, mockDate0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      boolean boolean0 = false;
      String[] stringArray0 = new String[0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, stringArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate((-2521), (-1237), (-1237), 526, (-2521), (-2521));
      assertNotNull(mockDate0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset1);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      
      MockDate mockDate1 = new MockDate();
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      mockDate0.setTime(0L);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotSame(mockDate0, mockDate1);
      assertFalse(mockDate0.equals((Object)mockDate1));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset1, true);
      assertNull(range0);
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.0, 0.5, 942.478, (-569.44), (-569.44));
      assertNotNull(oHLCDataItem0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertFalse(mockDate0.equals((Object)mockDate1));
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate1, 0.5, (-1237), (-2521), 874.9113412, (-1002.8299710255));
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      assertFalse(mockDate0.equals((Object)mockDate1));
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, true);
      assertNotNull(range1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range1.getLength(), 0.01);
      assertEquals(6.9620464066E11, range1.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotSame(mockDate0, mockDate1);
      assertEquals(2, oHLCDataItemArray0.length);
      assertFalse(mockDate0.equals((Object)mockDate1));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset2 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset2);
      assertTrue(defaultStatisticalCategoryDataset2.equals((Object)defaultStatisticalCategoryDataset0));
      assertTrue(defaultStatisticalCategoryDataset2.equals((Object)defaultStatisticalCategoryDataset1));
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultStatisticalCategoryDataset2);
      assertNotSame(defaultStatisticalCategoryDataset2, defaultStatisticalCategoryDataset0);
      assertNotSame(defaultStatisticalCategoryDataset2, defaultStatisticalCategoryDataset1);
      assertTrue(boolean0);
      assertTrue(defaultStatisticalCategoryDataset2.equals((Object)defaultStatisticalCategoryDataset0));
      assertTrue(defaultStatisticalCategoryDataset2.equals((Object)defaultStatisticalCategoryDataset1));
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      assertNotNull(serialDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(41684, serialDate0.toSerial());
      assertEquals(14, serialDate0.getDayOfMonth());
      assertEquals(2, serialDate0.getMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertEquals(2014, serialDate0.getYYYY());
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-6917.307219604228), (-6917.307219604228), 4, 2.0, 1330.096);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1, (-3691.624122170921), 1529.19, 0, 1);
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[10];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(10, oHLCDataItemArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(boolean0);
      assertEquals(10, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      double[][] doubleArray0 = new double[7][3];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 825;
      doubleArray1[1] = (double) 825;
      doubleArray1[2] = (double) 825;
      doubleArray1[3] = (double) 825;
      doubleArray1[4] = (double) 825;
      doubleArray1[5] = (double) 825;
      doubleArray1[6] = (double) 825;
      doubleArray1[7] = (double) 825;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = categoryTableXYDataset0.getDomainBounds(false);
      assertNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertNull(number0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      Short short0 = new Short((short) (-85));
      assertNotNull(short0);
      assertEquals((short) (-85), (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains(short0));
      assertFalse(stack0.isEmpty());
      assertEquals("[-85]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertTrue(boolean0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(defaultXYZDataset0, linkedList0, false);
      assertNull(range1);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertEquals(0, linkedList0.size());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) stack0, false);
      assertNull(range2);
      assertTrue(stack0.contains(short0));
      assertFalse(stack0.isEmpty());
      assertEquals("[-85]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-1.2219292800088244E13);
      double double0 = (-8.5122996181E13);
      doubleArray1[1] = (-8.5122996181E13);
      doubleArray1[2] = (-249.14);
      doubleArray1[3] = (-450.90584294136755);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, doubleArray0.length);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      
      Locale locale1 = Locale.TAIWAN;
      assertNotNull(locale1);
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, doubleArray0.length);
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((DefaultBoxAndWhiskerCategoryDataset) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate((-2521), (-1237), (-1237), 526, (-2521), (-2521));
      assertNotNull(mockDate0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset1);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      
      MockDate mockDate1 = new MockDate();
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      mockDate0.setTime(0L);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotSame(mockDate0, mockDate1);
      assertFalse(mockDate0.equals((Object)mockDate1));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset1, true);
      assertNull(range0);
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      
      XYSeries xYSeries0 = new XYSeries(mockDate1, true, true);
      assertNotNull(xYSeries0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((-2430.2003739966285), (double) 526);
      assertNull(xYDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertEquals((-2430.2003739966285), xYSeries0.getMaxX(), 0.01);
      assertEquals(526.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(526.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-2430.2003739966285), xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertNotSame(mockDate1, mockDate0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertEquals((-2430.2003739966285), xYSeries0.getMaxX(), 0.01);
      assertEquals(526.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(526.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-2430.2003739966285), xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      assertNotNull(range1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertEquals((-2430.2003739966285), xYSeries0.getMaxX(), 0.01);
      assertEquals(526.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(526.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-2430.2003739966285), xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(526.0, range1.getCentralValue(), 0.01);
      assertEquals(526.0, range1.getLowerBound(), 0.01);
      assertEquals(526.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(mockDate1, mockDate0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      LinkedList<DefaultHighLowDataset> linkedList0 = new LinkedList<DefaultHighLowDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      double[][] doubleArray0 = new double[7][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("?$h8R&TIgA1f(7``,", "?$h8R&TIgA1f(7``,", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(7, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(7, doubleArray0.length);
      
      boolean boolean0 = true;
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) yIntervalSeriesCollection0, true);
      assertNull(range1);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range2 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range2);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotSame(range2, range0);
      assertEquals(7, doubleArray0.length);
      assertTrue(range2.equals((Object)range0));
      
      Range range3 = DatasetUtilities.iterateXYRangeBounds(yIntervalSeriesCollection0);
      assertNull(range3);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      int int0 = (-1665);
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-1665));
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-1665), categoryToPieDataset0.getExtractIndex());
      assertEquals(7, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      assertNotNull(serialDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertEquals(2014, serialDate0.getYYYY());
      assertNull(serialDate0.getDescription());
      assertEquals(41684, serialDate0.toSerial());
      assertEquals(14, serialDate0.getDayOfMonth());
      assertEquals(2, serialDate0.getMonth());
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-6917.307219604228), (-6917.307219604228), 4, 2.0, 1330.096);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1, (-3694.96938), 1529.19, 0, 1);
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[10];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem1;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(10, oHLCDataItemArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      jDBCCategoryDataset0.addValue((Number) integer0, (Comparable) integer0, (Comparable) "1F0R%Rvo%:lJ<");
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      XYSeries xYSeries0 = new XYSeries(integer0, true, false);
      assertNotNull(xYSeries0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      assertNull(range0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      LinkedList<DefaultHighLowDataset> linkedList0 = new LinkedList<DefaultHighLowDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) jDBCCategoryDataset0);
      assertNotNull(range1);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(400.0, range1.getCentralValue(), 0.01);
      assertEquals(400.0, range1.getUpperBound(), 0.01);
      assertEquals(400.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, doubleArray0.length);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      
      Stack<Short> stack1 = new Stack<Short>();
      assertNotNull(stack1);
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.equals((Object)stack0));
      
      Short short0 = new Short((short)2783);
      assertNotNull(short0);
      assertEquals((short)2783, (short)short0);
      
      boolean boolean0 = stack1.add(short0);
      assertTrue(stack1.contains(short0));
      assertFalse(stack1.isEmpty());
      assertEquals(1, stack1.size());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.empty());
      assertEquals("[2783]", stack1.toString());
      assertNotSame(stack1, stack0);
      assertTrue(boolean0);
      assertFalse(stack1.equals((Object)stack0));
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(209, 423);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(422, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      
      dynamicTimeSeriesCollection0.invalidateRangeInfo();
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(422, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, stack1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Short short0 = new Short((short)30);
      assertNotNull(short0);
      assertEquals((short)30, (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains(short0));
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[30]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean0);
      
      XYSeries xYSeries0 = new XYSeries(short0, true, true);
      assertNotNull(xYSeries0);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      xYSeries0.add((Number) short0, (Number) short0, true);
      assertTrue(xYSeries0.getNotify());
      assertEquals(30.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(30.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(30.0, xYSeries0.getMinY(), 0.01);
      assertEquals(30.0, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      
      Range range0 = new Range((short)30, (short)30);
      assertNotNull(range0);
      assertEquals(30.0, range0.getLowerBound(), 0.01);
      assertEquals(30.0, range0.getCentralValue(), 0.01);
      assertEquals(30.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Object[][] objectArray0 = new Object[0][8];
      Object[] objectArray1 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray1[0] = object0;
      objectArray1[1] = (Object) xYSeries0;
      objectArray1[2] = (Object) xYSeriesCollection0;
      objectArray1[3] = (Object) range0;
      objectArray1[4] = (Object) range0;
      objectArray1[5] = (Object) stack0;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray1);
      assertNotNull(defaultTableModel0);
      assertEquals(0, objectArray0.length);
      assertEquals(6, objectArray1.length);
      
      Stack<DefaultTableModel> stack1 = new Stack<DefaultTableModel>();
      assertNotNull(stack1);
      assertFalse(stack1.contains(defaultTableModel0));
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      
      boolean boolean1 = stack1.add(defaultTableModel0);
      assertTrue(stack1.contains(defaultTableModel0));
      assertFalse(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.isEmpty());
      assertEquals(1, stack1.size());
      assertTrue(boolean1);
      assertEquals(0, objectArray0.length);
      assertEquals(6, objectArray1.length);
      assertTrue(boolean1 == boolean0);
      
      Range range1 = Range.scale(range0, 1.0);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(30.0, range1.getUpperBound(), 0.01);
      assertEquals(30.0, range1.getCentralValue(), 0.01);
      assertEquals(30.0, range1.getLowerBound(), 0.01);
      assertEquals(30.0, range0.getLowerBound(), 0.01);
      assertEquals(30.0, range0.getCentralValue(), 0.01);
      assertEquals(30.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertNotSame(range0, range1);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) stack0, range0, true);
      assertNotNull(range2);
      assertTrue(stack0.contains((short)30));
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[30]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(xYSeries0.getNotify());
      assertEquals(30.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(30.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(30.0, xYSeries0.getMinY(), 0.01);
      assertEquals(30.0, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(30.0, range2.getLowerBound(), 0.01);
      assertEquals(30.0, range2.getCentralValue(), 0.01);
      assertEquals(30.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(30.0, range0.getLowerBound(), 0.01);
      assertEquals(30.0, range0.getCentralValue(), 0.01);
      assertEquals(30.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range0.equals((Object)range1));
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) xYSeriesCollection0);
      assertNotNull(number0);
      assertTrue(xYSeries0.getNotify());
      assertEquals(30.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(30.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(30.0, xYSeries0.getMinY(), 0.01);
      assertEquals(30.0, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(30.0, number0);
      
      Range range3 = DatasetUtilities.iterateToFindDomainBounds(xYSeriesCollection0, stack0, true);
      assertNotNull(range3);
      assertTrue(stack0.contains((short)30));
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[30]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(xYSeries0.getNotify());
      assertEquals(30.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(30.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(30.0, xYSeries0.getMinY(), 0.01);
      assertEquals(30.0, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, range3.getLength(), 0.01);
      assertEquals(30.0, range3.getCentralValue(), 0.01);
      assertEquals(30.5, range3.getUpperBound(), 0.01);
      assertEquals(29.5, range3.getLowerBound(), 0.01);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getStartYValue((short)30, (short)30);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 30, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      boolean boolean0 = timePeriodValuesCollection0.equals(jDBCXYDataset0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertFalse(boolean0);
      
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertNull(range0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      stack0.sort(comparator0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0);
      assertNotNull(range1);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, (List) stack0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      MockDate mockDate0 = new MockDate(3182, 32, 32, (-1), 3166, (-1));
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[7];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(1592, 1592, 1047, 3182, (-1067));
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      dateArray0[5] = (Date) mockDate1;
      dateArray0[6] = (Date) mockDate0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 9742.0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Sat Oct 04 03:45:59 GMT 5084", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(7, dateArray0.length);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {9742.0}, doubleArray0, 0.01);
      assertFalse(mockDate0.equals((Object)mockDate1));
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) histogramDataset0);
      assertNull(number0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      LinkedList<DefaultHighLowDataset> linkedList0 = new LinkedList<DefaultHighLowDataset>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(defaultHighLowDataset0));
      assertEquals(0, linkedList0.size());
      
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      System.setCurrentTimeMillis((-9999));
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      assertNotNull(serialDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(41684, serialDate0.toSerial());
      assertEquals(2, serialDate0.getMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertEquals(2014, serialDate0.getYYYY());
      assertEquals(14, serialDate0.getDayOfMonth());
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate1 = new MockDate();
      assertNotNull(mockDate1);
      assertTrue(mockDate1.equals((Object)mockDate0));
      
      mockDate1.setTime(1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertNotSame(mockDate1, mockDate0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      Short short0 = new Short((short) (-85));
      assertNotNull(short0);
      assertEquals((short) (-85), (short)short0);
      
      Stack<Short> stack1 = new Stack<Short>();
      assertNotNull(stack1);
      assertFalse(stack1.contains((short) (-85)));
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      
      Short short1 = new Short((short) (-85));
      assertNotNull(short1);
      assertEquals((short) (-85), (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      Second second1 = (Second)second0.next();
      assertNotNull(second1);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(22, second1.getSecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertFalse(second1.equals((Object)second0));
      
      double[][] doubleArray0 = new double[4][9];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 59;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 59;
      doubleArray1[3] = (double) 59;
      doubleArray1[4] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray0[3] = doubleArray4;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("Duplicate items in 'columnKeys'.", "Duplicate items in 'columnKeys'.", doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      Double double0 = (Double)DatasetUtilities.findMaximumStackedRangeValue(defaultCategoryDataset0);
      assertNotNull(double0);
      assertEquals(59.0, (double)double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-902), "Duplicate items in 'columnKeys'.");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-902), simpleTimeZone0.getRawOffset());
      assertEquals("Duplicate items in 'columnKeys'.", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=Duplicate items in 'columnKeys'.,offset=-902,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(3, 59, second1, simpleTimeZone0);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(22, second1.getSecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-902), simpleTimeZone0.getRawOffset());
      assertEquals("Duplicate items in 'columnKeys'.", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=Duplicate items in 'columnKeys'.,offset=-902,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(58, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertFalse(second0.equals((Object)second1));
      assertFalse(second1.equals((Object)second0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue(dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      double[][] doubleArray0 = new double[4][3];
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1238);
      assertNotNull(spreadsheetDate0);
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      
      Short short0 = new Short((short)1900);
      assertNotNull(short0);
      assertEquals((short)1900, (short)short0);
      
      boolean boolean0 = spreadsheetDate0.equals(short0);
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertFalse(boolean0);
      
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, false);
      assertNotNull(xYSeries0);
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((-688.8987561752), 169.4);
      assertNull(xYDataItem0);
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals((-688.8987561752), xYSeries0.getMaxX(), 0.01);
      assertEquals(169.4, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(169.4, xYSeries0.getMinY(), 0.01);
      assertEquals((-688.8987561752), xYSeries0.getMinX(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertEquals(1238, spreadsheetDate0.toSerial());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals((-688.8987561752), xYSeries0.getMaxX(), 0.01);
      assertEquals(169.4, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(169.4, xYSeries0.getMinY(), 0.01);
      assertEquals((-688.8987561752), xYSeries0.getMinX(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("FCjY=VQ#akFA|R", "FCjY=VQ#akFA|R", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (-776));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Number[] numberArray0 = new Number[3];
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer0);
      assertEquals(100, (int)integer0);
      
      numberArray0[0] = (Number) integer0;
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate((-833), (-1237), (-1237), 526, (-833), (-833));
      assertNotNull(mockDate0);
      
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-833);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNull(range0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range1);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals((-833.0), range1.getLowerBound(), 0.01);
      assertEquals((-416.5), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(833.0, range1.getLength(), 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean0 = linkedList0.add(defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(linkedList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Comparable<YIntervalSeriesCollection>[] comparableArray0 = (Comparable<YIntervalSeriesCollection>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[3][1];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1407.789240205949;
      doubleArray1[1] = (-1794.759681501);
      doubleArray1[2] = 3967.541890313714;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 5873.514452009855;
      doubleArray2[1] = (-1794.759681501);
      doubleArray2[2] = 2113.980941808;
      doubleArray2[3] = (-429.026);
      doubleArray2[4] = (-1794.759681501);
      doubleArray2[5] = 2113.980941808;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-429.026);
      doubleArray3[1] = 5873.514452009855;
      doubleArray3[2] = (-429.026);
      doubleArray0[2] = doubleArray3;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      boolean boolean0 = false;
      Range range0 = categoryTableXYDataset0.getDomainBounds(false);
      assertNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertNull(number0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short) (-85);
      doubleArray0[1] = (double) (short) (-85);
      doubleArray0[2] = (double) (short) (-85);
      doubleArray0[3] = (double) (short) (-85);
      doubleArray0[4] = (double) (short) (-85);
      doubleArray0[5] = (double) (short) (-85);
      doubleArray0[6] = (double) (short) (-85);
      doubleArray0[7] = (double) (short) (-85);
      doubleArray0[8] = (double) (short) (-85);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(8, polynomialFunction2D0.getOrder());
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-85.0), (-85.0), (-85.0), (-85.0), (-85.0), (-85.0), (-85.0), (-85.0), (-85.0)}, doubleArray0, 0.01);
      
      // Undeclared exception!
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-85.0), 1150.5323532873463, 1800, (-85.0));
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(second0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      ArrayList<XIntervalSeriesCollection> arrayList0 = new ArrayList<XIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds((CategoryDataset) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      assertNotNull(serialDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNull(serialDate0.getDescription());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertEquals(41684, serialDate0.toSerial());
      assertEquals(14, serialDate0.getDayOfMonth());
      assertEquals(2014, serialDate0.getYYYY());
      assertEquals(2, serialDate0.getMonth());
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-6917.307219604228), (-6917.307219604228), 4, 2.0, 1330.096);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1, (-3694.96938), 1529.19, 0, 1);
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[10];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem1;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(10, oHLCDataItemArray0.length);
      
      double[][] doubleArray0 = new double[0][8];
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) oHLCDataItemArray0, (Comparable[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'columnKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(yIntervalSeriesCollection0);
      assertNull(number0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      double[][] doubleArray0 = new double[7][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("?$h8R&TIgA1f(7``,", "?$h8R&TIgA1f(7``,", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(7, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(7, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) yIntervalSeriesCollection0, true);
      assertNull(range1);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 929);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 929, Size: 6
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = categoryTableXYDataset0.getDomainBounds(false);
      assertNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      Second second1 = (Second)second0.next();
      assertNotNull(second1);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(22, second1.getSecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertFalse(second1.equals((Object)second0));
      
      double[][] doubleArray0 = new double[4][9];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 59;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 59;
      doubleArray1[3] = (double) 59;
      doubleArray1[4] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray0[3] = doubleArray4;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("Duplicate items in 'columnKeys'.", "Duplicate items in 'columnKeys'.", doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      Double double0 = (Double)DatasetUtilities.findMaximumStackedRangeValue(defaultCategoryDataset0);
      assertNotNull(double0);
      assertEquals(59.0, (double)double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      Short short0 = new Short((short)2369);
      assertNotNull(short0);
      assertEquals((short)2369, (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(short0));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains(short0));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[2369]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(boolean0);
      
      Stack<XIntervalSeriesCollection> stack1 = new Stack<XIntervalSeriesCollection>();
      assertNotNull(stack1);
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      
      stack1.setSize(0);
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(xYIntervalSeriesCollection0, stack1, true);
      assertNull(range0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = categoryTableXYDataset0.getDomainBounds(false);
      assertNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertNull(number0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Short short0 = new Short((short) (-85));
      assertNotNull(short0);
      assertEquals((short) (-85), (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains((short) (-85)));
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[-85]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean0);
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack0, false);
      assertNull(range1);
      assertTrue(stack0.contains((short) (-85)));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[-85]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      Second second1 = (Second)second0.next();
      assertNotNull(second1);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(22, second1.getSecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertFalse(second1.equals((Object)second0));
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(second1);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(22, second1.getSecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertFalse(second0.equals((Object)second1));
      assertFalse(second1.equals((Object)second0));
      
      Comparable<DefaultBoxAndWhiskerCategoryDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerCategoryDataset>[]) Array.newInstance(Comparable.class, 1);
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) second0;
      Comparable<Object>[] comparableArray1 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 6);
      comparableArray1[0] = (Comparable<Object>) second0;
      comparableArray1[1] = (Comparable<Object>) second0;
      comparableArray1[2] = (Comparable<Object>) second1;
      comparableArray1[3] = (Comparable<Object>) second0;
      MockDate mockDate0 = new MockDate(0, (-2584), 3580);
      assertNotNull(mockDate0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      assertNotNull(fixedMillisecond0);
      assertEquals("Sun Jun 20 00:00:00 GMT 1694", mockDate0.toString());
      assertEquals((-8694950400000L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-8694950400000L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-8694950400000L), fixedMillisecond0.getSerialIndex());
      assertEquals((-8694950400000L), fixedMillisecond0.getMiddleMillisecond());
      
      FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.previous();
      assertNotNull(fixedMillisecond1);
      assertEquals("Sun Jun 20 00:00:00 GMT 1694", mockDate0.toString());
      assertEquals((-8694950400000L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-8694950400000L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-8694950400000L), fixedMillisecond0.getSerialIndex());
      assertEquals((-8694950400000L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-8694950400001L), fixedMillisecond1.getMiddleMillisecond());
      assertEquals((-8694950400001L), fixedMillisecond1.getSerialIndex());
      assertEquals((-8694950400001L), fixedMillisecond1.getFirstMillisecond());
      assertEquals((-8694950400001L), fixedMillisecond1.getLastMillisecond());
      assertNotSame(fixedMillisecond0, fixedMillisecond1);
      assertNotSame(fixedMillisecond1, fixedMillisecond0);
      assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
      
      comparableArray1[4] = (Comparable<Object>) fixedMillisecond1;
      comparableArray1[5] = (Comparable<Object>) second0;
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1759.3;
      doubleArray1[1] = (double) 59;
      doubleArray0[0] = doubleArray1;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'columnKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) integer0);
      assertNotNull(pieDataset0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(pieDataset0);
      assertNotNull(defaultPieDataset0);
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(timeTableXYDataset0);
      assertNotNull(xYDatasetTableModel0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      jDBCPieDataset0.addChangeListener(xYDatasetTableModel0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      jDBCPieDataset0.setSelectionState(defaultPieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) integer0, (KeyedValues) jDBCPieDataset0);
      assertNotNull(categoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      assertNotNull(serialDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(41684, serialDate0.toSerial());
      assertEquals(2, serialDate0.getMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertEquals(14, serialDate0.getDayOfMonth());
      assertEquals(2014, serialDate0.getYYYY());
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(7, SerialDate.SATURDAY);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 5, 3, 3, 3, 1);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 1;
      doubleArray3[1] = (double) 1;
      doubleArray3[2] = (double) 7;
      doubleArray3[3] = (double) 3;
      doubleArray3[4] = (double) 7;
      doubleArray3[5] = 1.0;
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-2958.507654452834);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1.5;
      doubleArray1[3] = 86.0;
      doubleArray1[4] = 128.22480999087;
      doubleArray1[5] = 1135.90878901059;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals((-2958.507654452834), number0);
      assertEquals(1, doubleArray0.length);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(number1);
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals((-2958.507654452834), number1);
      assertEquals(1, doubleArray0.length);
      assertTrue(number1.equals((Object)number0));
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Number[] numberArray0 = new Number[3];
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer0);
      assertEquals(100, (int)integer0);
      
      numberArray0[0] = (Number) integer0;
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate((-833), (-1237), (-1237), 526, (-833), (-833));
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[4];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 526;
      doubleArray0[1] = (double) 526;
      doubleArray0[2] = (double) 526;
      doubleArray0[3] = (double) (-1237);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Wed Aug 01 07:53:07 GMT 960", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(4, dateArray0.length);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {526.0, 526.0, 526.0, (-1237.0)}, doubleArray0, 0.01);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      assertNotNull(number0);
      assertEquals("Wed Aug 01 07:53:07 GMT 960", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-1237.0), number0);
      assertEquals(4, dateArray0.length);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {526.0, 526.0, 526.0, (-1237.0)}, doubleArray0, 0.01);
      
      LinkedList<DefaultHighLowDataset> linkedList0 = new LinkedList<DefaultHighLowDataset>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(defaultHighLowDataset0));
      assertEquals(0, linkedList0.size());
      
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      System.setCurrentTimeMillis(0L);
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
      assertNotNull(number1);
      assertEquals("Wed Aug 01 07:53:07 GMT 960", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(526.0, number1);
      assertEquals(4, dateArray0.length);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {526.0, 526.0, 526.0, (-1237.0)}, doubleArray0, 0.01);
      assertFalse(number1.equals((Object)number0));
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      double[][] doubleArray0 = new double[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      
      Year year0 = new Year(2);
      assertNotNull(year0);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2, year0.getYear());
      assertEquals("2", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2L, year0.getSerialIndex());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      Month month0 = new Month(2, year0);
      assertNotNull(month0);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2, year0.getYear());
      assertEquals("2", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2L, year0.getSerialIndex());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2, month0.getYearValue());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(26L, month0.getSerialIndex());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 0);
      assertNotNull(categoryToPieDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(1, doubleArray0.length);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) month0, (KeyedValues) categoryToPieDataset0);
      assertNotNull(categoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2, year0.getYear());
      assertEquals("2", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2L, year0.getSerialIndex());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2, month0.getYearValue());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(26L, month0.getSerialIndex());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1, doubleArray0.length);
      
      Vector<JRadioButtonMenuItem> vector0 = new Vector<JRadioButtonMenuItem>(2142128327);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Number[] numberArray0 = new Number[3];
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer0);
      assertEquals(100, (int)integer0);
      
      numberArray0[0] = (Number) integer0;
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate((-833), (-1237), (-1237), 526, (-833), (-833));
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[4];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 526;
      doubleArray0[1] = (double) 526;
      doubleArray0[2] = (double) 526;
      doubleArray0[3] = (double) (-1237);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Wed Aug 01 07:53:07 GMT 960", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(4, dateArray0.length);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {526.0, 526.0, 526.0, (-1237.0)}, doubleArray0, 0.01);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      assertNotNull(number0);
      assertEquals("Wed Aug 01 07:53:07 GMT 960", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-1237.0), number0);
      assertEquals(4, dateArray0.length);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {526.0, 526.0, 526.0, (-1237.0)}, doubleArray0, 0.01);
      
      LinkedList<DefaultHighLowDataset> linkedList0 = new LinkedList<DefaultHighLowDataset>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(defaultHighLowDataset0));
      assertEquals(0, linkedList0.size());
      
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      System.setCurrentTimeMillis(0L);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertEquals((-3.1853664413E13), range0.getCentralValue(), 0.01);
      assertEquals((-3.1853664413E13), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-3.1853664413E13), range0.getLowerBound(), 0.01);
      assertEquals("Wed Aug 01 07:53:07 GMT 960", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(4, dateArray0.length);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {526.0, 526.0, 526.0, (-1237.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Number[] numberArray0 = new Number[3];
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer0);
      assertEquals(100, (int)integer0);
      
      numberArray0[0] = (Number) integer0;
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-1.22192928E13);
      doubleArray1[1] = 1.7976931348623157E308;
      doubleArray1[2] = 508.1853424;
      doubleArray1[3] = (-88.2436619889);
      doubleArray1[4] = (-468.0);
      doubleArray1[5] = 0.8;
      doubleArray1[6] = (-569.44);
      doubleArray1[7] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-88.2436619889);
      doubleArray2[1] = 2998.276;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("?$h8R&TIgA1f(7``,", "1F0R%Rvo%:lJ<", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals((-1.2219292800088244E13), range0.getLowerBound(), 0.01);
      assertEquals(8.988465674311579E307, range0.getCentralValue(), 0.01);
      assertEquals(1.7976931348623157E308, range0.getUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, range0.getLength(), 0.01);
      assertEquals(2, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range1);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1.7976931348623157E308, range1.getLength(), 0.01);
      assertEquals((-1.2219292800088244E13), range1.getLowerBound(), 0.01);
      assertEquals(8.988465674311579E307, range1.getCentralValue(), 0.01);
      assertEquals(1.7976931348623157E308, range1.getUpperBound(), 0.01);
      assertNotSame(range1, range0);
      assertEquals(2, doubleArray0.length);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Long long0 = Long.getLong("");
      assertNull(long0);
      
      boolean boolean0 = defaultPieDataset0.equals((Object) null);
      assertFalse(boolean0);
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset(defaultPieDataset0);
      assertNotNull(defaultPieDataset1);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      defaultPieDataset0.setSelectionState(defaultPieDataset1);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) null, (-3258.323363803145), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNull(range0);
      
      Number[][] numberArray0 = new Number[1][7];
      Number[] numberArray1 = new Number[3];
      numberArray1[0] = (Number) integer0;
      numberArray1[1] = (Number) integer0;
      numberArray1[2] = (Number) integer0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(400.0, range1.getLowerBound(), 0.01);
      assertEquals(400.0, range1.getCentralValue(), 0.01);
      assertEquals(400.0, range1.getUpperBound(), 0.01);
      assertEquals(1, numberArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      double[][] doubleArray0 = new double[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 502.2994131505638);
      assertNotNull(range0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(502.2994131505638, range0.getCentralValue(), 0.01);
      assertEquals(502.2994131505638, range0.getUpperBound(), 0.01);
      assertEquals(502.2994131505638, range0.getLowerBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      LinkedList<DefaultTableModel> linkedList0 = new LinkedList<DefaultTableModel>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(stack0, stack0);
      assertNotNull(defaultTableModel0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      
      boolean boolean0 = linkedList0.add(defaultTableModel0);
      assertTrue(linkedList0.contains(defaultTableModel0));
      assertEquals(1, linkedList0.size());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Number[] numberArray0 = new Number[3];
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer0);
      assertEquals(100, (int)integer0);
      
      numberArray0[0] = (Number) integer0;
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate((-833), (-1237), (-1237), 526, (-833), (-833));
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[4];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 526;
      doubleArray0[1] = (double) 526;
      doubleArray0[2] = (double) 526;
      doubleArray0[3] = (double) 526;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Wed Aug 01 07:53:07 GMT 960", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(4, dateArray0.length);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {526.0, 526.0, 526.0, 526.0}, doubleArray0, 0.01);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      assertNotNull(number0);
      assertEquals("Wed Aug 01 07:53:07 GMT 960", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(526.0, number0);
      assertEquals(4, dateArray0.length);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {526.0, 526.0, 526.0, 526.0}, doubleArray0, 0.01);
      
      LinkedList<DefaultHighLowDataset> linkedList0 = new LinkedList<DefaultHighLowDataset>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(defaultHighLowDataset0));
      assertEquals(0, linkedList0.size());
      
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      assertNotNull(quarter0);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(quarter0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      boolean boolean0 = true;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      boolean boolean1 = stack0.add(categoryTableXYDataset0);
      assertTrue(stack0.contains(categoryTableXYDataset0));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, stack0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.CategoryTableXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(yIntervalSeriesCollection0);
      assertNull(number0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      double[][] doubleArray0 = new double[7][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("?$h8R&TIgA1f(7``,", "?$h8R&TIgA1f(7``,", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(7, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(7, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertEquals(7, doubleArray0.length);
      assertTrue(range1.equals((Object)range0));
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Number[] numberArray0 = new Number[2];
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      numberArray0[0] = (Number) integer0;
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add(847.0, Double.POSITIVE_INFINITY, (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (-2430.4951318236403));
      assertNotNull(range0);
      assertEquals((-2006.9951318236403), range0.getCentralValue(), 0.01);
      assertEquals((-2430.4951318236403), range0.getLowerBound(), 0.01);
      assertEquals((-1583.4951318236403), range0.getUpperBound(), 0.01);
      assertEquals(847.0, range0.getLength(), 0.01);
      
      LinkedList<DefaultTableModel> linkedList0 = new LinkedList<DefaultTableModel>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultXYZDataset0);
      assertNull(number0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultXYZDataset0);
      assertNull(number0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Number[][] numberArray0 = new Number[2][7];
      Number[] numberArray1 = new Number[5];
      numberArray1[0] = null;
      numberArray1[1] = null;
      numberArray1[2] = null;
      numberArray1[3] = null;
      numberArray1[4] = null;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[6];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = null;
      numberArray2[1] = null;
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      numberArray2[2] = (Number) integer0;
      numberArray2[3] = null;
      numberArray2[4] = null;
      numberArray2[5] = null;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, numberArray0.length);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(number1);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals((-30000.0), number1);
      assertEquals(2, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(825, 825);
      assertNotNull(powerFunction2D0);
      assertEquals(825.0, powerFunction2D0.getB(), 0.01);
      assertEquals(825.0, powerFunction2D0.getA(), 0.01);
      
      Minute minute0 = new Minute();
      assertNotNull(minute0);
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      assertNotNull(calendar0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      
      long long0 = minute0.getFirstMillisecond(calendar0);
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2014,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=14,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=20,MINUTE=21,SECOND=0,MILLISECOND=0,ZONE_OFFSET=?,DST_OFFSET=?]", calendar0.toString());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(1392409281320L, long0);
      
      Minute minute1 = (Minute)minute0.previous();
      assertNotNull(minute1);
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(20, minute1.getMinute());
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertFalse(minute1.equals((Object)minute0));
      
      MockDate mockDate0 = (MockDate)minute1.getStart();
      assertNotNull(mockDate0);
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(20, minute1.getMinute());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, (-1499.4762), 825, 825, minute1);
      assertNotNull(xYSeriesCollection0);
      assertEquals(825.0, powerFunction2D0.getB(), 0.01);
      assertEquals(825.0, powerFunction2D0.getA(), 0.01);
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(20, minute1.getMinute());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(825.0, powerFunction2D0.getB(), 0.01);
      assertEquals(825.0, powerFunction2D0.getA(), 0.01);
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(20, minute1.getMinute());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      double[][] doubleArray0 = new double[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, doubleArray0.length);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      ZoneId zoneId0 = ZoneId.systemDefault();
      assertNotNull(zoneId0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      TimeTableXYDataset timeTableXYDataset1 = new TimeTableXYDataset(timeZone0);
      assertNotNull(timeTableXYDataset1);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset1.getDomainIsPointsInTime());
      assertTrue(timeTableXYDataset1.equals((Object)timeTableXYDataset0));
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset1, 3348);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset1.getDomainIsPointsInTime());
      assertNotSame(timeTableXYDataset1, timeTableXYDataset0);
      assertEquals(0.0, double0, 0.01);
      assertTrue(timeTableXYDataset1.equals((Object)timeTableXYDataset0));
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 3348);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection1);
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      
      Instant instant0 = MockInstant.ofEpochMilli((-544L));
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertNotNull(date0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
      
      Minute minute0 = new Minute(date0);
      assertNotNull(minute0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
      assertEquals((-544L), minute0.getLastMillisecond());
      assertEquals(23, minute0.getHourValue());
      assertEquals((-544L), minute0.getFirstMillisecond());
      assertEquals(59, minute0.getMinute());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean0 = linkedList0.add(defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(linkedList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection1, (List) linkedList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset1 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset1);
      assertTrue(defaultKeyedValues2DDataset1.equals((Object)defaultKeyedValues2DDataset0));
      
      LinkedList<DefaultTableModel> linkedList0 = new LinkedList<DefaultTableModel>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      assertNotNull(defaultTableModel0);
      
      boolean boolean0 = linkedList0.add(defaultTableModel0);
      assertTrue(linkedList0.contains(defaultTableModel0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) stack0, false);
      assertNull(range0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNotSame(defaultKeyedValues2DDataset0, defaultKeyedValues2DDataset1);
      assertTrue(defaultKeyedValues2DDataset0.equals((Object)defaultKeyedValues2DDataset1));
      
      Day day0 = new Day();
      assertNotNull(day0);
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      
      Hour hour0 = new Hour(1, day0);
      assertNotNull(hour0);
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1, hour0.getHour());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Minute minute0 = new Minute(1507, hour0);
      assertNotNull(minute0);
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1, hour0.getHour());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals((-29), minute0.getMinute());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset1, 126);
      assertNotNull(pieDataset0);
      assertNotSame(defaultKeyedValues2DDataset1, defaultKeyedValues2DDataset0);
      assertTrue(defaultKeyedValues2DDataset1.equals((Object)defaultKeyedValues2DDataset0));
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) minute0, (KeyedValues) pieDataset0);
      assertNotNull(categoryDataset0);
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1, hour0.getHour());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals((-29), minute0.getMinute());
      assertNotSame(defaultKeyedValues2DDataset1, defaultKeyedValues2DDataset0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertTrue(defaultKeyedValues2DDataset1.equals((Object)defaultKeyedValues2DDataset0));
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertNotNull(range1);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, (-2430.893976901861));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Range range0 = new Range(9742.0, 9742.0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(9742.0, range0.getLowerBound(), 0.01);
      assertEquals(9742.0, range0.getCentralValue(), 0.01);
      assertEquals(9742.0, range0.getUpperBound(), 0.01);
      
      Range range1 = Range.shift(range0, 9742.0, false);
      assertNotNull(range1);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(9742.0, range0.getLowerBound(), 0.01);
      assertEquals(9742.0, range0.getCentralValue(), 0.01);
      assertEquals(9742.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(19484.0, range1.getLowerBound(), 0.01);
      assertEquals(19484.0, range1.getCentralValue(), 0.01);
      assertEquals(19484.0, range1.getUpperBound(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      LinkedList<TimeTableXYDataset> linkedList0 = new LinkedList<TimeTableXYDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range2 = new Range(9742.0, 9742.0);
      assertNotNull(range2);
      assertEquals(9742.0, range2.getUpperBound(), 0.01);
      assertEquals(9742.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(9742.0, range2.getCentralValue(), 0.01);
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Number[] numberArray0 = new Number[3];
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer0);
      assertEquals(100, (int)integer0);
      
      numberArray0[0] = (Number) integer0;
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (-2430.4951318236403));
      assertNull(range0);
      
      LinkedList<DefaultTableModel> linkedList0 = new LinkedList<DefaultTableModel>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultTableModel defaultTableModel0 = new DefaultTableModel((Vector) null, (Vector) null);
      assertNotNull(defaultTableModel0);
      
      boolean boolean0 = linkedList0.add(defaultTableModel0);
      assertTrue(linkedList0.contains(defaultTableModel0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) linkedList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.table.DefaultTableModel cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getRowCount();
      assertEquals(0, int0);
      
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Double double1 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(double1);
      assertEquals(Double.NaN, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Double double2 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(double2);
      assertEquals(Double.NaN, (double)double2, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNull(range0);
      
      List list1 = defaultStatisticalCategoryDataset0.getColumnKeys();
      assertNotNull(list1);
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      
      Week week0 = new Week((-868), (-2696));
      assertNotNull(week0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-2696), week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-142988L), week0.getSerialIndex());
      assertEquals((-100), week0.getWeek());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, (Comparable) double1);
      assertNotNull(defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((double)double1, (double)double2, 0.01);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      DefaultPieDataset defaultPieDataset2 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset2);
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset1));
      
      DefaultPieDataset defaultPieDataset3 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset2, (Comparable) double0, (-43.9282), 0);
      assertNotNull(defaultPieDataset3);
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      assertNotSame(defaultPieDataset2, defaultPieDataset3);
      assertNotSame(defaultPieDataset2, defaultPieDataset0);
      assertNotSame(defaultPieDataset3, defaultPieDataset2);
      assertNotSame(defaultPieDataset3, defaultPieDataset1);
      assertNotSame(defaultPieDataset3, defaultPieDataset0);
      assertEquals((double)double0, (double)double1, 0.01);
      assertEquals((double)double0, (double)double2, 0.01);
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertFalse(defaultPieDataset3.equals((Object)defaultPieDataset2));
      assertFalse(defaultPieDataset3.equals((Object)defaultPieDataset1));
      assertFalse(defaultPieDataset3.equals((Object)defaultPieDataset0));
      
      System.setCurrentTimeMillis((-1L));
      DefaultPieDataset defaultPieDataset4 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 369);
      assertNotNull(defaultPieDataset4);
      assertNotSame(defaultPieDataset4, defaultPieDataset1);
      assertNotSame(defaultPieDataset4, defaultPieDataset3);
      assertNotSame(defaultPieDataset4, defaultPieDataset0);
      assertNotSame(defaultPieDataset4, defaultPieDataset2);
      assertFalse(defaultPieDataset4.equals((Object)defaultPieDataset3));
      assertTrue(defaultPieDataset4.equals((Object)defaultPieDataset2));
      assertTrue(defaultPieDataset4.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset4.equals((Object)defaultPieDataset0));
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      double[][] doubleArray0 = new double[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.validateObject();
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(boolean0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) histogramDataset0);
      assertNull(number0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(number1);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, number1);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertFalse(boolean1);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      
      Number number2 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNotNull(number2);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, number2);
      assertEquals(1, doubleArray0.length);
      assertTrue(number2.equals((Object)number1));
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 2803.1;
      doubleArray1[1] = 1.5;
      doubleArray1[2] = (-1517.91);
      doubleArray1[6] = 1057.13;
      doubleArray1[4] = (-2056.2121441065);
      doubleArray1[5] = 4618.748;
      doubleArray1[6] = 4.0;
      doubleArray1[7] = (-429.026);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, doubleArray0.length);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.validateObject();
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(boolean0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) xYTaskDataset0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1281.2679279467498, range0.getCentralValue(), 0.01);
      assertEquals((-2056.2121441065), range0.getLowerBound(), 0.01);
      assertEquals(6674.9601441065, range0.getLength(), 0.01);
      assertEquals(4618.748, range0.getUpperBound(), 0.01);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range1);
      assertEquals(6674.9601441065, range1.getLength(), 0.01);
      assertEquals(1281.2679279467498, range1.getCentralValue(), 0.01);
      assertEquals(4618.748, range1.getUpperBound(), 0.01);
      assertEquals((-2056.2121441065), range1.getLowerBound(), 0.01);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotSame(range1, range0);
      assertEquals(1, doubleArray0.length);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      Integer integer1 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) null, (KeyedValues) jDBCPieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Vector<Float> vector0 = new Vector<Float>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) null, (KeyedValues) defaultKeyedValuesDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getRowCount();
      assertEquals(0, int0);
      
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, 369);
      assertNotNull(pieDataset0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(number1);
      assertEquals(Double.NaN, number1);
      assertTrue(number1.equals((Object)number0));
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Number number2 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(number2);
      assertEquals(Double.NaN, number2);
      assertTrue(number2.equals((Object)number0));
      assertTrue(number2.equals((Object)number1));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) list0, true);
      assertNull(range0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      JDBCXYDataset jDBCXYDataset0 = null;
      try {
        jDBCXYDataset0 = new JDBCXYDataset("Ic\b", (String) null, "Ic\b", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      double[][] doubleArray0 = new double[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, doubleArray0.length);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.validateObject();
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(boolean0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) histogramDataset0);
      assertNull(number0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range1);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertEquals(1, doubleArray0.length);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-391.715601392014);
      doubleArray0[1] = (-1.7976931348623157E308);
      doubleArray0[3] = (-2189.995);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertNotNull(doubleArray1);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertNotNull(doubleArray2);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = polynomialFunction2D0.getCoefficients();
      assertNotNull(doubleArray3);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray3.length);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-68.3663945), 0.0, 4, (-391.715601392014));
      assertNotNull(xYSeriesCollection0);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range0);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals((-391.715601392014), range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range1);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals((-68.8663945), range1.getLowerBound(), 0.01);
      assertEquals(69.3663945, range1.getLength(), 0.01);
      assertEquals(0.5, range1.getUpperBound(), 0.01);
      assertEquals((-34.18319725), range1.getCentralValue(), 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(range1, range0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(range1.equals((Object)range0));
      
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Number[] numberArray0 = new Number[3];
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer0);
      assertEquals(100, (int)integer0);
      
      numberArray0[0] = (Number) integer0;
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      mockDate0.setTime(0L);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      assertNull(range0);
      
      XYSeries xYSeries0 = new XYSeries(mockDate0, false, false);
      assertNotNull(xYSeries0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertNull(range1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(mockDate0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) simpleHistogramDataset0);
      assertNull(number0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNull(range2);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal((TableXYDataset) null, 794);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, false);
      assertNull(range0);
      assertEquals(0, linkedList0.size());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = (-1503.245500783337);
      doubleArray0[2] = 4349.3608934199;
      doubleArray0[3] = (-0.007184862389651678);
      doubleArray0[4] = 4349.3608934199;
      doubleArray0[5] = 2241.3455569724315;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, (-1503.245500783337), 4349.3608934199, (-0.007184862389651678), 4349.3608934199, 2241.3455569724315}, doubleArray0, 0.01);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertNotNull(doubleArray1);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, (-1503.245500783337), 4349.3608934199, (-0.007184862389651678), 4349.3608934199, 2241.3455569724315}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, (-1503.245500783337), 4349.3608934199, (-0.007184862389651678), 4349.3608934199, 2241.3455569724315}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-1.0), Double.POSITIVE_INFINITY, 157, (-1503.245500783337));
      assertNotNull(xYSeriesCollection0);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, (-1503.245500783337), 4349.3608934199, (-0.007184862389651678), 4349.3608934199, 2241.3455569724315}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertNull(range1);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, (-1503.245500783337), 4349.3608934199, (-0.007184862389651678), 4349.3608934199, 2241.3455569724315}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Range.shift((Range) null, (-68.3663945), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-0.007184862389651678);
      doubleArray1[2] = 2958465.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, doubleArray0.length);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (-1088.48676));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-391.715601392014);
      doubleArray0[1] = (-1.7976931348623157E308);
      doubleArray0[3] = (-2189.995);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertNotNull(doubleArray1);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertNotNull(doubleArray2);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double[] doubleArray3 = polynomialFunction2D0.getCoefficients();
      assertNotNull(doubleArray3);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray3.length);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-68.3663945), 0.0, 4, (-391.715601392014));
      assertNotNull(xYSeriesCollection0);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range0);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals((-391.715601392014), range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      
      Range range1 = Range.shift(range0, (-4542.2619), false);
      assertNotNull(range1);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals((-391.715601392014), range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertEquals((-4933.977501392014), range1.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(range1.equals((Object)range0));
      
      ArrayList<DefaultIntervalXYDataset> arrayList0 = new ArrayList<DefaultIntervalXYDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) arrayList0, range0, true);
      assertNull(range2);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals((-391.715601392014), range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(range0, range1);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(range0.equals((Object)range1));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, 243);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean0 = linkedList0.add(defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(linkedList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal((PieDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      SerialDate serialDate0 = SerialDate.createInstance(825);
      assertNotNull(serialDate0);
      assertEquals(1902, serialDate0.getYYYY());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertEquals(4, serialDate0.getMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(4, serialDate0.getDayOfMonth());
      assertEquals(825, serialDate0.toSerial());
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, double0, 0.01);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      Short short0 = new Short((short) (-85));
      assertNotNull(short0);
      assertEquals((short) (-85), (short)short0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal((PieDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean0 = linkedList0.add(defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(linkedList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      SerialDate serialDate0 = SerialDate.createInstance(825);
      assertNotNull(serialDate0);
      assertEquals(1902, serialDate0.getYYYY());
      assertNull(serialDate0.getDescription());
      assertEquals(825, serialDate0.toSerial());
      assertEquals(4, serialDate0.getDayOfMonth());
      assertEquals(4, serialDate0.getMonth());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, double0, 0.01);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      Short short0 = new Short((short) (-85));
      assertNotNull(short0);
      assertEquals((short) (-85), (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains(short0));
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[-85]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, stack0, true);
      assertNull(range0);
      assertTrue(stack0.contains(short0));
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[-85]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      assertNull(range1);
      assertTrue(stack0.contains(short0));
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[-85]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean0 = linkedList0.add(defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(linkedList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean0 = timePeriodValuesCollection0.equals(linkedList0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(0, linkedList0.size());
      assertFalse(boolean0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      assertNotNull(mockSimpleDateFormat0);
      
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      assertNotNull(date0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      MockDate mockDate0 = new MockDate(217, 811, 546, 1543, (-152), 811);
      assertNotNull(mockDate0);
      
      boolean boolean1 = mockDate0.before(date0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("Sun Apr 02 04:41:31 GMT 2186", mockDate0.toString());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1543;
      doubleArray0[1] = (double) (-152);
      doubleArray0[2] = (double) 811;
      doubleArray0[3] = (double) 811;
      doubleArray0[4] = (double) 217;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(4, polynomialFunction2D0.getOrder());
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1543.0, (-152.0), 811.0, 811.0, 217.0}, doubleArray0, 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 0.0, 1543.0, 193, 217.0);
      assertNotNull(xYSeries0);
      assertTrue(xYSeries0.getNotify());
      assertEquals(193, xYSeries0.getItemCount());
      assertEquals(1.23303316628504E15, xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1543.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(1543.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(4, polynomialFunction2D0.getOrder());
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1543.0, (-152.0), 811.0, 811.0, 217.0}, doubleArray0, 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      mockDate0.setTime(495L);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      DomainOrder domainOrder0 = vectorSeriesCollection0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) vectorSeriesCollection0);
      assertNull(range0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(vectorSeriesCollection0);
      assertNull(range1);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(845);
      assertNotNull(spreadsheetDate0);
      assertEquals(5, spreadsheetDate0.getDayOfWeek());
      assertEquals(24, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(845, spreadsheetDate0.toSerial());
      assertEquals(1902, spreadsheetDate0.getYYYY());
      assertEquals(4, spreadsheetDate0.getMonth());
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(number1);
      assertEquals(Double.NaN, number1);
      assertTrue(number1.equals((Object)number0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-835.743477765), 7, true, true);
      assertNotNull(simpleHistogramBin0);
      assertEquals((-835.743477765), simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(7.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(vector0);
      assertFalse(vector0.contains(defaultBoxAndWhiskerCategoryDataset0));
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, (List) vector0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][0];
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer0);
      assertEquals(100, (int)integer0);
      
      LinkedList<DefaultTableModel> linkedList0 = new LinkedList<DefaultTableModel>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(integer0));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(stack0, stack0);
      assertNotNull(defaultTableModel0);
      assertFalse(stack0.contains(integer0));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      boolean boolean0 = linkedList0.add(defaultTableModel0);
      assertTrue(linkedList0.contains(defaultTableModel0));
      assertFalse(stack0.contains(integer0));
      assertEquals(1, linkedList0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(boolean0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      MockDate mockDate0 = new MockDate(4547, (-307), (-381));
      assertNotNull(mockDate0);
      
      Minute minute0 = new Minute(mockDate0);
      assertNotNull(minute0);
      assertEquals("Fri May 15 00:00:00 GMT 6420", mockDate0.toString());
      assertEquals(140440089600000L, minute0.getLastMillisecond());
      assertEquals(0, minute0.getHourValue());
      assertEquals(0, minute0.getMinute());
      assertEquals(140440089600000L, minute0.getFirstMillisecond());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      TimeSeries timeSeries0 = new TimeSeries(minute0, "~=2rKxFtToo;8N4g", "~=2rKxFtToo;8N4g");
      assertNotNull(timeSeries0);
      assertEquals("Fri May 15 00:00:00 GMT 6420", mockDate0.toString());
      assertEquals(140440089600000L, minute0.getLastMillisecond());
      assertEquals(0, minute0.getHourValue());
      assertEquals(0, minute0.getMinute());
      assertEquals(140440089600000L, minute0.getFirstMillisecond());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("~=2rKxFtToo;8N4g", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("~=2rKxFtToo;8N4g", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("Fri May 15 00:00:00 GMT 6420", mockDate0.toString());
      assertEquals(140440089600000L, minute0.getLastMillisecond());
      assertEquals(0, minute0.getHourValue());
      assertEquals(0, minute0.getMinute());
      assertEquals(140440089600000L, minute0.getFirstMillisecond());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("~=2rKxFtToo;8N4g", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("~=2rKxFtToo;8N4g", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, false);
      assertNull(range0);
      assertEquals("Fri May 15 00:00:00 GMT 6420", mockDate0.toString());
      assertEquals(140440089600000L, minute0.getLastMillisecond());
      assertEquals(0, minute0.getHourValue());
      assertEquals(0, minute0.getMinute());
      assertEquals(140440089600000L, minute0.getFirstMillisecond());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("~=2rKxFtToo;8N4g", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("~=2rKxFtToo;8N4g", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      boolean boolean0 = timePeriodValuesCollection0.equals("~=2rKxFtToo;8N4g");
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertFalse(boolean0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertFalse(vector0.contains("~=2rKxFtToo;8N4g"));
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) vector0, false);
      assertNull(range1);
      assertFalse(vector0.contains("~=2rKxFtToo;8N4g"));
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0);
      assertNull(range2);
      assertEquals("Fri May 15 00:00:00 GMT 6420", mockDate0.toString());
      assertEquals(140440089600000L, minute0.getLastMillisecond());
      assertEquals(0, minute0.getHourValue());
      assertEquals(0, minute0.getMinute());
      assertEquals(140440089600000L, minute0.getFirstMillisecond());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("~=2rKxFtToo;8N4g", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("~=2rKxFtToo;8N4g", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) vector0, (Range) null, false);
      assertNull(range3);
      assertFalse(vector0.contains("~=2rKxFtToo;8N4g"));
      assertEquals("Fri May 15 00:00:00 GMT 6420", mockDate0.toString());
      assertEquals(140440089600000L, minute0.getLastMillisecond());
      assertEquals(0, minute0.getHourValue());
      assertEquals(0, minute0.getMinute());
      assertEquals(140440089600000L, minute0.getFirstMillisecond());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("~=2rKxFtToo;8N4g", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("~=2rKxFtToo;8N4g", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][0];
      Number[] numberArray1 = new Number[3];
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer0);
      assertEquals(100, (int)integer0);
      
      numberArray1[0] = (Number) integer0;
      numberArray0[0] = numberArray1;
      String string0 = "";
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "[O#'?3Lg[Cm", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) "");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      MockDate mockDate0 = new MockDate(4547, (-307), (-381));
      assertNotNull(mockDate0);
      
      Minute minute0 = new Minute(mockDate0);
      assertNotNull(minute0);
      assertEquals("Fri May 15 00:00:00 GMT 6420", mockDate0.toString());
      assertEquals(140440089600000L, minute0.getLastMillisecond());
      assertEquals(0, minute0.getHourValue());
      assertEquals(140440089600000L, minute0.getFirstMillisecond());
      assertEquals(0, minute0.getMinute());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      TimeSeries timeSeries0 = new TimeSeries(minute0, "~=2rKxFtToo;8N4g", "~=2rKxFtToo;8N4g");
      assertNotNull(timeSeries0);
      assertEquals("Fri May 15 00:00:00 GMT 6420", mockDate0.toString());
      assertEquals(140440089600000L, minute0.getLastMillisecond());
      assertEquals(0, minute0.getHourValue());
      assertEquals(140440089600000L, minute0.getFirstMillisecond());
      assertEquals(0, minute0.getMinute());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("~=2rKxFtToo;8N4g", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("~=2rKxFtToo;8N4g", timeSeries0.getRangeDescription());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("Fri May 15 00:00:00 GMT 6420", mockDate0.toString());
      assertEquals(140440089600000L, minute0.getLastMillisecond());
      assertEquals(0, minute0.getHourValue());
      assertEquals(140440089600000L, minute0.getFirstMillisecond());
      assertEquals(0, minute0.getMinute());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("~=2rKxFtToo;8N4g", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("~=2rKxFtToo;8N4g", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, true);
      assertNull(range0);
      assertEquals("Fri May 15 00:00:00 GMT 6420", mockDate0.toString());
      assertEquals(140440089600000L, minute0.getLastMillisecond());
      assertEquals(0, minute0.getHourValue());
      assertEquals(140440089600000L, minute0.getFirstMillisecond());
      assertEquals(0, minute0.getMinute());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("~=2rKxFtToo;8N4g", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("~=2rKxFtToo;8N4g", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 59;
      doubleArray0[1] = (double) 59;
      doubleArray0[2] = (double) 59;
      doubleArray0[4] = (double) (-381);
      doubleArray0[5] = 1057.13;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      assertNotNull(date0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      boolean boolean0 = mockDate0.before(date0);
      assertEquals("Fri May 15 00:00:00 GMT 6420", mockDate0.toString());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertFalse(boolean0);
      
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {59.0, 59.0, 59.0, 0.0, (-381.0), 1057.13}, doubleArray0, 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-381), 1057.13, 834, 0.0);
      assertNotNull(xYSeries0);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1.39515447387557453E18, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-381.0), xYSeries0.getMinX(), 0.01);
      assertEquals(834, xYSeries0.getItemCount());
      assertEquals((-8.495010217870747E15), xYSeries0.getMinY(), 0.01);
      assertEquals(1057.13, xYSeries0.getMaxX(), 0.01);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {59.0, 59.0, 59.0, 0.0, (-381.0), 1057.13}, doubleArray0, 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      mockDate0.setTime(0L);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, false);
      assertNull(range2);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(140440089600000L, minute0.getLastMillisecond());
      assertEquals(0, minute0.getHourValue());
      assertEquals(140440089600000L, minute0.getFirstMillisecond());
      assertEquals(0, minute0.getMinute());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("~=2rKxFtToo;8N4g", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("~=2rKxFtToo;8N4g", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(140440089600000L, minute0.getLastMillisecond());
      assertEquals(0, minute0.getHourValue());
      assertEquals(140440089600000L, minute0.getFirstMillisecond());
      assertEquals(0, minute0.getMinute());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("~=2rKxFtToo;8N4g", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("~=2rKxFtToo;8N4g", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-391.715601392014);
      doubleArray0[1] = (-1.7976931348623157E308);
      doubleArray0[3] = (-2189.995);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertNotNull(doubleArray1);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertNotNull(doubleArray2);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double[] doubleArray3 = polynomialFunction2D0.getCoefficients();
      assertNotNull(doubleArray3);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray3.length);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      double[] doubleArray4 = polynomialFunction2D0.getCoefficients();
      assertNotNull(doubleArray4);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray4.length);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray4, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-68.3663945), (-0.007184862389651678), 4, (-391.715601392014));
      assertNotNull(xYSeriesCollection0);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range0);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.2916177792804245E306, range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      
      Range range1 = Range.shift(range0, (-4542.2619), false);
      assertNotNull(range1);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.2916177792804245E306, range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertEquals(1.2916177792804245E306, range1.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertTrue(range1.equals((Object)range0));
      
      ArrayList<DefaultIntervalXYDataset> arrayList0 = new ArrayList<DefaultIntervalXYDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range2 = Range.shift(range1, (-2189.995));
      assertNotNull(range2);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.2916177792804245E306, range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertEquals(1.2916177792804245E306, range1.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertEquals(1.2916177792804245E306, range2.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range2.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range2.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range2.getLength(), 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) arrayList0, range0, true);
      assertNull(range3);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.2916177792804245E306, range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range2));
      
      Range range4 = Range.combine(range1, range1);
      assertNotNull(range4);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.2916177792804245E306, range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertEquals(1.2916177792804245E306, range1.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range4.getLength(), 0.01);
      assertEquals(1.2916177792804245E306, range4.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range4.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range4.getCentralValue(), 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotSame(range1, range4);
      assertNotSame(range1, range2);
      assertNotSame(range4, range2);
      assertNotSame(range4, range0);
      assertNotSame(range4, range1);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range2));
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range5 = DatasetUtilities.iterateRangeBounds((XYDataset) vectorSeriesCollection0, false);
      assertNull(range5);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1090.07407169969;
      doubleArray0[1] = 2182.0;
      doubleArray0[2] = 1090.07407169969;
      doubleArray0[3] = 1090.07407169969;
      doubleArray0[4] = 1090.07407169969;
      doubleArray0[5] = 1090.07407169969;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1090.07407169969, 2182.0, 1090.07407169969, 1090.07407169969, 1090.07407169969, 1090.07407169969}, doubleArray0, 0.01);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertNotNull(doubleArray1);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {1090.07407169969, 2182.0, 1090.07407169969, 1090.07407169969, 1090.07407169969, 1090.07407169969}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1090.07407169969, 2182.0, 1090.07407169969, 1090.07407169969, 1090.07407169969, 1090.07407169969}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 1090.07407169969, 1090.07407169969, 839, 1090.07407169969);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, "cVlQi]5", "cVlQi]5");
      assertNotNull(timeSeries0);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("cVlQi]5", timeSeries0.getRangeDescription());
      assertEquals("cVlQi]5", timeSeries0.getDomainDescription());
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("cVlQi]5", timeSeries0.getRangeDescription());
      assertEquals("cVlQi]5", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, false);
      assertNull(range0);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("cVlQi]5", timeSeries0.getRangeDescription());
      assertEquals("cVlQi]5", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      assertNotNull(date0);
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      MockDate mockDate0 = new MockDate(999, (-1606), (-1548), 2, (-5), 999);
      assertNotNull(mockDate0);
      
      boolean boolean0 = mockDate0.before(date0);
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("Sat Dec 03 02:11:39 GMT 2760", mockDate0.toString());
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-5);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-5.0)}, doubleArray0, 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-1548), 169.4, 999, date0);
      assertNotNull(xYSeries0);
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals((-5.0), xYSeries0.getMaxY(), 0.01);
      assertEquals((-1548.0), xYSeries0.getMinX(), 0.01);
      assertEquals(999, xYSeries0.getItemCount());
      assertEquals(169.4000000000001, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-5.0), xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-5.0)}, doubleArray0, 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      mockDate0.setTime(0L);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      VectorSeriesCollection vectorSeriesCollection1 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection1);
      assertEquals(0, vectorSeriesCollection1.getSeriesCount());
      assertTrue(vectorSeriesCollection1.equals((Object)vectorSeriesCollection0));
      
      DomainOrder domainOrder0 = vectorSeriesCollection1.getDomainOrder();
      assertNotNull(domainOrder0);
      assertEquals(0, vectorSeriesCollection1.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      assertNotSame(vectorSeriesCollection1, vectorSeriesCollection0);
      assertTrue(vectorSeriesCollection1.equals((Object)vectorSeriesCollection0));
      
      DomainOrder domainOrder1 = vectorSeriesCollection1.getDomainOrder();
      assertNotNull(domainOrder1);
      assertEquals(0, vectorSeriesCollection1.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder1.toString());
      assertNotSame(vectorSeriesCollection1, vectorSeriesCollection0);
      assertSame(domainOrder1, domainOrder0);
      assertTrue(vectorSeriesCollection1.equals((Object)vectorSeriesCollection0));
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
      assertNull(range1);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("cVlQi]5", timeSeries0.getRangeDescription());
      assertEquals("cVlQi]5", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      MockDate mockDate0 = new MockDate(4547, (-307), (-381));
      assertNotNull(mockDate0);
      
      Minute minute0 = new Minute(mockDate0);
      assertNotNull(minute0);
      assertEquals("Fri May 15 00:00:00 GMT 6420", mockDate0.toString());
      assertEquals(0, minute0.getMinute());
      assertEquals(0, minute0.getHourValue());
      assertEquals(140440089600000L, minute0.getLastMillisecond());
      assertEquals(140440089600000L, minute0.getFirstMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      TimeSeries timeSeries0 = new TimeSeries(minute0, "~=2rKxFtToo;8N4g", "~=2rKxFtToo;8N4g");
      assertNotNull(timeSeries0);
      assertEquals("Fri May 15 00:00:00 GMT 6420", mockDate0.toString());
      assertEquals(0, minute0.getMinute());
      assertEquals(0, minute0.getHourValue());
      assertEquals(140440089600000L, minute0.getLastMillisecond());
      assertEquals(140440089600000L, minute0.getFirstMillisecond());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("~=2rKxFtToo;8N4g", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("~=2rKxFtToo;8N4g", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("Fri May 15 00:00:00 GMT 6420", mockDate0.toString());
      assertEquals(0, minute0.getMinute());
      assertEquals(0, minute0.getHourValue());
      assertEquals(140440089600000L, minute0.getLastMillisecond());
      assertEquals(140440089600000L, minute0.getFirstMillisecond());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("~=2rKxFtToo;8N4g", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("~=2rKxFtToo;8N4g", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, false);
      assertNull(range0);
      assertEquals("Fri May 15 00:00:00 GMT 6420", mockDate0.toString());
      assertEquals(0, minute0.getMinute());
      assertEquals(0, minute0.getHourValue());
      assertEquals(140440089600000L, minute0.getLastMillisecond());
      assertEquals(140440089600000L, minute0.getFirstMillisecond());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("~=2rKxFtToo;8N4g", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("~=2rKxFtToo;8N4g", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 59;
      doubleArray0[1] = (double) 59;
      doubleArray0[2] = (double) 59;
      doubleArray0[4] = (double) (-381);
      doubleArray0[5] = 1057.13;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      assertNotNull(date0);
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      boolean boolean0 = mockDate0.before(date0);
      assertEquals("Fri May 15 00:00:00 GMT 6420", mockDate0.toString());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertFalse(boolean0);
      
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {59.0, 59.0, 59.0, 0.0, (-381.0), 1057.13}, doubleArray0, 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-381), 1057.13, 824, 0.0);
      assertNotNull(xYSeries0);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(824, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1.39515447387557453E18, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-8.495010217870747E15), xYSeries0.getMinY(), 0.01);
      assertEquals(1057.13, xYSeries0.getMaxX(), 0.01);
      assertEquals((-381.0), xYSeries0.getMinX(), 0.01);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {59.0, 59.0, 59.0, 0.0, (-381.0), 1057.13}, doubleArray0, 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      mockDate0.setTime(0L);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      DomainOrder domainOrder0 = vectorSeriesCollection0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
      assertNull(range1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0, minute0.getMinute());
      assertEquals(0, minute0.getHourValue());
      assertEquals(140440089600000L, minute0.getLastMillisecond());
      assertEquals(140440089600000L, minute0.getFirstMillisecond());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("~=2rKxFtToo;8N4g", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("~=2rKxFtToo;8N4g", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      double[][] doubleArray0 = new double[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, doubleArray0.length);
      
      Short short0 = new Short((short)9);
      assertNotNull(short0);
      assertEquals((short)9, (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertFalse(stack0.contains((short)9));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      
      Short short1 = new Short((short)9);
      assertNotNull(short1);
      assertEquals((short)9, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      boolean boolean0 = stack0.add(short1);
      assertTrue(stack0.contains((short)9));
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[9]", stack0.toString());
      assertTrue(boolean0);
      assertTrue(short1.equals((Object)short0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(histogramDataset0, stack0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      double[][] doubleArray0 = new double[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (-2430.4951318236403));
      assertNotNull(range0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2430.4951318236403), range0.getCentralValue(), 0.01);
      assertEquals((-2430.4951318236403), range0.getUpperBound(), 0.01);
      assertEquals((-2430.4951318236403), range0.getLowerBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      LinkedList<DefaultTableModel> linkedList0 = new LinkedList<DefaultTableModel>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(stack0, stack0);
      assertNotNull(defaultTableModel0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      
      boolean boolean0 = linkedList0.add(defaultTableModel0);
      assertTrue(linkedList0.contains(defaultTableModel0));
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) linkedList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.table.DefaultTableModel cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      boolean boolean0 = false;
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean1 = linkedList0.add(defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(linkedList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection1);
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      
      Comparable<DefaultHighLowDataset>[] comparableArray0 = (Comparable<DefaultHighLowDataset>[]) Array.newInstance(Comparable.class, 9);
      Instant instant0 = MockInstant.ofEpochMilli((-544L));
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertNotNull(date0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
      
      Minute minute0 = new Minute(date0);
      assertNotNull(minute0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
      assertEquals(23, minute0.getHourValue());
      assertEquals((-544L), minute0.getLastMillisecond());
      assertEquals((-544L), minute0.getFirstMillisecond());
      assertEquals(59, minute0.getMinute());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      Minute minute1 = (Minute)minute0.previous();
      assertNotNull(minute1);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
      assertEquals(23, minute0.getHourValue());
      assertEquals((-544L), minute0.getLastMillisecond());
      assertEquals((-544L), minute0.getFirstMillisecond());
      assertEquals(59, minute0.getMinute());
      assertEquals(58, minute1.getMinute());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(23, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertFalse(minute1.equals((Object)minute0));
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute1, (Number) 59);
      assertNotNull(timeSeriesDataItem0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
      assertEquals(23, minute0.getHourValue());
      assertEquals((-544L), minute0.getLastMillisecond());
      assertEquals((-544L), minute0.getFirstMillisecond());
      assertEquals(59, minute0.getMinute());
      assertEquals(58, minute1.getMinute());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(23, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertFalse(timeSeriesDataItem0.isSelected());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      
      comparableArray0[0] = (Comparable<DefaultHighLowDataset>) timeSeriesDataItem0;
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      assertNotNull(fixedMillisecond0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
      assertEquals((-544L), fixedMillisecond0.getSerialIndex());
      assertEquals((-544L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-544L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-544L), fixedMillisecond0.getFirstMillisecond());
      
      comparableArray0[1] = (Comparable<DefaultHighLowDataset>) fixedMillisecond0;
      SpreadsheetDate spreadsheetDate0 = (SpreadsheetDate)SerialDate.createInstance(1804);
      assertNotNull(spreadsheetDate0);
      assertEquals(1904, spreadsheetDate0.getYYYY());
      assertEquals(12, spreadsheetDate0.getMonth());
      assertEquals(1804, spreadsheetDate0.toSerial());
      assertEquals(5, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(8, spreadsheetDate0.getDayOfMonth());
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      
      Day day0 = new Day(spreadsheetDate0);
      assertNotNull(day0);
      assertEquals(1904, spreadsheetDate0.getYYYY());
      assertEquals(12, spreadsheetDate0.getMonth());
      assertEquals(1804, spreadsheetDate0.toSerial());
      assertEquals(5, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(8, spreadsheetDate0.getDayOfMonth());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      
      comparableArray0[2] = (Comparable<DefaultHighLowDataset>) day0;
      MockDate mockDate0 = new MockDate(31, 2, 1, 0, 140, 2);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Sun Mar 01 02:20:02 GMT 1931", mockDate0.toString());
      assertEquals((-1225661998000L), hour0.getFirstMillisecond());
      assertEquals((-1225661998000L), hour0.getLastMillisecond());
      assertEquals(2, hour0.getHour());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Hour hour1 = (Hour)hour0.next();
      assertNotNull(hour1);
      assertEquals("Sun Mar 01 02:20:02 GMT 1931", mockDate0.toString());
      assertEquals((-1225661998000L), hour0.getFirstMillisecond());
      assertEquals((-1225661998000L), hour0.getLastMillisecond());
      assertEquals(2, hour0.getHour());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(3, hour1.getHour());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertFalse(hour1.equals((Object)hour0));
      
      comparableArray0[3] = (Comparable<DefaultHighLowDataset>) hour1;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "Null 'xRange' argument", 0, 0, 2, 9999, 4, 1, 4, 792, 2);
      assertNotNull(simpleTimeZone0);
      assertEquals("Null 'xRange' argument", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=Null 'xRange' argument,offset=2,dstSavings=2,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=2,startTime=9999,startTimeMode=0,endMode=2,endMonth=4,endDay=1,endDayOfWeek=4,endTime=792,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(2, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      Week week0 = new Week(date0, simpleTimeZone0);
      assertNotNull(week0);
      assertEquals("Null 'xRange' argument", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=Null 'xRange' argument,offset=2,dstSavings=2,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=2,startTime=9999,startTimeMode=0,endMode=2,endMonth=4,endDay=1,endDayOfWeek=4,endTime=792,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(2, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-545L), week0.getLastMillisecond());
      assertEquals(1, week0.getWeek());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals((-544L), week0.getFirstMillisecond());
      assertEquals(1970, week0.getYearValue());
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      comparableArray0[4] = (Comparable<DefaultHighLowDataset>) week0;
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      
      comparableArray0[5] = (Comparable<DefaultHighLowDataset>) month0;
      Year year0 = new Year(mockDate0, simpleTimeZone0);
      assertNotNull(year0);
      assertEquals("Sun Mar 01 02:20:02 GMT 1931", mockDate0.toString());
      assertEquals("Null 'xRange' argument", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=Null 'xRange' argument,offset=2,dstSavings=2,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=2,startTime=9999,startTimeMode=0,endMode=2,endMonth=4,endDay=1,endDayOfWeek=4,endTime=792,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(2, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1931L, year0.getSerialIndex());
      assertEquals("1931", year0.toString());
      assertEquals((-1225661998000L), year0.getFirstMillisecond());
      assertEquals(1931, year0.getYear());
      assertEquals((-1225661998000L), year0.getLastMillisecond());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      Year year1 = (Year)year0.previous();
      assertNotNull(year1);
      assertEquals("Sun Mar 01 02:20:02 GMT 1931", mockDate0.toString());
      assertEquals("Null 'xRange' argument", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=Null 'xRange' argument,offset=2,dstSavings=2,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=2,startTime=9999,startTimeMode=0,endMode=2,endMonth=4,endDay=1,endDayOfWeek=4,endTime=792,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(2, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1931L, year0.getSerialIndex());
      assertEquals("1931", year0.toString());
      assertEquals((-1225661998000L), year0.getFirstMillisecond());
      assertEquals(1931, year0.getYear());
      assertEquals((-1225661998000L), year0.getLastMillisecond());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals("1930", year1.toString());
      assertEquals(1930L, year1.getSerialIndex());
      assertEquals(1930, year1.getYear());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertFalse(year1.equals((Object)year0));
      
      comparableArray0[6] = (Comparable<DefaultHighLowDataset>) year1;
      FixedMillisecond fixedMillisecond1 = new FixedMillisecond(7);
      assertNotNull(fixedMillisecond1);
      assertEquals(7L, fixedMillisecond1.getSerialIndex());
      assertEquals(7L, fixedMillisecond1.getMiddleMillisecond());
      assertEquals(7L, fixedMillisecond1.getLastMillisecond());
      assertEquals(7L, fixedMillisecond1.getFirstMillisecond());
      assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
      
      comparableArray0[7] = (Comparable<DefaultHighLowDataset>) fixedMillisecond1;
      Week week1 = new Week(mockDate0);
      assertNotNull(week1);
      assertEquals("Sun Mar 01 02:20:02 GMT 1931", mockDate0.toString());
      assertEquals(102353L, week1.getSerialIndex());
      assertEquals((-1225661998000L), week1.getFirstMillisecond());
      assertEquals(1931, week1.getYearValue());
      assertEquals((-1225661998001L), week1.getLastMillisecond());
      assertEquals(10, week1.getWeek());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertFalse(week1.equals((Object)week0));
      
      comparableArray0[8] = (Comparable<DefaultHighLowDataset>) week1;
      double[][] doubleArray0 = new double[9][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 5;
      doubleArray2[1] = (double) 2;
      doubleArray2[2] = 1.7976931348623157E308;
      doubleArray2[3] = (double) 1;
      doubleArray2[4] = (double) 53;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) (-544L);
      doubleArray3[1] = (double) 2;
      doubleArray3[2] = (double) 2;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (double) 53;
      doubleArray4[1] = (double) 1;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = 1405.14508487051;
      doubleArray6[1] = (double) 31;
      doubleArray6[2] = (double) 0;
      doubleArray6[3] = (-1794.759681501);
      doubleArray6[4] = (double) 23;
      doubleArray6[5] = (double) 1900;
      doubleArray6[6] = (double) 3;
      doubleArray6[7] = (double) 0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      
      doubleArray7[0] = (-1.0);
      doubleArray7[1] = (double) 23;
      doubleArray7[2] = (double) 1;
      doubleArray7[3] = (double) 4;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[2];
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      
      doubleArray8[0] = (double) 1;
      doubleArray8[1] = (double) 0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[6];
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      
      doubleArray9[0] = (double) 23;
      doubleArray9[1] = (-1.0);
      doubleArray9[2] = 1407.789240205949;
      doubleArray9[3] = (double) 2;
      doubleArray9[4] = (double) 1900;
      doubleArray9[5] = (double) 3;
      doubleArray0[8] = doubleArray9;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of column keys does not match the number of columns in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      boolean boolean0 = true;
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean1 = linkedList0.add(defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(linkedList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      double[][] doubleArray0 = new double[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (-2430.4951318236403));
      assertNotNull(range0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2430.4951318236403), range0.getCentralValue(), 0.01);
      assertEquals((-2430.4951318236403), range0.getUpperBound(), 0.01);
      assertEquals((-2430.4951318236403), range0.getLowerBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      LinkedList<DefaultTableModel> linkedList0 = new LinkedList<DefaultTableModel>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) linkedList0, true);
      assertNull(range1);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, linkedList0.size());
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(boolean0);
      
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (Comparable) month0);
      assertNotNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(taskSeriesCollection0);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) month0, (KeyedValues) pieDataset0);
      assertNotNull(categoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(0.0, double0, 0.01);
      
      String string0 = "Requires 'start' < 'end'.";
      Number[][] numberArray0 = new Number[5][0];
      Number[] numberArray1 = new Number[5];
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      numberArray1[0] = (Number) long0;
      int int0 = 305;
      Integer integer0 = new Integer(305);
      assertNotNull(integer0);
      assertEquals(305, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      numberArray1[1] = (Number) integer0;
      Long long1 = new Long(0L);
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      
      numberArray1[2] = (Number) long1;
      int int1 = 726;
      int int2 = 812;
      MockDate mockDate0 = new MockDate(726, 305, 2507, 2507, 812);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 2507, 1705.9, 305, 2507, 1705.9);
      assertNotNull(oHLCDataItem0);
      assertEquals("Sun Jul 25 00:32:00 GMT 2658", mockDate0.toString());
      
      Number number0 = oHLCDataItem0.getClose();
      assertNotNull(number0);
      assertEquals("Sun Jul 25 00:32:00 GMT 2658", mockDate0.toString());
      assertEquals(2507.0, number0);
      assertFalse(number0.equals((Object)double0));
      
      numberArray1[3] = number0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, numberArray0.length);
      
      int int3 = 1594;
      // Undeclared exception!
      try { 
        defaultIntervalCategoryDataset0.getValue(1594, 2507);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Number[][] numberArrayArray0 = null;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) linkedList0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][0];
      Number[] numberArray1 = new Number[3];
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer0);
      assertEquals(100, (int)integer0);
      
      numberArray1[0] = (Number) integer0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("1F0R%Rvo%:lJ<", "1F0R%Rvo%:lJ<", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(xIntervalSeriesCollection0);
      assertNull(range0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findRangeBounds(categoryDataset0, false);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(100.0, range1.getLowerBound(), 0.01);
      assertEquals(100.0, range1.getCentralValue(), 0.01);
      assertEquals(100.0, range1.getUpperBound(), 0.01);
      assertEquals(1, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[3] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, doubleArray0.length);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      MockDate mockDate0 = new MockDate(1095, 1095, 1095);
      assertNotNull(mockDate0);
      
      Day day0 = new Day(mockDate0);
      assertNotNull(day0);
      assertEquals("Sat Mar 30 00:00:00 GMT 3089", mockDate0.toString());
      assertEquals(35319888000000L, day0.getLastMillisecond());
      assertEquals(35319888000000L, day0.getFirstMillisecond());
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) day0, 1124.4);
      assertNotNull(pieDataset0);
      assertEquals("Sat Mar 30 00:00:00 GMT 3089", mockDate0.toString());
      assertEquals(35319888000000L, day0.getLastMillisecond());
      assertEquals(35319888000000L, day0.getFirstMillisecond());
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) day0, (double) 1095, (-3974));
      assertNotNull(defaultPieDataset1);
      assertEquals("Sat Mar 30 00:00:00 GMT 3089", mockDate0.toString());
      assertEquals(35319888000000L, day0.getLastMillisecond());
      assertEquals(35319888000000L, day0.getFirstMillisecond());
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, pieDataset0);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertFalse(defaultPieDataset1.equals((Object)pieDataset0));
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      defaultPieDataset1.setValue((Comparable) mockDate0, 3.893879252387603E-308);
      assertEquals("Sat Mar 30 00:00:00 GMT 3089", mockDate0.toString());
      assertEquals(35319888000000L, day0.getLastMillisecond());
      assertEquals(35319888000000L, day0.getFirstMillisecond());
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, pieDataset0);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertFalse(pieDataset0.equals((Object)defaultPieDataset1));
      assertFalse(defaultPieDataset1.equals((Object)pieDataset0));
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset1);
      assertEquals("Sat Mar 30 00:00:00 GMT 3089", mockDate0.toString());
      assertEquals(35319888000000L, day0.getLastMillisecond());
      assertEquals(35319888000000L, day0.getFirstMillisecond());
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, pieDataset0);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertFalse(boolean0);
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertFalse(pieDataset0.equals((Object)defaultPieDataset1));
      assertFalse(defaultPieDataset1.equals((Object)pieDataset0));
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-3974));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Number[] numberArray0 = new Number[3];
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer0);
      assertEquals(100, (int)integer0);
      
      numberArray0[0] = (Number) integer0;
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer1);
      assertEquals(400, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      jDBCCategoryDataset0.addValue((Number) integer1, (Comparable) integer1, (Comparable) "1F0R%Rvo%:lJ<");
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertFalse(integer1.equals((Object)integer0));
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(jDBCCategoryDataset0, tableOrder0, 0);
      assertNotNull(categoryToPieDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getRowCount();
      assertEquals(0, int0);
      
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, 2053.8548792032043);
      assertNull(range0);
      
      Number[][] numberArray0 = new Number[2][2];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = number0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[2];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = number0;
      numberArray2[1] = number0;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, numberArray0.length);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNull(range1);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, numberArray0.length);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection((MatrixSeries) null);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Range range2 = DatasetUtilities.iterateToFindDomainBounds(matrixSeriesCollection0, list0, false);
      assertNull(range2);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      double[][] doubleArray0 = new double[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, number0);
      assertEquals(1, doubleArray0.length);
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(histogramDataset0);
      assertNull(number1);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      DomainOrder domainOrder0 = vectorSeriesCollection0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      TableModelListener[] tableModelListenerArray0 = xYDatasetTableModel0.getTableModelListeners();
      assertNotNull(tableModelListenerArray0);
      assertEquals(0, tableModelListenerArray0.length);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      
      XYDatasetTableModel xYDatasetTableModel1 = new XYDatasetTableModel(defaultTableXYDataset0);
      assertNotNull(xYDatasetTableModel1);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(xYDatasetTableModel1.equals((Object)xYDatasetTableModel0));
      
      vectorSeriesCollection0.removeChangeListener(xYDatasetTableModel1);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotSame(xYDatasetTableModel1, xYDatasetTableModel0);
      assertFalse(xYDatasetTableModel1.equals((Object)xYDatasetTableModel0));
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0, true);
      assertNull(range0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timePeriodValuesCollection0, false);
      assertNull(range0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      jDBCCategoryDataset0.addValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(jDBCCategoryDataset0, tableOrder0, (-13));
      assertNotNull(categoryToPieDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-13), categoryToPieDataset0.getExtractIndex());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) jDBCCategoryDataset0, true);
      assertNotNull(range1);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(400.0, range1.getCentralValue(), 0.01);
      assertEquals(400.0, range1.getUpperBound(), 0.01);
      assertEquals(400.0, range1.getLowerBound(), 0.01);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, false);
      assertNull(range2);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 2454.2;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = 1059.6238250358;
      doubleArray1[3] = 1478.32;
      doubleArray1[4] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 953.723935495701;
      doubleArray2[1] = 2454.2;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 1579.2791338020231;
      doubleArray3[1] = 1478.32;
      doubleArray3[2] = (-1442.8259);
      doubleArray3[3] = (-1.0);
      doubleArray3[4] = 1059.6238250358;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      assertNotNull(date0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      boolean boolean0 = mockDate0.before(date0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 13.287129759275176;
      doubleArray0[1] = 1057.13;
      doubleArray0[2] = 13.287129759275176;
      doubleArray0[3] = 1057.13;
      doubleArray0[4] = 1057.13;
      doubleArray0[5] = 1057.13;
      doubleArray0[6] = 1057.13;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(6, polynomialFunction2D0.getOrder());
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {13.287129759275176, 1057.13, 13.287129759275176, 1057.13, 1057.13, 1057.13, 1057.13}, doubleArray0, 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 6.283185307179586, 1466.7911844, 196, 1057.13);
      assertNotNull(xYSeries0);
      assertEquals(6, polynomialFunction2D0.getOrder());
      assertNull(xYSeries0.getDescription());
      assertEquals(6.283185307179586, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1466.7911844, xYSeries0.getMaxX(), 0.01);
      assertEquals(196, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1.05349949127537E22, xYSeries0.getMaxY(), 0.01);
      assertEquals(7.73131242514225E7, xYSeries0.getMinY(), 0.01);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {13.287129759275176, 1057.13, 13.287129759275176, 1057.13, 1057.13, 1057.13, 1057.13}, doubleArray0, 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      mockDate0.setTime(2498L);
      assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) histogramDataset0, false);
      assertNull(range1);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      MockDate mockDate0 = new MockDate(4547, (-307), (-381));
      assertNotNull(mockDate0);
      
      Minute minute0 = new Minute(mockDate0);
      assertNotNull(minute0);
      assertEquals("Fri May 15 00:00:00 GMT 6420", mockDate0.toString());
      assertEquals(0, minute0.getMinute());
      assertEquals(140440089600000L, minute0.getFirstMillisecond());
      assertEquals(140440089600000L, minute0.getLastMillisecond());
      assertEquals(0, minute0.getHourValue());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      TimeSeries timeSeries0 = new TimeSeries(minute0, "~=2rKxFtToo;8N4g", "~=2rKxFtToo;8N4g");
      assertNotNull(timeSeries0);
      assertEquals("Fri May 15 00:00:00 GMT 6420", mockDate0.toString());
      assertEquals(0, minute0.getMinute());
      assertEquals(140440089600000L, minute0.getFirstMillisecond());
      assertEquals(140440089600000L, minute0.getLastMillisecond());
      assertEquals(0, minute0.getHourValue());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("~=2rKxFtToo;8N4g", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("~=2rKxFtToo;8N4g", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("Fri May 15 00:00:00 GMT 6420", mockDate0.toString());
      assertEquals(0, minute0.getMinute());
      assertEquals(140440089600000L, minute0.getFirstMillisecond());
      assertEquals(140440089600000L, minute0.getLastMillisecond());
      assertEquals(0, minute0.getHourValue());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("~=2rKxFtToo;8N4g", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("~=2rKxFtToo;8N4g", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, true);
      assertNull(range0);
      assertEquals("Fri May 15 00:00:00 GMT 6420", mockDate0.toString());
      assertEquals(0, minute0.getMinute());
      assertEquals(140440089600000L, minute0.getFirstMillisecond());
      assertEquals(140440089600000L, minute0.getLastMillisecond());
      assertEquals(0, minute0.getHourValue());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("~=2rKxFtToo;8N4g", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("~=2rKxFtToo;8N4g", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 59;
      doubleArray0[1] = (double) 59;
      doubleArray0[2] = (double) 59;
      doubleArray0[3] = (double) 4547;
      doubleArray0[4] = (double) (-381);
      doubleArray0[5] = 1057.13;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      DateFormatSymbols dateFormatSymbols0 = mockSimpleDateFormat0.getDateFormatSymbols();
      assertNotNull(dateFormatSymbols0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      assertNotNull(date0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      boolean boolean0 = mockDate0.before(date0);
      assertEquals("Fri May 15 00:00:00 GMT 6420", mockDate0.toString());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertFalse(boolean0);
      
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {59.0, 59.0, 59.0, 4547.0, (-381.0), 1057.13}, doubleArray0, 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-381), 1057.13, 834, 4547.0);
      assertNotNull(xYSeries0);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(834, xYSeries0.getItemCount());
      assertEquals(1057.13, xYSeries0.getMaxX(), 0.01);
      assertEquals((-381.0), xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals((-8.495261695803274E15), xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1.39515984555575117E18, xYSeries0.getMaxY(), 0.01);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {59.0, 59.0, 59.0, 4547.0, (-381.0), 1057.13}, doubleArray0, 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, true);
      assertNull(range1);
      assertEquals("Fri May 15 00:00:00 GMT 6420", mockDate0.toString());
      assertEquals(0, minute0.getMinute());
      assertEquals(140440089600000L, minute0.getFirstMillisecond());
      assertEquals(140440089600000L, minute0.getLastMillisecond());
      assertEquals(0, minute0.getHourValue());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("~=2rKxFtToo;8N4g", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("~=2rKxFtToo;8N4g", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getRowCount();
      assertEquals(0, int0);
      
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Year year0 = new Year(1659);
      assertNotNull(year0);
      assertEquals("1659", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1659, year0.getYear());
      assertEquals(1659L, year0.getSerialIndex());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      Year year1 = (Year)year0.next();
      assertNotNull(year1);
      assertEquals("1659", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1659, year0.getYear());
      assertEquals(1659L, year0.getSerialIndex());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(1660L, year1.getSerialIndex());
      assertEquals(1660, year1.getYear());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals("1660", year1.toString());
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertFalse(year1.equals((Object)year0));
      
      int int1 = defaultBoxAndWhiskerCategoryDataset0.getColumnIndex(year0);
      assertEquals("1659", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1659, year0.getYear());
      assertEquals(1659L, year0.getSerialIndex());
      assertNotSame(year0, year1);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals((-1), int1);
      assertFalse(year0.equals((Object)year1));
      assertFalse(int1 == int0);
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 9999);
      assertNotNull(defaultPieDataset0);
      
      Double double1 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(double1);
      assertEquals(Double.NaN, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertNull(number0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) list0, true);
      assertNull(range0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Second second0 = Second.parseSecond("");
      assertNull(second0);
      
      int int2 = vectorSeriesCollection0.indexOf((Comparable) null);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      DomainOrder domainOrder0 = vectorSeriesCollection0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) vectorSeriesCollection0, true);
      assertNull(range1);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getRowCount();
      assertEquals(0, int0);
      
      MockDate mockDate0 = new MockDate((-1L));
      assertNotNull(mockDate0);
      
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      assertNotNull(serialDate0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(31, serialDate0.getDayOfMonth());
      assertEquals(25568, serialDate0.toSerial());
      assertEquals(4, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      assertEquals(1969, serialDate0.getYYYY());
      assertEquals(12, serialDate0.getMonth());
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1L), (-1.0), (-1.0), (-1L), 1);
      assertNotNull(oHLCDataItem0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-2600.629113809805), 587.986478461569, 1, 1.5, (-1508.7475));
      assertNotNull(oHLCDataItem1);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(serialDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(31, serialDate0.getDayOfMonth());
      assertEquals(25568, serialDate0.toSerial());
      assertEquals(4, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      assertEquals(1969, serialDate0.getYYYY());
      assertEquals(12, serialDate0.getMonth());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, false);
      assertNotNull(range0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(31, serialDate0.getDayOfMonth());
      assertEquals(25568, serialDate0.toSerial());
      assertEquals(4, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      assertEquals(1969, serialDate0.getYYYY());
      assertEquals(12, serialDate0.getMonth());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, false);
      assertNotNull(range1);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(31, serialDate0.getDayOfMonth());
      assertEquals(25568, serialDate0.toSerial());
      assertEquals(4, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      assertEquals(1969, serialDate0.getYYYY());
      assertEquals(12, serialDate0.getMonth());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, oHLCDataItemArray0.length);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1L));
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals((-1L), hour0.getFirstMillisecond());
      assertEquals(23, hour0.getHour());
      assertEquals((-1L), hour0.getLastMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[6];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(0, 0, 23, 0, (-833), (-833));
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      dateArray0[5] = (Date) mockDate1;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) (-833);
      doubleArray0[2] = (double) (-833);
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(hour0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals((-1L), hour0.getFirstMillisecond());
      assertEquals(23, hour0.getHour());
      assertEquals((-1L), hour0.getLastMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(6, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), (-833.0), (-833.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      jDBCCategoryDataset0.addValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection1);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0, true);
      assertNull(range0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      double double0 = DatasetUtilities.calculateStackTotal(jDBCXYDataset0, 180);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0.0, double0, 0.01);
      
      double double1 = DatasetUtilities.calculateStackTotal(jDBCXYDataset0, 3482);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      assertNotNull(mockSimpleDateFormat0);
      
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      assertNotNull(date0);
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 2867.82, 1.0, 2867.82, 2867.82, (-227.99));
      assertNotNull(oHLCDataItem0);
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, 1.0, 870.631, (-830.8921), 2867.82, (-1500.0));
      assertNotNull(oHLCDataItem1);
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      oHLCDataItemArray0[0] = oHLCDataItem1;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem1;
      oHLCDataItemArray0[4] = oHLCDataItem1;
      oHLCDataItemArray0[5] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(6, oHLCDataItemArray0.length);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, true);
      assertNull(range0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      assertNotNull(jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      double double0 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 366);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.0, double0, 0.01);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (Comparable) oHLCDataItem0);
      assertNotNull(pieDataset0);
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      double[][] doubleArray0 = new double[10][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, doubleArray0.length);
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(double0);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(10, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timePeriodValuesCollection0, true);
      assertNull(range0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      assertNull(range1);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      double[][] doubleArray0 = new double[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(histogramDataset0);
      assertNotNull(intervalXYDelegate0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      
      defaultIntervalCategoryDataset0.removeChangeListener(intervalXYDelegate0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, number0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][0];
      Number[] numberArray1 = new Number[2];
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer0);
      assertEquals(100, (int)integer0);
      
      numberArray1[0] = (Number) integer0;
      Float float0 = new Float(1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      numberArray1[1] = (Number) float0;
      numberArray0[0] = numberArray1;
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultXYDataset0, (List) linkedList0, false);
      assertNull(range0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null, (double) 1.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-93.21691);
      doubleArray0[2] = 971.9664;
      doubleArray0[3] = 1090.07407169969;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 2241.3455569724315;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-93.21691), 0.0, 971.9664, 1090.07407169969, Double.NaN, 2241.3455569724315}, doubleArray0, 0.01);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection1);
      assertEquals(0, timeSeriesCollection1.getSeriesCount());
      assertTrue(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) xYSeriesCollection0);
      assertNotNull(number0);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-168.46781314038);
      doubleArray1[1] = 1052.6482;
      doubleArray1[2] = (-2518.0);
      doubleArray1[3] = 627.013;
      doubleArray1[4] = (-4465.626212);
      doubleArray1[5] = 684.5769831685;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1555.27167078;
      doubleArray2[1] = 684.5769831685;
      doubleArray2[2] = (-168.46781314038);
      doubleArray2[3] = (-168.46781314038);
      doubleArray2[4] = (-0.3333333333333333);
      doubleArray2[5] = 86.0;
      doubleArray2[6] = 627.013;
      doubleArray2[7] = (-2518.0);
      doubleArray2[8] = 627.013;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of row keys does not match the number of rows in the data array.", "}n(DD2E", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals((-4465.626212), number0);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      MockDate mockDate0 = new MockDate(4547, (-307), (-381));
      assertNotNull(mockDate0);
      
      Minute minute0 = new Minute(mockDate0);
      assertNotNull(minute0);
      assertEquals("Fri May 15 00:00:00 GMT 6420", mockDate0.toString());
      assertEquals(0, minute0.getMinute());
      assertEquals(140440089600000L, minute0.getLastMillisecond());
      assertEquals(0, minute0.getHourValue());
      assertEquals(140440089600000L, minute0.getFirstMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      TimeSeries timeSeries0 = new TimeSeries(minute0, "~=2rKxFtToo;8N4g", "~=2rKxFtToo;8N4g");
      assertNotNull(timeSeries0);
      assertEquals("Fri May 15 00:00:00 GMT 6420", mockDate0.toString());
      assertEquals(0, minute0.getMinute());
      assertEquals(140440089600000L, minute0.getLastMillisecond());
      assertEquals(0, minute0.getHourValue());
      assertEquals(140440089600000L, minute0.getFirstMillisecond());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("~=2rKxFtToo;8N4g", timeSeries0.getDomainDescription());
      assertEquals("~=2rKxFtToo;8N4g", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("Fri May 15 00:00:00 GMT 6420", mockDate0.toString());
      assertEquals(0, minute0.getMinute());
      assertEquals(140440089600000L, minute0.getLastMillisecond());
      assertEquals(0, minute0.getHourValue());
      assertEquals(140440089600000L, minute0.getFirstMillisecond());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("~=2rKxFtToo;8N4g", timeSeries0.getDomainDescription());
      assertEquals("~=2rKxFtToo;8N4g", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, true);
      assertNull(range0);
      assertEquals("Fri May 15 00:00:00 GMT 6420", mockDate0.toString());
      assertEquals(0, minute0.getMinute());
      assertEquals(140440089600000L, minute0.getLastMillisecond());
      assertEquals(0, minute0.getHourValue());
      assertEquals(140440089600000L, minute0.getFirstMillisecond());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("~=2rKxFtToo;8N4g", timeSeries0.getDomainDescription());
      assertEquals("~=2rKxFtToo;8N4g", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 59;
      doubleArray0[1] = (double) 59;
      doubleArray0[2] = (double) 59;
      doubleArray0[3] = (double) 4547;
      doubleArray0[4] = (double) (-381);
      doubleArray0[5] = 1057.13;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      assertNotNull(date0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      boolean boolean0 = mockDate0.before(date0);
      assertEquals("Fri May 15 00:00:00 GMT 6420", mockDate0.toString());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertFalse(boolean0);
      
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {59.0, 59.0, 59.0, 4547.0, (-381.0), 1057.13}, doubleArray0, 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-381), 1057.13, 834, 4547.0);
      assertNotNull(xYSeries0);
      assertEquals((-381.0), xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-8.495261695803274E15), xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1.39515984555575117E18, xYSeries0.getMaxY(), 0.01);
      assertEquals(1057.13, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(834, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {59.0, 59.0, 59.0, 4547.0, (-381.0), 1057.13}, doubleArray0, 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      mockDate0.setTime(0L);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, false);
      assertNull(range2);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0, minute0.getMinute());
      assertEquals(140440089600000L, minute0.getLastMillisecond());
      assertEquals(0, minute0.getHourValue());
      assertEquals(140440089600000L, minute0.getFirstMillisecond());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("~=2rKxFtToo;8N4g", timeSeries0.getDomainDescription());
      assertEquals("~=2rKxFtToo;8N4g", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      XYDataset xYDataset0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Vector<DefaultStatisticalCategoryDataset> vector0 = new Vector<DefaultStatisticalCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("|u_G<tN53]g060.a'\"", "org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset", (Number[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList1 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-391.715601392014);
      doubleArray0[1] = (-1.7976931348623157E308);
      doubleArray0[3] = (-2189.995);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertNotNull(doubleArray1);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertNotNull(doubleArray2);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = polynomialFunction2D0.getCoefficients();
      assertNotNull(doubleArray3);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray3.length);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-68.3663945), 0.0, 4, (-391.715601392014));
      assertNotNull(xYSeriesCollection0);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range0);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals((-391.715601392014), range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      
      Range range1 = Range.shift(range0, (-4542.2619), false);
      assertNotNull(range1);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals((-391.715601392014), range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertEquals((-4933.977501392014), range1.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(range1.equals((Object)range0));
      
      ArrayList<DefaultIntervalXYDataset> arrayList0 = new ArrayList<DefaultIntervalXYDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) arrayList0, range0, true);
      assertNull(range2);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals((-391.715601392014), range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(range0, range1);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(range0.equals((Object)range1));
      
      Range range3 = Range.combine(range1, range1);
      assertNotNull(range3);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals((-391.715601392014), range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertEquals((-4933.977501392014), range1.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range3.getLength(), 0.01);
      assertEquals((-4933.977501392014), range3.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range3.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range3.getUpperBound(), 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertTrue(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      Year year0 = new Year(14);
      assertNotNull(year0);
      assertEquals(14, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("14", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(14L, year0.getSerialIndex());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      MockDate mockDate0 = new MockDate((-9999), 0, 9999, 0, (-2538), 14);
      assertNotNull(mockDate0);
      
      Week week0 = new Week(mockDate0);
      assertNotNull(week0);
      assertEquals("Wed May 15 05:42:14 GMT 8073", mockDate0.toString());
      assertEquals(8073, week0.getYearValue());
      assertEquals(427889L, week0.getSerialIndex());
      assertEquals((-316888654666001L), week0.getLastMillisecond());
      assertEquals((-316888654666000L), week0.getFirstMillisecond());
      assertEquals(20, week0.getWeek());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      
      Week week1 = (Week)week0.next();
      assertNotNull(week1);
      assertEquals("Wed May 15 05:42:14 GMT 8073", mockDate0.toString());
      assertEquals(8073, week0.getYearValue());
      assertEquals(427889L, week0.getSerialIndex());
      assertEquals((-316888654666001L), week0.getLastMillisecond());
      assertEquals((-316888654666000L), week0.getFirstMillisecond());
      assertEquals(20, week0.getWeek());
      assertEquals(427890L, week1.getSerialIndex());
      assertEquals(21, week1.getWeek());
      assertEquals(8073, week1.getYearValue());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertFalse(week1.equals((Object)week0));
      
      Range range0 = new Range((-1.0), 9999);
      assertNotNull(range0);
      assertEquals(10000.0, range0.getLength(), 0.01);
      assertEquals(4999.0, range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(9999.0, range0.getUpperBound(), 0.01);
      
      Range range1 = Range.shift(range0, (double) 1, true);
      assertNotNull(range1);
      assertEquals(10000.0, range0.getLength(), 0.01);
      assertEquals(4999.0, range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(9999.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(10000.0, range1.getLength(), 0.01);
      assertEquals(5000.0, range1.getCentralValue(), 0.01);
      assertEquals(10000.0, range1.getUpperBound(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      Vector<DefaultStatisticalCategoryDataset> vector0 = new Vector<DefaultStatisticalCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) timePeriodValuesCollection0, (List) vector0, range0, true);
      assertNull(range2);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(10000.0, range0.getLength(), 0.01);
      assertEquals(4999.0, range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(9999.0, range0.getUpperBound(), 0.01);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNotSame(range0, range1);
      assertFalse(range0.equals((Object)range1));
      
      Range range3 = Range.combine((Range) null, range1);
      assertNotNull(range3);
      assertEquals(10000.0, range0.getLength(), 0.01);
      assertEquals(4999.0, range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(9999.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(10000.0, range1.getLength(), 0.01);
      assertEquals(5000.0, range1.getCentralValue(), 0.01);
      assertEquals(10000.0, range1.getUpperBound(), 0.01);
      assertEquals(5000.0, range3.getCentralValue(), 0.01);
      assertEquals(10000.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(10000.0, range3.getLength(), 0.01);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertSame(range1, range3);
      assertSame(range3, range1);
      assertNotSame(range3, range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range3.equals((Object)range0));
      
      Range range4 = Range.combine(range0, (Range) null);
      assertNotNull(range4);
      assertEquals(10000.0, range0.getLength(), 0.01);
      assertEquals(4999.0, range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(9999.0, range0.getUpperBound(), 0.01);
      assertEquals(9999.0, range4.getUpperBound(), 0.01);
      assertEquals((-1.0), range4.getLowerBound(), 0.01);
      assertEquals(4999.0, range4.getCentralValue(), 0.01);
      assertEquals(10000.0, range4.getLength(), 0.01);
      assertSame(range0, range4);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertSame(range4, range0);
      assertNotSame(range4, range1);
      assertNotSame(range4, range3);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range3));
      
      Number[][] numberArray0 = new Number[2][4];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[2];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) 9999;
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      numberArray2[1] = (Number) integer0;
      numberArray0[1] = numberArray2;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset", "", numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(2, numberArray0.length);
      
      Range range5 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNotNull(range5);
      assertEquals(9999.0, range5.getUpperBound(), 0.01);
      assertEquals(4999.5, range5.getCentralValue(), 0.01);
      assertEquals(0.0, range5.getLowerBound(), 0.01);
      assertEquals(9999.0, range5.getLength(), 0.01);
      assertNotSame(range5, range0);
      assertNotSame(range5, range1);
      assertNotSame(range5, range4);
      assertNotSame(range5, range3);
      assertEquals(2, numberArray0.length);
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range3));
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      assertNotNull(serialDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(41684, serialDate0.toSerial());
      assertEquals(14, serialDate0.getDayOfMonth());
      assertEquals(2, serialDate0.getMonth());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertEquals(2014, serialDate0.getYYYY());
      assertNull(serialDate0.getDescription());
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertNull(number0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (-2499));
      assertNotNull(pieDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset1 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset1);
      assertTrue(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset1);
      assertNull(number1);
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
      assertTrue(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) stack0, true);
      assertNull(range0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset1));
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      int int0 = vectorSeriesCollection0.indexOf(serialDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(41684, serialDate0.toSerial());
      assertEquals(14, serialDate0.getDayOfMonth());
      assertEquals(2, serialDate0.getMonth());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertEquals(2014, serialDate0.getYYYY());
      assertNull(serialDate0.getDescription());
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals((-1), int0);
      
      DomainOrder domainOrder0 = vectorSeriesCollection0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) vectorSeriesCollection0);
      assertNull(range1);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset1, (List) stack0, true);
      assertNull(range2);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
      assertTrue(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      
      Range range3 = DatasetUtilities.findDomainBounds((XYDataset) vectorSeriesCollection0, true);
      assertNull(range3);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range4 = DatasetUtilities.iterateXYRangeBounds(vectorSeriesCollection0);
      assertNull(range4);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-93.21691);
      doubleArray0[1] = 2241.3455569724315;
      doubleArray0[2] = 971.9664;
      doubleArray0[3] = 1090.07407169969;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 2241.3455569724315;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-93.21691), 2241.3455569724315, 971.9664, 1090.07407169969, Double.NaN, 2241.3455569724315}, doubleArray0, 0.01);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertNotNull(doubleArray1);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {(-93.21691), 2241.3455569724315, 971.9664, 1090.07407169969, Double.NaN, 2241.3455569724315}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-93.21691), 2241.3455569724315, 971.9664, 1090.07407169969, Double.NaN, 2241.3455569724315}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertNotNull(doubleArray2);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertArrayEquals(new double[] {(-93.21691), 2241.3455569724315, 971.9664, 1090.07407169969, Double.NaN, 2241.3455569724315}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-93.21691), 2241.3455569724315, 971.9664, 1090.07407169969, Double.NaN, 2241.3455569724315}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double[] doubleArray3 = polynomialFunction2D0.getCoefficients();
      assertNotNull(doubleArray3);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray3.length);
      assertArrayEquals(new double[] {(-93.21691), 2241.3455569724315, 971.9664, 1090.07407169969, Double.NaN, 2241.3455569724315}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-93.21691), 2241.3455569724315, 971.9664, 1090.07407169969, Double.NaN, 2241.3455569724315}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      // Undeclared exception!
      DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 2241.3455569724315, Double.POSITIVE_INFINITY, 839, 971.9664);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset1 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset1);
      assertTrue(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean0 = false;
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset1, (List) linkedList1, false);
      assertNull(range0);
      assertEquals(0, linkedList1.size());
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
      assertTrue(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      
      List<Float> list0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) null, (List) linkedList0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      Second second1 = (Second)second0.next();
      assertNotNull(second1);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(22, second1.getSecond());
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertFalse(second1.equals((Object)second0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertTrue(boolean0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) linkedList0, false);
      assertNull(range0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getRowCount();
      assertEquals(0, int0);
      
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Year year0 = new Year(14);
      assertNotNull(year0);
      assertEquals(14L, year0.getSerialIndex());
      assertEquals(14, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("14", year0.toString());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      Year year1 = (Year)year0.next();
      assertNotNull(year1);
      assertEquals(14L, year0.getSerialIndex());
      assertEquals(14, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("14", year0.toString());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(15L, year1.getSerialIndex());
      assertEquals(15, year1.getYear());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals("15", year1.toString());
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertFalse(year1.equals((Object)year0));
      
      int int1 = defaultBoxAndWhiskerCategoryDataset0.getColumnIndex(year0);
      assertEquals(14L, year0.getSerialIndex());
      assertEquals(14, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("14", year0.toString());
      assertNotSame(year0, year1);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-1), int1);
      assertFalse(year0.equals((Object)year1));
      assertFalse(int1 == int0);
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 369);
      assertNotNull(defaultPieDataset0);
      
      Double double1 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(double1);
      assertEquals(Double.NaN, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertNull(number0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) list0, true);
      assertNull(range0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Comparable<Double>[] comparableArray0 = (Comparable<Double>[]) Array.newInstance(Comparable.class, 6);
      comparableArray0[0] = (Comparable<Double>) year1;
      comparableArray0[1] = (Comparable<Double>) year1;
      comparableArray0[3] = (Comparable<Double>) double1;
      comparableArray0[4] = (Comparable<Double>) double0;
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      int int2 = vectorSeriesCollection0.indexOf(comparableArray0[4]);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertEquals((-1), int2);
      assertEquals(6, comparableArray0.length);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      DomainOrder domainOrder0 = vectorSeriesCollection0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) vectorSeriesCollection0);
      assertNull(range1);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) list0, true);
      assertNull(range2);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Range range3 = DatasetUtilities.findDomainBounds((XYDataset) vectorSeriesCollection0, true);
      assertNull(range3);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      Class<DefaultOHLCDataset> class0 = DefaultOHLCDataset.class;
      Class class1 = RegularTimePeriod.downsize(class0);
      assertNotNull(class1);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertEquals("class org.jfree.data.time.Millisecond", class1.toString());
      assertFalse(class1.isEnum());
      
      Second second1 = (Second)second0.next();
      assertNotNull(second1);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(22, second1.getSecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertFalse(second1.equals((Object)second0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, (Comparable) second0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      Second second1 = (Second)second0.next();
      assertNotNull(second1);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(22, second1.getSecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertFalse(second1.equals((Object)second0));
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(second1);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(22, second1.getSecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertFalse(second0.equals((Object)second1));
      assertFalse(second1.equals((Object)second0));
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(22, second1.getSecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertTrue(boolean0);
      assertFalse(second0.equals((Object)second1));
      assertFalse(second1.equals((Object)second0));
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      assertNotNull(serialDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      assertEquals(14, serialDate0.getDayOfMonth());
      assertEquals(41684, serialDate0.toSerial());
      assertEquals(2, serialDate0.getMonth());
      assertEquals(2014, serialDate0.getYYYY());
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1347.996892972752, 1347.996892972752, 4, 2.0, 1330.096);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1, (-3694.96938), 1529.19, (-1855.2), 1);
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem1;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, false);
      assertNotNull(range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(3, oHLCDataItemArray0.length);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection1);
      assertNotNull(jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      double double0 = DatasetUtilities.calculateStackTotal(jDBCXYDataset0, 1);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0.0, double0, 0.01);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0, Double.POSITIVE_INFINITY);
      assertNotNull(range1);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timePeriodValuesCollection0, false);
      assertNull(range0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      assertNotNull(serialDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(25569, serialDate0.toSerial());
      assertEquals(1, serialDate0.getDayOfMonth());
      assertEquals(1, serialDate0.getMonth());
      assertEquals(1970, serialDate0.getYYYY());
      assertNull(serialDate0.getDescription());
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection1);
      assertNotNull(jDBCPieDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) serialDate0, (KeyedValues) jDBCPieDataset0);
      assertNotNull(categoryDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(25569, serialDate0.toSerial());
      assertEquals(1, serialDate0.getDayOfMonth());
      assertEquals(1, serialDate0.getMonth());
      assertEquals(1970, serialDate0.getYYYY());
      assertNull(serialDate0.getDescription());
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNull(number0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(25569, serialDate0.toSerial());
      assertEquals(1, serialDate0.getDayOfMonth());
      assertEquals(1, serialDate0.getMonth());
      assertEquals(1970, serialDate0.getYYYY());
      assertNull(serialDate0.getDescription());
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      
      Range range1 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertNull(range1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(25569, serialDate0.toSerial());
      assertEquals(1, serialDate0.getDayOfMonth());
      assertEquals(1, serialDate0.getMonth());
      assertEquals(1970, serialDate0.getYYYY());
      assertNull(serialDate0.getDescription());
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultXYDataset0, false);
      assertNull(range2);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-640.378), (-1));
      assertNotNull(lineFunction2D0);
      assertEquals((-640.378), lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-1.0), lineFunction2D0.getSlope(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, (-3901.861484665), 0.0, 2, mockDate0);
      assertNotNull(xYSeriesCollection0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals((-640.378), lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-1.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) serialDate0);
      assertNotNull(defaultPieDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(25569, serialDate0.toSerial());
      assertEquals(1, serialDate0.getDayOfMonth());
      assertEquals(1, serialDate0.getMonth());
      assertEquals(1970, serialDate0.getYYYY());
      assertNull(serialDate0.getDescription());
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(jDBCCategoryDataset0, 1900, 1);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(1, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1900, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(jDBCCategoryDataset0.getTranspose());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getRowCount();
      assertEquals(0, int0);
      
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, 369);
      assertNotNull(pieDataset0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(number1);
      assertEquals(Double.NaN, number1);
      assertTrue(number1.equals((Object)number0));
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Number number2 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(number2);
      assertEquals(Double.NaN, number2);
      assertTrue(number2.equals((Object)number0));
      assertTrue(number2.equals((Object)number1));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNull(range0);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultXYDataset0, true);
      assertNull(range1);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-2849.2063016859), 2182, true, true);
      assertNotNull(simpleHistogramBin0);
      assertEquals((-2849.2063016859), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(2182.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) list0, true);
      assertNull(range2);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      MockDate mockDate0 = new MockDate((-5));
      assertNotNull(mockDate0);
      
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      assertNotNull(serialDate0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(12, serialDate0.getMonth());
      assertEquals(31, serialDate0.getDayOfMonth());
      assertEquals(25568, serialDate0.toSerial());
      assertEquals(4, serialDate0.getDayOfWeek());
      assertEquals(1969, serialDate0.getYYYY());
      assertNull(serialDate0.getDescription());
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      
      SerialDate serialDate1 = SerialDate.addMonths((-5), serialDate0);
      assertNotNull(serialDate1);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(12, serialDate0.getMonth());
      assertEquals(31, serialDate0.getDayOfMonth());
      assertEquals(25568, serialDate0.toSerial());
      assertEquals(4, serialDate0.getDayOfWeek());
      assertEquals(1969, serialDate0.getYYYY());
      assertNull(serialDate0.getDescription());
      assertEquals(1969, serialDate1.getYYYY());
      assertEquals(31, serialDate1.getDayOfMonth());
      assertEquals(25415, serialDate1.toSerial());
      assertNull(serialDate1.getDescription());
      assertEquals(7, serialDate1.getMonth());
      assertEquals(5, serialDate1.getDayOfWeek());
      assertNotSame(serialDate0, serialDate1);
      assertNotSame(serialDate1, serialDate0);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertFalse(serialDate1.equals((Object)serialDate0));
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(serialDate1, "PY+1phC'x}:bxq%Zvb3", "PY+1phC'x}:bxq%Zvb3");
      assertNotNull(timePeriodValues0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(12, serialDate0.getMonth());
      assertEquals(31, serialDate0.getDayOfMonth());
      assertEquals(25568, serialDate0.toSerial());
      assertEquals(4, serialDate0.getDayOfWeek());
      assertEquals(1969, serialDate0.getYYYY());
      assertNull(serialDate0.getDescription());
      assertEquals(1969, serialDate1.getYYYY());
      assertEquals(31, serialDate1.getDayOfMonth());
      assertEquals(25415, serialDate1.toSerial());
      assertNull(serialDate1.getDescription());
      assertEquals(7, serialDate1.getMonth());
      assertEquals(5, serialDate1.getDayOfWeek());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("PY+1phC'x}:bxq%Zvb3", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("PY+1phC'x}:bxq%Zvb3", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertFalse(serialDate0.equals((Object)serialDate1));
      assertFalse(serialDate1.equals((Object)serialDate0));
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(12, serialDate0.getMonth());
      assertEquals(31, serialDate0.getDayOfMonth());
      assertEquals(25568, serialDate0.toSerial());
      assertEquals(4, serialDate0.getDayOfWeek());
      assertEquals(1969, serialDate0.getYYYY());
      assertNull(serialDate0.getDescription());
      assertEquals(1969, serialDate1.getYYYY());
      assertEquals(31, serialDate1.getDayOfMonth());
      assertEquals(25415, serialDate1.toSerial());
      assertNull(serialDate1.getDescription());
      assertEquals(7, serialDate1.getMonth());
      assertEquals(5, serialDate1.getDayOfWeek());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("PY+1phC'x}:bxq%Zvb3", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("PY+1phC'x}:bxq%Zvb3", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertFalse(serialDate0.equals((Object)serialDate1));
      assertFalse(serialDate1.equals((Object)serialDate0));
      
      boolean boolean0 = timePeriodValuesCollection0.equals(timePeriodValues0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(12, serialDate0.getMonth());
      assertEquals(31, serialDate0.getDayOfMonth());
      assertEquals(25568, serialDate0.toSerial());
      assertEquals(4, serialDate0.getDayOfWeek());
      assertEquals(1969, serialDate0.getYYYY());
      assertNull(serialDate0.getDescription());
      assertEquals(1969, serialDate1.getYYYY());
      assertEquals(31, serialDate1.getDayOfMonth());
      assertEquals(25415, serialDate1.toSerial());
      assertNull(serialDate1.getDescription());
      assertEquals(7, serialDate1.getMonth());
      assertEquals(5, serialDate1.getDayOfWeek());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("PY+1phC'x}:bxq%Zvb3", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("PY+1phC'x}:bxq%Zvb3", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotSame(serialDate0, serialDate1);
      assertNotSame(serialDate1, serialDate0);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertFalse(boolean0);
      assertFalse(serialDate0.equals((Object)serialDate1));
      assertFalse(serialDate1.equals((Object)serialDate0));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, true);
      assertNull(range0);
      assertEquals(0, linkedList0.size());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timePeriodValuesCollection0);
      assertNull(range1);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(12, serialDate0.getMonth());
      assertEquals(31, serialDate0.getDayOfMonth());
      assertEquals(25568, serialDate0.toSerial());
      assertEquals(4, serialDate0.getDayOfWeek());
      assertEquals(1969, serialDate0.getYYYY());
      assertNull(serialDate0.getDescription());
      assertEquals(1969, serialDate1.getYYYY());
      assertEquals(31, serialDate1.getDayOfMonth());
      assertEquals(25415, serialDate1.toSerial());
      assertNull(serialDate1.getDescription());
      assertEquals(7, serialDate1.getMonth());
      assertEquals(5, serialDate1.getDayOfWeek());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("PY+1phC'x}:bxq%Zvb3", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("PY+1phC'x}:bxq%Zvb3", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotSame(serialDate0, serialDate1);
      assertNotSame(serialDate1, serialDate0);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertFalse(serialDate0.equals((Object)serialDate1));
      assertFalse(serialDate1.equals((Object)serialDate0));
      
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(2046, "PY+1phC'x}:bxq%Zvb3", 2958465, 0, 2, 0, 2365, (-2656), 4, 459, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal end month 2365
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = new Range(Double.NEGATIVE_INFINITY, 0.0);
      assertNotNull(range0);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      
      Range range1 = Range.shift(range0, Double.NEGATIVE_INFINITY, false);
      assertNotNull(range1);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYTaskDataset0, (List) linkedList0, range1, false);
      assertNull(range2);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 0.0, 1405.14508487051, 479, 0.0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (Comparable) 0.0);
      assertNotNull(defaultPieDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((Comparable) 0.0, (KeyedValues) defaultPieDataset0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      double[][] doubleArray1 = new double[6][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 479;
      doubleArray2[1] = (double) 479;
      doubleArray2[2] = (-835.01);
      doubleArray2[3] = (double) 479;
      doubleArray2[4] = Double.NEGATIVE_INFINITY;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = (-2155.311592);
      doubleArray2[8] = 1405.14508487051;
      doubleArray1[5] = doubleArray2;
      DefaultCategoryDataset defaultCategoryDataset1 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("i%", "i%", doubleArray1);
      assertNotNull(defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
      assertEquals(6, doubleArray1.length);
      assertFalse(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      
      Range range3 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range3);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1406.14508487051, range3.getLength(), 0.01);
      assertEquals(702.572542435255, range3.getCentralValue(), 0.01);
      assertEquals(1405.64508487051, range3.getUpperBound(), 0.01);
      assertEquals((-0.5), range3.getLowerBound(), 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = new Range(1491.49339010284, 1491.49339010284);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1491.49339010284, range0.getLowerBound(), 0.01);
      assertEquals(1491.49339010284, range0.getCentralValue(), 0.01);
      assertEquals(1491.49339010284, range0.getUpperBound(), 0.01);
      
      Range range1 = Range.shift(range0, 0.0, true);
      assertNotNull(range1);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1491.49339010284, range0.getLowerBound(), 0.01);
      assertEquals(1491.49339010284, range0.getCentralValue(), 0.01);
      assertEquals(1491.49339010284, range0.getUpperBound(), 0.01);
      assertEquals(1491.49339010284, range1.getLowerBound(), 0.01);
      assertEquals(1491.49339010284, range1.getCentralValue(), 0.01);
      assertEquals(1491.49339010284, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      assertNull(range2);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      double[][] doubleArray0 = new double[8][4];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1491.49339010284;
      doubleArray1[1] = 1491.49339010284;
      doubleArray1[2] = 1491.49339010284;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 1491.49339010284;
      doubleArray1[7] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = 1480.553650204;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 1491.49339010284;
      doubleArray4[1] = (-3510.8587549738);
      doubleArray4[2] = (-1.0);
      doubleArray4[3] = (-1.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = 1491.49339010284;
      doubleArray5[1] = (-1.0);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      
      doubleArray6[0] = (-3510.8587549738);
      doubleArray6[1] = 888.8785582120881;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      
      doubleArray7[0] = (-1679.945002);
      doubleArray7[1] = 888.8785582120881;
      doubleArray7[2] = 888.8785582120881;
      doubleArray7[3] = (-1.0);
      doubleArray7[4] = 1480.553650204;
      doubleArray7[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[3];
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      
      doubleArray8[0] = 0.0;
      doubleArray8[1] = Double.NEGATIVE_INFINITY;
      doubleArray8[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[7] = doubleArray8;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNull(range0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range1 = categoryTableXYDataset0.getDomainBounds(true);
      assertNull(range1);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Vector<DynamicTimeSeriesCollection> vector0 = new Vector<DynamicTimeSeriesCollection>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals((-1), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      
      JList<Double> jList0 = new JList<Double>();
      assertNotNull(jList0);
      assertTrue(jList0.getFocusTraversalKeysEnabled());
      assertFalse(jList0.getIgnoreRepaint());
      assertFalse(jList0.isFocusTraversalPolicySet());
      assertFalse(jList0.isFocusCycleRoot());
      assertFalse(jList0.isFocusTraversalPolicyProvider());
      
      DropMode dropMode0 = jList0.getDropMode();
      assertTrue(jList0.getFocusTraversalKeysEnabled());
      assertFalse(jList0.getIgnoreRepaint());
      assertFalse(jList0.isFocusTraversalPolicySet());
      assertFalse(jList0.isFocusCycleRoot());
      assertFalse(jList0.isFocusTraversalPolicyProvider());
      assertEquals(DropMode.USE_SELECTION, dropMode0);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      assertNull(range2);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) dynamicTimeSeriesCollection0);
      assertNotNull(number0);
      assertEquals((-1), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getRowCount();
      assertEquals(0, int0);
      
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, 369);
      assertNotNull(pieDataset0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(number1);
      assertEquals(Double.NaN, number1);
      assertTrue(number1.equals((Object)number0));
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Number number2 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(number2);
      assertEquals(Double.NaN, number2);
      assertTrue(number2.equals((Object)number0));
      assertTrue(number2.equals((Object)number1));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNull(range0);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultXYDataset0, true);
      assertNull(range1);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-2849.2063016859), 2182, true, true);
      assertNotNull(simpleHistogramBin0);
      assertEquals((-2849.2063016859), simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(2182.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      
      Comparable<DefaultBoxAndWhiskerCategoryDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerCategoryDataset>[]) Array.newInstance(Comparable.class, 3);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(yIntervalSeriesCollection0);
      assertNull(number0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      double[][] doubleArray0 = new double[7][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("?$h8R&TIgA1f(7``,", "?$h8R&TIgA1f(7``,", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(7, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(7, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertEquals(7, doubleArray0.length);
      assertTrue(range1.equals((Object)range0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) "?$h8R&TIgA1f(7``,", (KeyedValues) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowData' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      List list1 = defaultBoxAndWhiskerCategoryDataset0.getRowKeys();
      assertNotNull(list1);
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (-7));
      assertNotNull(pieDataset0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(number1);
      assertEquals(Double.NaN, number1);
      assertTrue(number1.equals((Object)number0));
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      List list2 = defaultCategoryDataset0.getColumnKeys();
      assertNotNull(list2);
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      
      Number number2 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(number2);
      assertEquals(Double.NaN, number2);
      assertTrue(number2.equals((Object)number1));
      assertTrue(number2.equals((Object)number0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNull(range0);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      assertNotNull(serialDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNull(serialDate0.getDescription());
      assertEquals(2014, serialDate0.getYYYY());
      assertEquals(2, serialDate0.getMonth());
      assertEquals(41684, serialDate0.toSerial());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertEquals(14, serialDate0.getDayOfMonth());
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertNull(number0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (-2499));
      assertNotNull(pieDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset1 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset1);
      assertTrue(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      
      Integer integer0 = new Integer(5);
      assertNotNull(integer0);
      assertEquals(5, (int)integer0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) stack0, true);
      assertNull(range0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset1));
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      int int0 = vectorSeriesCollection0.indexOf(serialDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNull(serialDate0.getDescription());
      assertEquals(2014, serialDate0.getYYYY());
      assertEquals(2, serialDate0.getMonth());
      assertEquals(41684, serialDate0.toSerial());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertEquals(14, serialDate0.getDayOfMonth());
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals((-1), int0);
      
      DomainOrder domainOrder0 = vectorSeriesCollection0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) vectorSeriesCollection0);
      assertNull(range1);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset1, (List) stack0, true);
      assertNull(range2);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
      assertTrue(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      
      Range range3 = DatasetUtilities.findDomainBounds((XYDataset) vectorSeriesCollection0, true);
      assertNull(range3);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(yIntervalSeriesCollection0);
      assertNull(number0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = categoryTableXYDataset0.getDomainBounds(true);
      assertNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Vector<DynamicTimeSeriesCollection> vector0 = new Vector<DynamicTimeSeriesCollection>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) yIntervalSeriesCollection0, (List) vector0, true);
      assertNull(range1);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 2512.567898724);
      assertNotNull(range2);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(2512.567898724, range2.getCentralValue(), 0.01);
      assertEquals(2512.567898724, range2.getUpperBound(), 0.01);
      assertEquals(2512.567898724, range2.getLowerBound(), 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate("org.jfree.data.xy.XYDatasetTableModel");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, true);
      assertNull(range0);
      assertEquals(0, linkedList0.size());
      
      List<Float> list0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timePeriodValuesCollection0, (List) null, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      assertNull(range0);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      Short short0 = new Short((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      Short short1 = new Short((short)2);
      assertNotNull(short1);
      assertEquals((short)2, (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      boolean boolean0 = stack0.add(short1);
      assertFalse(stack0.contains(short0));
      assertTrue(stack0.contains(short1));
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[2]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean0);
      assertFalse(short1.equals((Object)short0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(xYSeriesCollection0, stack0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.XYSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      
      Short short0 = new Short((short)30);
      assertNotNull(short0);
      assertEquals((short)30, (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains((short)30));
      assertFalse(stack0.isEmpty());
      assertEquals("[30]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertTrue(boolean0);
      
      ArrayList<DefaultHighLowDataset> arrayList0 = new ArrayList<DefaultHighLowDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      XYSeries xYSeries0 = new XYSeries(short0, true, true);
      assertNotNull(xYSeries0);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      xYSeries0.add((Number) short0, (Number) short0, false);
      assertTrue(xYSeries0.getNotify());
      assertEquals(30.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(30.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(30.0, xYSeries0.getMinX(), 0.01);
      assertEquals(30.0, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      
      Range range0 = new Range((short)30, (short)30);
      assertNotNull(range0);
      assertEquals(30.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(30.0, range0.getCentralValue(), 0.01);
      assertEquals(30.0, range0.getUpperBound(), 0.01);
      
      Number[][] numberArray0 = new Number[1][4];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = (Number) short0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("XU@P", "XU@P", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (short)30);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(30, categoryToPieDataset0.getExtractIndex());
      assertEquals(1, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 30, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-391.715601392014);
      doubleArray0[1] = (-1.7976931348623157E308);
      doubleArray0[3] = (-2189.995);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertNotNull(doubleArray1);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertNotNull(doubleArray2);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-391.715601392014), (-1.7976931348623157E308), 0.0, (-2189.995)}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultXYDataset0, false);
      assertNull(range1);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-68.3663945), 2768.54341);
      assertNotNull(lineFunction2D0);
      assertEquals((-68.3663945), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(2768.54341, lineFunction2D0.getSlope(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-1003.36307), 0.0, (-1526), (-391.715601392014));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultMultiValueCategoryDataset0, tableOrder0, 3);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(3, categoryToPieDataset0.getExtractIndex());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(3, categoryToPieDataset0.getExtractIndex());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timePeriodValuesCollection0);
      assertNull(range0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) timePeriodValuesCollection0, (List) linkedList0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset1 = (DefaultCategoryDataset)defaultCategoryDataset0.clone();
      assertNotNull(defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
      assertTrue(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, 37);
      assertNotNull(defaultPieDataset0);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset1));
      
      double[][] doubleArray0 = new double[4][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertNull(number0);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset1));
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
      assertTrue(boolean0);
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset1));
      assertTrue(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      LinkedList<DropMode> linkedList0 = new LinkedList<DropMode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) linkedList0, true);
      assertNull(range0);
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, linkedList0.size());
      assertEquals(4, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) linkedList0, true);
      assertNull(range1);
      assertEquals(0, linkedList0.size());
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset1));
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertNull(number1);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset1));
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNull(range0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range1 = categoryTableXYDataset0.getDomainBounds(true);
      assertNull(range1);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Vector<DynamicTimeSeriesCollection> vector0 = new Vector<DynamicTimeSeriesCollection>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-1), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      
      JList<Double> jList0 = new JList<Double>();
      assertNotNull(jList0);
      assertFalse(jList0.getIgnoreRepaint());
      assertFalse(jList0.isFocusCycleRoot());
      assertFalse(jList0.isFocusTraversalPolicyProvider());
      assertFalse(jList0.isFocusTraversalPolicySet());
      assertTrue(jList0.getFocusTraversalKeysEnabled());
      
      DropMode dropMode0 = jList0.getDropMode();
      assertFalse(jList0.getIgnoreRepaint());
      assertFalse(jList0.isFocusCycleRoot());
      assertFalse(jList0.isFocusTraversalPolicyProvider());
      assertFalse(jList0.isFocusTraversalPolicySet());
      assertTrue(jList0.getFocusTraversalKeysEnabled());
      assertEquals(DropMode.USE_SELECTION, dropMode0);
      
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(dropMode0);
      assertNotNull(seriesChangeEvent0);
      assertFalse(jList0.getIgnoreRepaint());
      assertFalse(jList0.isFocusCycleRoot());
      assertFalse(jList0.isFocusTraversalPolicyProvider());
      assertFalse(jList0.isFocusTraversalPolicySet());
      assertTrue(jList0.getFocusTraversalKeysEnabled());
      
      dynamicTimeSeriesCollection0.seriesChanged(seriesChangeEvent0);
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-1), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertFalse(jList0.getIgnoreRepaint());
      assertFalse(jList0.isFocusCycleRoot());
      assertFalse(jList0.isFocusTraversalPolicyProvider());
      assertFalse(jList0.isFocusTraversalPolicySet());
      assertTrue(jList0.getFocusTraversalKeysEnabled());
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      
      boolean boolean0 = vector0.add(dynamicTimeSeriesCollection0);
      assertTrue(vector0.contains(dynamicTimeSeriesCollection0));
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-1), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertTrue(boolean0);
      
      boolean boolean1 = vector0.add(dynamicTimeSeriesCollection0);
      assertTrue(vector0.contains(dynamicTimeSeriesCollection0));
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-1), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) vector0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.DynamicTimeSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(yIntervalSeriesCollection0);
      assertNull(number0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      double[][] doubleArray0 = new double[11][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      int int0 = 369;
      int int1 = (-5);
      String string0 = ") not recognised.";
      String string1 = "";
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(") not recognised.", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertNotNull(number1);
      assertEquals(0.0, number1);
      assertEquals(11, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, 369);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 369, Size: 10
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      short short0 = (short)2;
      Short short1 = new Short((short)2);
      assertNotNull(short1);
      assertEquals((short)2, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(short0));
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultStatisticalCategoryDataset0, tableOrder0, (short)2);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertTrue(boolean0);
      
      int int0 = 2496;
      Year year0 = new Year(2496);
      assertNotNull(year0);
      assertEquals(2496, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2496L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2496", year0.toString());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      Year year1 = (Year)year0.previous();
      assertNotNull(year1);
      assertEquals(2496, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2496L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2496", year0.toString());
      assertEquals("2495", year1.toString());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(2495, year1.getYear());
      assertEquals(2495L, year1.getSerialIndex());
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertFalse(year1.equals((Object)year0));
      
      double double0 = 1834.7239742528104;
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) year1, 1834.7239742528104);
      assertNotNull(defaultPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals(2496, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2496L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2496", year0.toString());
      assertEquals("2495", year1.toString());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(2495, year1.getYear());
      assertEquals(2495L, year1.getSerialIndex());
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertFalse(year0.equals((Object)year1));
      assertFalse(year1.equals((Object)year0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timePeriodValuesCollection0, false);
      assertNull(range0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      LinkedList<ChronoLocalDate> linkedList0 = new LinkedList<ChronoLocalDate>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timePeriodValuesCollection0, (List) linkedList0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      boolean boolean0 = true;
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, false);
      assertNull(range0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timePeriodValuesCollection0, (List) linkedList0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      timeTableXYDataset0.add((TimePeriod) second0, (double) 59, "Requires 'start' < 'end'.");
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(59.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      timeTableXYDataset0.add((TimePeriod) second0, (double) 59, "Requires 'start' < 'end'.");
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 82);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 82, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getDomainBounds(true);
      Vector<DynamicTimeSeriesCollection> vector0 = new Vector<DynamicTimeSeriesCollection>();
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) vector0, true);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-1.0));
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 817);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      Range range0 = new Range(Double.NEGATIVE_INFINITY, 0.0);
      Range.shift(range0, Double.NEGATIVE_INFINITY, true);
      DatasetUtilities.findDomainBounds((XYDataset) xYTaskDataset0);
      Stack<Short> stack0 = new Stack<Short>();
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(xYTaskDataset0, linkedList0, true);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetUtilities.findMaximumDomainValue(yIntervalSeriesCollection0);
      double[][] doubleArray0 = new double[7][6];
      int int0 = (-104);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) null, (Comparable[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      List list0 = new LinkedList<JRadioButtonMenuItem>();
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) (-2538);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "0", doubleArray0);
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertEquals((-1269.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertEquals((-2538.0), range1.getUpperBound(), 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-391.715601392014);
      doubleArray0[1] = (-1.7976931348623157E308);
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = (-2189.995);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      int int0 = 4;
      DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-68.3663945), 0.0, 4, (-391.715601392014));
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap((-1.7976931348623157E308));
      Object object0 = new Object();
      keyToGroupMap0.equals(object0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, keyToGroupMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetUtilities.findMaximumDomainValue(yIntervalSeriesCollection0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Vector<DynamicTimeSeriesCollection> vector0 = new Vector<DynamicTimeSeriesCollection>();
      int int0 = 3;
      int int1 = 956;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = null;
      try {
        dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(3, 956, (RegularTimePeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Object object0 = defaultCategoryDataset0.clone();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, 37);
      double[][] doubleArray0 = new double[4][5];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 37;
      doubleArray1[1] = (double) 37;
      doubleArray1[2] = (double) 37;
      doubleArray1[3] = (double) 37;
      doubleArray1[4] = (double) 37;
      doubleArray1[5] = (double) 37;
      doubleArray1[7] = (double) 37;
      doubleArray0[1] = doubleArray1;
      doubleArray1[2] = (double) 37;
      doubleArray0[2] = doubleArray0[0];
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) 37;
      doubleArray2[1] = (double) 37;
      doubleArray2[2] = (double) 37;
      doubleArray2[3] = (double) 37;
      doubleArray2[4] = (double) 37;
      doubleArray2[5] = (double) 37;
      doubleArray0[3] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) null, 37.0);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) 37.0, (KeyedValues) pieDataset1);
      assertTrue(categoryDataset0.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      int int0 = 2182;
      int int1 = (-2538);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (-104));
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) taskSeriesCollection0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      String string0 = ").";
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate(").");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-163.1022);
      doubleArray0[1] = 4980.244091717348;
      doubleArray0[2] = (double) 59;
      doubleArray0[3] = 4434.877;
      doubleArray0[4] = (-1500.0);
      doubleArray0[5] = (double) 59;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 59;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-1914.02969), Double.POSITIVE_INFINITY, 59, (-1500.0));
      Range range0 = DatasetUtilities.iterateDomainBounds(xYDataset0);
      assertNotNull(range0);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      MockDate mockDate0 = new MockDate();
      SerialDate.createInstance((Date) mockDate0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-2150.909245338995), 0, 2958465, (-2150.909245338995), (-1111.163405218));
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 0, (-4.467545), 6.283185307179586, 2, (-2150.909245338995));
      Hour.parseHour("TimePeriodAnchor.START");
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, oHLCDataItemArray0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, false);
      Connection connection0 = null;
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset((Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // A connection must be supplied.
         //
         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Second second0 = new Second();
      RegularTimePeriod regularTimePeriod0 = second0.next();
      second0.getMinute();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(regularTimePeriod0);
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultBoxAndWhiskerXYDataset0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Integer integer0 = Integer.valueOf(1374);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      Instant instant0 = MockInstant.ofEpochSecond((-2722L));
      Date date0 = Date.from(instant0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, (-1.7976931348623157E308), 0.0, 4871, 1529.19, 0.0);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, 1374, (-715.0426993), (-1328.730791191713), 4871, (-3694.96938));
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(integer0, oHLCDataItemArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Integer integer0 = Integer.valueOf(1374);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      Instant instant0 = MockInstant.ofEpochSecond((-2722L));
      Date date0 = Date.from(instant0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, (-1.7976931348623157E308), 0.0, 4871, 1529.19, 0.0);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, 1374, (-715.0426993), (-1328.730791191713), 4871, (-3694.96938));
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(integer0, oHLCDataItemArray0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, true);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(jDBCCategoryDataset0, tableOrder0, 1374);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      DatasetUtilities.isEmptyOrNull((XYDataset) histogramDataset0);
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = (-73.72);
      doubleArray1[3] = (-2763.7721780633);
      doubleArray1[4] = (-2040.87);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[1] = (-2763.7721780633);
      doubleArray2[2] = Double.NEGATIVE_INFINITY;
      doubleArray2[3] = Double.NEGATIVE_INFINITY;
      doubleArray2[4] = Double.NEGATIVE_INFINITY;
      doubleArray2[6] = (-2763.7721780633);
      doubleArray2[7] = (-2040.87);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (-2763.7721780633);
      doubleArray3[1] = (-73.72);
      doubleArray3[2] = (-2763.7721780633);
      doubleArray3[3] = (-2763.7721780633);
      doubleArray3[4] = (-73.72);
      doubleArray3[5] = (-2060.949658007);
      doubleArray3[6] = (-2040.87);
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      int int0 = 53;
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 53);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      defaultCategoryDataset0.clone();
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      LineFunction2D lineFunction2D0 = new LineFunction2D(1464.94917889, 1464.94917889);
      int int0 = (-1845);
      MockDate mockDate0 = new MockDate();
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-9999.0), 9742.0, (-4081), serialDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DatasetUtilities.findDomainBounds((XYDataset) timePeriodValuesCollection0, false);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      jDBCCategoryDataset0.addValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(jDBCCategoryDataset0, tableOrder0, (-13));
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      doubleArray0[2] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray0[3] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      MockDate mockDate0 = new MockDate(1095, 1084, 1084);
      Day day0 = new Day(mockDate0);
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) day0, 1124.4);
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) day0, 0.0, (-3974));
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset1);
      assertTrue(boolean0);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      Range range0 = new Range(Double.NEGATIVE_INFINITY, 0.0);
      Range.shift(range0, Double.NEGATIVE_INFINITY, false);
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) linkedList0, true);
      assertNull(range1);
      
      Week week0 = new Week(30, 30);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (Comparable) week0);
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) week0, Double.NEGATIVE_INFINITY, 1);
      System.setCurrentTimeMillis(53);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      Number number0 = DatasetUtilities.findMaximumDomainValue(yIntervalSeriesCollection0);
      assertNull(number0);
      
      double[][] doubleArray0 = new double[7][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("?$h8R&TIgA1f(7``,", "?$h8R&TIgA1f(7``,", doubleArray0);
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertTrue(range1.equals((Object)range0));
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      double[][] doubleArray0 = new double[6][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 2584.58654749;
      doubleArray1[1] = 2584.58654749;
      doubleArray1[2] = 2584.58654749;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 2584.58654749;
      doubleArray2[1] = 2584.58654749;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 2584.58654749;
      doubleArray3[1] = 2584.58654749;
      doubleArray3[2] = 2584.58654749;
      doubleArray3[3] = 2584.58654749;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = (-1326.80002781752);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = (-1326.80002781752);
      doubleArray5[1] = 2584.58654749;
      doubleArray5[2] = 2584.58654749;
      doubleArray5[3] = 2584.58654749;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = (-1326.80002781752);
      doubleArray6[1] = 2584.58654749;
      doubleArray6[2] = (-1326.80002781752);
      doubleArray6[3] = (-1326.80002781752);
      doubleArray6[4] = 2584.58654749;
      doubleArray6[5] = 2584.58654749;
      doubleArray6[6] = 2584.58654749;
      doubleArray0[5] = doubleArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      DatasetUtilities.isEmptyOrNull((XYDataset) histogramDataset0);
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      LineFunction2D lineFunction2D0 = new LineFunction2D(971.9664, (-6917.307219604228));
      MockDate mockDate0 = new MockDate();
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, 2512.567898724, 971.9664, (-1845), serialDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      defaultBoxAndWhiskerCategoryDataset0.getRowCount();
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getRowKeys();
      Year year0 = new Year(14);
      MockDate mockDate0 = new MockDate(2182, (-9999), 0, (-2538), 14, (-104));
      Week week0 = new Week(mockDate0);
      week0.next();
      defaultBoxAndWhiskerCategoryDataset0.getColumnIndex(year0);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, 369);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(double0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, keyToGroupMap0);
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) list0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetUtilities.findMaximumDomainValue(yIntervalSeriesCollection0);
      double[][] doubleArray0 = new double[7][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      MockDate mockDate0 = new MockDate(1140, 369, (-5));
      Millisecond millisecond0 = new Millisecond(mockDate0);
      mockDate0.toInstant();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) millisecond0, (KeyedValues) defaultKeyedValuesDataset0);
      DatasetUtilities.createPieDatasetForRow(categoryDataset0, 0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      DatasetUtilities.findRangeBounds(categoryDataset0);
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DatasetUtilities.findRangeBounds((XYDataset) yIntervalSeriesCollection0, true);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, false);
      DatasetUtilities.findDomainBounds((XYDataset) yIntervalSeriesCollection0);
      Stack<Short> stack0 = new Stack<Short>();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      DefaultCategoryDataset defaultCategoryDataset1 = new DefaultCategoryDataset();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(mockDate0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset1, keyToGroupMap0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) histogramDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getRowKeys();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, 369);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DatasetUtilities.findRangeBounds((XYDataset) defaultXYDataset0, true);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, false);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) list0, false);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, (-3251));
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) null, list0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      DatasetUtilities.isEmptyOrNull((XYDataset) histogramDataset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      List<DefaultIntervalCategoryDataset> list0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      MockDate mockDate0 = new MockDate(4547, (-307), (-381));
      Minute minute0 = new Minute(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(minute0, "~=2rKxFtToo;8N4g", "~=2rKxFtToo;8N4g");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, true);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 59;
      doubleArray0[1] = (double) 59;
      doubleArray0[2] = (double) 59;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 59, (-381));
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) slidingGanttCategoryDataset0);
      boolean boolean0 = true;
      double[][] doubleArray1 = new double[2][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) vector0, true);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      vectorSeriesCollection0.indexOf(minute0);
      vectorSeriesCollection0.getDomainOrder();
      DatasetUtilities.iterateDomainBounds((XYDataset) vectorSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetUtilities.findMaximumDomainValue(yIntervalSeriesCollection0);
      double[][] doubleArray0 = new double[7][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      MockDate mockDate0 = new MockDate(1140, 369, (-5));
      Millisecond millisecond0 = new Millisecond(mockDate0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) millisecond0, (KeyedValues) defaultKeyedValuesDataset0);
      DatasetUtilities.createPieDatasetForRow(categoryDataset0, 0);
      DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      DatasetUtilities.findRangeBounds(categoryDataset0);
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DatasetUtilities.findRangeBounds((XYDataset) yIntervalSeriesCollection0, true);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, false);
      DatasetUtilities.findDomainBounds((XYDataset) yIntervalSeriesCollection0);
      Stack<Short> stack0 = new Stack<Short>();
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getDomainBounds(true);
      Vector<DynamicTimeSeriesCollection> vector0 = new Vector<DynamicTimeSeriesCollection>();
      Range.combine((Range) null, (Range) null);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      Range.combine((Range) null, (Range) null);
      Stack<Short> stack0 = new Stack<Short>();
      categoryTableXYDataset0.getDomainBounds(true);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (-944.4));
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-2430.7343);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("XCZI]v4F07Ac", "*", doubleArray0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultKeyedValues2DDataset0, true);
      assertNull(range0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      defaultBoxAndWhiskerCategoryDataset0.getRowKeys();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, 369);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DatasetGroup datasetGroup0 = new DatasetGroup("");
      defaultXYDataset0.setGroup(datasetGroup0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultXYDataset0, true);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, false);
      DatasetUtilities.findDomainBounds((XYDataset) defaultXYDataset0);
      Stack<Short> stack0 = new Stack<Short>();
      DatasetUtilities.iterateToFindDomainBounds(defaultXYDataset0, stack0, true);
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultXYZDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      defaultCategoryDataset0.clone();
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, 37);
      double[][] doubleArray0 = new double[4][5];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 37;
      doubleArray1[1] = (double) 37;
      doubleArray1[2] = (double) 37;
      doubleArray1[3] = (double) 37;
      doubleArray1[5] = (double) 37;
      doubleArray1[6] = (double) 37;
      doubleArray1[7] = (double) 37;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 37;
      doubleArray2[1] = (double) 37;
      doubleArray2[2] = (double) 37;
      doubleArray2[3] = (double) 37;
      doubleArray2[4] = (double) 37;
      doubleArray2[5] = (double) 37;
      doubleArray2[7] = (double) 37;
      doubleArray0[1] = doubleArray2;
      doubleArray2[2] = (double) 37;
      doubleArray0[2] = doubleArray0[0];
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = (double) 37;
      doubleArray3[1] = (double) 37;
      doubleArray3[2] = (double) 37;
      doubleArray3[3] = (double) 37;
      doubleArray3[4] = (double) 37;
      doubleArray3[5] = (double) 37;
      doubleArray0[3] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 2584.58654749;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(2584.58654749, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Day day0 = new Day();
      taskSeriesCollection0.getColumnIndex(day0);
      TimeZone timeZone0 = TimeZone.getTimeZone("NCWVO");
      Locale locale0 = Locale.ROOT;
      Locale locale1 = locale0.stripExtensions();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale1);
      DatasetUtilities.isEmptyOrNull((XYDataset) timeTableXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      double[][] doubleArray0 = new double[0][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      ArrayList<XIntervalSeriesCollection> arrayList0 = new ArrayList<XIntervalSeriesCollection>();
      Vector<DynamicTimeSeriesCollection> vector0 = new Vector<DynamicTimeSeriesCollection>();
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, (List) vector0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getDomainBounds(true);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) list0, false);
      Date date0 = null;
      Minute minute0 = null;
      try {
        minute0 = new Minute((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
         verifyException("org.jfree.data.time.Minute", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      defaultBoxAndWhiskerCategoryDataset0.getRowKeys();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, 369);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DatasetUtilities.findRangeBounds((XYDataset) defaultXYDataset0, true);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, false);
      DatasetUtilities.findDomainBounds((XYDataset) defaultXYDataset0);
      Stack<Short> stack0 = new Stack<Short>();
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultXYDataset0, stack0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      double[][] doubleArray0 = new double[0][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      ArrayList<XIntervalSeriesCollection> arrayList0 = new ArrayList<XIntervalSeriesCollection>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) arrayList0, true);
      Minute minute0 = null;
      try {
        minute0 = new Minute((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
         verifyException("org.jfree.data.time.Minute", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, 37);
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("`qehm>vlB+^_!Q=}", true);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      taskSeriesCollection0.getSeries((Comparable) "`qehm>vlB+^_!Q=}");
      DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (Comparable) "`qehm>vlB+^_!Q=}");
      PieDataset pieDataset1 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, 14);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetUtilities.findMaximumDomainValue(yIntervalSeriesCollection0);
      double[][] doubleArray0 = new double[7][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetUtilities.findMaximumDomainValue(yIntervalSeriesCollection0);
      double[][] doubleArray0 = new double[7][6];
      double[] doubleArray1 = new double[0];
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 0.0;
      doubleArray3[2] = 2584.58654749;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertNull(range0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(xYSeriesCollection0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      Number number0 = DatasetUtilities.findMaximumDomainValue(yIntervalSeriesCollection0);
      assertNull(number0);
      
      double[][] doubleArray0 = new double[7][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 0.0;
      double[][] doubleArray4 = new double[6][6];
      doubleArray4[0] = doubleArray2;
      doubleArray4[1] = doubleArray2;
      doubleArray4[2] = doubleArray1;
      doubleArray4[3] = doubleArray1;
      double[] doubleArray5 = new double[0];
      doubleArray4[4] = doubleArray5;
      doubleArray4[5] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "Null 'f' argument.", doubleArray4);
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultXYDataset0, true);
      assertNull(range0);
      
      Number[][] numberArray0 = new Number[0][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 12);
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultXYDataset0);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      String string0 = null;
      String string1 = "/z2&s";
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      vectorSeriesCollection0.removeAllSeries();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      defaultBoxAndWhiskerCategoryDataset0.getColumnCount();
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      datasetGroup0.clone();
      vectorSeriesCollection0.setGroup(datasetGroup0);
      DatasetUtilities.findDomainBounds((XYDataset) vectorSeriesCollection0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DatasetUtilities.iterateToFindDomainBounds(vectorSeriesCollection0, linkedList0, false);
      int int0 = (-2147007283);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (-2147007283));
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0, "/z2&s");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, 37);
      double[][] doubleArray0 = new double[4][5];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 37;
      doubleArray1[1] = (double) 37;
      doubleArray1[2] = (double) 37;
      doubleArray1[3] = (double) 37;
      doubleArray1[5] = (double) 37;
      doubleArray1[6] = (double) 37;
      doubleArray1[7] = (double) 37;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 37;
      doubleArray2[1] = (double) 37;
      doubleArray2[2] = (double) 37;
      doubleArray2[3] = (double) 37;
      doubleArray2[4] = (double) 37;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Vector<DynamicTimeSeriesCollection> vector0 = new Vector<DynamicTimeSeriesCollection>();
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) vector0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = (-4507.066588681568);
      doubleArray1[2] = 2208.256311;
      doubleArray1[3] = Double.POSITIVE_INFINITY;
      doubleArray1[4] = Double.POSITIVE_INFINITY;
      doubleArray1[5] = Double.POSITIVE_INFINITY;
      doubleArray1[6] = (-4507.066588681568);
      doubleArray1[7] = 1057.13;
      doubleArray1[8] = (-1.0);
      doubleArray0[0] = doubleArray1;
      DatasetUtilities.createCategoryDataset("t %", "NkvicEn", doubleArray0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Vector<JRadioButtonMenuItem> vector0 = new Vector<JRadioButtonMenuItem>();
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      LinkedList<DefaultHighLowDataset> linkedList0 = new LinkedList<DefaultHighLowDataset>();
      Range range0 = new Range((-4507.066588681568), Double.POSITIVE_INFINITY);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYIntervalSeriesCollection0, (List) linkedList0, range0, false);
      DatasetUtilities.findRangeBounds((XYDataset) xYIntervalSeriesCollection0);
      Number number0 = DatasetUtilities.findMinimumDomainValue(xYIntervalSeriesCollection0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      defaultBoxAndWhiskerCategoryDataset0.getRowCount();
      defaultBoxAndWhiskerCategoryDataset0.getRowKeys();
      Year year0 = new Year(14);
      MockDate mockDate0 = new MockDate(2182, (-9999), 0, (-2538), 14, (-104));
      Week week0 = new Week(mockDate0);
      week0.next();
      defaultBoxAndWhiskerCategoryDataset0.getColumnIndex(year0);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, 369);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      boolean boolean0 = true;
      DatasetUtilities.findRangeBounds((XYDataset) defaultXYDataset0, true);
      LineFunction2D lineFunction2D0 = new LineFunction2D(9999, 53);
      double double0 = (-4309.3335779);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(lineFunction2D0, Double.POSITIVE_INFINITY, (-4309.3335779), 369, week0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Day day0 = new Day();
      day0.compareTo(taskSeriesCollection0);
      taskSeriesCollection0.getColumnIndex(day0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      Day day1 = null;
      try {
        day1 = new Day((-1), (-2240), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      MockDate mockDate0 = new MockDate((-1775L));
      Second second0 = new Second(mockDate0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1589.521385198), 59, 0.0, (-1589.521385198), 0.0);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 0, 1.0, 1.0, 1.0, (-622.7215723595137));
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, Double.NEGATIVE_INFINITY, (-3601.379), 0.0, (-622.7215723595137), 0.0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, 860);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) taskSeriesCollection0);
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0);
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DatasetUtilities.findRangeBounds((XYDataset) defaultXYDataset0, false);
      LineFunction2D lineFunction2D0 = new LineFunction2D(6.283185307179586, 413.2298146792213);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D((Function2D) null, Double.NEGATIVE_INFINITY, (-9999.0), 0, oHLCDataItem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      vectorSeriesCollection0.removeAllSeries();
      defaultBoxAndWhiskerCategoryDataset0.getColumnCount();
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      datasetGroup0.clone();
      vectorSeriesCollection0.setGroup(datasetGroup0);
      DatasetUtilities.findDomainBounds((XYDataset) vectorSeriesCollection0);
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSet) null).when(statement0).executeQuery(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0).when(connection0).createStatement();
      String string0 = null;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DatasetUtilities.iterateToFindDomainBounds(vectorSeriesCollection0, linkedList0, true);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 0);
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, 2);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) taskSeriesCollection0);
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0);
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DatasetUtilities.findRangeBounds((XYDataset) defaultXYDataset0, true);
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      DatasetUtilities.findDomainBounds((XYDataset) defaultXYDataset0);
      Stack<Short> stack0 = new Stack<Short>();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(xYTaskDataset0, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getDomainBounds(true);
      Vector<DynamicTimeSeriesCollection> vector0 = new Vector<DynamicTimeSeriesCollection>();
      short short0 = (short)261;
      Short short1 = new Short((short)261);
      Stack<Short> stack0 = new Stack<Short>();
      stack0.add(short1);
      DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack0, false);
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset((Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // A connection must be supplied.
         //
         verifyException("org.jfree.data.jdbc.JDBCPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultIntervalXYDataset0);
      int int0 = (-1);
      int int1 = 0;
      CategoryDataset categoryDataset0 = null;
      int int2 = 1;
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Vector<JRadioButtonMenuItem> vector0 = new Vector<JRadioButtonMenuItem>();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DatasetUtilities.findRangeBounds((XYDataset) defaultXYDataset0, true);
      LineFunction2D lineFunction2D0 = new LineFunction2D((-641.6780336338626), (-641.6780336338626));
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(lineFunction2D0, 1598.0, 1598.0, 2147268899, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      defaultBoxAndWhiskerCategoryDataset0.getRowCount();
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getRowKeys();
      Year year0 = new Year(14);
      RegularTimePeriod regularTimePeriod0 = year0.previous();
      RegularTimePeriod regularTimePeriod1 = regularTimePeriod0.next();
      defaultBoxAndWhiskerCategoryDataset0.getColumnIndex(regularTimePeriod0);
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 369);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) list0, true);
      Comparable<Double>[] comparableArray0 = (Comparable<Double>[]) Array.newInstance(Comparable.class, 7);
      comparableArray0[0] = (Comparable<Double>) regularTimePeriod1;
      comparableArray0[1] = (Comparable<Double>) year0;
      comparableArray0[2] = (Comparable<Double>) regularTimePeriod0;
      comparableArray0[3] = (Comparable<Double>) number0;
      comparableArray0[4] = (Comparable<Double>) number0;
      comparableArray0[5] = (Comparable<Double>) year0;
      RegularTimePeriod regularTimePeriod2 = regularTimePeriod0.previous();
      comparableArray0[6] = (Comparable<Double>) regularTimePeriod2;
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) (-9999);
      doubleArray1[1] = (-508.7233294449);
      doubleArray1[2] = (double) 9999;
      doubleArray1[3] = 1836.6;
      doubleArray1[4] = (double) 14;
      doubleArray1[5] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) 9999;
      doubleArray2[1] = (-508.7233294449);
      doubleArray2[2] = Double.NaN;
      doubleArray2[3] = (double) 369;
      doubleArray2[4] = (double) 369;
      doubleArray2[5] = (double) 9999;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 1836.6;
      doubleArray3[1] = 1836.6;
      doubleArray3[2] = (double) 9999;
      doubleArray3[3] = 1836.6;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = (double) 9999;
      doubleArray3[6] = (double) 0;
      doubleArray3[7] = (double) 9999;
      doubleArray3[8] = (double) 9999;
      doubleArray0[2] = doubleArray3;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'rowKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      double[][] doubleArray0 = new double[0][4];
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Vector<DynamicTimeSeriesCollection> vector0 = new Vector<DynamicTimeSeriesCollection>();
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) vector0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetUtilities.findMaximumDomainValue(yIntervalSeriesCollection0);
      double[][] doubleArray0 = new double[7][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 2584.58654749;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = (-2.147483648E9);
      Range range0 = new Range(0.0, 0.0);
      Range.shift(range0, 2584.58654749, false);
      Vector<JDBCXYDataset> vector0 = new Vector<JDBCXYDataset>(2);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) yIntervalSeriesCollection0, (List) vector0, range0, true);
      JDBCXYDataset jDBCXYDataset0 = null;
      try {
        jDBCXYDataset0 = new JDBCXYDataset("", "", "", "org.jfree.data.general.DatasetUtilities");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      double[][] doubleArray0 = new double[7][1];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1057.13;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 1057.13;
      doubleArray4[1] = Double.POSITIVE_INFINITY;
      doubleArray4[2] = (-4507.066588681568);
      doubleArray4[3] = Double.POSITIVE_INFINITY;
      doubleArray4[4] = 1057.13;
      doubleArray4[5] = (-1.0);
      doubleArray4[6] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = 1057.13;
      doubleArray5[1] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = Double.POSITIVE_INFINITY;
      doubleArray6[1] = 1057.13;
      doubleArray6[2] = 1057.13;
      doubleArray6[3] = Double.POSITIVE_INFINITY;
      doubleArray6[4] = (-4507.066588681568);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      doubleArray7[0] = 2208.256311;
      doubleArray7[1] = (-4507.066588681568);
      doubleArray7[2] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = doubleArray7;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "/z2&s", doubleArray0);
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertEquals((-4507.066588681568), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, 4871);
      DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, 4871);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DatasetUtilities.findRangeBounds((XYDataset) yIntervalSeriesCollection0, false);
      double double0 = (-641.6780336338626);
      LineFunction2D lineFunction2D0 = new LineFunction2D(0.0, (-641.6780336338626));
      double double1 = 0.0;
      NormalDistributionFunction2D normalDistributionFunction2D0 = null;
      try {
        normalDistributionFunction2D0 = new NormalDistributionFunction2D(0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'std' > 0.
         //
         verifyException("org.jfree.data.function.NormalDistributionFunction2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      defaultBoxAndWhiskerCategoryDataset0.getRowCount();
      defaultBoxAndWhiskerCategoryDataset0.getRowKeys();
      Year year0 = new Year(14);
      RegularTimePeriod regularTimePeriod0 = year0.previous();
      regularTimePeriod0.next();
      defaultBoxAndWhiskerCategoryDataset0.getColumnIndex(regularTimePeriod0);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      int int0 = 369;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(14, 369);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue(dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 0, 0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
      MockDate mockDate0 = new MockDate(0, 8, 0);
      Year year0 = new Year(mockDate0);
      RegularTimePeriod regularTimePeriod0 = year0.previous();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(3411);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, (-3400), regularTimePeriod0, timeZone0);
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      defaultBoxAndWhiskerCategoryDataset0.getRowCount();
      defaultBoxAndWhiskerCategoryDataset0.getRowKeys();
      Year year0 = new Year(14);
      RegularTimePeriod regularTimePeriod0 = year0.previous();
      regularTimePeriod0.next();
      defaultBoxAndWhiskerCategoryDataset0.getColumnIndex(regularTimePeriod0);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 369);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DatasetUtilities.findRangeBounds((XYDataset) defaultXYDataset0, true);
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1), (-641.6780336338626));
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(lineFunction2D0, 0.0, (-9999), 14, regularTimePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Vector<JRadioButtonMenuItem> vector0 = new Vector<JRadioButtonMenuItem>();
      String string0 = "";
      String string1 = "";
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("", "", (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      double[][] doubleArray0 = new double[7][1];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1057.13;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 1057.13;
      doubleArray4[1] = Double.POSITIVE_INFINITY;
      doubleArray4[2] = (-4507.066588681568);
      doubleArray4[3] = Double.POSITIVE_INFINITY;
      doubleArray4[4] = 1057.13;
      doubleArray4[5] = (-1.0);
      doubleArray4[6] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = 1057.13;
      doubleArray5[1] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = Double.POSITIVE_INFINITY;
      doubleArray6[1] = 1057.13;
      doubleArray6[2] = 1057.13;
      doubleArray6[3] = Double.POSITIVE_INFINITY;
      doubleArray6[4] = (-4507.066588681568);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      doubleArray7[0] = 2208.256311;
      doubleArray7[1] = (-4507.066588681568);
      doubleArray7[2] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = doubleArray7;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "/z2&s", doubleArray0);
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals((-4507.066588681568), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.getRowCount();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      MockDate mockDate0 = new MockDate();
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-6917.307219604228), (-6917.307219604228), 4, 2.0, 1330.096);
      XYSeries xYSeries0 = new XYSeries(oHLCDataItem0, true, true);
      ((SpreadsheetDate) serialDate0).equals(xYSeries0);
      xYSeries0.addOrUpdate((double) 7, 2090.39);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      LinkedList<DefaultHighLowDataset> linkedList0 = new LinkedList<DefaultHighLowDataset>();
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, 4871);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getDomainUpperBound(false);
      categoryTableXYDataset0.remove((double) 4871, "");
      DatasetUtilities.isEmptyOrNull((XYDataset) categoryTableXYDataset0);
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset((Connection) null, "aO'PX um{v");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // A connection must be supplied.
         //
         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DatasetUtilities.findDomainBounds((XYDataset) timePeriodValuesCollection0, false);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(jDBCCategoryDataset0, tableOrder0, 2);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, 4871);
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(0.0, double0, 0.01);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      Number number0 = DatasetUtilities.findMaximumDomainValue(yIntervalSeriesCollection0);
      assertNull(number0);
      
      Number number1 = DatasetUtilities.findMaximumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number1);
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultStatisticalCategoryDataset0, tableOrder0, 4871);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      Range range0 = new Range(Double.NEGATIVE_INFINITY, 0.0);
      Range range1 = Range.shift(range0, Double.NEGATIVE_INFINITY, false);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYTaskDataset0, (List) linkedList0, range1, false);
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) xYTaskDataset0);
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultIntervalXYDataset0);
      // Undeclared exception!
      try { 
        SerialDate.createInstance((-1), 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, 37);
      double[][] doubleArray0 = new double[4][5];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 37;
      doubleArray1[1] = (double) 37;
      doubleArray1[2] = (double) 37;
      doubleArray1[3] = (double) 37;
      doubleArray1[4] = (double) 37;
      doubleArray1[5] = (double) 37;
      doubleArray1[6] = (double) 37;
      doubleArray1[7] = (double) 37;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 37;
      doubleArray2[1] = (double) 37;
      doubleArray2[2] = (double) 37;
      doubleArray2[3] = (double) 37;
      doubleArray2[4] = (double) 37;
      doubleArray2[5] = (double) 37;
      doubleArray2[6] = (double) 37;
      doubleArray2[7] = (double) 37;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (double) 37;
      doubleArray3[1] = (double) 37;
      doubleArray3[2] = (double) 37;
      doubleArray3[3] = (double) 37;
      doubleArray3[4] = (double) 37;
      doubleArray3[5] = (double) 37;
      doubleArray3[6] = (double) 37;
      doubleArray3[7] = (double) 37;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = (double) 37;
      doubleArray4[1] = (double) 37;
      doubleArray4[2] = (double) 37;
      doubleArray4[3] = (double) 37;
      doubleArray4[4] = (double) 37;
      doubleArray4[5] = (double) 37;
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Vector<JRadioButtonMenuItem> vector0 = new Vector<JRadioButtonMenuItem>();
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) vector0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-2782.37415);
      doubleArray1[2] = (-436.1897038003752);
      doubleArray1[3] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = (-1.0);
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      int int0 = 4871;
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, 4871);
      DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetUtilities.findMaximumDomainValue(yIntervalSeriesCollection0);
      DatasetUtilities.findMaximumStackedRangeValue(defaultStatisticalCategoryDataset0);
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      // Undeclared exception!
      try { 
        xYIntervalSeriesCollection0.getSeries(4871);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.XYIntervalSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      int int0 = 4871;
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, 4871);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      String string0 = "";
      categoryTableXYDataset0.remove((double) 4871, "");
      categoryTableXYDataset0.getDomainBounds(false);
      int int1 = 0;
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getSeriesKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetUtilities.findMaximumDomainValue(yIntervalSeriesCollection0);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      vectorSeriesCollection0.removeAllSeries();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      defaultBoxAndWhiskerCategoryDataset0.getColumnCount();
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      datasetGroup0.clone();
      datasetGroup0.clone();
      VectorSeriesCollection vectorSeriesCollection1 = new VectorSeriesCollection();
      vectorSeriesCollection1.setGroup(datasetGroup0);
      DatasetUtilities.findDomainBounds((XYDataset) yIntervalSeriesCollection0);
      String string0 = null;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DatasetUtilities.iterateToFindDomainBounds(vectorSeriesCollection1, linkedList0, true);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 0);
      Connection connection0 = null;
      String string1 = "The 'row' argument is out of bounds.";
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset((Connection) null, "The 'row' argument is out of bounds.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // A connection must be supplied.
         //
         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      vectorSeriesCollection0.removeAllSeries();
      defaultBoxAndWhiskerCategoryDataset0.getColumnCount();
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      vectorSeriesCollection0.setGroup(datasetGroup0);
      DatasetUtilities.findDomainBounds((XYDataset) vectorSeriesCollection0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      String string0 = null;
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Day day0 = new Day();
      taskSeriesCollection0.getColumnIndex(day0);
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetUtilities.findMaximumDomainValue(yIntervalSeriesCollection0);
      double[][] doubleArray0 = new double[7][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 2584.58654749;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = (-2.147483648E9);
      doubleArray3[6] = (-288.2440547454833);
      doubleArray3[7] = 0.0;
      doubleArray3[8] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = (-2.147483648E9);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = 0.0;
      doubleArray6[4] = (-288.2440547454833);
      doubleArray6[5] = (-288.2440547454833);
      doubleArray6[6] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = (-2.147483648E9);
      doubleArray7[3] = 0.0;
      doubleArray7[4] = 0.0;
      doubleArray7[5] = (-288.2440547454833);
      doubleArray7[6] = (-288.2440547454833);
      doubleArray7[7] = 0.0;
      doubleArray7[8] = (-684.6231);
      doubleArray0[6] = doubleArray7;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNull(number0);
  }
}
