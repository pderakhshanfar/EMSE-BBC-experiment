/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 14:41:49 GMT 2021
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.event.KeyListener;
import java.lang.reflect.Array;
import java.math.BigInteger;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.Instant;
import java.time.LocalDate;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.ThaiBuddhistDate;
import java.time.chrono.ThaiBuddhistEra;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.EventListener;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import java.util.function.Consumer;
import javax.swing.JLayeredPane;
import javax.swing.plaf.basic.BasicTreeUI;
import javax.swing.plaf.synth.SynthTabbedPaneUI;
import javax.swing.plaf.synth.SynthTreeUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultEditorKit;
import javax.swing.undo.UndoManager;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.DefaultKeyedValues;
import org.jfree.data.DomainOrder;
import org.jfree.data.KeyToGroupMap;
import org.jfree.data.KeyedValues;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.event.SeriesChangeEvent;
import org.jfree.data.function.Function2D;
import org.jfree.data.function.LineFunction2D;
import org.jfree.data.function.NormalDistributionFunction2D;
import org.jfree.data.function.PolynomialFunction2D;
import org.jfree.data.function.PowerFunction2D;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DatasetUtilities;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.SeriesChangeInfo;
import org.jfree.data.general.SeriesChangeType;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.pie.DefaultPieDataset;
import org.jfree.data.pie.PieDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.statistics.HistogramType;
import org.jfree.data.time.Day;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimePeriodAnchor;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.IntervalXYDelegate;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYDatasetTableModel;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DatasetUtilities_ESTest extends DatasetUtilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(0.0, 3886.8844, "voq(!/lv\",O`M-#");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(3886.8844, 3886.8844, "");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(3886.8844, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(3886.8844, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(3886.8844, double0, 0.01);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultMultiValueCategoryDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("H3<SzQ", 47, 47);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(47, matrixSeries0.getRowCount());
      assertEquals(2209, matrixSeries0.getItemCount());
      assertEquals(47, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(47, matrixSeries0.getRowCount());
      assertEquals(2209, matrixSeries0.getItemCount());
      assertEquals(47, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      matrixSeriesCollection0.seriesChanged((SeriesChangeEvent) null);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(47, matrixSeries0.getRowCount());
      assertEquals(2209, matrixSeries0.getItemCount());
      assertEquals(47, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      assertNotNull(number0);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(47, matrixSeries0.getRowCount());
      assertEquals(2209, matrixSeries0.getItemCount());
      assertEquals(47, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(46.0, number0);
      
      Number[][] numberArray0 = new Number[3][8];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[2];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = number0;
      numberArray2[1] = number0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[8];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = number0;
      numberArray3[1] = number0;
      numberArray3[2] = number0;
      numberArray3[3] = number0;
      numberArray3[4] = number0;
      numberArray3[5] = number0;
      numberArray3[6] = number0;
      numberArray3[7] = number0;
      numberArray0[2] = numberArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("H3<SzQ", "H3<SzQ", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, numberArray0.length);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertNotNull(range0);
      assertEquals(3, numberArray0.length);
      assertEquals(46.0, range0.getLowerBound(), 0.01);
      assertEquals(46.0, range0.getCentralValue(), 0.01);
      assertEquals(46.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.insertValue(0, (Comparable) "AJevjZ~,k", Double.POSITIVE_INFINITY);
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "AJevjZ~,k", (-1.0), 0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to org.jfree.data.SelectableValue
         //
         verifyException("org.jfree.data.pie.DefaultPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(90.824, 90.824, "W^NY*`\"J-");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(1.5, 1.5, "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(89.324, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 1.5);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(89.324, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(90.824, range0.getLength(), 0.01);
      assertEquals(46.912, range0.getCentralValue(), 0.01);
      assertEquals(92.324, range0.getUpperBound(), 0.01);
      assertEquals(1.5, range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(89.324, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(178.648, range1.getLength(), 0.01);
      assertEquals((-43.162), range1.getLowerBound(), 0.01);
      assertEquals(46.16199999999999, range1.getCentralValue(), 0.01);
      assertEquals(135.486, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add((-1975.869171399), (-1975.869171399), "");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals((-1975.869171399), double0, 0.01);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      defaultPieDataset0.insertValue(0, (Comparable) "", (-593.39));
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) "", (KeyedValues) defaultPieDataset0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to org.jfree.data.SelectableValue
         //
         verifyException("org.jfree.data.pie.DefaultPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("gZ/_$>IRvH,'ON", 1249, 5);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(5, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(6245, matrixSeries0.getItemCount());
      assertEquals(1249, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(5, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(6245, matrixSeries0.getItemCount());
      assertEquals(1249, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertNotNull(number0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(5, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(6245, matrixSeries0.getItemCount());
      assertEquals(1249, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, number0);
      
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      // Undeclared exception!
      DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      
      Date date0 = millisecond0.getStart();
      assertNotNull(date0);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) millisecond0, (double) 0);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(boolean0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("s|}M}9*QXj(+i}Cc+b", 999, 1);
      assertNotNull(matrixSeries0);
      assertEquals(999, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(999, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(999, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(999, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertEquals(999, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(999, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      defaultTableXYDataset0.setAutoWidth(false);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      ArrayList<DynamicTimeSeriesCollection> arrayList0 = new ArrayList<DynamicTimeSeriesCollection>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      defaultTableXYDataset0.removeAllSeries();
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultTableXYDataset0, arrayList0, false);
      assertNull(range0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      double[][] doubleArray0 = new double[5][3];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1022.0187310968819;
      doubleArray1[2] = 1215.68396267351;
      doubleArray1[3] = (-3086.38286);
      doubleArray1[4] = (-2532.618097761946);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2532.618097761946);
      doubleArray2[1] = 1022.0187310968819;
      doubleArray2[2] = 1022.0187310968819;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-3086.38286);
      doubleArray3[1] = (-3086.38286);
      doubleArray3[2] = 1215.68396267351;
      doubleArray3[3] = 1215.68396267351;
      doubleArray3[4] = (-3086.38286);
      doubleArray3[5] = 1215.68396267351;
      doubleArray3[6] = (-2532.618097761946);
      doubleArray3[7] = 1215.68396267351;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = (-2532.618097761946);
      doubleArray5[1] = 1215.68396267351;
      doubleArray5[2] = 1215.68396267351;
      doubleArray5[3] = 1022.0187310968819;
      doubleArray5[4] = (-3086.38286);
      doubleArray5[5] = (-3086.38286);
      doubleArray5[6] = Double.NEGATIVE_INFINITY;
      doubleArray5[7] = 753.1420563409;
      doubleArray5[8] = 1215.68396267351;
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(2.0, 2.0, "");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, Double.NaN);
      assertNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 2.0;
      doubleArray1[1] = (-1.7976931348623157E308);
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = Double.POSITIVE_INFINITY;
      doubleArray1[4] = 2.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2.0;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultIntervalCategoryDataset0.getStartValue((Comparable) Double.POSITIVE_INFINITY, (Comparable) 2.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown 'series' key.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      assertNotNull(thaiBuddhistDate0);
      
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add((ChronoLocalDate) thaiBuddhistDate0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      double double0 = 784.9795961160567;
      LineFunction2D lineFunction2D0 = new LineFunction2D(784.9795961160567, 784.9795961160567);
      assertNotNull(lineFunction2D0);
      assertEquals(784.9795961160567, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(784.9795961160567, lineFunction2D0.getSlope(), 0.01);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) arrayList0, (Comparable) thaiBuddhistDate0, (Comparable) thaiBuddhistDate0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      boolean boolean1 = false;
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, false);
      assertNull(range0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      JDBCXYDataset jDBCXYDataset0 = null;
      try {
        jDBCXYDataset0 = new JDBCXYDataset("FPzGd,V6YF", "", "org.jfree.data.xy.YIntervalSeries", "v,!]/FVkYpj=h:zo{U");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) "bD4", (double) 99);
      Number number0 = defaultKeyedValuesDataset0.getValue(99);
      assertNull(number0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "bD4", 5232.7793877);
      assertNotNull(defaultPieDataset0);
      
      defaultPieDataset0.setValue((Comparable) "bD4", (Number) null);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = "org.jfree.d.ta.c#tegor.Slidin2-ateo~yDatase";
      TimeSeries timeSeries0 = new TimeSeries("org.jfree.d.ta.c#tegor.Slidin2-ateo~yDatase");
      assertNotNull(timeSeries0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(4730.09063957, (-2138.1635));
      assertNotNull(lineFunction2D0);
      assertEquals(4730.09063957, lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-2138.1635), lineFunction2D0.getSlope(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-2138.1635), (-1.0), 196, "org.jfree.d.ta.c#tegor.Slidin2-ateo~yDatase");
      assertNotNull(xYSeries0);
      assertEquals(4730.09063957, lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-2138.1635), lineFunction2D0.getSlope(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(196, xYSeries0.getItemCount());
      assertEquals((-2138.1635), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(4576473.24337182, xYSeries0.getMaxY(), 0.01);
      assertEquals((-1.0), xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(6868.254139570001, xYSeries0.getMinY(), 0.01);
      
      Comparable<YIntervalSeriesCollection>[] comparableArray0 = (Comparable<YIntervalSeriesCollection>[]) Array.newInstance(Comparable.class, 0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = "bD4";
      MatrixSeries matrixSeries0 = new MatrixSeries("bD4", 99, 99);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(99, matrixSeries0.getRowCount());
      assertEquals(9801, matrixSeries0.getItemCount());
      assertEquals(99, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(99, matrixSeries0.getRowCount());
      assertEquals(9801, matrixSeries0.getItemCount());
      assertEquals(99, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>(linkedList0);
      assertNotNull(arrayList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, false);
      assertNotNull(range0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(99, matrixSeries0.getRowCount());
      assertEquals(9801, matrixSeries0.getItemCount());
      assertEquals(99, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(49.0, range0.getCentralValue(), 0.01);
      assertEquals(98.0, range0.getUpperBound(), 0.01);
      assertEquals(98.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(matrixSeriesCollection0, linkedList0, false);
      assertNull(range1);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(99, matrixSeries0.getRowCount());
      assertEquals(9801, matrixSeries0.getItemCount());
      assertEquals(99, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      boolean boolean0 = arrayList0.add(integer0);
      assertTrue(arrayList0.contains(integer0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) arrayList0, (Comparable) integer0, (Comparable) integer0);
      assertTrue(arrayList0.contains(integer0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
      assertTrue(arrayList0.contains(integer0));
      assertNotNull(range0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-30000.0), range0.getLowerBound(), 0.01);
      assertEquals((-30000.0), range0.getCentralValue(), 0.01);
      assertEquals((-30000.0), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2611.1183183174494);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1873.030768420183);
      doubleArray0[3] = (-933.68847609445);
      doubleArray0[4] = 1179.0;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = 1978.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 730.66;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-2611.1183183174494), 0.0, (-1873.030768420183), (-933.68847609445), 1179.0, Double.NEGATIVE_INFINITY, 1978.0, 0.0, 730.66}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(8, polynomialFunction2D0.getOrder());
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 0.0, 1.5, 270, (-933.68847609445));
      assertNotNull(xYSeries0);
      assertArrayEquals(new double[] {(-2611.1183183174494), 0.0, (-1873.030768420183), (-933.68847609445), 1179.0, Double.NEGATIVE_INFINITY, 1978.0, 0.0, 730.66}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(8, polynomialFunction2D0.getOrder());
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1.5, xYSeries0.getMaxX(), 0.01);
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NEGATIVE_INFINITY, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(270, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Number[][] numberArray0 = new Number[19][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Requires 'str' < 'end'.", "Requires 'str' < 'end'.", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(19, numberArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(19, numberArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add((-3198.11808808542), (-3198.11808808542), "The number of categories does not match the data.");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, "8hB{>>)$W");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertNotNull(number0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, number0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      assertNotNull(thaiBuddhistDate0);
      
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add((ChronoLocalDate) thaiBuddhistDate0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(785.618671, 785.618671);
      assertNotNull(lineFunction2D0);
      assertEquals(785.618671, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(785.618671, lineFunction2D0.getSlope(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, 270, 785.618671, 270, thaiBuddhistDate0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(785.618671, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(785.618671, lineFunction2D0.getSlope(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = xYSeriesCollection0.getDomainBounds(true);
      assertNotNull(range0);
      assertEquals(785.618671, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(785.618671, lineFunction2D0.getSlope(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(516.618671, range0.getLength(), 0.01);
      assertEquals(269.5, range0.getLowerBound(), 0.01);
      assertEquals(527.8093355, range0.getCentralValue(), 0.01);
      assertEquals(786.118671, range0.getUpperBound(), 0.01);
      
      Range range1 = Range.scale(range0, 270);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(785.618671, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(785.618671, lineFunction2D0.getSlope(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(516.618671, range0.getLength(), 0.01);
      assertEquals(269.5, range0.getLowerBound(), 0.01);
      assertEquals(527.8093355, range0.getCentralValue(), 0.01);
      assertEquals(786.118671, range0.getUpperBound(), 0.01);
      assertEquals(212252.04116999998, range1.getUpperBound(), 0.01);
      assertEquals(142508.520585, range1.getCentralValue(), 0.01);
      assertEquals(139487.04116999998, range1.getLength(), 0.01);
      assertEquals(72765.0, range1.getLowerBound(), 0.01);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) arrayList0, range0, false);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertNotNull(range2);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(785.618671, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(785.618671, lineFunction2D0.getSlope(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(516.618671, range0.getLength(), 0.01);
      assertEquals(269.5, range0.getLowerBound(), 0.01);
      assertEquals(527.8093355, range0.getCentralValue(), 0.01);
      assertEquals(786.118671, range0.getUpperBound(), 0.01);
      assertEquals(415442.48736790306, range2.getCentralValue(), 0.01);
      assertEquals(405079.65505380614, range2.getLength(), 0.01);
      assertEquals(212902.659841, range2.getLowerBound(), 0.01);
      assertEquals(617982.3148948061, range2.getUpperBound(), 0.01);
      
      Range range3 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, false);
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      assertNotNull(range3);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertEquals(785.618671, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(785.618671, lineFunction2D0.getSlope(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(515.618671, range3.getLength(), 0.01);
      assertEquals(270.0, range3.getLowerBound(), 0.01);
      assertEquals(527.8093355, range3.getCentralValue(), 0.01);
      assertEquals(785.618671, range3.getUpperBound(), 0.01);
      
      Range range4 = DatasetUtilities.iterateToFindDomainBounds(xYSeriesCollection0, arrayList0, true);
      assertFalse(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range3));
      assertNotNull(range4);
      assertNotSame(range4, range2);
      assertNotSame(range4, range0);
      assertNotSame(range4, range1);
      assertNotSame(range4, range3);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(785.618671, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(785.618671, lineFunction2D0.getSlope(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(516.618671, range4.getLength(), 0.01);
      assertEquals(269.5, range4.getLowerBound(), 0.01);
      assertEquals(786.118671, range4.getUpperBound(), 0.01);
      assertEquals(527.8093355, range4.getCentralValue(), 0.01);
      
      Range range5 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertFalse(range5.equals((Object)range4));
      assertTrue(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range1));
      assertNotNull(range5);
      assertNotSame(range5, range4);
      assertNotSame(range5, range3);
      assertNotSame(range5, range2);
      assertNotSame(range5, range0);
      assertNotSame(range5, range1);
      assertEquals(785.618671, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(785.618671, lineFunction2D0.getSlope(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(405079.65505380614, range5.getLength(), 0.01);
      assertEquals(415442.48736790306, range5.getCentralValue(), 0.01);
      assertEquals(212902.659841, range5.getLowerBound(), 0.01);
      assertEquals(617982.3148948061, range5.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      assertNotNull(thaiBuddhistDate0);
      
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add((ChronoLocalDate) thaiBuddhistDate0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(785.618671, 785.618671);
      assertNotNull(lineFunction2D0);
      assertEquals(785.618671, lineFunction2D0.getSlope(), 0.01);
      assertEquals(785.618671, lineFunction2D0.getIntercept(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, 270, 785.618671, 270, thaiBuddhistDate0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(785.618671, lineFunction2D0.getSlope(), 0.01);
      assertEquals(785.618671, lineFunction2D0.getIntercept(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
      assertFalse(boolean1 == boolean0);
      assertEquals(785.618671, lineFunction2D0.getSlope(), 0.01);
      assertEquals(785.618671, lineFunction2D0.getIntercept(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(boolean1);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) arrayList0, false);
      assertNotNull(range0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(785.618671, lineFunction2D0.getSlope(), 0.01);
      assertEquals(785.618671, lineFunction2D0.getIntercept(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(270.0, range0.getLowerBound(), 0.01);
      assertEquals(785.618671, range0.getUpperBound(), 0.01);
      assertEquals(527.8093355, range0.getCentralValue(), 0.01);
      assertEquals(515.618671, range0.getLength(), 0.01);
      
      ArrayList<XYBarDataset> arrayList1 = new ArrayList<XYBarDataset>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, 785.618671);
      assertNotNull(xYBarDataset0);
      assertEquals(785.618671, lineFunction2D0.getSlope(), 0.01);
      assertEquals(785.618671, lineFunction2D0.getIntercept(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(785.618671, xYBarDataset0.getBarWidth(), 0.01);
      
      boolean boolean2 = arrayList1.add(xYBarDataset0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(arrayList1.contains(xYBarDataset0));
      assertEquals(785.618671, lineFunction2D0.getSlope(), 0.01);
      assertEquals(785.618671, lineFunction2D0.getIntercept(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertEquals(785.618671, xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, (List) arrayList1, range0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYBarDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      assertNotNull(thaiBuddhistDate0);
      
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add((ChronoLocalDate) thaiBuddhistDate0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(784.9795961160567, 784.9795961160567);
      assertNotNull(lineFunction2D0);
      assertEquals(784.9795961160567, lineFunction2D0.getSlope(), 0.01);
      assertEquals(784.9795961160567, lineFunction2D0.getIntercept(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, 270, 784.9795961160567, 270, thaiBuddhistDate0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(784.9795961160567, lineFunction2D0.getSlope(), 0.01);
      assertEquals(784.9795961160567, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, 2478.0);
      assertNotNull(xYBarDataset0);
      assertEquals(784.9795961160567, lineFunction2D0.getSlope(), 0.01);
      assertEquals(784.9795961160567, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(2478.0, xYBarDataset0.getBarWidth(), 0.01);
      
      Double double0 = (Double)DatasetUtilities.findMinimumDomainValue(xYBarDataset0);
      assertNotNull(double0);
      assertEquals(784.9795961160567, lineFunction2D0.getSlope(), 0.01);
      assertEquals(784.9795961160567, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(2478.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals((-969.0), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("bD4", 99, 99);
      assertNotNull(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(9801, matrixSeries0.getItemCount());
      assertEquals(99, matrixSeries0.getColumnsCount());
      assertEquals(99, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(9801, matrixSeries0.getItemCount());
      assertEquals(99, matrixSeries0.getColumnsCount());
      assertEquals(99, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNotNull(number0);
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(9801, matrixSeries0.getItemCount());
      assertEquals(99, matrixSeries0.getColumnsCount());
      assertEquals(99, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, number0);
      
      // Undeclared exception!
      DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[][] doubleArray0 = new double[19][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(19, doubleArray0.length);
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 264, 264);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(19, doubleArray0.length);
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(264, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(264, slidingCategoryDataset0.getFirstCategoryIndex());
      
      List list0 = slidingCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(19, doubleArray0.length);
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(264, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(264, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(19, list0.size());
      assertFalse(list0.isEmpty());
      
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 0, 264);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(264, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(0, 0);
      assertNotNull(lineFunction2D0);
      assertEquals(0.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(0.0, lineFunction2D0.getSlope(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, 0, 264, 264, second0);
      assertNotNull(xYSeries0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(0.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(0.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(264, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(264.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) 59, (Number) 0);
      assertNull(xYDataItem0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(0.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(0.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(265, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(264.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingGanttCategoryDataset0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'columnKey' argument.
         //
         verifyException("org.jfree.data.gantt.TaskSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertNull(range0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Date[] dateArray0 = new Date[3];
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(463, (-797), 0, 2091, 2091, 0);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=463,MONTH=-797,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=2091,HOUR_OF_DAY=2091,MINUTE=2091,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      dateArray0[0] = date0;
      MockDate mockDate0 = new MockDate(0);
      assertNotNull(mockDate0);
      
      dateArray0[1] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate((-2079), 2075, 2094, (-2079), 181, 2075);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      dateArray0[2] = (Date) mockDate1;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 463;
      doubleArray1[2] = (double) (-2079);
      doubleArray1[3] = (double) 2091;
      doubleArray1[4] = (double) (-797);
      doubleArray1[5] = (double) 181;
      doubleArray1[6] = (double) (-797);
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-797);
      doubleArray2[1] = (double) 2091;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (double) (-797);
      doubleArray3[1] = (double) 2091;
      doubleArray3[2] = (double) 2091;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 1687.955597999098;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(second0, dateArray0, doubleArray0, doubleArray1, doubleArray2, doubleArray3, doubleArray4);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {(-797.0), 2091.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-797.0), 2091.0, 2091.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {1687.955597999098}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 463.0, (-2079.0), 2091.0, (-797.0), 181.0, (-797.0)}, doubleArray1, 0.01);
      assertEquals(3, dateArray0.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(3, doubleArray3.length);
      assertEquals(1, doubleArray4.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertNotNull(range1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertArrayEquals(new double[] {(-797.0), 2091.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-797.0), 2091.0, 2091.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {1687.955597999098}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 463.0, (-2079.0), 2091.0, (-797.0), 181.0, (-797.0)}, doubleArray1, 0.01);
      assertEquals(3, dateArray0.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(3, doubleArray3.length);
      assertEquals(1, doubleArray4.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals((-6.2186009065E13), range1.getLowerBound(), 0.01);
      assertEquals((-3.10930045325E13), range1.getCentralValue(), 0.01);
      assertEquals(6.2186009065E13, range1.getLength(), 0.01);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[][] doubleArray0 = new double[19][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(19, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 264, 264);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(19, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(264, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(264, slidingCategoryDataset0.getMaximumCategoryCount());
      
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      TimeZone timeZone0 = TimeZone.getTimeZone("Null 'visibleSeriesKeys' argument.");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 0.5, 1.0, 1.0, 0.5, 434.23823626738937);
      assertNotNull(oHLCDataItem0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      oHLCDataItemArray0[1] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, 59, 264, 59, 270.0, 1.0);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      oHLCDataItemArray0[2] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(date0, 0, 0.0, 264, (-1195.2095803606276), 0.0);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertNotNull(oHLCDataItem2);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      oHLCDataItemArray0[3] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(date0, (-1.7976931348623157E308), 269.5, 0.8, 103.138538839, (-1948.96390224244));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem3);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      oHLCDataItemArray0[4] = oHLCDataItem3;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(second0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Comparable<Double>[] comparableArray0 = (Comparable<Double>[]) Array.newInstance(Comparable.class, 1);
      XYDataItem xYDataItem0 = new XYDataItem((-2747.9491132047), (-1.0));
      assertNotNull(xYDataItem0);
      assertEquals((-1.0), xYDataItem0.getYValue(), 0.01);
      assertEquals((-2747.9491132047), xYDataItem0.getXValue(), 0.01);
      
      comparableArray0[0] = (Comparable<Double>) xYDataItem0;
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-2747.9491132047);
      doubleArray1[1] = (-2747.9491132047);
      doubleArray1[2] = (-2747.9491132047);
      doubleArray1[3] = (-1.0);
      doubleArray1[7] = (-2747.9491132047);
      doubleArray1[5] = (-1.0);
      doubleArray1[6] = (-2747.9491132047);
      doubleArray1[7] = (-1.0);
      doubleArray0[0] = doubleArray1;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of column keys does not match the number of columns in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      assertNotNull(thaiBuddhistDate0);
      
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-1178.63);
      doubleArray1[1] = (-665.5698981423257);
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = (-239.43323);
      doubleArray1[4] = (-2415.87);
      doubleArray1[5] = 1.7976931348623157E308;
      doubleArray1[6] = (-1754.795);
      doubleArray1[7] = 1.0;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, (-239), (-239));
      assertNotNull(slidingCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals((-239), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-239), slidingCategoryDataset0.getFirstCategoryIndex());
      
      List list0 = slidingCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(1, doubleArray0.length);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals((-239), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-239), slidingCategoryDataset0.getFirstCategoryIndex());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      List list1 = defaultIntervalCategoryDataset0.getRowKeys();
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertNotSame(list1, list0);
      assertEquals(1, doubleArray0.length);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, false);
      assertTrue(list0.equals((Object)list1));
      assertNotNull(range0);
      assertNotSame(list0, list1);
      assertEquals(1, doubleArray0.length);
      assertEquals(8.988465674311579E307, range0.getCentralValue(), 0.01);
      assertEquals(1.7976931348623157E308, range0.getUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, range0.getLength(), 0.01);
      assertEquals((-2415.87), range0.getLowerBound(), 0.01);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals((-239), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-239), slidingCategoryDataset0.getFirstCategoryIndex());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = "org.jfree.d.ta.c#tegor.Sliding-ateo~yDatase";
      Date[] dateArray0 = new Date[1];
      double[] doubleArray0 = new double[8];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("org.jfree.d.ta.c#tegor.Sliding-ateo~yDatase", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("#^sx4xU_ = v z", 46, 46);
      assertNotNull(matrixSeries0);
      assertEquals(2116, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(46, matrixSeries0.getColumnsCount());
      assertEquals(46, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 46, (-1480));
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(46, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1480), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      KeyToGroupMap keyToGroupMap1 = new KeyToGroupMap();
      assertTrue(keyToGroupMap1.equals((Object)keyToGroupMap0));
      assertNotNull(keyToGroupMap1);
      assertEquals(1, keyToGroupMap1.getGroupCount());
      
      int int0 = keyToGroupMap1.getKeyCount("#^sx4xU_ = v z");
      assertTrue(keyToGroupMap1.equals((Object)keyToGroupMap0));
      assertNotSame(keyToGroupMap1, keyToGroupMap0);
      assertEquals(1, keyToGroupMap1.getGroupCount());
      assertEquals(0, int0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, keyToGroupMap1);
      assertTrue(keyToGroupMap1.equals((Object)keyToGroupMap0));
      assertNull(range0);
      assertNotSame(keyToGroupMap1, keyToGroupMap0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(46, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1480), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, keyToGroupMap1.getGroupCount());
      
      Comparable<TimePeriodValuesCollection>[] comparableArray0 = (Comparable<TimePeriodValuesCollection>[]) Array.newInstance(Comparable.class, 6);
      MockDate mockDate0 = new MockDate(46, 479, 2, 2, 46);
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("#^sx4xU_ = v z");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Millisecond millisecond0 = new Millisecond(mockDate0, timeZone0);
      assertNotNull(millisecond0);
      assertEquals("Mon Dec 02 02:46:00 GMT 1985", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(502339560000L, millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals(502339560000L, millisecond0.getLastMillisecond());
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      
      comparableArray0[0] = (Comparable<TimePeriodValuesCollection>) millisecond0;
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      assertNotNull(fixedMillisecond0);
      assertEquals("Mon Dec 02 02:46:00 GMT 1985", mockDate0.toString());
      assertEquals(502339560000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(502339560000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(502339560000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(502339560000L, fixedMillisecond0.getSerialIndex());
      
      comparableArray0[1] = (Comparable<TimePeriodValuesCollection>) fixedMillisecond0;
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      comparableArray0[2] = (Comparable<TimePeriodValuesCollection>) year0;
      XYDataItem xYDataItem0 = new XYDataItem(0.0, 6.283185307179586);
      assertNotNull(xYDataItem0);
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(6.283185307179586, xYDataItem0.getYValue(), 0.01);
      
      comparableArray0[3] = (Comparable<TimePeriodValuesCollection>) xYDataItem0;
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      assertNotNull(timeSeries0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Mon Dec 02 02:46:00 GMT 1985", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(502339560000L, millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals(502339560000L, millisecond0.getLastMillisecond());
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (Number) 0);
      assertNull(timeSeriesDataItem0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Mon Dec 02 02:46:00 GMT 1985", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(502339560000L, millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals(502339560000L, millisecond0.getLastMillisecond());
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      
      comparableArray0[4] = (Comparable<TimePeriodValuesCollection>) null;
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-1480), 999);
      assertNotNull(simpleTimePeriod0);
      assertEquals(999L, simpleTimePeriod0.getEndMillis());
      assertEquals((-1480L), simpleTimePeriod0.getStartMillis());
      
      comparableArray0[5] = (Comparable<TimePeriodValuesCollection>) simpleTimePeriod0;
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) (-9999);
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 9999;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[][] doubleArray0 = new double[7][7];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("Mu", "Mu", doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(7, doubleArray0.length);
      
      defaultCategoryDataset0.addValue(953.974857568, (Comparable) "Mu", (Comparable) "Mu");
      assertEquals(7, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(953.974857568, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(953.974857568, range0.getUpperBound(), 0.01);
      assertEquals(476.987428784, range0.getCentralValue(), 0.01);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, true);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals(7, doubleArray0.length);
      assertEquals(476.987428784, range1.getCentralValue(), 0.01);
      assertEquals(953.974857568, range1.getUpperBound(), 0.01);
      assertEquals(953.974857568, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("");
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0);
      assertNull(range0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 712, 2);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(712, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[][] doubleArray0 = new double[19][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(19, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 264, 264);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(19, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(264, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(264, slidingCategoryDataset0.getFirstCategoryIndex());
      
      List list0 = slidingCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(19, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(264, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(264, slidingCategoryDataset0.getFirstCategoryIndex());
      assertFalse(list0.isEmpty());
      assertEquals(19, list0.size());
      
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, true);
      assertNotNull(range0);
      assertEquals(19, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(264, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(264, slidingCategoryDataset0.getFirstCategoryIndex());
      assertFalse(list0.isEmpty());
      assertEquals(19, list0.size());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("bCD4", 46, 46);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(46, matrixSeries0.getRowCount());
      assertEquals(2116, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(46, matrixSeries0.getColumnsCount());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      List list0 = jDBCCategoryDataset0.getColumnKeys();
      assertNotNull(list0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      boolean boolean0 = keyToGroupMap0.equals(list0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertFalse(boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) list0, true);
      assertNull(range0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      MockDate mockDate0 = new MockDate(0, (-1412), (-1412), 96, 0, (-1503));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1171.4716483892348), (-1171.4716483892348), Double.NaN, 96, (-4539.1218));
      assertNotNull(oHLCDataItem0);
      assertEquals("Sun Jun 21 23:34:57 GMT 1778", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-193.0), 2891.053, 887.2782163176, Double.NEGATIVE_INFINITY, Double.NaN);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      assertEquals("Sun Jun 21 23:34:57 GMT 1778", mockDate0.toString());
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("bCD4", oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0);
      assertNotNull(range1);
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-6.044027103E12), range1.getLowerBound(), 0.01);
      assertEquals((-6.044027103E12), range1.getUpperBound(), 0.01);
      assertEquals((-6.044027103E12), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Minute minute0 = new Minute(mockDate0);
      assertNotNull(minute0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      Integer integer0 = new Integer(59);
      assertNotNull(integer0);
      assertEquals(59, (int)integer0);
      
      Day day0 = minute0.getDay();
      assertNotNull(day0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) day0, (double) integer0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      assertEquals(59.0, double0, 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(2785.6089659, 2785.6089659, "Duplicate items in 'rowKeys'.");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(2785.6089659, range0.getLength(), 0.01);
      assertEquals(2785.6089659, range0.getUpperBound(), 0.01);
      assertEquals(1392.80448295, range0.getCentralValue(), 0.01);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 2785.6089659);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte)19);
      assertNotNull(byte0);
      assertEquals((byte)19, (byte)byte0);
      
      boolean boolean0 = linkedList0.offerFirst(byte0);
      assertTrue(linkedList0.contains(byte0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      XYSeries xYSeries0 = new XYSeries(byte0, true, true);
      assertNotNull(xYSeries0);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      
      Byte byte1 = new Byte((byte) (-40));
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-40), (byte)byte1);
      
      xYSeries0.add((Number) byte1, (Number) byte0, true);
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte1.equals((Object)byte0));
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals((-40.0), xYSeries0.getMinX(), 0.01);
      assertEquals(19.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-40.0), xYSeries0.getMaxX(), 0.01);
      assertEquals(19.0, xYSeries0.getMaxY(), 0.01);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      xYSeries0.add((Number) bigInteger0, (Number) byte0);
      assertFalse(byte0.equals((Object)byte1));
      assertTrue(xYSeries0.getNotify());
      assertEquals((-40.0), xYSeries0.getMinX(), 0.01);
      assertEquals(19.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(19.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertFalse(byte0.equals((Object)byte1));
      assertNotNull(xYSeriesCollection0);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-40.0), xYSeries0.getMinX(), 0.01);
      assertEquals(19.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(19.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, true);
      assertFalse(byte0.equals((Object)byte1));
      assertTrue(linkedList0.contains(byte0));
      assertFalse(linkedList0.contains((byte) (-40)));
      assertNotNull(range0);
      assertEquals(1, linkedList0.size());
      assertTrue(xYSeries0.getNotify());
      assertEquals((-40.0), xYSeries0.getMinX(), 0.01);
      assertEquals(19.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(19.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(42.0, range0.getLength(), 0.01);
      assertEquals(1.5, range0.getUpperBound(), 0.01);
      assertEquals((-19.5), range0.getCentralValue(), 0.01);
      assertEquals((-40.5), range0.getLowerBound(), 0.01);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, (int) (byte)19);
      assertNotNull(pieDataset0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertFalse(byte0.equals((Object)byte1));
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-40.0), xYSeries0.getMinX(), 0.01);
      assertEquals(19.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(19.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals((-19.5), range1.getCentralValue(), 0.01);
      assertEquals(42.0, range1.getLength(), 0.01);
      assertEquals(1.5, range1.getUpperBound(), 0.01);
      assertEquals((-40.5), range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[][] doubleArray0 = new double[7][7];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("_Mu", "_Mu", doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(7, doubleArray0.length);
      
      defaultCategoryDataset0.addValue((-1275.658757558083), (Comparable) "_Mu", (Comparable) "_Mu");
      assertEquals(7, doubleArray0.length);
      
      List list0 = defaultCategoryDataset0.getColumnKeys();
      assertNotNull(list0);
      assertEquals(7, doubleArray0.length);
      assertEquals(8, list0.size());
      assertFalse(list0.isEmpty());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      boolean boolean0 = keyToGroupMap0.equals(defaultCategoryDataset0);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertFalse(boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) list0, false);
      assertNotNull(range0);
      assertEquals(7, doubleArray0.length);
      assertEquals(8, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1275.658757558083, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-1275.658757558083), range0.getLowerBound(), 0.01);
      assertEquals((-637.8293787790415), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("#^sx4xU_ = v z", 47, 47);
      assertNotNull(matrixSeries0);
      assertEquals(47, matrixSeries0.getRowCount());
      assertEquals(2209, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(47, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(47, matrixSeries0.getRowCount());
      assertEquals(2209, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(47, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(47, matrixSeries0.getRowCount());
      assertEquals(2209, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(47, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(46.0, number0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertEquals(47, matrixSeries0.getRowCount());
      assertEquals(2209, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(47, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(23.0, range0.getCentralValue(), 0.01);
      assertEquals(46.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(46.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals(47, matrixSeries0.getRowCount());
      assertEquals(2209, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(47, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(46.0, range1.getLength(), 0.01);
      assertEquals(46.0, range1.getUpperBound(), 0.01);
      assertEquals(23.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add((-2854.397), (-2854.397), "Domain");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-2854.397), double0, 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-2854.397), range0.getLowerBound(), 0.01);
      assertEquals((-2854.397), range0.getCentralValue(), 0.01);
      assertEquals((-2854.397), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, 1810);
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add(6.0026181E7, Double.NaN, "Duplicate items in 'rowKeys'.");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) ", but the TimeSeBies is eVpe_ting an$instance of ", 1119.5);
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) ", but the TimeSeBies is eVpe_ting an$instance of ", (-925.0642252));
      assertNotNull(pieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertFalse(boolean0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) ", but the TimeSeBies is eVpe_ting an$instance of ", 2.0, 6);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      
      PieDataset pieDataset2 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) ", but the TimeSeBies is eVpe_ting an$instance of ", 2.0, (-53));
      assertTrue(pieDataset2.equals((Object)pieDataset0));
      assertTrue(pieDataset2.equals((Object)pieDataset1));
      assertNotNull(pieDataset2);
      assertNotSame(pieDataset2, pieDataset1);
      assertNotSame(pieDataset2, pieDataset0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ThaiBuddhistEra thaiBuddhistEra0 = ThaiBuddhistEra.BE;
      assertEquals(ThaiBuddhistEra.BE, thaiBuddhistEra0);
      
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 2.0;
      doubleArray1[1] = (-3623.725);
      doubleArray1[2] = 941.307073140973;
      doubleArray1[3] = (-3419.0);
      doubleArray1[4] = (-355.74);
      doubleArray1[5] = 884.99945292809;
      doubleArray1[6] = (-271.206928643);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-3419.0);
      doubleArray2[1] = 2207.0;
      doubleArray2[2] = (-355.74);
      doubleArray2[3] = (-624.17276);
      doubleArray2[4] = 2323.228668020361;
      doubleArray2[5] = (-3623.725);
      doubleArray2[6] = 884.99945292809;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-3419.0);
      doubleArray3[1] = 2.0;
      doubleArray3[2] = (-624.17276);
      doubleArray3[3] = (-3419.0);
      doubleArray3[4] = 2323.228668020361;
      doubleArray3[5] = (-3419.0);
      doubleArray3[6] = (-355.74);
      doubleArray3[7] = 2207.0;
      doubleArray3[8] = (-624.17276);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(4, doubleArray0.length);
      assertEquals(2323.228668020361, range0.getUpperBound(), 0.01);
      assertEquals((-650.2481659898194), range0.getCentralValue(), 0.01);
      assertEquals((-3623.725), range0.getLowerBound(), 0.01);
      assertEquals(5946.953668020361, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte)19);
      assertNotNull(byte0);
      assertEquals((byte)19, (byte)byte0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("", 235, 23);
      assertNotNull(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(23, matrixSeries0.getColumnsCount());
      assertEquals(5405, matrixSeries0.getItemCount());
      assertEquals(235, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(23, matrixSeries0.getColumnsCount());
      assertEquals(5405, matrixSeries0.getItemCount());
      assertEquals(235, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNotNull(number0);
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(23, matrixSeries0.getColumnsCount());
      assertEquals(5405, matrixSeries0.getItemCount());
      assertEquals(235, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, number0);
      
      // Undeclared exception!
      DatasetUtilities.iterateXYRangeBounds(matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Minute minute0 = new Minute();
      assertNotNull(minute0);
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      long long0 = minute0.getSerialIndex();
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(60026181L, long0);
      
      Day day0 = minute0.getDay();
      assertNotNull(day0);
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) mockDate0, 3006.3396001626406);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) day0, 1.0);
      assertNotNull(pieDataset0);
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertFalse(boolean0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) minute0, (double) 59, 0);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte)22);
      assertNotNull(byte0);
      assertEquals((byte)22, (byte)byte0);
      
      boolean boolean0 = linkedList0.offerFirst(byte0);
      assertTrue(linkedList0.contains(byte0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = BigInteger.ONE;
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) bigInteger1, (double) (byte)22);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) byte0, (double) (byte)22);
      assertNotNull(pieDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte)19);
      assertNotNull(byte0);
      assertEquals((byte)19, (byte)byte0);
      
      boolean boolean0 = linkedList0.offerFirst(byte0);
      assertTrue(linkedList0.contains((byte)19));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      XYSeries xYSeries0 = new XYSeries(byte0, true, true);
      assertNotNull(xYSeries0);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      xYSeries0.add((Number) byte0, (Number) integer0);
      assertEquals(19.0, xYSeries0.getMinX(), 0.01);
      assertEquals((-30000.0), xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(19.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-30000.0), xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(19.0, xYSeries0.getMinX(), 0.01);
      assertEquals((-30000.0), xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(19.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-30000.0), xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean1 = xYSeriesCollection0.hasListener(xIntervalSeriesCollection0);
      assertFalse(boolean1 == boolean0);
      assertEquals(19.0, xYSeries0.getMinX(), 0.01);
      assertEquals((-30000.0), xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(19.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-30000.0), xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertFalse(boolean1);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, false);
      assertTrue(linkedList0.contains((byte)19));
      assertNotNull(range0);
      assertEquals(1, linkedList0.size());
      assertEquals(19.0, xYSeries0.getMinX(), 0.01);
      assertEquals((-30000.0), xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(19.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-30000.0), xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(19.0, range0.getCentralValue(), 0.01);
      assertEquals(19.0, range0.getUpperBound(), 0.01);
      assertEquals(19.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, range0, false);
      assertFalse(range1.equals((Object)range0));
      assertTrue(linkedList0.contains((byte)19));
      assertNotNull(range1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(1, linkedList0.size());
      assertEquals(19.0, xYSeries0.getMinX(), 0.01);
      assertEquals((-30000.0), xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(19.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-30000.0), xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(19.0, range0.getCentralValue(), 0.01);
      assertEquals(19.0, range0.getUpperBound(), 0.01);
      assertEquals(19.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-30000.0), range1.getLowerBound(), 0.01);
      assertEquals((-30000.0), range1.getCentralValue(), 0.01);
      assertEquals((-30000.0), range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte)22);
      assertNotNull(byte0);
      assertEquals((byte)22, (byte)byte0);
      
      boolean boolean0 = linkedList0.offerFirst(byte0);
      assertTrue(linkedList0.contains((byte)22));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = BigInteger.ONE;
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.validateObject();
      int int0 = defaultStatisticalCategoryDataset0.getRowCount();
      assertEquals(0, int0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) linkedList0, true);
      assertTrue(linkedList0.contains((byte)22));
      assertNull(range0);
      assertEquals(1, linkedList0.size());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) linkedList0, true);
      assertTrue(linkedList0.contains((byte)22));
      assertNull(range1);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("'4", 46, 46);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2116, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(46, matrixSeries0.getColumnsCount());
      assertEquals(46, matrixSeries0.getRowCount());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertFalse(arrayList0.contains(46));
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = arrayList0.add(object0);
      assertTrue(arrayList0.contains(object0));
      assertFalse(arrayList0.contains(46));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add((-2854.397), (-2854.397), "");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-2854.397), double0, 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-813.17423));
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-813.17423), range0.getUpperBound(), 0.01);
      assertEquals(2854.397, range0.getLength(), 0.01);
      assertEquals((-2240.37273), range0.getCentralValue(), 0.01);
      assertEquals((-3667.57123), range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(0.0, 0.0, "");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(defaultMultiValueCategoryDataset0);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[][] doubleArray0 = new double[7][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("_Mu", "_Mu", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(7, doubleArray0.length);
      
      List list0 = ((DefaultCategoryDataset) categoryDataset0).getColumnKeys();
      assertNotNull(list0);
      assertEquals(7, doubleArray0.length);
      assertFalse(list0.isEmpty());
      assertEquals(7, list0.size());
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("_Mu", "_Mu", doubleArray0);
      assertTrue(categoryDataset1.equals((Object)categoryDataset0));
      assertNotNull(categoryDataset1);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertEquals(7, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset1, tableOrder0, (-1684));
      assertTrue(categoryDataset1.equals((Object)categoryDataset0));
      assertNotNull(categoryToPieDataset0);
      assertEquals(7, doubleArray0.length);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-1684), categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(924.32008408224, 924.32008408224, "QC-&eQX)Xa");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(1119.5, 1119.5, ", but the TimeSeBies is eVpe_ting an$instance of ");
      assertEquals(195.17991591776, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(categoryTableXYDataset0);
      assertNotNull(number0);
      assertEquals(195.17991591776, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1217.08995795888, number0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotNull(range0);
      assertEquals(195.17991591776, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1119.5, range0.getUpperBound(), 0.01);
      assertEquals(195.17991591776, range0.getLength(), 0.01);
      assertEquals(1021.91004204112, range0.getCentralValue(), 0.01);
      assertEquals(924.32008408224, range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals(195.17991591776, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(924.32008408224, range1.getLowerBound(), 0.01);
      assertEquals(1021.91004204112, range1.getCentralValue(), 0.01);
      assertEquals(1119.5, range1.getUpperBound(), 0.01);
      assertEquals(195.17991591776, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add((-2261.2562345), 1119.0, "[");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1119.0, double0, 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(559.5, range0.getCentralValue(), 0.01);
      assertEquals(1119.0, range0.getUpperBound(), 0.01);
      assertEquals(1119.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertFalse(boolean0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 1417.0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(2536.0, range1.getUpperBound(), 0.01);
      assertEquals(1119.0, range1.getLength(), 0.01);
      assertEquals(1976.5, range1.getCentralValue(), 0.01);
      assertEquals(1417.0, range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte)19);
      assertNotNull(byte0);
      assertEquals((byte)19, (byte)byte0);
      
      boolean boolean0 = linkedList0.offerFirst(byte0);
      assertTrue(linkedList0.contains(byte0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      XYSeries xYSeries0 = new XYSeries(byte0, true, true);
      assertNotNull(xYSeries0);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      xYSeries0.add((Number) bigInteger0, (Number) byte0);
      assertEquals(19.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(19.0, xYSeries0.getMaxY(), 0.01);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(19.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(19.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean1 = xYSeriesCollection0.hasListener(xIntervalSeriesCollection0);
      assertFalse(boolean1 == boolean0);
      assertEquals(19.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(19.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertFalse(boolean1);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, true);
      assertTrue(linkedList0.contains(byte0));
      assertNotNull(range0);
      assertEquals(1, linkedList0.size());
      assertEquals(19.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(19.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1.5, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.5, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, (byte)19);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(19, categoryToPieDataset0.getExtractIndex());
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) byte0, (double) (byte)19, (int) (byte)19);
      assertNotNull(pieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(19, categoryToPieDataset0.getExtractIndex());
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(19, categoryToPieDataset0.getExtractIndex());
      assertEquals(0.0, double0, 0.01);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) byte0, (-1418.2));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(19, categoryToPieDataset0.getExtractIndex());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, range0, false);
      assertFalse(range1.equals((Object)range0));
      assertTrue(linkedList0.contains(byte0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertNotSame(range0, range1);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(19.0, range1.getLowerBound(), 0.01);
      assertEquals(19.0, range1.getUpperBound(), 0.01);
      assertEquals(19.0, range1.getCentralValue(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(19.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(19.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1.5, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.5, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      
      double[][] doubleArray0 = new double[8][5];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-1418.2);
      doubleArray1[1] = (double) (byte)19;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (byte)19;
      doubleArray2[1] = (double) (byte)19;
      doubleArray2[2] = (double) (byte)19;
      doubleArray2[3] = (-1418.2);
      doubleArray2[4] = (double) (byte)19;
      doubleArray2[5] = (-1418.2);
      doubleArray2[6] = (double) (byte)19;
      doubleArray2[7] = (double) (byte)19;
      doubleArray2[8] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = (-1418.2);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (-1418.2);
      doubleArray4[2] = (double) (byte)19;
      doubleArray4[3] = (double) (byte)19;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = 0.0;
      doubleArray4[6] = 0.0;
      doubleArray4[7] = (double) (byte)19;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = (double) (byte)19;
      doubleArray5[3] = 0.0;
      doubleArray5[4] = (-2824.3984257);
      doubleArray5[5] = 1.0;
      doubleArray5[6] = (-1418.2);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      
      doubleArray6[0] = (-842.438878049);
      doubleArray6[1] = (-2824.3984257);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[0];
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[5];
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      
      doubleArray8[0] = (-2824.3984257);
      doubleArray8[1] = (-842.438878049);
      doubleArray8[2] = 0.0;
      doubleArray8[3] = 1.0;
      doubleArray8[4] = (double) (byte)19;
      doubleArray0[7] = doubleArray8;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Q", "Q", doubleArray0);
      assertFalse(categoryDataset0.equals((Object)defaultCategoryDataset0));
      assertNotNull(categoryDataset0);
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add((-2854.397), (-2854.397), "");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-2854.397), double0, 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-2854.397), range0.getLowerBound(), 0.01);
      assertEquals((-1427.1985), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(2854.397, range0.getLength(), 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[][] doubleArray0 = new double[19][7];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("Mu", "Mu", doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(19, doubleArray0.length);
      
      Double double0 = (Double)DatasetUtilities.findMaximumStackedRangeValue(defaultCategoryDataset0);
      assertNotNull(double0);
      assertEquals(19, doubleArray0.length);
      assertEquals(0.0, (double)double0, 0.01);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, 14);
      assertNotNull(categoryToPieDataset0);
      assertEquals(19, doubleArray0.length);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(14, categoryToPieDataset0.getExtractIndex());
      
      defaultCategoryDataset0.addValue(0.0, (Comparable) "Mu", (Comparable) double0);
      assertEquals(19, doubleArray0.length);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) double0, (double) 14);
      assertNotNull(defaultPieDataset0);
      assertEquals(19, doubleArray0.length);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(14, categoryToPieDataset0.getExtractIndex());
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) double0, (double) 14, 14);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertNotNull(defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertEquals(19, doubleArray0.length);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(14, categoryToPieDataset0.getExtractIndex());
      
      double double1 = DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
      assertEquals(19, doubleArray0.length);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(14, categoryToPieDataset0.getExtractIndex());
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte)19);
      assertNotNull(byte0);
      assertEquals((byte)19, (byte)byte0);
      
      boolean boolean0 = linkedList0.offerFirst(byte0);
      assertTrue(linkedList0.contains((byte)19));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      XYSeries xYSeries0 = new XYSeries(byte0, true, true);
      assertNotNull(xYSeries0);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      xYSeries0.add((Number) bigInteger0, (Number) byte0);
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(19.0, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(19.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(19.0, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(19.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      xYSeries0.setMaximumItemCount((byte)19);
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(19.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(19, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(19.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean1 = xYSeriesCollection0.hasListener(xIntervalSeriesCollection0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(19.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(19, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(19.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertFalse(boolean1);
      
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) (byte)19;
      doubleArray1[1] = (double) (byte)19;
      doubleArray1[2] = (double) (byte)19;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 0.5;
      doubleArray3[1] = (double) (byte)19;
      doubleArray3[2] = (double) (byte)19;
      doubleArray3[3] = (double) (byte)19;
      doubleArray3[4] = (double) (byte)19;
      doubleArray3[5] = (double) (byte)19;
      doubleArray3[6] = (-296.552047);
      doubleArray3[7] = (double) (byte)19;
      doubleArray3[8] = (double) (byte)19;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Requires 'samples' > 1", "Requires 'samples' > 1", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (byte)19);
      assertNotNull(categoryToPieDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(19, categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) bigInteger0, (KeyedValues) categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 19, Size: 9
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[][] doubleArray0 = new double[4][9];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-2871.46808192619);
      doubleArray1[1] = (-744.0);
      doubleArray1[2] = 1119.0;
      doubleArray1[3] = (-759.124);
      doubleArray1[4] = 938.78271459092;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-759.124);
      doubleArray2[1] = (-744.0);
      doubleArray2[2] = (-100.21376834845);
      doubleArray2[3] = 2470.4053;
      doubleArray2[4] = 1119.0;
      doubleArray2[5] = 1442.5459;
      doubleArray2[6] = (-759.124);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-100.21376834845);
      doubleArray3[1] = (-744.0);
      doubleArray3[2] = 1119.0;
      doubleArray3[3] = (-759.124);
      doubleArray3[4] = (-744.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (-744.0);
      doubleArray4[1] = (-100.21376834845);
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      assertNotNull(fixedMillisecond0);
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      assertNotNull(timeSeries0);
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) 0L);
      assertNull(timeSeriesDataItem0);
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add((double) 0L, 543.361395, "ZNxVh|@^");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(543.361395, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte)22);
      assertNotNull(byte0);
      assertEquals((byte)22, (byte)byte0);
      
      boolean boolean0 = linkedList0.offerFirst(byte0);
      assertTrue(linkedList0.contains(byte0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      XYSeries xYSeries0 = new XYSeries(byte0, true, true);
      assertNotNull(xYSeries0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = bigInteger0.setBit((byte)22);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      
      BigInteger bigInteger2 = BigInteger.valueOf(1L);
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertNotNull(bigInteger2);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertEquals((byte)1, bigInteger2.byteValue());
      assertEquals((short)1, bigInteger2.shortValue());
      
      xYSeries0.add((Number) bigInteger0, (Number) byte0);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(22.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(22.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(22.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(22.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, true);
      assertTrue(linkedList0.contains(byte0));
      assertNotNull(range0);
      assertEquals(1, linkedList0.size());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(22.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(22.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.5, range0.getUpperBound(), 0.01);
      assertEquals((-0.5), range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, range0, true);
      assertFalse(range1.equals((Object)range0));
      assertTrue(linkedList0.contains(byte0));
      assertNotNull(range1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(1, linkedList0.size());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(22.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(22.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.5, range0.getUpperBound(), 0.01);
      assertEquals((-0.5), range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(22.0, range1.getLowerBound(), 0.01);
      assertEquals(22.0, range1.getCentralValue(), 0.01);
      assertEquals(22.0, range1.getUpperBound(), 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) linkedList0, true);
      assertTrue(linkedList0.contains(byte0));
      assertNull(range2);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      assertNotNull(thaiBuddhistDate0);
      
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Day day0 = new Day();
      assertNotNull(day0);
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      
      Hour hour0 = new Hour(6, day0);
      assertNotNull(hour0);
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(6, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Minute minute0 = new Minute(7, hour0);
      assertNotNull(minute0);
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(6, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(6, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(7, minute0.getMinute());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      Day day1 = minute0.getDay();
      assertNotNull(day1);
      assertSame(day0, day1);
      assertSame(day1, day0);
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(6, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(6, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(7, minute0.getMinute());
      assertEquals(1392409281320L, day1.getFirstMillisecond());
      assertEquals(1392409281320L, day1.getLastMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) thaiBuddhistDate0, 5633.0);
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) day1, (-1113.698511));
      assertNotNull(pieDataset0);
      assertSame(day0, day1);
      assertSame(day1, day0);
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(6, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(6, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(7, minute0.getMinute());
      assertEquals(1392409281320L, day1.getFirstMillisecond());
      assertEquals(1392409281320L, day1.getLastMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = null;
      try {
        defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((double[][]) null, (double[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'data' argument.
         //
         verifyException("org.jfree.data.DataUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-2854.397);
      doubleArray1[1] = (-2854.397);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2854.397);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-2854.397);
      doubleArray3[1] = 1.5;
      doubleArray3[2] = (-2854.397);
      doubleArray3[3] = (-2854.397);
      doubleArray3[4] = (-2854.397);
      doubleArray3[5] = (-2854.397);
      doubleArray3[6] = (-2854.397);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 1.5;
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", ";l", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 2066, 4002);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(4, doubleArray0.length);
      assertEquals(2066, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(4002, slidingCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, (Comparable) (-2854.397));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2065, Size: 7
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add((-2854.397), (-2854.397), "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-2854.397), range0.getLowerBound(), 0.01);
      assertEquals((-2854.397), range0.getCentralValue(), 0.01);
      assertEquals((-2854.397), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-2854.397), range1.getCentralValue(), 0.01);
      assertEquals((-2854.397), range1.getUpperBound(), 0.01);
      assertEquals((-2854.397), range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-102));
      assertNotNull(byte0);
      assertEquals((byte) (-102), (byte)byte0);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertFalse(linkedList0.contains(byte0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.offerFirst(byte0);
      assertTrue(linkedList0.contains(byte0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      XYSeries xYSeries0 = new XYSeries(byte0, true, false);
      assertNotNull(xYSeries0);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertNotNull(bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      
      xYSeries0.add((Number) byte0, (Number) bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertEquals((-102.0), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-102.0), xYSeries0.getMaxX(), 0.01);
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals((-102.0), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-102.0), xYSeries0.getMaxX(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, true);
      assertTrue(linkedList0.contains(byte0));
      assertNotNull(range0);
      assertEquals(1, linkedList0.size());
      assertEquals((-102.0), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-102.0), xYSeries0.getMaxX(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals((-102.0), range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals((-101.5), range0.getUpperBound(), 0.01);
      assertEquals((-102.5), range0.getLowerBound(), 0.01);
      
      Range range1 = Range.expandToInclude(range0, (-1587L));
      assertFalse(range1.equals((Object)range0));
      assertTrue(linkedList0.contains(byte0));
      assertNotNull(range1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(1, linkedList0.size());
      assertEquals((-102.0), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-102.0), xYSeries0.getMaxX(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals((-102.0), range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals((-101.5), range0.getUpperBound(), 0.01);
      assertEquals((-102.5), range0.getLowerBound(), 0.01);
      assertEquals((-1587.0), range1.getLowerBound(), 0.01);
      assertEquals(1485.5, range1.getLength(), 0.01);
      assertEquals((-101.5), range1.getUpperBound(), 0.01);
      assertEquals((-844.25), range1.getCentralValue(), 0.01);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, range0, true);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertTrue(linkedList0.contains(byte0));
      assertNotNull(range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals(1, linkedList0.size());
      assertEquals((-102.0), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-102.0), xYSeries0.getMaxX(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals((-102.0), range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals((-101.5), range0.getUpperBound(), 0.01);
      assertEquals((-102.5), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-2854.397);
      doubleArray1[1] = (-2854.397);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", (String) null, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      assertNotNull(range0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2854.397), range0.getLowerBound(), 0.01);
      assertEquals((-2854.397), range0.getCentralValue(), 0.01);
      assertEquals((-2854.397), range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[][] doubleArray0 = new double[28][7];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(":ZM+]#'5kfyw", ":ZM+]#'5kfyw", doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(28, doubleArray0.length);
      
      defaultCategoryDataset0.clearSelection();
      assertEquals(28, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultCategoryDataset0);
      assertNotNull(range0);
      assertEquals(28, doubleArray0.length);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, 314);
      assertNotNull(categoryToPieDataset0);
      assertEquals(28, doubleArray0.length);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(314, categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 314, Size: 7
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate(913, 913, 913);
      assertNotNull(mockDate0);
      
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 913;
      doubleArray0[2] = (double) 913;
      doubleArray0[4] = (double) 913;
      doubleArray0[5] = (double) 913;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("org.jfree.data.categor.SlidingCategoryDataset", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {0.0, 913.0, 913.0, 0.0, 913.0, 913.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      DomainOrder domainOrder0 = defaultHighLowDataset0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertArrayEquals(new double[] {0.0, 913.0, 913.0, 0.0, 913.0, 913.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = arrayList0.add(xYIntervalSeriesCollection0);
      assertTrue(arrayList0.contains(xYIntervalSeriesCollection0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertTrue(boolean0);
      
      Range range0 = new Range(913.0, 913.0);
      assertNotNull(range0);
      assertEquals(913.0, range0.getUpperBound(), 0.01);
      assertEquals(913.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(913.0, range0.getLowerBound(), 0.01);
      
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) arrayList0, range0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYIntervalSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate(913, 913, 913);
      assertNotNull(mockDate0);
      
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 913;
      doubleArray0[2] = (double) 913;
      doubleArray0[4] = (double) 913;
      doubleArray0[5] = (double) 913;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("org.jfree.data.categor.SlidingCategoryDataset", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {0.0, 913.0, 913.0, 0.0, 913.0, 913.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      DomainOrder domainOrder0 = defaultHighLowDataset0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertArrayEquals(new double[] {0.0, 913.0, 913.0, 0.0, 913.0, 913.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range0 = new Range(913.0, 913.0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(913.0, range0.getLowerBound(), 0.01);
      assertEquals(913.0, range0.getCentralValue(), 0.01);
      assertEquals(913.0, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) arrayList0, range0, true);
      assertNull(range1);
      assertArrayEquals(new double[] {0.0, 913.0, 913.0, 0.0, 913.0, 913.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(913.0, range0.getLowerBound(), 0.01);
      assertEquals(913.0, range0.getCentralValue(), 0.01);
      assertEquals(913.0, range0.getUpperBound(), 0.01);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertFalse(range2.equals((Object)range0));
      assertNotNull(range2);
      assertNotSame(range2, range0);
      assertArrayEquals(new double[] {0.0, 913.0, 913.0, 0.0, 913.0, 913.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      
      Range range3 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertNotNull(range3);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertArrayEquals(new double[] {0.0, 913.0, 913.0, 0.0, 913.0, 913.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(2.90824128E13, range3.getUpperBound(), 0.01);
      assertEquals(2.90824128E13, range3.getCentralValue(), 0.01);
      assertEquals(2.90824128E13, range3.getLowerBound(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries(", but the TimeSeries is expecting an instance of ");
      assertNotNull(timeSeries0);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertTrue(boolean0);
      
      HashSet<CategoryTableXYDataset> hashSet0 = new HashSet<CategoryTableXYDataset>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      boolean boolean1 = hashSet0.add(categoryTableXYDataset0);
      assertTrue(boolean1 == boolean0);
      assertTrue(hashSet0.contains(categoryTableXYDataset0));
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(boolean1);
      
      Vector<CategoryTableXYDataset> vector0 = new Vector<CategoryTableXYDataset>(hashSet0);
      assertTrue(hashSet0.contains(categoryTableXYDataset0));
      assertTrue(vector0.contains(categoryTableXYDataset0));
      assertNotNull(vector0);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.capacity());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(timeSeriesCollection0, vector0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.CategoryTableXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, (-1912));
      assertNotNull(categoryToPieDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-1912), categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[][] doubleArray0 = new double[8][3];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("d^`D2VBma", "d^`D2VBma", doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(8, doubleArray0.length);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultCategoryDataset0.setSelectionState(defaultKeyedValues2DDataset0);
      assertEquals(8, doubleArray0.length);
      
      Long long0 = new Long(5633L);
      assertNotNull(long0);
      assertEquals(5633L, (long)long0);
      
      List list0 = defaultCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(8, doubleArray0.length);
      assertFalse(list0.isEmpty());
      assertEquals(8, list0.size());
      
      Long long1 = new Long(5633L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(5633L, (long)long1);
      
      boolean boolean0 = linkedList0.add(long1);
      assertTrue(long1.equals((Object)long0));
      assertTrue(linkedList0.contains(5633L));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) long1, (-763.7118629));
      assertTrue(long1.equals((Object)long0));
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte)22);
      assertNotNull(byte0);
      assertEquals((byte)22, (byte)byte0);
      
      boolean boolean0 = linkedList0.offerFirst(byte0);
      assertTrue(linkedList0.contains(byte0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      XYSeries xYSeries0 = new XYSeries(byte0, true, true);
      assertNotNull(xYSeries0);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = BigInteger.valueOf(1L);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      
      xYSeries0.add((Number) bigInteger0, (Number) byte0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertNotSame(bigInteger0, bigInteger1);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(22.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(22.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(22.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(22.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getNotify());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, true);
      assertTrue(linkedList0.contains(byte0));
      assertNotNull(range0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(22.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(22.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getNotify());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.5, range0.getUpperBound(), 0.01);
      assertEquals((-0.5), range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(22.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(22.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getNotify());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.5, range1.getUpperBound(), 0.01);
      assertEquals((-0.5), range1.getLowerBound(), 0.01);
      
      Range range2 = Range.combine(range0, range1);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertTrue(linkedList0.contains(byte0));
      assertNotNull(range2);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(22.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(22.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getNotify());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.5, range0.getUpperBound(), 0.01);
      assertEquals((-0.5), range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.5, range1.getUpperBound(), 0.01);
      assertEquals((-0.5), range1.getLowerBound(), 0.01);
      assertEquals((-0.5), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.5, range2.getUpperBound(), 0.01);
      assertEquals(1.0, range2.getLength(), 0.01);
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, range0, true);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertTrue(linkedList0.contains(byte0));
      assertNotNull(range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(22.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(22.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getNotify());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.5, range0.getUpperBound(), 0.01);
      assertEquals((-0.5), range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(22.0, range3.getCentralValue(), 0.01);
      assertEquals(22.0, range3.getUpperBound(), 0.01);
      assertEquals(22.0, range3.getLowerBound(), 0.01);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset(connection0, "3St:");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add((-1262.645084), (-1262.645084), "");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(categoryTableXYDataset0);
      assertNotNull(number0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-1262.145084), number0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-1262.645084), range0.getLowerBound(), 0.01);
      assertEquals((-1262.645084), range0.getCentralValue(), 0.01);
      assertEquals((-1262.645084), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-1262.645084), range1.getCentralValue(), 0.01);
      assertEquals((-1262.645084), range1.getUpperBound(), 0.01);
      assertEquals((-1262.645084), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, false);
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertNotNull(range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-1262.645084), range2.getLowerBound(), 0.01);
      assertEquals((-1262.645084), range2.getCentralValue(), 0.01);
      assertEquals((-1262.645084), range2.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      assertNotNull(thaiBuddhistDate0);
      
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add((ChronoLocalDate) thaiBuddhistDate0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Long long0 = new Long(2220L);
      assertNotNull(long0);
      assertEquals(2220L, (long)long0);
      
      boolean boolean1 = linkedList0.add(long0);
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedList0.contains(long0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean1);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, true);
      assertTrue(linkedList0.contains(long0));
      assertNull(range0);
      assertEquals(1, linkedList0.size());
      
      Range range1 = Range.combine((Range) null, (Range) null);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Minute minute0 = new Minute();
      assertNotNull(minute0);
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      long long0 = minute0.getSerialIndex();
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(60026181L, long0);
      
      Day day0 = minute0.getDay();
      assertNotNull(day0);
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      RegularTimePeriod regularTimePeriod0 = day0.previous();
      assertFalse(regularTimePeriod0.equals((Object)day0));
      assertNotNull(regularTimePeriod0);
      assertNotSame(day0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, day0);
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getLastMillisecond());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) regularTimePeriod0, (double) 59);
      assertFalse(day0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)day0));
      assertNotSame(day0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, day0);
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getLastMillisecond());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) regularTimePeriod0, (KeyedValues) defaultKeyedValuesDataset0);
      assertFalse(day0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)day0));
      assertNotNull(categoryDataset0);
      assertNotSame(day0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, day0);
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getLastMillisecond());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      Date date0 = day0.getEnd();
      assertFalse(day0.equals((Object)regularTimePeriod0));
      assertNotNull(date0);
      assertNotSame(day0, regularTimePeriod0);
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) day0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Byte byte0 = new Byte((byte)9);
      assertNotNull(byte0);
      assertEquals((byte)9, (byte)byte0);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertFalse(linkedList0.contains(byte0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.offerFirst(byte0);
      assertTrue(linkedList0.contains(byte0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      XYSeries xYSeries0 = new XYSeries(byte0, true, true);
      assertNotNull(xYSeries0);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = BigInteger.valueOf((byte)9);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals((short)9, bigInteger1.shortValue());
      assertEquals((byte)9, bigInteger1.byteValue());
      
      xYSeries0.add((Number) bigInteger1, (Number) bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals(9.0, xYSeries0.getMinX(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(9.0, xYSeries0.getMaxX(), 0.01);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)9, bigInteger1.shortValue());
      assertEquals((byte)9, bigInteger1.byteValue());
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1L, 1L);
      assertNotNull(powerFunction2D0);
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1.0, powerFunction2D0.getA(), 0.01);
      
      XYSeries xYSeries1 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, 1L, (byte)9, (byte)9, byte0);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertNotNull(xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1.0, powerFunction2D0.getA(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertEquals(1.0, xYSeries1.getMinY(), 0.01);
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(9.0, xYSeries1.getMaxX(), 0.01);
      assertEquals(9, xYSeries1.getItemCount());
      assertEquals(9.0, xYSeries1.getMaxY(), 0.01);
      assertNull(xYSeries1.getDescription());
      assertTrue(xYSeries1.getAutoSort());
      assertTrue(xYSeries1.getNotify());
      assertEquals(1.0, xYSeries1.getMinX(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries1);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertNotNull(xYSeriesCollection0);
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1.0, powerFunction2D0.getA(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertEquals(1.0, xYSeries1.getMinY(), 0.01);
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(9.0, xYSeries1.getMaxX(), 0.01);
      assertEquals(9, xYSeries1.getItemCount());
      assertEquals(9.0, xYSeries1.getMaxY(), 0.01);
      assertNull(xYSeries1.getDescription());
      assertTrue(xYSeries1.getAutoSort());
      assertTrue(xYSeries1.getNotify());
      assertEquals(1.0, xYSeries1.getMinX(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      Range range0 = xYSeriesCollection0.getRangeBounds(false);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertNotNull(range0);
      assertNotSame(xYSeries1, xYSeries0);
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1.0, powerFunction2D0.getA(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertEquals(1.0, xYSeries1.getMinY(), 0.01);
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(9.0, xYSeries1.getMaxX(), 0.01);
      assertEquals(9, xYSeries1.getItemCount());
      assertEquals(9.0, xYSeries1.getMaxY(), 0.01);
      assertNull(xYSeries1.getDescription());
      assertTrue(xYSeries1.getAutoSort());
      assertTrue(xYSeries1.getNotify());
      assertEquals(1.0, xYSeries1.getMinX(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(8.0, range0.getLength(), 0.01);
      assertEquals(5.0, range0.getCentralValue(), 0.01);
      assertEquals(9.0, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, false);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertTrue(range1.equals((Object)range0));
      assertTrue(linkedList0.contains(byte0));
      assertNotNull(range1);
      assertNotSame(xYSeries1, xYSeries0);
      assertNotSame(range1, range0);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1.0, powerFunction2D0.getA(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertEquals(1.0, xYSeries1.getMinY(), 0.01);
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(9.0, xYSeries1.getMaxX(), 0.01);
      assertEquals(9, xYSeries1.getItemCount());
      assertEquals(9.0, xYSeries1.getMaxY(), 0.01);
      assertNull(xYSeries1.getDescription());
      assertTrue(xYSeries1.getAutoSort());
      assertTrue(xYSeries1.getNotify());
      assertEquals(1.0, xYSeries1.getMinX(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(9.0, range1.getUpperBound(), 0.01);
      assertEquals(5.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(8.0, range1.getLength(), 0.01);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, range1, false);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertTrue(linkedList0.contains(byte0));
      assertNotNull(range2);
      assertNotSame(xYSeries1, xYSeries0);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1.0, powerFunction2D0.getA(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertEquals(1.0, xYSeries1.getMinY(), 0.01);
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(9.0, xYSeries1.getMaxX(), 0.01);
      assertEquals(9, xYSeries1.getItemCount());
      assertEquals(9.0, xYSeries1.getMaxY(), 0.01);
      assertNull(xYSeries1.getDescription());
      assertTrue(xYSeries1.getAutoSort());
      assertTrue(xYSeries1.getNotify());
      assertEquals(1.0, xYSeries1.getMinX(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(9.0, range1.getUpperBound(), 0.01);
      assertEquals(5.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(8.0, range1.getLength(), 0.01);
      assertEquals(5.0, range2.getCentralValue(), 0.01);
      assertEquals(9.0, range2.getUpperBound(), 0.01);
      assertEquals(1.0, range2.getLowerBound(), 0.01);
      assertEquals(8.0, range2.getLength(), 0.01);
      
      Range range3 = DatasetUtilities.iterateXYRangeBounds(xYSeriesCollection0);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertNotNull(range3);
      assertNotSame(xYSeries1, xYSeries0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1.0, powerFunction2D0.getA(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertEquals(1.0, xYSeries1.getMinY(), 0.01);
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(9.0, xYSeries1.getMaxX(), 0.01);
      assertEquals(9, xYSeries1.getItemCount());
      assertEquals(9.0, xYSeries1.getMaxY(), 0.01);
      assertNull(xYSeries1.getDescription());
      assertTrue(xYSeries1.getAutoSort());
      assertTrue(xYSeries1.getNotify());
      assertEquals(1.0, xYSeries1.getMinX(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(9.0, range3.getUpperBound(), 0.01);
      assertEquals(5.0, range3.getCentralValue(), 0.01);
      assertEquals(8.0, range3.getLength(), 0.01);
      assertEquals(1.0, range3.getLowerBound(), 0.01);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (int) (byte)9);
      assertNotNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Minute minute0 = new Minute();
      assertNotNull(minute0);
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      long long0 = minute0.getSerialIndex();
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(60026181L, long0);
      
      Day day0 = minute0.getDay();
      assertNotNull(day0);
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      RegularTimePeriod regularTimePeriod0 = day0.previous();
      assertFalse(regularTimePeriod0.equals((Object)day0));
      assertNotNull(regularTimePeriod0);
      assertNotSame(day0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, day0);
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getLastMillisecond());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      defaultKeyedValuesDataset0.setValue((Comparable) regularTimePeriod0, (double) 0);
      assertFalse(day0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)day0));
      assertNotSame(day0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, day0);
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getLastMillisecond());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) ", but the TimeSeBies is expe_ting an$instance of ", (KeyedValues) defaultKeyedValuesDataset0);
      assertNotNull(categoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Comparable<DefaultOHLCDataset>[] comparableArray0 = (Comparable<DefaultOHLCDataset>[]) Array.newInstance(Comparable.class, 0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1338L);
      assertNotNull(localDate0);
      
      LocalDate localDate1 = MockLocalDate.from(localDate0);
      assertNotNull(localDate1);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
      
      boolean boolean0 = arrayList0.add((ChronoLocalDate) localDate1);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1166.364375171856), (-1.0));
      assertNotNull(lineFunction2D0);
      assertEquals((-1.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-1166.364375171856), lineFunction2D0.getIntercept(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, (-1.0), 1338L, 270, localDate1);
      assertNotNull(xYSeriesCollection0);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
      assertEquals((-1.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-1166.364375171856), lineFunction2D0.getIntercept(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
      assertFalse(boolean1 == boolean0);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
      assertEquals((-1.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-1166.364375171856), lineFunction2D0.getIntercept(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(boolean1);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) arrayList0, false);
      assertNotNull(range0);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals((-1.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-1166.364375171856), lineFunction2D0.getIntercept(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1339.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(668.5, range0.getCentralValue(), 0.01);
      assertEquals(1338.0, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
      assertNotSame(range1, range0);
      assertEquals((-1.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-1166.364375171856), lineFunction2D0.getIntercept(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1339.0, range1.getLength(), 0.01);
      assertEquals((-1834.864375171856), range1.getCentralValue(), 0.01);
      assertEquals((-1165.364375171856), range1.getUpperBound(), 0.01);
      assertEquals((-2504.364375171856), range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((Comparable) ", but the TimeSeBies is expe_ting an$instance of ", (KeyedValues) defaultKeyedValuesDataset0);
      assertNotNull(defaultCategoryDataset0);
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer0);
      assertEquals(100, (int)integer0);
      
      defaultCategoryDataset0.setValue((Number) integer0, (Comparable) ", but the TimeSeBies is expe_ting an$instance of ", (Comparable) ", but the TimeSeBies is expe_ting an$instance of ");
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNotNull(range0);
      assertEquals(100.0, range0.getLowerBound(), 0.01);
      assertEquals(100.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(100.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2254));
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour();
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Minute minute0 = new Minute(2921, hour0);
      assertNotNull(minute0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(105, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 59;
      LineFunction2D lineFunction2D0 = new LineFunction2D(0, (-1297.08142));
      assertNotNull(lineFunction2D0);
      assertEquals(0.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-1297.08142), lineFunction2D0.getSlope(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-307.63179), 0, 5, 59.0);
      assertNotNull(xYSeries0);
      assertEquals(0.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-1297.08142), lineFunction2D0.getSlope(), 0.01);
      assertEquals(5, xYSeries0.getItemCount());
      assertEquals((-307.63179), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(399023.4790103418, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(23, 59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 23, Size: 5
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) (-2254);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-2254);
      doubleArray2[1] = (double) (-2254);
      doubleArray2[2] = (double) (-2254);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Mu", "Mu", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, number0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      int int0 = 14;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-2254));
      assertNotNull(categoryToPieDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-2254), categoryToPieDataset0.getExtractIndex());
      
      double double0 = (-207.57565376695158);
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) (-2254.0), (double) 14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(categoryTableXYDataset0);
      assertNotNull(number0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(Double.NaN, number0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertNull(number1);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      double[][] doubleArray0 = new double[6][2];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1984.0);
      doubleArray1[1] = 3091.33913991;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-1564.7665907);
      doubleArray1[4] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 3091.33913991;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (-1984.0);
      doubleArray4[1] = (-1984.0);
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 3091.33913991;
      doubleArray4[5] = (-1984.0);
      doubleArray4[6] = (-1564.7665907);
      doubleArray4[7] = (-1984.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = 1229.51126932;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = (-1564.7665907);
      doubleArray5[3] = 198.0;
      doubleArray5[4] = 0.0;
      doubleArray5[5] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      
      doubleArray0[5] = doubleArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (-3376.676189024461));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockDate mockDate0 = new MockDate(46);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour();
      assertNotNull(hour0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Minute minute0 = new Minute((-2254), hour0);
      assertNotNull(minute0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(50, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      Date[] dateArray0 = new Date[8];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[6] = (double) 23;
      doubleArray0[0] = (double) 46;
      doubleArray0[3] = (double) 46;
      doubleArray0[3] = (double) (-2254);
      Object object0 = mockDate0.clone();
      assertTrue(object0.equals((Object)mockDate0));
      assertNotNull(object0);
      assertNotSame(mockDate0, object0);
      assertNotSame(object0, mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", object0.toString());
      
      doubleArray0[5] = (double) 59;
      doubleArray0[6] = (double) (-2254);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(minute0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {46.0, 0.0, 0.0, (-2254.0), 0.0, 59.0, (-2254.0)}, doubleArray0, 0.01);
      assertEquals(8, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(50, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      assertNotNull(thaiBuddhistDate0);
      
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add((ChronoLocalDate) thaiBuddhistDate0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(785.618671, (-1.0));
      assertNotNull(lineFunction2D0);
      assertEquals((-1.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals(785.618671, lineFunction2D0.getIntercept(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, 270, 1049.428, 270, thaiBuddhistDate0);
      assertNotNull(xYSeriesCollection0);
      assertEquals((-1.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals(785.618671, lineFunction2D0.getIntercept(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
      assertFalse(boolean1 == boolean0);
      assertEquals((-1.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals(785.618671, lineFunction2D0.getIntercept(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(boolean1);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) arrayList0, false);
      assertNotNull(range0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals((-1.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals(785.618671, lineFunction2D0.getIntercept(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(270.0, range0.getLowerBound(), 0.01);
      assertEquals(1049.428, range0.getUpperBound(), 0.01);
      assertEquals(659.714, range0.getCentralValue(), 0.01);
      assertEquals(779.4280000000001, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals((-1.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals(785.618671, lineFunction2D0.getIntercept(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals((-263.80932900000016), range1.getLowerBound(), 0.01);
      assertEquals(515.618671, range1.getUpperBound(), 0.01);
      assertEquals(125.9046709999999, range1.getCentralValue(), 0.01);
      assertEquals(779.4280000000001, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(332.9317, 0.0, "");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(1.0, 1.0, "kh0zoNqLlq4WBY");
      assertEquals(331.9317, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(categoryTableXYDataset0);
      assertNotNull(number0);
      assertEquals(331.9317, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(498.89754999999997, number0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertNotNull(range0);
      assertEquals(331.9317, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate(913, 913, 913);
      assertNotNull(mockDate0);
      
      Instant instant0 = mockDate0.toInstant();
      assertNotNull(instant0);
      assertEquals("Thu Aug 02 00:00:00 GMT 2891", mockDate0.toString());
      
      Date date0 = Date.from(instant0);
      assertNotNull(date0);
      assertEquals("Thu Aug 02 00:00:00 GMT 2891", mockDate0.toString());
      assertEquals("Thu Aug 02 00:00:00 GMT 2891", date0.toString());
      
      dateArray0[0] = date0;
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 913;
      doubleArray0[2] = (double) 913;
      doubleArray0[4] = (double) 913;
      doubleArray0[5] = (double) 913;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("org.jfree.data.categor.SlidingCategoryDataset", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {0.0, 913.0, 913.0, 0.0, 913.0, 913.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      DomainOrder domainOrder0 = defaultHighLowDataset0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertArrayEquals(new double[] {0.0, 913.0, 913.0, 0.0, 913.0, 913.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertArrayEquals(new double[] {0.0, 913.0, 913.0, 0.0, 913.0, 913.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertTrue(boolean0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      assertNull(range1);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
      assertNotNull(number0);
      assertArrayEquals(new double[] {0.0, 913.0, 913.0, 0.0, 913.0, 913.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[][] doubleArray0 = new double[19][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Mu", "Mu", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(19, doubleArray0.length);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("Mu");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(12, 2098, timeZone0);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(2097, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0);
      assertNotNull(range0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(2097, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertFalse(stack0.contains(2098));
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) stack0, range0, true);
      assertFalse(stack0.contains(2098));
      assertNull(range1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(2097, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) dynamicTimeSeriesCollection0, false);
      assertNull(range2);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(2097, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("#^sx4xU_ = v z", 46, 46);
      assertNotNull(matrixSeries0);
      assertEquals(2116, matrixSeries0.getItemCount());
      assertEquals(46, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(46, matrixSeries0.getColumnsCount());
      
      MockDate mockDate0 = new MockDate(46);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0, hour0.getHour());
      assertEquals(46L, hour0.getFirstMillisecond());
      assertEquals(46L, hour0.getLastMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Minute minute0 = new Minute((-2254), hour0);
      assertNotNull(minute0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0, hour0.getHour());
      assertEquals(46L, hour0.getFirstMillisecond());
      assertEquals(46L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(50, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(0, minute0.getHourValue());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      Date[] dateArray0 = new Date[8];
      Object object0 = mockDate0.clone();
      assertTrue(object0.equals((Object)mockDate0));
      assertNotNull(object0);
      assertNotSame(mockDate0, object0);
      assertNotSame(object0, mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", object0.toString());
      
      dateArray0[0] = (Date) mockDate0;
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (-2254);
      doubleArray1[1] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("#^sx4xU_ = v z", "#^sx4xU_ = v z", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 59;
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = (double) 0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(hour0, dateArray0, doubleArray1, doubleArray3, doubleArray2, doubleArray3, doubleArray2);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertTrue(mockDate0.equals((Object)object0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {59.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-2254.0), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertEquals(4, doubleArray3.length);
      assertEquals(8, dateArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0, hour0.getHour());
      assertEquals(46L, hour0.getFirstMillisecond());
      assertEquals(46L, hour0.getLastMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add(1.7976931348623157E308, (-1.0), "SerialDate.monthCodeToQuarter: invalid month code.");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(categoryTableXYDataset0);
      assertNotNull(number0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.7976931348623157E308, number0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      boolean boolean0 = false;
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) histogramDataset0, false);
      assertNull(range0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[][] doubleArray0 = new double[19][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(19, doubleArray0.length);
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 266, 266);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(19, doubleArray0.length);
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(266, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(266, slidingCategoryDataset0.getFirstCategoryIndex());
      
      List list0 = slidingCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(19, doubleArray0.length);
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(266, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(266, slidingCategoryDataset0.getFirstCategoryIndex());
      assertFalse(list0.isEmpty());
      assertEquals(19, list0.size());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add((double) 266, (-534.106119), "");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-534.106119), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      assertNotNull(thaiBuddhistDate0);
      
      boolean boolean0 = arrayList0.add((ChronoLocalDate) thaiBuddhistDate0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-10.0), (-10.0));
      assertNotNull(lineFunction2D0);
      assertEquals((-10.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-10.0), lineFunction2D0.getIntercept(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, (-10.0), 1.0040876, 270, thaiBuddhistDate0);
      assertNotNull(xYSeriesCollection0);
      assertEquals((-10.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-10.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
      assertFalse(boolean1 == boolean0);
      assertEquals((-10.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-10.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertFalse(boolean1);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) arrayList0, false);
      assertNotNull(range0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-10.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-10.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals((-4.4979562), range0.getCentralValue(), 0.01);
      assertEquals(11.0040876, range0.getLength(), 0.01);
      assertEquals(1.0040876, range0.getUpperBound(), 0.01);
      assertEquals((-10.0), range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, false);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals((-10.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-10.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(11.0040876, range1.getLength(), 0.01);
      assertEquals(1.0040876, range1.getUpperBound(), 0.01);
      assertEquals((-10.0), range1.getLowerBound(), 0.01);
      assertEquals((-4.4979562), range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("#^sx4xU_ = v z", 46, 46);
      assertNotNull(matrixSeries0);
      assertEquals(46, matrixSeries0.getRowCount());
      assertEquals(46, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2116, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(46, matrixSeries0.getRowCount());
      assertEquals(46, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2116, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertEquals(46, matrixSeries0.getRowCount());
      assertEquals(46, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2116, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(45.0, range0.getLength(), 0.01);
      assertEquals(22.5, range0.getCentralValue(), 0.01);
      assertEquals(45.0, range0.getUpperBound(), 0.01);
      
      Range range1 = Range.combine(range0, range0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(46, matrixSeries0.getRowCount());
      assertEquals(46, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2116, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(45.0, range0.getLength(), 0.01);
      assertEquals(22.5, range0.getCentralValue(), 0.01);
      assertEquals(45.0, range0.getUpperBound(), 0.01);
      assertEquals(45.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(22.5, range1.getCentralValue(), 0.01);
      assertEquals(45.0, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-273L));
      assertNotNull(mockDate0);
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      assertNotNull(simpleTimePeriod0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals((-273L), simpleTimePeriod0.getEndMillis());
      assertEquals((-273L), simpleTimePeriod0.getStartMillis());
      
      Date[] dateArray0 = new Date[7];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      dateArray0[5] = (Date) mockDate0;
      dateArray0[6] = (Date) mockDate0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-273L);
      doubleArray0[1] = (double) (-273L);
      doubleArray0[2] = (double) (-273L);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(simpleTimePeriod0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {(-273.0), (-273.0), (-273.0)}, doubleArray0, 0.01);
      assertEquals(7, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals((-273L), simpleTimePeriod0.getEndMillis());
      assertEquals((-273L), simpleTimePeriod0.getStartMillis());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      DomainOrder domainOrder0 = defaultHighLowDataset0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertArrayEquals(new double[] {(-273.0), (-273.0), (-273.0)}, doubleArray0, 0.01);
      assertEquals(7, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals((-273L), simpleTimePeriod0.getEndMillis());
      assertEquals((-273L), simpleTimePeriod0.getStartMillis());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertNotNull(date0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte)5);
      assertNotNull(byte0);
      assertEquals((byte)5, (byte)byte0);
      
      boolean boolean0 = linkedList0.offerFirst(byte0);
      assertTrue(linkedList0.contains((byte)5));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      XYSeries xYSeries0 = new XYSeries(byte0, true, true);
      assertNotNull(xYSeries0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      xYSeries0.add((Number) bigInteger0, (Number) byte0);
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(1.5, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(0.5, range0.getLowerBound(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) xYSeriesCollection0);
      assertNotNull(number0);
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(5.0, number0);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(xYSeriesCollection0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(5.0, range1.getLowerBound(), 0.01);
      assertEquals(5.0, range1.getCentralValue(), 0.01);
      assertEquals(5.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate(913, 913, 913);
      assertNotNull(mockDate0);
      
      Instant instant0 = mockDate0.toInstant();
      assertNotNull(instant0);
      assertEquals("Thu Aug 02 00:00:00 GMT 2891", mockDate0.toString());
      
      Date date0 = Date.from(instant0);
      assertNotNull(date0);
      assertEquals("Thu Aug 02 00:00:00 GMT 2891", mockDate0.toString());
      assertEquals("Thu Aug 02 00:00:00 GMT 2891", date0.toString());
      
      dateArray0[0] = date0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 913;
      doubleArray0[1] = (double) 913;
      doubleArray0[2] = (double) 913;
      doubleArray0[4] = (double) 913;
      doubleArray0[5] = (double) 913;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("org.jfree.data.categor.SlidingCategoryDataset", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {913.0, 913.0, 913.0, 0.0, 913.0, 913.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      DomainOrder domainOrder0 = defaultHighLowDataset0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertArrayEquals(new double[] {913.0, 913.0, 913.0, 0.0, 913.0, 913.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertFalse(stack0.contains(defaultHighLowDataset0));
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertArrayEquals(new double[] {913.0, 913.0, 913.0, 0.0, 913.0, 913.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(913.0, range0.getUpperBound(), 0.01);
      assertEquals(913.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(913.0, range0.getLowerBound(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) arrayList0, range0, true);
      assertNull(range1);
      assertArrayEquals(new double[] {913.0, 913.0, 913.0, 0.0, 913.0, 913.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(913.0, range0.getUpperBound(), 0.01);
      assertEquals(913.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(913.0, range0.getLowerBound(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[][] doubleArray0 = new double[19][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Mu", "Mu", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(19, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(19, doubleArray0.length);
      assertEquals(0.0, number0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-15));
      assertNotNull(categoryToPieDataset0);
      assertEquals(19, doubleArray0.length);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-15), categoryToPieDataset0.getExtractIndex());
      
      double double0 = 2.6455843576052263;
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "Mu", 2.6455843576052263, 2796);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      assertNotNull(thaiBuddhistDate0);
      
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1365.8518;
      doubleArray1[1] = 1006.121354;
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = (-3332.218395165);
      doubleArray1[4] = 2616.608741088;
      doubleArray1[5] = 1.52272224E13;
      doubleArray1[6] = 2125.421384332771;
      doubleArray1[7] = 1242.64;
      doubleArray1[8] = 1663.2892105304359;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1242.64;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = 1242.64;
      doubleArray2[4] = 1006.121354;
      doubleArray2[5] = 1663.2892105304359;
      doubleArray2[6] = 2616.608741088;
      doubleArray2[7] = (-3332.218395165);
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate(510, 510, 13);
      assertNotNull(mockDate0);
      
      Instant instant0 = mockDate0.toInstant();
      assertNotNull(instant0);
      assertEquals("Sat Jul 13 00:00:00 GMT 2452", mockDate0.toString());
      
      Date date0 = Date.from(instant0);
      assertNotNull(date0);
      assertEquals("Sat Jul 13 00:00:00 GMT 2452", mockDate0.toString());
      assertEquals("Sat Jul 13 00:00:00 GMT 2452", date0.toString());
      
      dateArray0[0] = date0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 510;
      doubleArray0[1] = (double) 13;
      doubleArray0[2] = (double) 510;
      doubleArray0[3] = (double) 510;
      doubleArray0[4] = (double) 510;
      doubleArray0[5] = (double) 510;
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultStatisticalCategoryDataset0);
      assertNull(range0);
      
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      boolean boolean0 = linkedList0.add(defaultTableXYDataset0);
      assertTrue(linkedList0.contains(defaultTableXYDataset0));
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) linkedList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultTableXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("M%D2 x6Spc2-dX`;", "M%D2 x6Spc2-dX`;", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      MockDate mockDate0 = new MockDate(2, 999, (-1720), 263, 999);
      assertNotNull(mockDate0);
      
      Instant instant0 = mockDate0.toInstant();
      assertNotNull(instant0);
      assertEquals("Sat Jul 26 15:39:00 GMT 1980", mockDate0.toString());
      
      Date date0 = Date.from(instant0);
      assertNotNull(date0);
      assertEquals("Sat Jul 26 15:39:00 GMT 1980", mockDate0.toString());
      assertEquals("Sat Jul 26 15:39:00 GMT 1980", date0.toString());
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = date0;
      dateArray0[1] = date0;
      double[] doubleArray1 = new double[0];
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 263;
      doubleArray2[1] = (double) (-1720);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(date0, dateArray0, doubleArray1, doubleArray1, doubleArray2, doubleArray2, doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {263.0, (-1720.0)}, doubleArray2, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertEquals("Sat Jul 26 15:39:00 GMT 1980", mockDate0.toString());
      assertEquals("Sat Jul 26 15:39:00 GMT 1980", date0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      DomainOrder domainOrder0 = defaultHighLowDataset0.getDomainOrder();
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(domainOrder0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {263.0, (-1720.0)}, doubleArray2, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertEquals("Sat Jul 26 15:39:00 GMT 1980", mockDate0.toString());
      assertEquals("Sat Jul 26 15:39:00 GMT 1980", date0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertFalse(stack0.contains(defaultHighLowDataset0));
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, (List) stack0, false);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(stack0.contains(defaultHighLowDataset0));
      assertNull(range0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {263.0, (-1720.0)}, doubleArray2, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertEquals("Sat Jul 26 15:39:00 GMT 1980", mockDate0.toString());
      assertEquals("Sat Jul 26 15:39:00 GMT 1980", date0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, false);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(range1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {263.0, (-1720.0)}, doubleArray2, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertEquals((-728.5), range1.getCentralValue(), 0.01);
      assertEquals(1983.0, range1.getLength(), 0.01);
      assertEquals(263.0, range1.getUpperBound(), 0.01);
      assertEquals((-1720.0), range1.getLowerBound(), 0.01);
      assertEquals("Sat Jul 26 15:39:00 GMT 1980", mockDate0.toString());
      assertEquals("Sat Jul 26 15:39:00 GMT 1980", date0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate(510, 510, 13);
      assertNotNull(mockDate0);
      
      Instant instant0 = mockDate0.toInstant();
      assertNotNull(instant0);
      assertEquals("Sat Jul 13 00:00:00 GMT 2452", mockDate0.toString());
      
      Date date0 = Date.from(instant0);
      assertNotNull(date0);
      assertEquals("Sat Jul 13 00:00:00 GMT 2452", mockDate0.toString());
      assertEquals("Sat Jul 13 00:00:00 GMT 2452", date0.toString());
      
      dateArray0[0] = date0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 510;
      doubleArray0[1] = (double) 13;
      doubleArray0[2] = (double) 510;
      doubleArray0[3] = (double) 510;
      doubleArray0[4] = (double) 510;
      doubleArray0[5] = (double) 510;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("org.jfree.data.categor.SlidingCategoryDataset", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {510.0, 13.0, 510.0, 510.0, 510.0, 510.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      DomainOrder domainOrder0 = defaultHighLowDataset0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertArrayEquals(new double[] {510.0, 13.0, 510.0, 510.0, 510.0, 510.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertFalse(stack0.contains(defaultHighLowDataset0));
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, (List) stack0, false);
      assertFalse(stack0.contains(defaultHighLowDataset0));
      assertNull(range0);
      assertArrayEquals(new double[] {510.0, 13.0, 510.0, 510.0, 510.0, 510.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotNull(range1);
      assertArrayEquals(new double[] {510.0, 13.0, 510.0, 510.0, 510.0, 510.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(510.0, range1.getLowerBound(), 0.01);
      assertEquals(510.0, range1.getCentralValue(), 0.01);
      assertEquals(510.0, range1.getUpperBound(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0);
      assertFalse(range2.equals((Object)range1));
      assertNotNull(range2);
      assertNotSame(range2, range1);
      assertArrayEquals(new double[] {510.0, 13.0, 510.0, 510.0, 510.0, 510.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1.52272224E13, range2.getLowerBound(), 0.01);
      assertEquals(1.52272224E13, range2.getCentralValue(), 0.01);
      assertEquals(1.52272224E13, range2.getUpperBound(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      int int0 = (-5105);
      int int1 = (-1074);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, (-5105), (-1074));
      assertNotNull(slidingCategoryDataset0);
      assertEquals((-5105), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1074), slidingCategoryDataset0.getMaximumCategoryCount());
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      slidingCategoryDataset0.addChangeListener(xYDatasetTableModel0);
      assertEquals((-5105), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1074), slidingCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("M%D2 x6Spc2-dX`;", "M%D2 x6Spc2-dX`;", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      TimeSeries timeSeries0 = new TimeSeries("M%D2 x6Spc2-dX`;");
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      assertNotNull(fixedMillisecond0);
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) 0L);
      assertNull(timeSeriesDataItem0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      assertNotNull(number0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, number0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(timeSeriesCollection0);
      assertNotNull(range0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("org.jfree.data.categor.SlidingCategoryDataset", "org.jfree.data.categor.SlidingCategoryDataset", "org.jfree.data.categor.SlidingCategoryDataset");
      assertNotNull(timeSeries0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("org.jfree.data.categor.SlidingCategoryDataset", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("org.jfree.data.categor.SlidingCategoryDataset", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("org.jfree.data.categor.SlidingCategoryDataset", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("org.jfree.data.categor.SlidingCategoryDataset", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, true);
      assertNull(range0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("org.jfree.data.categor.SlidingCategoryDataset", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("org.jfree.data.categor.SlidingCategoryDataset", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.jfree.data.categor.SlidingCategoryDataset";
      stringArray0[1] = "org.jfree.data.categor.SlidingCategoryDataset";
      stringArray0[2] = "org.jfree.data.categor.SlidingCategoryDataset";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, stringArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, false);
      assertNull(range0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-276.967);
      doubleArray1[1] = 3032.0130978868515;
      doubleArray1[2] = 933.1046860708464;
      doubleArray1[3] = 3096.476;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = Double.POSITIVE_INFINITY;
      doubleArray3[1] = 933.1046860708464;
      doubleArray3[2] = 3096.476;
      doubleArray3[3] = 933.1046860708464;
      doubleArray3[4] = 3096.476;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (-276.967);
      doubleArray4[1] = (-1657.233306);
      doubleArray4[2] = 3096.476;
      doubleArray4[3] = 3032.0130978868515;
      doubleArray4[4] = 3032.0130978868515;
      doubleArray4[5] = 3096.476;
      doubleArray4[6] = (-276.967);
      doubleArray4[7] = 933.1046860708464;
      doubleArray4[8] = (-2087.4);
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate(510, 510, 13);
      assertNotNull(mockDate0);
      
      Instant instant0 = mockDate0.toInstant();
      assertNotNull(instant0);
      assertEquals("Sat Jul 13 00:00:00 GMT 2452", mockDate0.toString());
      
      Date date0 = Date.from(instant0);
      assertNotNull(date0);
      assertEquals("Sat Jul 13 00:00:00 GMT 2452", mockDate0.toString());
      assertEquals("Sat Jul 13 00:00:00 GMT 2452", date0.toString());
      
      dateArray0[0] = date0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 510;
      doubleArray0[1] = (double) 13;
      doubleArray0[2] = (double) 510;
      doubleArray0[3] = (double) 510;
      doubleArray0[4] = (double) 510;
      doubleArray0[5] = (double) 510;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("org.jfree.data.categor.SlidingCategoryDataset", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {510.0, 13.0, 510.0, 510.0, 510.0, 510.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      DomainOrder domainOrder0 = defaultHighLowDataset0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertArrayEquals(new double[] {510.0, 13.0, 510.0, 510.0, 510.0, 510.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertFalse(stack0.contains(defaultHighLowDataset0));
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      
      boolean boolean0 = mockDate0.before(date0);
      assertEquals("Sat Jul 13 00:00:00 GMT 2452", mockDate0.toString());
      assertEquals("Sat Jul 13 00:00:00 GMT 2452", date0.toString());
      assertFalse(boolean0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, (List) stack0, false);
      assertFalse(stack0.contains(defaultHighLowDataset0));
      assertNull(range0);
      assertArrayEquals(new double[] {510.0, 13.0, 510.0, 510.0, 510.0, 510.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotNull(range1);
      assertArrayEquals(new double[] {510.0, 13.0, 510.0, 510.0, 510.0, 510.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(510.0, range1.getUpperBound(), 0.01);
      assertEquals(510.0, range1.getCentralValue(), 0.01);
      assertEquals(510.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
      assertTrue(range2.equals((Object)range1));
      assertNotNull(range2);
      assertNotSame(range2, range1);
      assertArrayEquals(new double[] {510.0, 13.0, 510.0, 510.0, 510.0, 510.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(510.0, range2.getCentralValue(), 0.01);
      assertEquals(510.0, range2.getUpperBound(), 0.01);
      assertEquals(510.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte)5);
      assertNotNull(byte0);
      assertEquals((byte)5, (byte)byte0);
      
      boolean boolean0 = linkedList0.offerFirst(byte0);
      assertTrue(linkedList0.contains(byte0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      XYSeries xYSeries0 = new XYSeries(byte0, true, true);
      assertNotNull(xYSeries0);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = BigInteger.valueOf(1L);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      
      xYSeries0.add((Number) bigInteger0, (Number) byte0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertNotSame(bigInteger0, bigInteger1);
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      Range range0 = xYSeriesCollection0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(5.0, range0.getLowerBound(), 0.01);
      assertEquals(5.0, range0.getCentralValue(), 0.01);
      assertEquals(5.0, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, false);
      assertFalse(range1.equals((Object)range0));
      assertTrue(linkedList0.contains(byte0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, range0, true);
      assertFalse(range0.equals((Object)range1));
      assertTrue(linkedList0.contains(byte0));
      assertNull(range2);
      assertNotSame(range0, range1);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(5.0, range0.getLowerBound(), 0.01);
      assertEquals(5.0, range0.getCentralValue(), 0.01);
      assertEquals(5.0, range0.getUpperBound(), 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range3 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      assertNull(range3);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[][] doubleArray0 = new double[19][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Mu", "Mu", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(19, doubleArray0.length);
      
      Double double0 = (Double)DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(double0);
      assertEquals(19, doubleArray0.length);
      assertEquals(0.0, (double)double0, 0.01);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 14);
      assertNotNull(categoryToPieDataset0);
      assertEquals(19, doubleArray0.length);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(14, categoryToPieDataset0.getExtractIndex());
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) double0, (-207.57565376695158));
      assertNotNull(defaultPieDataset0);
      assertEquals(19, doubleArray0.length);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(14, categoryToPieDataset0.getExtractIndex());
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) double0, (double) 14, 182);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertNotNull(defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertEquals(19, doubleArray0.length);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(14, categoryToPieDataset0.getExtractIndex());
      
      double double1 = DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
      assertEquals(19, doubleArray0.length);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(14, categoryToPieDataset0.getExtractIndex());
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      assertNotNull(thaiBuddhistDate0);
      
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add((ChronoLocalDate) thaiBuddhistDate0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 736, (-3148));
      assertNotNull(slidingCategoryDataset0);
      assertEquals((-3148), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(736, slidingCategoryDataset0.getFirstCategoryIndex());
      
      int int0 = 2572;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(slidingCategoryDataset0, tableOrder0, 2572);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-3148), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(736, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2572, categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) thaiBuddhistDate0, (double) 2572);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", ", but the TimeSeries is expecting an instance of ", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 0L;
      doubleArray1[1] = (double) 0L;
      doubleArray1[2] = (double) 0L;
      doubleArray1[3] = (double) 0L;
      doubleArray1[4] = (double) 0L;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0L;
      doubleArray2[1] = (double) 0L;
      doubleArray2[2] = (double) 0L;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(", but the TimeSeries is expecting an instance of ", dateArray0, doubleArray1, doubleArray2, doubleArray1, doubleArray1, doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      DomainOrder domainOrder0 = defaultHighLowDataset0.getDomainOrder();
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(domainOrder0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, (List) arrayList0, true);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNull(range1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertTrue(range2.equals((Object)range0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(range2);
      assertNotSame(range2, range0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      
      Range range3 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range0));
      assertNotNull(range3);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      
      Range range4 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertTrue(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(range4);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("#^sx4xU_ = v z", 46, 46);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(46, matrixSeries0.getRowCount());
      assertEquals(2116, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(46, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(46, matrixSeries0.getRowCount());
      assertEquals(2116, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(46, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, true);
      assertNotNull(range0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(46, matrixSeries0.getRowCount());
      assertEquals(2116, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(46, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(22.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(45.0, range0.getUpperBound(), 0.01);
      assertEquals(45.0, range0.getLength(), 0.01);
      
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) matrixSeriesCollection0, (List) stack0, range0, true);
      assertNull(range1);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(46, matrixSeries0.getRowCount());
      assertEquals(2116, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(46, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(22.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(45.0, range0.getUpperBound(), 0.01);
      assertEquals(45.0, range0.getLength(), 0.01);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[][] doubleArray0 = new double[19][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(19, doubleArray0.length);
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(19, doubleArray0.length);
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, number0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(19, doubleArray0.length);
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 266, 266);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(19, doubleArray0.length);
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(266, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(266, slidingCategoryDataset0.getMaximumCategoryCount());
      
      List list0 = slidingCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(19, doubleArray0.length);
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(266, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(266, slidingCategoryDataset0.getMaximumCategoryCount());
      assertFalse(list0.isEmpty());
      assertEquals(19, list0.size());
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2103);
      assertNotNull(spreadsheetDate0);
      assertEquals(10, spreadsheetDate0.getMonth());
      assertEquals(1905, spreadsheetDate0.getYYYY());
      assertEquals(3, spreadsheetDate0.getDayOfMonth());
      assertEquals(2103, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(3, spreadsheetDate0.getDayOfWeek());
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      
      Date date0 = spreadsheetDate0.toDate();
      assertNotNull(date0);
      assertEquals(10, spreadsheetDate0.getMonth());
      assertEquals(1905, spreadsheetDate0.getYYYY());
      assertEquals(3, spreadsheetDate0.getDayOfMonth());
      assertEquals(2103, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(3, spreadsheetDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 45.0, 7, 2621.4466170283217, 0, (-1.0));
      assertNotNull(oHLCDataItem0);
      assertEquals(10, spreadsheetDate0.getMonth());
      assertEquals(1905, spreadsheetDate0.getYYYY());
      assertEquals(3, spreadsheetDate0.getDayOfMonth());
      assertEquals(2103, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(3, spreadsheetDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, (-1102.310802003123), (-587.5848421802942), (-1.0), 45.0, 4);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      assertEquals(10, spreadsheetDate0.getMonth());
      assertEquals(1905, spreadsheetDate0.getYYYY());
      assertEquals(3, spreadsheetDate0.getDayOfMonth());
      assertEquals(2103, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(3, spreadsheetDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(date0, 2, (-2154.4105534), (-10.0), 2958465, 45.0);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem2);
      assertEquals(10, spreadsheetDate0.getMonth());
      assertEquals(1905, spreadsheetDate0.getYYYY());
      assertEquals(3, spreadsheetDate0.getDayOfMonth());
      assertEquals(2103, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(3, spreadsheetDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[9];
      oHLCDataItemArray0[0] = oHLCDataItem1;
      oHLCDataItemArray0[1] = oHLCDataItem2;
      oHLCDataItemArray0[2] = oHLCDataItem2;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem2;
      oHLCDataItemArray0[6] = oHLCDataItem2;
      oHLCDataItemArray0[7] = oHLCDataItem0;
      oHLCDataItemArray0[8] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem2, oHLCDataItemArray0);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertNotNull(defaultOHLCDataset0);
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(10, spreadsheetDate0.getMonth());
      assertEquals(1905, spreadsheetDate0.getYYYY());
      assertEquals(3, spreadsheetDate0.getDayOfMonth());
      assertEquals(2103, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(3, spreadsheetDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, false);
      assertFalse(range1.equals((Object)range0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertNotSame(oHLCDataItem2, oHLCDataItem1);
      assertNotSame(oHLCDataItem2, oHLCDataItem0);
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2958465.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1479232.5, range1.getCentralValue(), 0.01);
      assertEquals(2958465.0, range1.getUpperBound(), 0.01);
      assertEquals(10, spreadsheetDate0.getMonth());
      assertEquals(1905, spreadsheetDate0.getYYYY());
      assertEquals(3, spreadsheetDate0.getDayOfMonth());
      assertEquals(2103, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(3, spreadsheetDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      
      Range range2 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertNotNull(range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(oHLCDataItem2, oHLCDataItem1);
      assertNotSame(oHLCDataItem2, oHLCDataItem0);
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(10, spreadsheetDate0.getMonth());
      assertEquals(1905, spreadsheetDate0.getYYYY());
      assertEquals(3, spreadsheetDate0.getDayOfMonth());
      assertEquals(2103, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(3, spreadsheetDate0.getDayOfWeek());
      assertEquals((-1.5), range2.getCentralValue(), 0.01);
      assertEquals(17.0, range2.getLength(), 0.01);
      assertEquals(7.0, range2.getUpperBound(), 0.01);
      assertEquals((-10.0), range2.getLowerBound(), 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      
      Range range3 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, list0, false);
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertNotNull(range3);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertNotSame(oHLCDataItem2, oHLCDataItem1);
      assertNotSame(oHLCDataItem2, oHLCDataItem0);
      assertEquals(19, doubleArray0.length);
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(266, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(266, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(list0.isEmpty());
      assertEquals(19, list0.size());
      assertEquals(10, spreadsheetDate0.getMonth());
      assertEquals(1905, spreadsheetDate0.getYYYY());
      assertEquals(3, spreadsheetDate0.getDayOfMonth());
      assertEquals(2103, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(3, spreadsheetDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1.39240928132E12, range3.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range3.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Comparable<DefaultBoxAndWhiskerXYDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerXYDataset>[]) Array.newInstance(Comparable.class, 3);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerXYDataset>) fixedMillisecond0;
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      comparableArray0[1] = (Comparable<DefaultBoxAndWhiskerXYDataset>) second0;
      Second second1 = (Second)second0.previous();
      assertFalse(second1.equals((Object)second0));
      assertNotNull(second1);
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(20, second1.getSecond());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      comparableArray0[2] = (Comparable<DefaultBoxAndWhiskerXYDataset>) second1;
      Comparable<XYSeriesCollection>[] comparableArray1 = (Comparable<XYSeriesCollection>[]) Array.newInstance(Comparable.class, 8);
      comparableArray1[0] = (Comparable<XYSeriesCollection>) second1;
      comparableArray1[1] = (Comparable<XYSeriesCollection>) fixedMillisecond0;
      comparableArray1[2] = (Comparable<XYSeriesCollection>) fixedMillisecond0;
      comparableArray1[3] = (Comparable<XYSeriesCollection>) second1;
      comparableArray1[4] = (Comparable<XYSeriesCollection>) fixedMillisecond0;
      comparableArray1[5] = (Comparable<XYSeriesCollection>) second0;
      comparableArray1[6] = (Comparable<XYSeriesCollection>) second1;
      comparableArray1[7] = (Comparable<XYSeriesCollection>) fixedMillisecond0;
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2.147483648E9);
      doubleArray0[0] = doubleArray1;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'columnKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("M%D2 x6Spc2-dX`;", "M%D2 x6Spc2-dX`;", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      TimeSeries timeSeries0 = new TimeSeries("M%D2 x6Spc2-dX`;");
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      assertNotNull(fixedMillisecond0);
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      
      FixedMillisecond fixedMillisecond1 = new FixedMillisecond(0L);
      assertTrue(fixedMillisecond1.equals((Object)fixedMillisecond0));
      assertNotNull(fixedMillisecond1);
      assertEquals(0L, fixedMillisecond1.getSerialIndex());
      assertEquals(0L, fixedMillisecond1.getLastMillisecond());
      assertEquals(0L, fixedMillisecond1.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond1.getFirstMillisecond());
      
      Date date0 = fixedMillisecond1.getTime();
      assertTrue(fixedMillisecond1.equals((Object)fixedMillisecond0));
      assertNotNull(date0);
      assertNotSame(fixedMillisecond1, fixedMillisecond0);
      assertEquals(0L, fixedMillisecond1.getSerialIndex());
      assertEquals(0L, fixedMillisecond1.getLastMillisecond());
      assertEquals(0L, fixedMillisecond1.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond1.getFirstMillisecond());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond1, (double) 0L);
      assertTrue(fixedMillisecond1.equals((Object)fixedMillisecond0));
      assertNull(timeSeriesDataItem0);
      assertNotSame(fixedMillisecond1, fixedMillisecond0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0L, fixedMillisecond1.getSerialIndex());
      assertEquals(0L, fixedMillisecond1.getLastMillisecond());
      assertEquals(0L, fixedMillisecond1.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond1.getFirstMillisecond());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0);
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertNotNull(range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[][] doubleArray0 = new double[9][3];
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[9];
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, Double.POSITIVE_INFINITY, (-10.0), Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 313.9660472568135);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 313.9660472568135, 313.9660472568135, 2712.2273947874, 313.9660472568135, 1816.876493087537);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 2712.2273947874, (-1193.4144));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem2);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 1049.762065330808, 1816.876493087537, 1816.876493087537, (-3616.26746), (-3616.26746));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem3);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, 5237.90287896, 1816.876493087537, (-10.0), 1522.0, 2712.2273947874);
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem4);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[4] = oHLCDataItem4;
      OHLCDataItem oHLCDataItem5 = new OHLCDataItem(mockDate0, 1522.0, 2712.2273947874, (-10.0), 5237.90287896, 313.9660472568135);
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem5);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[5] = oHLCDataItem5;
      OHLCDataItem oHLCDataItem6 = new OHLCDataItem(mockDate0, 1522.0, (-10.0), (-1193.4144), 1816.876493087537, 2694.97669);
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem5));
      assertNotNull(oHLCDataItem6);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[6] = oHLCDataItem6;
      OHLCDataItem oHLCDataItem7 = new OHLCDataItem(mockDate0, 313.9660472568135, (-2339.83125), (-2339.83125), (-1.0), 1.0);
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem6));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem5));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem2));
      assertNotNull(oHLCDataItem7);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[7] = oHLCDataItem7;
      OHLCDataItem oHLCDataItem8 = new OHLCDataItem(mockDate0, 2694.97669, 1049.762065330808, (-2154.4105534), 1.0, 1514.56787);
      assertFalse(oHLCDataItem8.equals((Object)oHLCDataItem5));
      assertFalse(oHLCDataItem8.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem8.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem8.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem8.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem8.equals((Object)oHLCDataItem7));
      assertFalse(oHLCDataItem8.equals((Object)oHLCDataItem6));
      assertFalse(oHLCDataItem8.equals((Object)oHLCDataItem4));
      assertNotNull(oHLCDataItem8);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[8] = oHLCDataItem8;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("org.jfree.data.categor.SlidingCategoryDataset", oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, true);
      assertNotNull(range0);
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals((-2339.83125), range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Number[][] numberArrayArray0 = null;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte)5);
      assertNotNull(byte0);
      assertEquals((byte)5, (byte)byte0);
      
      boolean boolean0 = linkedList0.offerFirst(byte0);
      assertTrue(linkedList0.contains(byte0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      XYSeries xYSeries0 = new XYSeries(byte0, true, true);
      assertNotNull(xYSeries0);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = BigInteger.valueOf(1L);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      
      xYSeries0.add((Number) bigInteger0, (Number) byte0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertNotSame(bigInteger0, bigInteger1);
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      Range range0 = xYSeriesCollection0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(5.0, range0.getCentralValue(), 0.01);
      assertEquals(5.0, range0.getLowerBound(), 0.01);
      assertEquals(5.0, range0.getUpperBound(), 0.01);
      
      xYSeries0.setMaximumItemCount((byte)5);
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(5, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, true);
      assertFalse(range1.equals((Object)range0));
      assertTrue(linkedList0.contains((byte)5));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals(1, linkedList0.size());
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(5, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals((-0.5), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.5, range1.getUpperBound(), 0.01);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, range1, true);
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertTrue(linkedList0.contains((byte)5));
      assertNotNull(range2);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(1, linkedList0.size());
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(5, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals((-0.5), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.5, range1.getUpperBound(), 0.01);
      assertEquals(5.0, range2.getCentralValue(), 0.01);
      assertEquals(5.0, range2.getUpperBound(), 0.01);
      assertEquals(5.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset("Duplicate items in 'columnKeys'.", "Duplicate items in 'columnKeys'.", (String) null, "");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("#^sx4xU_ = v z", 46, 46);
      assertNotNull(matrixSeries0);
      assertEquals(46, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(46, matrixSeries0.getColumnsCount());
      assertEquals(2116, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 46;
      doubleArray1[1] = (double) 46;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = 1618.861990193;
      doubleArray1[4] = (double) 46;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 0;
      doubleArray1[8] = (double) 46;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("#^sx4xU_ = v z", "(", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 46);
      assertNotNull(categoryToPieDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(46, categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) 0.0, (-1.0));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 46, Size: 9
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte)5);
      assertNotNull(byte0);
      assertEquals((byte)5, (byte)byte0);
      
      boolean boolean0 = linkedList0.offerFirst(byte0);
      assertTrue(linkedList0.contains((byte)5));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      XYSeries xYSeries0 = new XYSeries(byte0, true, true);
      assertNotNull(xYSeries0);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = BigInteger.valueOf(1L);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      
      xYSeries0.add((Number) bigInteger0, (Number) byte0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertNotSame(bigInteger0, bigInteger1);
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      Range range0 = xYSeriesCollection0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(5.0, range0.getLowerBound(), 0.01);
      assertEquals(5.0, range0.getCentralValue(), 0.01);
      assertEquals(5.0, range0.getUpperBound(), 0.01);
      
      xYSeries0.setMaximumItemCount((byte)5);
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertEquals(5, xYSeries0.getMaximumItemCount());
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean1 = xYSeriesCollection0.hasListener(xIntervalSeriesCollection0);
      assertFalse(boolean1 == boolean0);
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertEquals(5, xYSeries0.getMaximumItemCount());
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertFalse(boolean1);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, true);
      assertFalse(range1.equals((Object)range0));
      assertTrue(linkedList0.contains(byte0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals(1, linkedList0.size());
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertEquals(5, xYSeries0.getMaximumItemCount());
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals((-0.5), range1.getLowerBound(), 0.01);
      assertEquals(0.5, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      
      xYSeries0.add((Number) bigInteger0, (Number) bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertNotSame(bigInteger0, bigInteger1);
      assertEquals(2, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertEquals(5, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, range1, false);
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertTrue(linkedList0.contains(byte0));
      assertNotNull(range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(1, linkedList0.size());
      assertEquals(2, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertEquals(5, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals((-0.5), range1.getLowerBound(), 0.01);
      assertEquals(0.5, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals(5.0, range2.getLength(), 0.01);
      assertEquals(2.5, range2.getCentralValue(), 0.01);
      assertEquals(5.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset("Duplicate items in 'columnKeys'.", "Duplicate items in 'columnKeys'.", (String) null, "");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte)5);
      assertNotNull(byte0);
      assertEquals((byte)5, (byte)byte0);
      
      boolean boolean0 = linkedList0.offerFirst(byte0);
      assertTrue(linkedList0.contains((byte)5));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      XYSeries xYSeries0 = new XYSeries(byte0, true, true);
      assertNotNull(xYSeries0);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = BigInteger.valueOf(1L);
      assertNotNull(bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      
      xYSeries0.add((Number) bigInteger0, (Number) byte0);
      assertSame(bigInteger0, bigInteger1);
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      xYSeries0.setMaximumItemCount((byte)5);
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(5, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean1 = linkedList0.add(byte0);
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedList0.contains((byte)5));
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      
      boolean boolean2 = xYSeriesCollection0.hasListener(xIntervalSeriesCollection0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(5, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertFalse(boolean2);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, true);
      assertTrue(linkedList0.contains((byte)5));
      assertNotNull(range0);
      assertEquals(2, linkedList0.size());
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(5, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(1.5, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(0.5, range0.getLowerBound(), 0.01);
      
      xYSeries0.add((Number) bigInteger0, (Number) bigInteger0);
      assertSame(bigInteger0, bigInteger1);
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertEquals(1.0, xYSeries0.getMinY(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(5, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, range0, false);
      assertFalse(range1.equals((Object)range0));
      assertTrue(linkedList0.contains((byte)5));
      assertNotNull(range1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(2, linkedList0.size());
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertEquals(1.0, xYSeries0.getMinY(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(5, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(1.5, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(0.5, range0.getLowerBound(), 0.01);
      assertEquals(3.0, range1.getCentralValue(), 0.01);
      assertEquals(4.0, range1.getLength(), 0.01);
      assertEquals(5.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, range1, true);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertTrue(linkedList0.contains((byte)5));
      assertNotNull(range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(2, linkedList0.size());
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertEquals(1.0, xYSeries0.getMinY(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(5, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(1.5, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(0.5, range0.getLowerBound(), 0.01);
      assertEquals(3.0, range1.getCentralValue(), 0.01);
      assertEquals(4.0, range1.getLength(), 0.01);
      assertEquals(5.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(3.0, range2.getCentralValue(), 0.01);
      assertEquals(5.0, range2.getUpperBound(), 0.01);
      assertEquals(1.0, range2.getLowerBound(), 0.01);
      assertEquals(4.0, range2.getLength(), 0.01);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertFalse(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      assertNotNull(range3);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertEquals(1.0, range3.getLowerBound(), 0.01);
      assertEquals(5.0, range3.getUpperBound(), 0.01);
      assertEquals(3.0, range3.getCentralValue(), 0.01);
      assertEquals(4.0, range3.getLength(), 0.01);
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertEquals(1.0, xYSeries0.getMinY(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(5, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      Range range4 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertFalse(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range1));
      assertNotNull(range4);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertNotSame(range4, range0);
      assertNotSame(range4, range1);
      assertEquals(1.5, range4.getUpperBound(), 0.01);
      assertEquals(1.0, range4.getLength(), 0.01);
      assertEquals(0.5, range4.getLowerBound(), 0.01);
      assertEquals(1.0, range4.getCentralValue(), 0.01);
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertEquals(1.0, xYSeries0.getMinY(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(5, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<TimeTableXYDataset> arrayList0 = new ArrayList<TimeTableXYDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = BigInteger.valueOf((-3772L));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals((short) (-3772), bigInteger1.shortValue());
      assertEquals((byte)68, bigInteger1.byteValue());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-3772L), 45.0);
      assertNotNull(lineFunction2D0);
      assertEquals(45.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-3772.0), lineFunction2D0.getIntercept(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-587.5848421802942), 45.0, 823, bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertNotNull(xYSeries0);
      assertNotSame(bigInteger0, bigInteger1);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(45.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-3772.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(45.0, xYSeries0.getMaxX(), 0.01);
      assertEquals((-30213.31789811324), xYSeries0.getMinY(), 0.01);
      assertEquals(823, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals((-587.5848421802942), xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-1747.0), xYSeries0.getMaxY(), 0.01);
      
      xYSeries0.add((Number) bigInteger0, (Number) bigInteger1);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short) (-3772), bigInteger1.shortValue());
      assertEquals((byte)68, bigInteger1.byteValue());
      assertEquals(45.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-3772.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(45.0, xYSeries0.getMaxX(), 0.01);
      assertEquals((-30213.31789811324), xYSeries0.getMinY(), 0.01);
      assertEquals(824, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals((-587.5848421802942), xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-1747.0), xYSeries0.getMaxY(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertNotNull(xYSeriesCollection0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(45.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-3772.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(45.0, xYSeries0.getMaxX(), 0.01);
      assertEquals((-30213.31789811324), xYSeries0.getMinY(), 0.01);
      assertEquals(824, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals((-587.5848421802942), xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-1747.0), xYSeries0.getMaxY(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      xYSeries0.setMaximumItemCount(823);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertNotSame(bigInteger0, bigInteger1);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(45.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-3772.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(45.0, xYSeries0.getMaxX(), 0.01);
      assertEquals((-586.8152742457684), xYSeries0.getMinX(), 0.01);
      assertEquals((-30178.687341059576), xYSeries0.getMinY(), 0.01);
      assertEquals(823, xYSeries0.getMaximumItemCount());
      assertEquals(823, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-1747.0), xYSeries0.getMaxY(), 0.01);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      DefaultEditorKit.PasteAction defaultEditorKit_PasteAction0 = new DefaultEditorKit.PasteAction();
      assertNotNull(defaultEditorKit_PasteAction0);
      
      boolean boolean0 = xYSeriesCollection0.hasListener(defaultEditorKit_PasteAction0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertNotSame(bigInteger0, bigInteger1);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(45.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-3772.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(45.0, xYSeries0.getMaxX(), 0.01);
      assertEquals((-586.8152742457684), xYSeries0.getMinX(), 0.01);
      assertEquals((-30178.687341059576), xYSeries0.getMinY(), 0.01);
      assertEquals(823, xYSeries0.getMaximumItemCount());
      assertEquals(823, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-1747.0), xYSeries0.getMaxY(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(boolean0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) arrayList0, true);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertNull(range0);
      assertNotSame(bigInteger0, bigInteger1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(45.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-3772.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(45.0, xYSeries0.getMaxX(), 0.01);
      assertEquals((-586.8152742457684), xYSeries0.getMinX(), 0.01);
      assertEquals((-30178.687341059576), xYSeries0.getMinY(), 0.01);
      assertEquals(823, xYSeries0.getMaximumItemCount());
      assertEquals(823, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-1747.0), xYSeries0.getMaxY(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      xYSeries0.add((Number) bigInteger1, (Number) bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short) (-3772), bigInteger1.shortValue());
      assertEquals((byte)68, bigInteger1.byteValue());
      assertEquals(45.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-3772.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(45.0, xYSeries0.getMaxX(), 0.01);
      assertEquals((-586.8152742457684), xYSeries0.getMinX(), 0.01);
      assertEquals((-30178.687341059576), xYSeries0.getMinY(), 0.01);
      assertEquals(823, xYSeries0.getMaximumItemCount());
      assertEquals(823, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-1747.0), xYSeries0.getMaxY(), 0.01);
      
      Range range1 = Range.expandToInclude((Range) null, 823);
      assertNotNull(range1);
      assertEquals(823.0, range1.getLowerBound(), 0.01);
      assertEquals(823.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(823.0, range1.getUpperBound(), 0.01);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, (List) arrayList0, range1, false);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertNull(range2);
      assertNotSame(bigInteger0, bigInteger1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(45.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-3772.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(45.0, xYSeries0.getMaxX(), 0.01);
      assertEquals((-586.8152742457684), xYSeries0.getMinX(), 0.01);
      assertEquals((-30178.687341059576), xYSeries0.getMinY(), 0.01);
      assertEquals(823, xYSeries0.getMaximumItemCount());
      assertEquals(823, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-1747.0), xYSeries0.getMaxY(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(823.0, range1.getLowerBound(), 0.01);
      assertEquals(823.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(823.0, range1.getUpperBound(), 0.01);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertFalse(range3.equals((Object)range1));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertNotNull(range3);
      assertNotSame(range3, range1);
      assertNotSame(bigInteger0, bigInteger1);
      assertEquals((-1747.0), range3.getUpperBound(), 0.01);
      assertEquals((-30178.687341059576), range3.getLowerBound(), 0.01);
      assertEquals(28431.687341059576, range3.getLength(), 0.01);
      assertEquals((-15962.843670529788), range3.getCentralValue(), 0.01);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(45.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-3772.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(45.0, xYSeries0.getMaxX(), 0.01);
      assertEquals((-586.8152742457684), xYSeries0.getMinX(), 0.01);
      assertEquals((-30178.687341059576), xYSeries0.getMinY(), 0.01);
      assertEquals(823, xYSeries0.getMaximumItemCount());
      assertEquals(823, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-1747.0), xYSeries0.getMaxY(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(xIntervalSeriesCollection0);
      assertNull(number0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1510.7);
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray1[2] = 3775.195760607652;
      doubleArray1[3] = (-500.910739);
      doubleArray1[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.POSITIVE_INFINITY;
      doubleArray2[1] = (-500.910739);
      doubleArray2[2] = Double.NEGATIVE_INFINITY;
      doubleArray2[3] = (-1510.7);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.categor.SlidingCategoryDataset", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.validateObject();
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(3, doubleArray0.length);
      assertEquals(Double.POSITIVE_INFINITY, number0);
      
      TimeSeries timeSeries0 = new TimeSeries("org.jfree.data.categor.SlidingCategoryDataset");
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("#^sx4xU_ = v z", 46, 46);
      assertNotNull(matrixSeries0);
      assertEquals(46, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2116, matrixSeries0.getItemCount());
      assertEquals(46, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 46;
      doubleArray1[1] = (double) 46;
      doubleArray1[2] = (double) 46;
      doubleArray1[3] = (double) 46;
      doubleArray1[4] = 0.5;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.5;
      doubleArray2[1] = 0.5;
      doubleArray2[2] = (double) 46;
      doubleArray2[3] = 0.5;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 46;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(3, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[][] doubleArray0 = new double[9][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("d^`D2VBma", "d^`D2VBma", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(9, doubleArray0.length);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Long long0 = new Long(5615L);
      assertNotNull(long0);
      assertEquals(5615L, (long)long0);
      
      List list0 = ((DefaultCategoryDataset) categoryDataset0).getRowKeys();
      assertNotNull(list0);
      assertEquals(9, doubleArray0.length);
      assertFalse(list0.isEmpty());
      assertEquals(9, list0.size());
      
      Long long1 = new Long(5615L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(5615L, (long)long1);
      
      boolean boolean0 = linkedList0.add(long1);
      assertTrue(long1.equals((Object)long0));
      assertTrue(linkedList0.contains(5615L));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, number0);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) histogramDataset0);
      assertNull(number1);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) histogramDataset0, (List) list0, range0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Comparable<Integer>[] comparableArray0 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 0);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(comparableArray0, comparableArray0, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("#^sx4xU_ = v z", 46, 46);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2116, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(46, matrixSeries0.getRowCount());
      assertEquals(46, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2116, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(46, matrixSeries0.getRowCount());
      assertEquals(46, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertNotNull(number0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2116, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(46, matrixSeries0.getRowCount());
      assertEquals(46, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, number0);
      
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, false);
      assertNotNull(range0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2116, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(46, matrixSeries0.getRowCount());
      assertEquals(46, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(45.0, range0.getUpperBound(), 0.01);
      assertEquals(22.5, range0.getCentralValue(), 0.01);
      assertEquals(45.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, (List) stack0, range0, true);
      assertNull(range1);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2116, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(46, matrixSeries0.getRowCount());
      assertEquals(46, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(45.0, range0.getUpperBound(), 0.01);
      assertEquals(22.5, range0.getCentralValue(), 0.01);
      assertEquals(45.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, false);
      assertTrue(range2.equals((Object)range0));
      assertNotNull(range2);
      assertNotSame(range2, range0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2116, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(46, matrixSeries0.getRowCount());
      assertEquals(46, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(22.5, range2.getCentralValue(), 0.01);
      assertEquals(45.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(45.0, range2.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ArrayList<TimeTableXYDataset> arrayList0 = new ArrayList<TimeTableXYDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      boolean boolean0 = arrayList0.add(timeTableXYDataset0);
      assertTrue(arrayList0.contains(timeTableXYDataset0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertTrue(boolean0);
      
      boolean boolean1 = arrayList0.add(timeTableXYDataset0);
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayList0.contains(timeTableXYDataset0));
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertTrue(boolean1);
      
      double[][] doubleArray0 = new double[5][4];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 46;
      doubleArray1[1] = (double) 46;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 46;
      doubleArray2[1] = (double) 46;
      doubleArray2[2] = (double) 46;
      doubleArray2[3] = (double) 46;
      doubleArray2[4] = (double) 46;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 46;
      doubleArray3[1] = (double) 46;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (double) 46;
      doubleArray4[1] = (double) 46;
      doubleArray4[2] = (double) 46;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = (double) 46;
      doubleArray5[1] = (double) 46;
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 46, 46);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(46, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(46, slidingCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.TimeTableXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("#^sx4xU_ = v z", 46, 46);
      assertNotNull(matrixSeries0);
      assertEquals(2116, matrixSeries0.getItemCount());
      assertEquals(46, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(46, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(2116, matrixSeries0.getItemCount());
      assertEquals(46, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(46, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(2116, matrixSeries0.getItemCount());
      assertEquals(46, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(46, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, number0);
      
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      matrixSeriesCollection0.removeChangeListener(xYDatasetTableModel0);
      assertEquals(2116, matrixSeries0.getItemCount());
      assertEquals(46, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(46, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, false);
      assertNotNull(range0);
      assertEquals(2116, matrixSeries0.getItemCount());
      assertEquals(46, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(46, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(45.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(45.0, range0.getUpperBound(), 0.01);
      assertEquals(22.5, range0.getCentralValue(), 0.01);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertTrue(number1.equals((Object)number0));
      assertNotNull(number1);
      assertEquals(2116, matrixSeries0.getItemCount());
      assertEquals(46, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(46, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, number1);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(matrixSeriesCollection0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals(2116, matrixSeries0.getItemCount());
      assertEquals(46, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(46, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(45.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(22.5, range1.getCentralValue(), 0.01);
      assertEquals(45.0, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.category.SlidingCategoryDataset", "org.jfree.data.category.SlidingCategoryDataset", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      TimeSeries timeSeries0 = new TimeSeries("org.jfree.data.category.SlidingCategoryDataset");
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      assertNotNull(fixedMillisecond0);
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotNull(regularTimePeriod0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals((-1L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-1L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-1L), regularTimePeriod0.getSerialIndex());
      assertEquals((-1L), regularTimePeriod0.getMiddleMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) 0L);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertNull(timeSeriesDataItem0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, false);
      assertNotNull(range0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, number0);
      
      boolean boolean0 = false;
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, false);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) null, range1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-381L));
      assertNotNull(fixedMillisecond0);
      assertEquals((-381L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-381L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-381L), fixedMillisecond0.getSerialIndex());
      assertEquals((-381L), fixedMillisecond0.getFirstMillisecond());
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotNull(regularTimePeriod0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertEquals((-381L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-381L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-381L), fixedMillisecond0.getSerialIndex());
      assertEquals((-381L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-382L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-382L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-382L), regularTimePeriod0.getSerialIndex());
      assertEquals((-382L), regularTimePeriod0.getMiddleMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "Value", "Value");
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotNull(timeSeries0);
      assertEquals((-381L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-381L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-381L), fixedMillisecond0.getSerialIndex());
      assertEquals((-381L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-382L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-382L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-382L), regularTimePeriod0.getSerialIndex());
      assertEquals((-382L), regularTimePeriod0.getMiddleMillisecond());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, 459.83336049495364);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNull(timeSeriesDataItem0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertEquals((-381L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-381L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-381L), fixedMillisecond0.getSerialIndex());
      assertEquals((-381L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-382L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-382L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-382L), regularTimePeriod0.getSerialIndex());
      assertEquals((-382L), regularTimePeriod0.getMiddleMillisecond());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getDomainDescription());
      assertEquals(459.83336049495364, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(459.83336049495364, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotNull(timeSeriesCollection0);
      assertEquals((-381L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-381L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-381L), fixedMillisecond0.getSerialIndex());
      assertEquals((-381L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-382L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-382L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-382L), regularTimePeriod0.getSerialIndex());
      assertEquals((-382L), regularTimePeriod0.getMiddleMillisecond());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getDomainDescription());
      assertEquals(459.83336049495364, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(459.83336049495364, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      TimeSeries timeSeries1 = new TimeSeries(fixedMillisecond0, "Value", "");
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertNotNull(timeSeries1);
      assertEquals((-381L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-381L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-381L), fixedMillisecond0.getSerialIndex());
      assertEquals((-381L), fixedMillisecond0.getFirstMillisecond());
      assertNull(timeSeries1.getDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("Value", timeSeries1.getDomainDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertTrue(timeSeries1.getNotify());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("", timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertNotSame(timeSeries0, timeSeries1);
      assertEquals((-381L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-381L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-381L), fixedMillisecond0.getSerialIndex());
      assertEquals((-381L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-382L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-382L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-382L), regularTimePeriod0.getSerialIndex());
      assertEquals((-382L), regularTimePeriod0.getMiddleMillisecond());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getDomainDescription());
      assertEquals(459.83336049495364, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(459.83336049495364, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertFalse(boolean0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, 14);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(14, categoryToPieDataset0.getExtractIndex());
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "", 459.83336049495364);
      assertNotNull(pieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(14, categoryToPieDataset0.getExtractIndex());
      
      Vector<ChronoLocalDate> vector0 = new Vector<ChronoLocalDate>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) vector0, false);
      assertNull(range0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertNotNull(range1);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertNotSame(timeSeries0, timeSeries1);
      assertEquals((-381L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-381L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-381L), fixedMillisecond0.getSerialIndex());
      assertEquals((-381L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-382L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-382L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-382L), regularTimePeriod0.getSerialIndex());
      assertEquals((-382L), regularTimePeriod0.getMiddleMillisecond());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getDomainDescription());
      assertEquals(459.83336049495364, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(459.83336049495364, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(459.83336049495364, range1.getLowerBound(), 0.01);
      assertEquals(459.83336049495364, range1.getCentralValue(), 0.01);
      assertEquals(459.83336049495364, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertNotSame(timeSeries0, timeSeries1);
      assertEquals((-381L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-381L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-381L), fixedMillisecond0.getSerialIndex());
      assertEquals((-381L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-382L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-382L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-382L), regularTimePeriod0.getSerialIndex());
      assertEquals((-382L), regularTimePeriod0.getMiddleMillisecond());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getDomainDescription());
      assertEquals(459.83336049495364, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(459.83336049495364, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertFalse(boolean1);
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) vectorSeriesCollection0);
      assertNull(number0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range2 = DatasetUtilities.iterateToFindDomainBounds(vectorSeriesCollection0, vector0, false);
      assertNull(range2);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(14, categoryToPieDataset0.getExtractIndex());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("#^sx4xU_ = v z", 46, 46);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2116, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(46, matrixSeries0.getColumnsCount());
      assertEquals(46, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2116, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(46, matrixSeries0.getColumnsCount());
      assertEquals(46, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertNotNull(number0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2116, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(46, matrixSeries0.getColumnsCount());
      assertEquals(46, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, number0);
      
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, false);
      assertNotNull(range0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2116, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(46, matrixSeries0.getColumnsCount());
      assertEquals(46, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(45.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(22.5, range0.getCentralValue(), 0.01);
      assertEquals(45.0, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, (List) stack0, range0, false);
      assertNull(range1);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2116, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(46, matrixSeries0.getColumnsCount());
      assertEquals(46, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(45.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(22.5, range0.getCentralValue(), 0.01);
      assertEquals(45.0, range0.getUpperBound(), 0.01);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, false);
      assertTrue(range2.equals((Object)range0));
      assertNotNull(range2);
      assertNotSame(range2, range0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2116, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(46, matrixSeries0.getColumnsCount());
      assertEquals(46, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(45.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(22.5, range2.getCentralValue(), 0.01);
      assertEquals(45.0, range2.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(1817.987292544, 0.0, "Nx[930J>#");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-1641));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 222);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, false);
      assertNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) vector0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(1.0, 1.0, "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 222);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 222, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = "y";
      int int0 = 9;
      MatrixSeries matrixSeries0 = new MatrixSeries("y", 9, 9);
      assertNotNull(matrixSeries0);
      assertEquals(9, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(81, matrixSeries0.getItemCount());
      assertEquals(9, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      
      SynthTabbedPaneUI synthTabbedPaneUI0 = new SynthTabbedPaneUI();
      assertNotNull(synthTabbedPaneUI0);
      
      matrixSeries0.removePropertyChangeListener(synthTabbedPaneUI0);
      assertEquals(9, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(81, matrixSeries0.getItemCount());
      assertEquals(9, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(9, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(81, matrixSeries0.getItemCount());
      assertEquals(9, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertEquals(9, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(81, matrixSeries0.getItemCount());
      assertEquals(9, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(8.0, range0.getLength(), 0.01);
      assertEquals(4.0, range0.getCentralValue(), 0.01);
      assertEquals(8.0, range0.getUpperBound(), 0.01);
      
      int int1 = (-2757);
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.getZ((-2757), (-2757));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("#^sx4xU_ = v z", 46, 46);
      assertNotNull(matrixSeries0);
      assertEquals(46, matrixSeries0.getRowCount());
      assertEquals(46, matrixSeries0.getColumnsCount());
      assertEquals(2116, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(46, matrixSeries0.getRowCount());
      assertEquals(46, matrixSeries0.getColumnsCount());
      assertEquals(2116, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Double double0 = new Double(400.0);
      assertNotNull(double0);
      assertEquals(400.0, (double)double0, 0.01);
      
      Number[][] numberArray0 = new Number[3][0];
      Number[] numberArray1 = new Number[6];
      numberArray1[0] = (Number) double0;
      numberArray1[1] = (Number) double0;
      numberArray1[2] = (Number) double0;
      numberArray1[3] = (Number) double0;
      numberArray1[4] = (Number) double0;
      numberArray1[5] = (Number) double0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[0];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[4];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) double0;
      numberArray3[1] = (Number) double0;
      numberArray3[2] = (Number) double0;
      numberArray3[3] = (Number) double0;
      numberArray0[2] = numberArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, numberArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("#^sx4xU_ = v z", 46, 46);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2116, matrixSeries0.getItemCount());
      assertEquals(46, matrixSeries0.getRowCount());
      assertEquals(46, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2116, matrixSeries0.getItemCount());
      assertEquals(46, matrixSeries0.getRowCount());
      assertEquals(46, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2116, matrixSeries0.getItemCount());
      assertEquals(46, matrixSeries0.getRowCount());
      assertEquals(46, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertFalse(boolean0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNotNull(number0);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2116, matrixSeries0.getItemCount());
      assertEquals(46, matrixSeries0.getRowCount());
      assertEquals(46, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(45.0, number0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte)5);
      assertNotNull(byte0);
      assertEquals((byte)5, (byte)byte0);
      
      boolean boolean0 = linkedList0.offerFirst(byte0);
      assertTrue(linkedList0.contains((byte)5));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      XYSeries xYSeries0 = new XYSeries(byte0, true, true);
      assertNotNull(xYSeries0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = BigInteger.valueOf(1L);
      assertNotNull(bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      
      xYSeries0.add((Number) bigInteger0, (Number) byte0);
      assertSame(bigInteger0, bigInteger1);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      xYSeries0.setMaximumItemCount((byte)5);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(5, xYSeries0.getMaximumItemCount());
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean1 = xYSeriesCollection0.hasListener(xIntervalSeriesCollection0);
      assertFalse(boolean1 == boolean0);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(5, xYSeries0.getMaximumItemCount());
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertFalse(boolean1);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, true);
      assertTrue(linkedList0.contains((byte)5));
      assertNotNull(range0);
      assertEquals(1, linkedList0.size());
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(5, xYSeries0.getMaximumItemCount());
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.5, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, range0, false);
      assertFalse(range1.equals((Object)range0));
      assertTrue(linkedList0.contains((byte)5));
      assertNotNull(range1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(1, linkedList0.size());
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(5, xYSeries0.getMaximumItemCount());
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.5, range0.getUpperBound(), 0.01);
      assertEquals(5.0, range1.getUpperBound(), 0.01);
      assertEquals(5.0, range1.getCentralValue(), 0.01);
      assertEquals(5.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, range1, true);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertTrue(linkedList0.contains((byte)5));
      assertNull(range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(1, linkedList0.size());
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(5, xYSeries0.getMaximumItemCount());
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.5, range0.getUpperBound(), 0.01);
      assertEquals(5.0, range1.getUpperBound(), 0.01);
      assertEquals(5.0, range1.getCentralValue(), 0.01);
      assertEquals(5.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte)5);
      assertNotNull(byte0);
      assertEquals((byte)5, (byte)byte0);
      
      boolean boolean0 = linkedList0.offerFirst(byte0);
      assertTrue(linkedList0.contains(byte0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      XYSeries xYSeries0 = new XYSeries(byte0, true, true);
      assertNotNull(xYSeries0);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      xYSeries0.add((Number) bigInteger0, (Number) byte0);
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      xYSeries0.setMaximumItemCount((byte)5);
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(5, xYSeries0.getMaximumItemCount());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean1 = xYSeriesCollection0.hasListener(xIntervalSeriesCollection0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(5, xYSeries0.getMaximumItemCount());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertFalse(boolean1);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, true);
      assertTrue(linkedList0.contains((byte)5));
      assertNotNull(range0);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(5, xYSeries0.getMaximumItemCount());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.5, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, range0, false);
      assertFalse(range1.equals((Object)range0));
      assertTrue(linkedList0.contains((byte)5));
      assertNotNull(range1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(5, xYSeries0.getMaximumItemCount());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.5, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(5.0, range1.getLowerBound(), 0.01);
      assertEquals(5.0, range1.getCentralValue(), 0.01);
      assertEquals(5.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, false);
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertNotNull(range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(5, xYSeries0.getMaximumItemCount());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(5.0, range2.getUpperBound(), 0.01);
      assertEquals(5.0, range2.getLowerBound(), 0.01);
      assertEquals(5.0, range2.getCentralValue(), 0.01);
      
      System.setCurrentTimeMillis((byte)5);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-337L));
      assertNotNull(fixedMillisecond0);
      assertEquals((-337L), fixedMillisecond0.getSerialIndex());
      assertEquals((-337L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-337L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-337L), fixedMillisecond0.getLastMillisecond());
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotNull(regularTimePeriod0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertEquals((-337L), fixedMillisecond0.getSerialIndex());
      assertEquals((-337L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-337L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-337L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-338L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-338L), regularTimePeriod0.getSerialIndex());
      assertEquals((-338L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-338L), regularTimePeriod0.getMiddleMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "Value", "Value");
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotNull(timeSeries0);
      assertEquals((-337L), fixedMillisecond0.getSerialIndex());
      assertEquals((-337L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-337L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-337L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-338L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-338L), regularTimePeriod0.getSerialIndex());
      assertEquals((-338L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-338L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate(regularTimePeriod0, (-1.7976931348623157E308));
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNull(timeSeriesDataItem0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertEquals((-337L), fixedMillisecond0.getSerialIndex());
      assertEquals((-337L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-337L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-337L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-338L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-338L), regularTimePeriod0.getSerialIndex());
      assertEquals((-338L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-338L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals((-1.7976931348623157E308), timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals((-1.7976931348623157E308), timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotNull(timeSeriesCollection0);
      assertEquals((-337L), fixedMillisecond0.getSerialIndex());
      assertEquals((-337L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-337L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-337L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-338L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-338L), regularTimePeriod0.getSerialIndex());
      assertEquals((-338L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-338L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals((-1.7976931348623157E308), timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals((-1.7976931348623157E308), timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, true);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotNull(range0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertEquals((-337L), fixedMillisecond0.getSerialIndex());
      assertEquals((-337L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-337L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-337L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-338L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-338L), regularTimePeriod0.getSerialIndex());
      assertEquals((-338L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-338L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals((-1.7976931348623157E308), timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals((-1.7976931348623157E308), timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-338.0), range0.getUpperBound(), 0.01);
      assertEquals((-338.0), range0.getCentralValue(), 0.01);
      assertEquals((-338.0), range0.getLowerBound(), 0.01);
      
      RegularTimePeriod regularTimePeriod1 = regularTimePeriod0.next();
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertTrue(regularTimePeriod1.equals((Object)fixedMillisecond0));
      assertFalse(regularTimePeriod1.equals((Object)regularTimePeriod0));
      assertNotNull(regularTimePeriod1);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(fixedMillisecond0, regularTimePeriod1);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertNotSame(regularTimePeriod0, regularTimePeriod1);
      assertNotSame(regularTimePeriod1, fixedMillisecond0);
      assertNotSame(regularTimePeriod1, regularTimePeriod0);
      assertEquals((-337L), fixedMillisecond0.getSerialIndex());
      assertEquals((-337L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-337L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-337L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-338L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-338L), regularTimePeriod0.getSerialIndex());
      assertEquals((-338L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-338L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals((-337L), regularTimePeriod1.getFirstMillisecond());
      assertEquals((-337L), regularTimePeriod1.getMiddleMillisecond());
      assertEquals((-337L), regularTimePeriod1.getLastMillisecond());
      assertEquals((-337L), regularTimePeriod1.getSerialIndex());
      
      defaultKeyedValues2DDataset0.validateObject();
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, true);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertTrue(fixedMillisecond0.equals((Object)regularTimePeriod1));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertFalse(regularTimePeriod0.equals((Object)regularTimePeriod1));
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(fixedMillisecond0, regularTimePeriod1);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertNotSame(regularTimePeriod0, regularTimePeriod1);
      assertNotSame(range1, range0);
      assertEquals((-337L), fixedMillisecond0.getSerialIndex());
      assertEquals((-337L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-337L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-337L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-338L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-338L), regularTimePeriod0.getSerialIndex());
      assertEquals((-338L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-338L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals((-1.7976931348623157E308), timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals((-1.7976931348623157E308), timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1.7976931348623157E308), range1.getLowerBound(), 0.01);
      assertEquals((-1.7976931348623157E308), range1.getCentralValue(), 0.01);
      assertEquals((-1.7976931348623157E308), range1.getUpperBound(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNull(number0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertTrue(fixedMillisecond0.equals((Object)regularTimePeriod1));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertFalse(regularTimePeriod0.equals((Object)regularTimePeriod1));
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(fixedMillisecond0, regularTimePeriod1);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertNotSame(regularTimePeriod0, regularTimePeriod1);
      assertEquals((-337L), fixedMillisecond0.getSerialIndex());
      assertEquals((-337L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-337L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-337L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-338L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-338L), regularTimePeriod0.getSerialIndex());
      assertEquals((-338L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-338L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals((-1.7976931348623157E308), timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals((-1.7976931348623157E308), timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertFalse(boolean0);
      
      Range range2 = Range.combine(range0, range1);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertTrue(fixedMillisecond0.equals((Object)regularTimePeriod1));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertFalse(regularTimePeriod0.equals((Object)regularTimePeriod1));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotNull(range2);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(fixedMillisecond0, regularTimePeriod1);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertNotSame(regularTimePeriod0, regularTimePeriod1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals((-337L), fixedMillisecond0.getSerialIndex());
      assertEquals((-337L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-337L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-337L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-338L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-338L), regularTimePeriod0.getSerialIndex());
      assertEquals((-338L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-338L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals((-1.7976931348623157E308), timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals((-1.7976931348623157E308), timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-338.0), range0.getUpperBound(), 0.01);
      assertEquals((-338.0), range0.getCentralValue(), 0.01);
      assertEquals((-338.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1.7976931348623157E308), range1.getLowerBound(), 0.01);
      assertEquals((-1.7976931348623157E308), range1.getCentralValue(), 0.01);
      assertEquals((-1.7976931348623157E308), range1.getUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, range2.getLength(), 0.01);
      assertEquals((-1.7976931348623157E308), range2.getLowerBound(), 0.01);
      assertEquals((-8.988465674311579E307), range2.getCentralValue(), 0.01);
      assertEquals((-338.0), range2.getUpperBound(), 0.01);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertTrue(fixedMillisecond0.equals((Object)regularTimePeriod1));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertFalse(regularTimePeriod0.equals((Object)regularTimePeriod1));
      assertNotNull(number1);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(fixedMillisecond0, regularTimePeriod1);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertNotSame(regularTimePeriod0, regularTimePeriod1);
      assertEquals((-337L), fixedMillisecond0.getSerialIndex());
      assertEquals((-337L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-337L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-337L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-338L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-338L), regularTimePeriod0.getSerialIndex());
      assertEquals((-338L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-338L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals((-1.7976931348623157E308), timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals((-1.7976931348623157E308), timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals((-1.7976931348623157E308), number1);
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Number number2 = DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      assertFalse(number2.equals((Object)number1));
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertTrue(fixedMillisecond0.equals((Object)regularTimePeriod1));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertFalse(regularTimePeriod0.equals((Object)regularTimePeriod1));
      assertNotNull(number2);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(fixedMillisecond0, regularTimePeriod1);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertNotSame(regularTimePeriod0, regularTimePeriod1);
      assertEquals((-337L), fixedMillisecond0.getSerialIndex());
      assertEquals((-337L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-337L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-337L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-338L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-338L), regularTimePeriod0.getSerialIndex());
      assertEquals((-338L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-338L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals((-1.7976931348623157E308), timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals((-1.7976931348623157E308), timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals((-338.0), number2);
      
      boolean boolean2 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertTrue(fixedMillisecond0.equals((Object)regularTimePeriod1));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertFalse(regularTimePeriod0.equals((Object)regularTimePeriod1));
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(fixedMillisecond0, regularTimePeriod1);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertNotSame(regularTimePeriod0, regularTimePeriod1);
      assertEquals((-337L), fixedMillisecond0.getSerialIndex());
      assertEquals((-337L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-337L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-337L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-338L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-338L), regularTimePeriod0.getSerialIndex());
      assertEquals((-338L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-338L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals((-1.7976931348623157E308), timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals((-1.7976931348623157E308), timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[][] doubleArray0 = new double[9][3];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("d^`D2VBma", "d^`D2VBma", doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(9, doubleArray0.length);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Long long0 = new Long(5582L);
      assertNotNull(long0);
      assertEquals(5582L, (long)long0);
      
      List list0 = defaultCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(9, doubleArray0.length);
      assertFalse(list0.isEmpty());
      assertEquals(9, list0.size());
      
      Long long1 = new Long(0L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      boolean boolean0 = linkedList0.add(long1);
      assertFalse(long1.equals((Object)long0));
      assertFalse(linkedList0.contains(long0));
      assertTrue(linkedList0.contains(long1));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      defaultCategoryDataset0.setValue((double) 0L, (Comparable) "d^`D2VBma", (Comparable) long0);
      assertFalse(long0.equals((Object)long1));
      assertEquals(9, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) list0, true);
      assertNotNull(range0);
      assertEquals(9, doubleArray0.length);
      assertFalse(list0.isEmpty());
      assertEquals(10, list0.size());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("m");
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertTrue(boolean0);
      
      double[][] doubleArray0 = new double[9][0];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-1015.3813);
      doubleArray1[1] = (-5221.6358);
      doubleArray1[2] = (-220.033277684936);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-5221.6358);
      doubleArray2[1] = (-5221.6358);
      doubleArray2[2] = (-1015.3813);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-1015.3813);
      doubleArray3[1] = (-1015.3813);
      doubleArray3[2] = (-1015.3813);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (-220.033277684936);
      doubleArray4[1] = 3174.600614790834;
      doubleArray4[2] = (-5221.6358);
      doubleArray4[3] = (-5221.6358);
      doubleArray4[4] = (-1015.3813);
      doubleArray4[5] = (-1015.3813);
      doubleArray4[6] = (-5221.6358);
      doubleArray4[7] = (-1015.3813);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = (-1015.3813);
      doubleArray5[1] = 3174.600614790834;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      
      doubleArray6[0] = 3174.600614790834;
      doubleArray6[1] = (-1015.3813);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[8];
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      
      doubleArray7[0] = 3174.600614790834;
      doubleArray7[1] = (-1015.3813);
      doubleArray7[2] = (-5221.6358);
      doubleArray7[3] = (-1015.3813);
      doubleArray7[4] = (-220.033277684936);
      doubleArray7[5] = (-220.033277684936);
      doubleArray7[6] = (-220.033277684936);
      doubleArray7[7] = (-1015.3813);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[0];
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[4];
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      
      doubleArray9[0] = (-5221.6358);
      doubleArray9[1] = (-1015.3813);
      doubleArray9[2] = (-5221.6358);
      doubleArray9[3] = 3174.600614790834;
      doubleArray0[8] = doubleArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      assertNotNull(thaiBuddhistDate0);
      
      boolean boolean0 = arrayList0.add((ChronoLocalDate) thaiBuddhistDate0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-10.0), (-10.0));
      assertNotNull(lineFunction2D0);
      assertEquals((-10.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-10.0), lineFunction2D0.getSlope(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, (-10.0), 1.0040875747127036, 270, thaiBuddhistDate0);
      assertNotNull(xYSeriesCollection0);
      assertEquals((-10.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-10.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
      assertFalse(boolean1 == boolean0);
      assertEquals((-10.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-10.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(boolean1);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) arrayList0, true);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, 4000, 4000);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(4000, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(4000, slidingCategoryDataset0.getFirstCategoryIndex());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "Value", (KeyedValues) defaultKeyedValuesDataset0);
      assertTrue(categoryDataset0.equals((Object)defaultCategoryDataset0));
      assertNotNull(categoryDataset0);
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      
      Integer integer0 = new Integer(4000);
      assertNotNull(integer0);
      assertEquals(4000, (int)integer0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(Double.POSITIVE_INFINITY, 4000);
      assertNotNull(lineFunction2D0);
      assertEquals(4000.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, lineFunction2D0.getIntercept(), 0.01);
      
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      // Undeclared exception!
      DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, 1.0, 1.5, 4000, second0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertFalse(categoryDataset0.equals((Object)defaultCategoryDataset0));
      assertNotNull(categoryDataset0);
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertFalse(categoryDataset0.equals((Object)defaultCategoryDataset0));
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      
      Date[] dateArray0 = new Date[2];
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(18);
      assertNotNull(spreadsheetDate0);
      assertEquals(17, spreadsheetDate0.getDayOfMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(18, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      
      Date date0 = spreadsheetDate0.toDate();
      assertNotNull(date0);
      assertEquals(17, spreadsheetDate0.getDayOfMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(18, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      
      dateArray0[0] = date0;
      SerialDate serialDate0 = SerialDate.createInstance(1477);
      assertFalse(serialDate0.equals((Object)spreadsheetDate0));
      assertNotNull(serialDate0);
      assertNotSame(serialDate0, spreadsheetDate0);
      assertEquals(16, serialDate0.getDayOfMonth());
      assertEquals(1904, serialDate0.getYYYY());
      assertEquals(1, serialDate0.getMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(7, serialDate0.getDayOfWeek());
      assertEquals(1477, serialDate0.toSerial());
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      
      MockDate mockDate0 = new MockDate((-661), 1056, 87);
      assertNotNull(mockDate0);
      
      dateArray0[1] = (Date) mockDate0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(2, dateArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultHighLowDataset0);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(number0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(2, dateArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, number0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.category.SlidingCategoryDataset", "org.jfree.data.category.SlidingCategoryDataset", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      TimeSeries timeSeries0 = new TimeSeries("org.jfree.data.category.SlidingCategoryDataset");
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotNull(regularTimePeriod0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate(regularTimePeriod0, (double) 0L);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNull(timeSeriesDataItem0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, true);
      assertNotNull(range0);
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.392409281319E12, range0.getLowerBound(), 0.01);
      assertEquals(1.392409281319E12, range0.getCentralValue(), 0.01);
      assertEquals(1.392409281319E12, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, true);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, number0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertTrue(number1.equals((Object)number0));
      assertNotNull(number1);
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, number1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(", but the TimeSeries is expecting an instance of ", ", but the TimeSeries is expecting an instance of ", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Stack<DefaultIntervalXYDataset> stack0 = new Stack<DefaultIntervalXYDataset>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) null, (List) stack0, range0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Mu", "Mu", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("org.jfree.data.general.DatasetUtilities", "", doubleArray0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotNull(categoryDataset1);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset1));
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getRowKeys();
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset1));
      assertNotNull(list0);
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertNotSame(defaultCategoryDataset0, categoryDataset1);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[2];
      doubleArray1[1] = (-1.0);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'dataset' argument.", "Null 'dataset' argument.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      TimeSeries timeSeries0 = new TimeSeries(0.0);
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      assertNotNull(fixedMillisecond0);
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, 0.0);
      assertNull(timeSeriesDataItem0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, false);
      assertNotNull(range0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, false);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, number0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultIntervalXYDataset0);
      assertNull(number1);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[][] doubleArray0 = new double[19][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(19, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(19, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, number0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(19, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 266, 266);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(19, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(266, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(266, slidingCategoryDataset0.getFirstCategoryIndex());
      
      List list0 = slidingCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(19, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(266, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(266, slidingCategoryDataset0.getFirstCategoryIndex());
      assertFalse(list0.isEmpty());
      assertEquals(19, list0.size());
      
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, true);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals(19, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(266, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(266, slidingCategoryDataset0.getFirstCategoryIndex());
      assertFalse(list0.isEmpty());
      assertEquals(19, list0.size());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(19, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-381L));
      assertNotNull(fixedMillisecond0);
      assertEquals((-381L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-381L), fixedMillisecond0.getSerialIndex());
      assertEquals((-381L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-381L), fixedMillisecond0.getLastMillisecond());
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotNull(regularTimePeriod0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertEquals((-381L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-381L), fixedMillisecond0.getSerialIndex());
      assertEquals((-381L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-381L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-382L), regularTimePeriod0.getSerialIndex());
      assertEquals((-382L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals((-382L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-382L), regularTimePeriod0.getFirstMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "Value", "Value");
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotNull(timeSeries0);
      assertEquals((-381L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-381L), fixedMillisecond0.getSerialIndex());
      assertEquals((-381L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-381L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-382L), regularTimePeriod0.getSerialIndex());
      assertEquals((-382L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals((-382L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-382L), regularTimePeriod0.getFirstMillisecond());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Value", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, 459.83336049495364);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNull(timeSeriesDataItem0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertEquals((-381L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-381L), fixedMillisecond0.getSerialIndex());
      assertEquals((-381L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-381L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-382L), regularTimePeriod0.getSerialIndex());
      assertEquals((-382L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals((-382L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-382L), regularTimePeriod0.getFirstMillisecond());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(459.83336049495364, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getDomainDescription());
      assertEquals(459.83336049495364, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotNull(timeSeriesCollection0);
      assertEquals((-381L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-381L), fixedMillisecond0.getSerialIndex());
      assertEquals((-381L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-381L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-382L), regularTimePeriod0.getSerialIndex());
      assertEquals((-382L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals((-382L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-382L), regularTimePeriod0.getFirstMillisecond());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(459.83336049495364, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getDomainDescription());
      assertEquals(459.83336049495364, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      TimeSeries timeSeries1 = new TimeSeries(fixedMillisecond0, "Value", "");
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertNotNull(timeSeries1);
      assertEquals((-381L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-381L), fixedMillisecond0.getSerialIndex());
      assertEquals((-381L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-381L), fixedMillisecond0.getLastMillisecond());
      assertEquals("Value", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertTrue(timeSeries1.getNotify());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("", timeSeries1.getRangeDescription());
      assertNull(timeSeries1.getDescription());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertNotSame(timeSeries0, timeSeries1);
      assertEquals((-381L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-381L), fixedMillisecond0.getSerialIndex());
      assertEquals((-381L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-381L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-382L), regularTimePeriod0.getSerialIndex());
      assertEquals((-382L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals((-382L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-382L), regularTimePeriod0.getFirstMillisecond());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(459.83336049495364, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getDomainDescription());
      assertEquals(459.83336049495364, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertFalse(boolean0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, 14);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(14, categoryToPieDataset0.getExtractIndex());
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "", 459.83336049495364);
      assertNotNull(pieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(14, categoryToPieDataset0.getExtractIndex());
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) regularTimePeriod0, (double) 14, (-1));
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertEquals((-381L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-381L), fixedMillisecond0.getSerialIndex());
      assertEquals((-381L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-381L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-382L), regularTimePeriod0.getSerialIndex());
      assertEquals((-382L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals((-382L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-382L), regularTimePeriod0.getFirstMillisecond());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(14, categoryToPieDataset0.getExtractIndex());
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset1);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertFalse(pieDataset0.equals((Object)pieDataset1));
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertEquals((-381L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-381L), fixedMillisecond0.getSerialIndex());
      assertEquals((-381L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-381L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-382L), regularTimePeriod0.getSerialIndex());
      assertEquals((-382L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals((-382L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-382L), regularTimePeriod0.getFirstMillisecond());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(14, categoryToPieDataset0.getExtractIndex());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, 2109135725);
      assertNotNull(pieDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, 2);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue(dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Duplicate items in 'rowKeys'.", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Month month0 = new Month(mockDate0);
      assertNotNull(month0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      
      Year year0 = month0.getYear();
      assertNotNull(year0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(3, 245, month0);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(244, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue(dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.category.SlidingCategoryDataset", "org.jfree.data.category.SlidingCategoryDataset", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYTaskDataset0, false);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, number0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) xYTaskDataset0);
      assertNull(number1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertNotNull(range1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-423.3);
      doubleArray1[1] = (-5750.693532);
      doubleArray1[2] = (-800.1786897);
      doubleArray1[3] = 2228.137280630642;
      doubleArray1[4] = (-2411.21674);
      doubleArray1[5] = (-405.63384861);
      doubleArray1[6] = (-1383.2711);
      doubleArray1[7] = 1080.5606;
      doubleArray1[8] = 545.7388200407916;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("h/q{V/`h@2]v", "Value", doubleArray0);
      assertFalse(categoryDataset0.equals((Object)defaultCategoryDataset0));
      assertNotNull(categoryDataset0);
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Number[][] numberArray0 = new Number[9][9];
      Number[] numberArray1 = new Number[2];
      Byte byte0 = new Byte((byte)94);
      assertNotNull(byte0);
      assertEquals((byte)94, (byte)byte0);
      
      numberArray1[0] = (Number) byte0;
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      numberArray1[1] = (Number) integer0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[9];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) integer0;
      numberArray2[1] = (Number) byte0;
      numberArray2[2] = (Number) integer0;
      numberArray2[3] = (Number) byte0;
      numberArray2[4] = (Number) integer0;
      numberArray2[5] = (Number) integer0;
      numberArray2[6] = (Number) byte0;
      numberArray2[7] = (Number) byte0;
      numberArray2[8] = (Number) integer0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[2];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) byte0;
      numberArray3[1] = (Number) integer0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[4];
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray3));
      
      numberArray4[0] = (Number) byte0;
      numberArray4[1] = (Number) integer0;
      numberArray4[2] = (Number) integer0;
      numberArray4[3] = (Number) byte0;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[8];
      assertFalse(numberArray5.equals((Object)numberArray2));
      assertFalse(numberArray5.equals((Object)numberArray3));
      assertFalse(numberArray5.equals((Object)numberArray1));
      assertFalse(numberArray5.equals((Object)numberArray4));
      
      numberArray5[0] = (Number) byte0;
      numberArray5[1] = (Number) integer0;
      numberArray5[2] = (Number) byte0;
      numberArray5[3] = (Number) integer0;
      numberArray5[4] = (Number) byte0;
      numberArray5[5] = (Number) integer0;
      numberArray5[6] = (Number) integer0;
      numberArray5[7] = (Number) byte0;
      numberArray0[4] = numberArray5;
      Number[] numberArray6 = new Number[0];
      assertFalse(numberArray6.equals((Object)numberArray5));
      assertFalse(numberArray6.equals((Object)numberArray2));
      assertFalse(numberArray6.equals((Object)numberArray4));
      assertFalse(numberArray6.equals((Object)numberArray3));
      assertFalse(numberArray6.equals((Object)numberArray1));
      
      numberArray0[5] = numberArray6;
      Number[] numberArray7 = new Number[4];
      assertFalse(numberArray7.equals((Object)numberArray2));
      assertFalse(numberArray7.equals((Object)numberArray3));
      assertFalse(numberArray7.equals((Object)numberArray5));
      assertFalse(numberArray7.equals((Object)numberArray6));
      assertFalse(numberArray7.equals((Object)numberArray1));
      assertFalse(numberArray7.equals((Object)numberArray4));
      
      numberArray7[0] = (Number) integer0;
      numberArray7[1] = (Number) integer0;
      numberArray7[2] = (Number) integer0;
      numberArray7[3] = (Number) byte0;
      numberArray0[6] = numberArray7;
      Number[] numberArray8 = new Number[5];
      assertFalse(numberArray8.equals((Object)numberArray3));
      assertFalse(numberArray8.equals((Object)numberArray1));
      assertFalse(numberArray8.equals((Object)numberArray4));
      assertFalse(numberArray8.equals((Object)numberArray5));
      assertFalse(numberArray8.equals((Object)numberArray6));
      assertFalse(numberArray8.equals((Object)numberArray7));
      assertFalse(numberArray8.equals((Object)numberArray2));
      
      numberArray8[0] = (Number) integer0;
      numberArray8[1] = (Number) byte0;
      numberArray8[2] = (Number) byte0;
      numberArray8[3] = (Number) byte0;
      numberArray8[4] = (Number) integer0;
      numberArray0[7] = numberArray8;
      Number[] numberArray9 = new Number[1];
      assertFalse(numberArray9.equals((Object)numberArray4));
      assertFalse(numberArray9.equals((Object)numberArray3));
      assertFalse(numberArray9.equals((Object)numberArray6));
      assertFalse(numberArray9.equals((Object)numberArray2));
      assertFalse(numberArray9.equals((Object)numberArray5));
      assertFalse(numberArray9.equals((Object)numberArray7));
      assertFalse(numberArray9.equals((Object)numberArray1));
      assertFalse(numberArray9.equals((Object)numberArray8));
      
      numberArray9[0] = (Number) integer0;
      numberArray0[8] = numberArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(9, numberArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-381L));
      assertNotNull(fixedMillisecond0);
      assertEquals((-381L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-381L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-381L), fixedMillisecond0.getSerialIndex());
      assertEquals((-381L), fixedMillisecond0.getMiddleMillisecond());
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotNull(regularTimePeriod0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertEquals((-381L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-381L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-381L), fixedMillisecond0.getSerialIndex());
      assertEquals((-381L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-382L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals((-382L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-382L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-382L), regularTimePeriod0.getSerialIndex());
      
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "Value", "Value");
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotNull(timeSeries0);
      assertEquals((-381L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-381L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-381L), fixedMillisecond0.getSerialIndex());
      assertEquals((-381L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-382L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals((-382L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-382L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-382L), regularTimePeriod0.getSerialIndex());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, 462.58713636);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNull(timeSeriesDataItem0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertEquals((-381L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-381L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-381L), fixedMillisecond0.getSerialIndex());
      assertEquals((-381L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-382L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals((-382L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-382L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-382L), regularTimePeriod0.getSerialIndex());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(462.58713636, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(462.58713636, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotNull(timeSeriesCollection0);
      assertEquals((-381L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-381L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-381L), fixedMillisecond0.getSerialIndex());
      assertEquals((-381L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-382L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals((-382L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-382L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-382L), regularTimePeriod0.getSerialIndex());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(462.58713636, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(462.58713636, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, true);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotNull(range0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertEquals((-381L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-381L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-381L), fixedMillisecond0.getSerialIndex());
      assertEquals((-381L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-382L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals((-382L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-382L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-382L), regularTimePeriod0.getSerialIndex());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(462.58713636, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(462.58713636, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-381.0), range0.getUpperBound(), 0.01);
      assertEquals((-381.0), range0.getCentralValue(), 0.01);
      assertEquals((-381.0), range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, true);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertNotSame(range1, range0);
      assertEquals((-381L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-381L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-381L), fixedMillisecond0.getSerialIndex());
      assertEquals((-381L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-382L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals((-382L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-382L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-382L), regularTimePeriod0.getSerialIndex());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(462.58713636, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(462.58713636, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(462.58713636, range1.getCentralValue(), 0.01);
      assertEquals(462.58713636, range1.getLowerBound(), 0.01);
      assertEquals(462.58713636, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultCategoryDataset0);
      assertNull(number0);
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, true);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertNotNull(range2);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals((-381L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-381L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-381L), fixedMillisecond0.getSerialIndex());
      assertEquals((-381L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-382L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals((-382L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-382L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-382L), regularTimePeriod0.getSerialIndex());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(462.58713636, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(462.58713636, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-381.0), range2.getLowerBound(), 0.01);
      assertEquals((-381.0), range2.getCentralValue(), 0.01);
      assertEquals((-381.0), range2.getUpperBound(), 0.01);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, true);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range1));
      assertNotNull(range3);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertEquals((-381L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-381L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-381L), fixedMillisecond0.getSerialIndex());
      assertEquals((-381L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-382L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals((-382L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-382L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-382L), regularTimePeriod0.getSerialIndex());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(462.58713636, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(462.58713636, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(462.58713636, range3.getLowerBound(), 0.01);
      assertEquals(462.58713636, range3.getCentralValue(), 0.01);
      assertEquals(462.58713636, range3.getUpperBound(), 0.01);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertNull(number1);
      
      Range range4 = DatasetUtilities.iterateXYRangeBounds(timeSeriesCollection0);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertFalse(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range0));
      assertNotNull(range4);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertNotSame(range4, range3);
      assertNotSame(range4, range2);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertEquals((-381L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-381L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-381L), fixedMillisecond0.getSerialIndex());
      assertEquals((-381L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-382L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals((-382L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-382L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-382L), regularTimePeriod0.getSerialIndex());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(462.58713636, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(462.58713636, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(462.58713636, range4.getLowerBound(), 0.01);
      assertEquals(462.58713636, range4.getCentralValue(), 0.01);
      assertEquals(462.58713636, range4.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[][] doubleArray0 = new double[6][4];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 863.7;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1709.63701;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 1709.63701;
      doubleArray2[2] = 1709.63701;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 863.7;
      doubleArray3[1] = 863.7;
      doubleArray3[2] = Double.POSITIVE_INFINITY;
      doubleArray3[3] = 1709.63701;
      doubleArray3[4] = 2909.3;
      doubleArray3[5] = 863.7;
      doubleArray3[6] = 1.0;
      doubleArray3[7] = 1709.63701;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 2909.3;
      doubleArray4[1] = 1.0;
      doubleArray4[2] = 1709.63701;
      doubleArray4[3] = (-1033.136864022);
      doubleArray4[4] = Double.POSITIVE_INFINITY;
      doubleArray4[5] = 1.0;
      doubleArray4[6] = 1532.4;
      doubleArray4[7] = (-861.438754);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      
      doubleArray6[0] = 1709.63701;
      doubleArray6[1] = Double.POSITIVE_INFINITY;
      doubleArray6[2] = 1.0;
      doubleArray6[3] = 1.0;
      doubleArray6[4] = 1.0;
      doubleArray0[5] = doubleArray6;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "$", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(6, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(6, doubleArray0.length);
      assertEquals((-1033.136864022), range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultWindDataset0, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.category.SlidingCategoryDataset", "org.jfree.data.category.SlidingCategoryDataset", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      TimeSeries timeSeries0 = new TimeSeries("org.jfree.data.category.SlidingCategoryDataset");
      assertNotNull(timeSeries0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      assertNotNull(fixedMillisecond0);
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotNull(regularTimePeriod0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals((-1L), regularTimePeriod0.getSerialIndex());
      assertEquals((-1L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-1L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-1L), regularTimePeriod0.getMiddleMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate(regularTimePeriod0, (double) 0L);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNull(timeSeriesDataItem0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals((-1L), regularTimePeriod0.getSerialIndex());
      assertEquals((-1L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-1L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-1L), regularTimePeriod0.getMiddleMillisecond());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, false);
      assertNotNull(range0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, true);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, number0);
      
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range2 = DatasetUtilities.iterateToFindDomainBounds(timeSeriesCollection0, linkedList0, false);
      assertNull(range2);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, linkedList0.size());
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) linkedList0, (Range) null, true);
      assertNull(range3);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, linkedList0.size());
      
      Range range4 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      assertFalse(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range0));
      assertNotNull(range4);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals((-1.0), range4.getCentralValue(), 0.01);
      assertEquals((-1.0), range4.getUpperBound(), 0.01);
      assertEquals((-1.0), range4.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("org.jfree.data.category.SlidingCategoryDataset", "org.jfree.data.category.SlidingCategoryDataset", doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      TimeSeries timeSeries0 = new TimeSeries("org.jfree.data.category.SlidingCategoryDataset");
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      assertNotNull(fixedMillisecond0);
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      
      FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.previous();
      assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
      assertNotNull(fixedMillisecond1);
      assertNotSame(fixedMillisecond0, fixedMillisecond1);
      assertNotSame(fixedMillisecond1, fixedMillisecond0);
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals((-1L), fixedMillisecond1.getMiddleMillisecond());
      assertEquals((-1L), fixedMillisecond1.getSerialIndex());
      assertEquals((-1L), fixedMillisecond1.getLastMillisecond());
      assertEquals((-1L), fixedMillisecond1.getFirstMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond1, (double) 0L);
      assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
      assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
      assertNull(timeSeriesDataItem0);
      assertNotSame(fixedMillisecond0, fixedMillisecond1);
      assertNotSame(fixedMillisecond1, fixedMillisecond0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals((-1L), fixedMillisecond1.getMiddleMillisecond());
      assertEquals((-1L), fixedMillisecond1.getSerialIndex());
      assertEquals((-1L), fixedMillisecond1.getLastMillisecond());
      assertEquals((-1L), fixedMillisecond1.getFirstMillisecond());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      
      defaultCategoryDataset0.validateObject();
      assertEquals(3, doubleArray0.length);
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertNotNull(double0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, (double)double0, 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, (double) 0L);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Mu", "Mu", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (-1095));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      double double0 = Double.POSITIVE_INFINITY;
      Double double1 = new Double(Double.POSITIVE_INFINITY);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(Double.POSITIVE_INFINITY, (double)double1, 0.01);
      
      boolean boolean0 = stack0.add(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertTrue(stack0.contains(double0));
      assertEquals("[Infinity]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(histogramDataset0, stack0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      assertNotNull(thaiBuddhistDate0);
      
      boolean boolean0 = arrayList0.add((ChronoLocalDate) thaiBuddhistDate0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) arrayList0, true);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(0.0, 0.0);
      assertNotNull(powerFunction2D0);
      assertEquals(0.0, powerFunction2D0.getB(), 0.01);
      assertEquals(0.0, powerFunction2D0.getA(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, 0.0, 63.7514472, 23, thaiBuddhistDate0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(0.0, powerFunction2D0.getB(), 0.01);
      assertEquals(0.0, powerFunction2D0.getA(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, false);
      assertNotNull(range1);
      assertEquals(0.0, powerFunction2D0.getB(), 0.01);
      assertEquals(0.0, powerFunction2D0.getA(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(31.8757236, range1.getCentralValue(), 0.01);
      assertEquals(63.7514472, range1.getUpperBound(), 0.01);
      assertEquals(63.7514472, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Duplicate items in 'rowKeys'.", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      TimeSeries timeSeries0 = new TimeSeries("");
      assertNotNull(timeSeries0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) "Duplicate items in 'rowKeys'.", 396.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      double[][] doubleArray0 = new double[19][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(19, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(19, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, number0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(19, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 266, 266);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(19, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(266, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(266, slidingCategoryDataset0.getFirstCategoryIndex());
      
      List list0 = slidingCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(19, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(266, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(266, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(19, list0.size());
      assertFalse(list0.isEmpty());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals(19, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      TimeSeries timeSeries0 = new TimeSeries(second0);
      assertNotNull(timeSeries0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      Range range2 = timeSeriesCollection0.getDomainBounds(true);
      assertNull(range2);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultTableXYDataset0, (List) list0, range1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.DefaultTableXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 2109135725, 4530);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2109135725, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(4530, slidingCategoryDataset0.getMaximumCategoryCount());
      
      List list0 = slidingCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2109135725, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(4530, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertNotNull(defaultIntervalCategoryDataset1);
      assertEquals(0, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset1.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      double[][] doubleArray0 = new double[19][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(19, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(19, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, number0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(19, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) xIntervalSeriesCollection0);
      assertNull(number1);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Minute minute0 = new Minute();
      assertNotNull(minute0);
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      Second second0 = new Second((-1653), minute0);
      assertNotNull(second0);
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals((-117), second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("I5/ y`&j$M?v0-", "I5/ y`&j$M?v0-", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(19, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds(categoryDataset0, (KeyToGroupMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("ldb3", "ldb3", "");
      assertNotNull(timeSeries0);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("ldb3", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      
      TimeSeries timeSeries1 = new TimeSeries("ldb3", "ldb3", "ldb3");
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertNotNull(timeSeries1);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("ldb3", timeSeries1.getRangeDescription());
      assertEquals("ldb3", timeSeries1.getDomainDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertTrue(timeSeries1.getNotify());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      
      double[][] doubleArray0 = new double[0][4];
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) linkedList0, true);
      assertNull(range0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      Comparable<CategoryTableXYDataset>[] comparableArray0 = (Comparable<CategoryTableXYDataset>[]) Array.newInstance(Comparable.class, 2);
      comparableArray0[0] = (Comparable<CategoryTableXYDataset>) second0;
      comparableArray0[1] = (Comparable<CategoryTableXYDataset>) second0;
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = 2329.054;
      doubleArray1[2] = (double) 59;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 59;
      doubleArray1[5] = (double) 59;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 0;
      doubleArray0[0] = doubleArray1;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'rowKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("ldb3", "ldb3", "ldb3");
      assertNotNull(timeSeries0);
      assertEquals("ldb3", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("ldb3", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("ldb3", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("ldb3", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, false);
      assertNull(range0);
      assertEquals("ldb3", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("ldb3", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Comparable<String>[] comparableArray0 = (Comparable<String>[]) Array.newInstance(Comparable.class, 8);
      comparableArray0[0] = (Comparable<String>) "ldb3";
      comparableArray0[1] = (Comparable<String>) "";
      comparableArray0[2] = (Comparable<String>) "";
      comparableArray0[3] = (Comparable<String>) "";
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      assertNotNull(mockSimpleDateFormat0);
      
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      assertNotNull(date0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertNotNull(timeZone0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      
      Hour hour0 = new Hour(date0, timeZone0);
      assertNotNull(hour0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      comparableArray0[4] = (Comparable<String>) hour0;
      comparableArray0[5] = (Comparable<String>) "";
      comparableArray0[6] = (Comparable<String>) "";
      comparableArray0[7] = (Comparable<String>) "";
      double[][] doubleArray0 = new double[6][0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 23;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 23;
      doubleArray2[3] = (double) 23;
      doubleArray2[4] = 2720.9;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 23;
      doubleArray3[1] = 2720.9;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (double) 0;
      doubleArray4[1] = 2720.9;
      doubleArray4[2] = 2720.9;
      doubleArray4[3] = 2720.9;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = (double) 23;
      doubleArray5[1] = 239.52841209766;
      doubleArray5[2] = (double) 23;
      doubleArray5[3] = (double) 0;
      doubleArray5[4] = 2720.9;
      doubleArray5[5] = (double) 0;
      doubleArray5[6] = (double) 0;
      doubleArray5[7] = (double) 0;
      doubleArray5[8] = (double) 0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      
      doubleArray6[0] = 2720.9;
      doubleArray6[1] = (double) 0;
      doubleArray6[2] = 2720.9;
      doubleArray6[3] = 239.52841209766;
      doubleArray6[4] = 2720.9;
      doubleArray6[5] = (double) 23;
      doubleArray6[6] = (double) 0;
      doubleArray6[7] = (double) 23;
      doubleArray6[8] = 2720.9;
      doubleArray0[5] = doubleArray6;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'rowKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("ldb3", "ldb3", "");
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("ldb3", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      TimeSeries timeSeries1 = new TimeSeries("ldb3", "ldb3", "ldb3");
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertNotNull(timeSeries1);
      assertNull(timeSeries1.getDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("ldb3", timeSeries1.getRangeDescription());
      assertEquals("ldb3", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertTrue(timeSeries1.getNotify());
      assertEquals(0, timeSeries1.getItemCount());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries1);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertNotNull(timeSeriesCollection0);
      assertNull(timeSeries1.getDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("ldb3", timeSeries1.getRangeDescription());
      assertEquals("ldb3", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertTrue(timeSeries1.getNotify());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "ldb3";
      stringArray0[1] = "";
      stringArray0[2] = "ldb3";
      stringArray0[3] = "ldb3";
      stringArray0[4] = "";
      stringArray0[5] = "";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, stringArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.category.SlidingCategoryDataset", "org.jfree.data.category.SlidingCategoryDataset", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-1));
      assertNotNull(categoryToPieDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-1), categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) "org.jfree.data.category.SlidingCategoryDataset", (KeyedValues) categoryToPieDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds((XYDataset) null, stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1.7976931348623157E308);
      doubleArray0[0] = doubleArray1;
      LinkedList<DefaultIntervalXYDataset> linkedList0 = new LinkedList<DefaultIntervalXYDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds((XYDataset) null, linkedList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte)1);
      assertNotNull(byte0);
      assertEquals((byte)1, (byte)byte0);
      
      boolean boolean0 = linkedList0.offerFirst(byte0);
      assertTrue(linkedList0.contains(byte0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      XYSeries xYSeries0 = new XYSeries(byte0, false, false);
      assertNotNull(xYSeries0);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      xYSeries0.add((Number) byte0, (Number) bigInteger0);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(1.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(1.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean1 = xYSeriesCollection0.hasListener(xIntervalSeriesCollection0);
      assertFalse(boolean1 == boolean0);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(1.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertFalse(boolean1);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, false);
      assertTrue(linkedList0.contains(byte0));
      assertNotNull(range0);
      assertEquals(1, linkedList0.size());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(1.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, range0, false);
      assertTrue(range1.equals((Object)range0));
      assertTrue(linkedList0.contains(byte0));
      assertNotNull(range1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(1, linkedList0.size());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(1.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte)5);
      assertNotNull(byte0);
      assertEquals((byte)5, (byte)byte0);
      
      boolean boolean0 = linkedList0.offerFirst(byte0);
      assertTrue(linkedList0.contains(byte0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      XYSeries xYSeries0 = new XYSeries(byte0, true, true);
      assertNotNull(xYSeries0);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = BigInteger.valueOf(1L);
      assertNotNull(bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      
      xYSeries0.add((Number) bigInteger0, (Number) byte0);
      assertSame(bigInteger0, bigInteger1);
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      xYSeries0.setMaximumItemCount((byte)5);
      assertEquals(5, xYSeries0.getMaximumItemCount());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean1 = xYSeriesCollection0.hasListener(xIntervalSeriesCollection0);
      assertFalse(boolean1 == boolean0);
      assertEquals(5, xYSeries0.getMaximumItemCount());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertFalse(boolean1);
      
      Range range0 = xYSeriesCollection0.getRangeBounds(false);
      assertNotNull(range0);
      assertEquals(5, xYSeries0.getMaximumItemCount());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(5.0, range0.getLowerBound(), 0.01);
      assertEquals(5.0, range0.getCentralValue(), 0.01);
      assertEquals(5.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      xYSeries0.add((Number) bigInteger0, (Number) bigInteger0);
      assertSame(bigInteger0, bigInteger1);
      assertEquals(5, xYSeries0.getMaximumItemCount());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1.0, xYSeries0.getMinY(), 0.01);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, range0, false);
      assertTrue(linkedList0.contains((byte)5));
      assertNull(range1);
      assertEquals(1, linkedList0.size());
      assertEquals(5, xYSeries0.getMaximumItemCount());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1.0, xYSeries0.getMinY(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(5.0, range0.getLowerBound(), 0.01);
      assertEquals(5.0, range0.getCentralValue(), 0.01);
      assertEquals(5.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte)5);
      assertNotNull(byte0);
      assertEquals((byte)5, (byte)byte0);
      
      boolean boolean0 = linkedList0.offerFirst(byte0);
      assertTrue(linkedList0.contains((byte)5));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      XYSeries xYSeries0 = new XYSeries(byte0, true, true);
      assertNotNull(xYSeries0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = BigInteger.valueOf(1L);
      assertNotNull(bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      
      xYSeries0.add((Number) bigInteger0, (Number) byte0);
      assertSame(bigInteger0, bigInteger1);
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      xYSeries0.setMaximumItemCount((byte)5);
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(5, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean1 = xYSeriesCollection0.hasListener(xIntervalSeriesCollection0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(5, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertFalse(boolean1);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, true);
      assertTrue(linkedList0.contains((byte)5));
      assertNotNull(range0);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(5, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.5, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.5, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      
      xYSeries0.add((Number) bigInteger0, (Number) bigInteger0);
      assertSame(bigInteger0, bigInteger1);
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertEquals(1.0, xYSeries0.getMinY(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(5, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, range0, false);
      assertFalse(range1.equals((Object)range0));
      assertTrue(linkedList0.contains((byte)5));
      assertNotNull(range1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertEquals(1.0, xYSeries0.getMinY(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(5, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.5, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.5, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(4.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(5.0, range1.getUpperBound(), 0.01);
      assertEquals(3.0, range1.getCentralValue(), 0.01);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, range1, true);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertTrue(linkedList0.contains((byte)5));
      assertNotNull(range2);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertEquals(1.0, xYSeries0.getMinY(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(5, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.5, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.5, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(4.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(5.0, range1.getUpperBound(), 0.01);
      assertEquals(3.0, range1.getCentralValue(), 0.01);
      assertEquals(3.0, range2.getCentralValue(), 0.01);
      assertEquals(4.0, range2.getLength(), 0.01);
      assertEquals(5.0, range2.getUpperBound(), 0.01);
      assertEquals(1.0, range2.getLowerBound(), 0.01);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertFalse(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      assertNotNull(range3);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertEquals(1.0, xYSeries0.getMinY(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(5, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(3.0, range3.getCentralValue(), 0.01);
      assertEquals(5.0, range3.getUpperBound(), 0.01);
      assertEquals(1.0, range3.getLowerBound(), 0.01);
      assertEquals(4.0, range3.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte)5);
      assertNotNull(byte0);
      assertEquals((byte)5, (byte)byte0);
      
      boolean boolean0 = linkedList0.offerFirst(byte0);
      assertTrue(linkedList0.contains(byte0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      XYSeries xYSeries0 = new XYSeries(byte0, true, true);
      assertNotNull(xYSeries0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      xYSeries0.add((Number) bigInteger0, (Number) byte0);
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean1 = xYSeriesCollection0.hasListener(xIntervalSeriesCollection0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertFalse(boolean1);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, true);
      assertTrue(linkedList0.contains(byte0));
      assertNotNull(range0);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.5, range0.getLowerBound(), 0.01);
      assertEquals(1.5, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, range0, false);
      assertFalse(range1.equals((Object)range0));
      assertTrue(linkedList0.contains(byte0));
      assertNotNull(range1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.5, range0.getLowerBound(), 0.01);
      assertEquals(1.5, range0.getUpperBound(), 0.01);
      assertEquals(5.0, range1.getCentralValue(), 0.01);
      assertEquals(5.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(5.0, range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      double[][] doubleArray0 = new double[19][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(19, doubleArray0.length);
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      
      Double double0 = (Double)DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNotNull(double0);
      assertEquals(19, doubleArray0.length);
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, (double)double0, 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(19, doubleArray0.length);
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 266, 266);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(19, doubleArray0.length);
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(266, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(266, slidingCategoryDataset0.getFirstCategoryIndex());
      
      List list0 = slidingCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(19, doubleArray0.length);
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(266, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(266, slidingCategoryDataset0.getFirstCategoryIndex());
      assertFalse(list0.isEmpty());
      assertEquals(19, list0.size());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals(19, doubleArray0.length);
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      TimeSeries timeSeries0 = new TimeSeries(second0);
      assertNotNull(timeSeries0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0, (List) list0, true);
      assertNull(range2);
      assertEquals(19, doubleArray0.length);
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(266, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(266, slidingCategoryDataset0.getFirstCategoryIndex());
      assertFalse(list0.isEmpty());
      assertEquals(19, list0.size());
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(slidingCategoryDataset0);
      assertNull(number0);
      assertEquals(19, doubleArray0.length);
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(266, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(266, slidingCategoryDataset0.getFirstCategoryIndex());
      
      Range range3 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range0));
      assertNotNull(range3);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertEquals(19, doubleArray0.length);
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(double0);
      assertNotNull(keyToGroupMap0);
      assertEquals(19, doubleArray0.length);
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range4 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0, keyToGroupMap0);
      assertNull(range4);
      assertEquals(19, doubleArray0.length);
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(266, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(266, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, (Comparable) "Lyb|QB.H+vDU.wOGj:N");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      
      double[][] doubleArray0 = new double[3][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'rowKeys' argument.", "Requires 'ySamples' > 0", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      Double double0 = new Double(82.0429277);
      assertNotNull(double0);
      assertEquals(82.0429277, (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(stack0.contains(double0));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[82.0429277]", stack0.toString());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(xYSeriesCollection0, stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.XYSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(45, "Null 'rowKeys' argument.");
      assertNotNull(simpleTimeZone0);
      assertEquals(45, simpleTimeZone0.getRawOffset());
      assertEquals("Null 'rowKeys' argument.", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=Null 'rowKeys' argument.,offset=45,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertEquals(45, simpleTimeZone0.getRawOffset());
      assertEquals("Null 'rowKeys' argument.", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=Null 'rowKeys' argument.,offset=45,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (double) 45);
      assertNotNull(range0);
      assertEquals(45, simpleTimeZone0.getRawOffset());
      assertEquals("Null 'rowKeys' argument.", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=Null 'rowKeys' argument.,offset=45,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(45.0, range0.getCentralValue(), 0.01);
      assertEquals(45.0, range0.getUpperBound(), 0.01);
      assertEquals(45.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      LinkedList<XYIntervalSeriesCollection> linkedList0 = new LinkedList<XYIntervalSeriesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection1 = new XYIntervalSeriesCollection();
      assertTrue(xYIntervalSeriesCollection1.equals((Object)xYIntervalSeriesCollection0));
      assertNotNull(xYIntervalSeriesCollection1);
      assertEquals(0, xYIntervalSeriesCollection1.getSeriesCount());
      
      boolean boolean0 = linkedList0.add(xYIntervalSeriesCollection1);
      assertTrue(xYIntervalSeriesCollection1.equals((Object)xYIntervalSeriesCollection0));
      assertTrue(linkedList0.contains(xYIntervalSeriesCollection1));
      assertNotSame(xYIntervalSeriesCollection1, xYIntervalSeriesCollection0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, xYIntervalSeriesCollection1.getSeriesCount());
      assertTrue(boolean0);
      
      Range range1 = Range.combine(range0, range0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(45, simpleTimeZone0.getRawOffset());
      assertEquals("Null 'rowKeys' argument.", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=Null 'rowKeys' argument.,offset=45,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(45.0, range0.getCentralValue(), 0.01);
      assertEquals(45.0, range0.getUpperBound(), 0.01);
      assertEquals(45.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(45.0, range1.getLowerBound(), 0.01);
      assertEquals(45.0, range1.getCentralValue(), 0.01);
      assertEquals(45.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYIntervalSeriesCollection0, (List) linkedList0, range1, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYIntervalSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) vectorSeriesCollection0);
      assertNull(range0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 1681.200686540816, 2738.0, 2, "");
      assertNotNull(xYSeries0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(1681.200686540816, xYSeries0.getMinX(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(2738.0, xYSeries0.getMaxX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      String string0 = "Duplicate items in 'rowK(ys'.";
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Duplicate items in 'rowK(ys'.", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      TimeSeries timeSeries0 = new TimeSeries("");
      assertNotNull(timeSeries0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      double[][] doubleArray0 = new double[19][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(19, doubleArray0.length);
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      KeyToGroupMap keyToGroupMap1 = new KeyToGroupMap();
      assertTrue(keyToGroupMap1.equals((Object)keyToGroupMap0));
      assertNotNull(keyToGroupMap1);
      assertEquals(1, keyToGroupMap1.getGroupCount());
      
      List list0 = keyToGroupMap1.getGroups();
      assertTrue(keyToGroupMap1.equals((Object)keyToGroupMap0));
      assertNotNull(list0);
      assertNotSame(keyToGroupMap1, keyToGroupMap0);
      assertEquals(1, keyToGroupMap1.getGroupCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap1);
      assertTrue(keyToGroupMap1.equals((Object)keyToGroupMap0));
      assertNotNull(range0);
      assertNotSame(keyToGroupMap1, keyToGroupMap0);
      assertEquals(19, doubleArray0.length);
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, keyToGroupMap1.getGroupCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'columnKey' argument.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("9rN-nx");
      assertNotNull(timeSeries0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      
      TimeSeries timeSeries1 = new TimeSeries("9rN-nx");
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertNotNull(timeSeries1);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertTrue(timeSeries1.getNotify());
      assertNull(timeSeries1.getDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(0, timeSeries1.getItemCount());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Stack<DynamicTimeSeriesCollection> stack0 = new Stack<DynamicTimeSeriesCollection>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) null, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte) (-54));
      assertNotNull(byte0);
      assertEquals((byte) (-54), (byte)byte0);
      
      boolean boolean0 = linkedList0.offerFirst(byte0);
      assertTrue(linkedList0.contains(byte0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      XYSeries xYSeries0 = new XYSeries(byte0, true, true);
      assertNotNull(xYSeries0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      xYSeries0.add((Number) bigInteger0, (Number) byte0);
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-54.0), xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertEquals((-54.0), xYSeries0.getMinY(), 0.01);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-54.0), xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertEquals((-54.0), xYSeries0.getMinY(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean1 = xYSeriesCollection0.hasListener(xIntervalSeriesCollection0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-54.0), xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertEquals((-54.0), xYSeries0.getMinY(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertFalse(boolean1);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, true);
      assertTrue(linkedList0.contains(byte0));
      assertNotNull(range0);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-54.0), xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertEquals((-54.0), xYSeries0.getMinY(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(0.5, range0.getLowerBound(), 0.01);
      assertEquals(1.5, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("");
      assertNotNull(timeSeries0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      TimeSeries timeSeries1 = new TimeSeries("");
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertNotNull(timeSeries1);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(0, timeSeries1.getItemCount());
      assertNull(timeSeries1.getDescription());
      assertTrue(timeSeries1.getNotify());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries1);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertNotNull(timeSeriesCollection0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(0, timeSeries1.getItemCount());
      assertNull(timeSeries1.getDescription());
      assertTrue(timeSeries1.getNotify());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      UndoManager undoManager0 = new UndoManager();
      assertNotNull(undoManager0);
      
      boolean boolean0 = timeSeriesCollection0.hasListener(undoManager0);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(0, timeSeries1.getItemCount());
      assertNull(timeSeries1.getDescription());
      assertTrue(timeSeries1.getNotify());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertFalse(boolean0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, true);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertNull(range0);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(0, timeSeries1.getItemCount());
      assertNull(timeSeries1.getDescription());
      assertTrue(timeSeries1.getNotify());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      System.setCurrentTimeMillis(2L);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      double[][] doubleArray0 = new double[19][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(19, doubleArray0.length);
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 659, 659);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(19, doubleArray0.length);
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(659, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(659, slidingCategoryDataset0.getFirstCategoryIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 659);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.categor.SlidingCategoryDataset", "org.jfree.data.categor.SlidingCategoryDataset", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNotNull(double0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, (double)double0, 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (Comparable) double0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Mu", "Mu", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("Mu", "", doubleArray0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotNull(categoryDataset1);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset1);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotNull(range0);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      TimeSeries timeSeries0 = new TimeSeries("");
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, false);
      assertNull(range1);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1059, 2211);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(2211, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1059, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) slidingGanttCategoryDataset0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(2211, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1059, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Number[][] numberArray0 = new Number[7][7];
      Number[] numberArray1 = new Number[6];
      numberArray1[0] = null;
      numberArray1[1] = null;
      numberArray1[2] = null;
      numberArray1[3] = null;
      numberArray1[4] = null;
      numberArray1[5] = null;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[8];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = null;
      numberArray2[1] = null;
      numberArray2[2] = null;
      numberArray2[3] = null;
      numberArray2[4] = null;
      numberArray2[5] = null;
      numberArray2[6] = null;
      numberArray2[7] = null;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[2];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray3[0] = null;
      numberArray3[1] = null;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[3];
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray1));
      
      numberArray4[0] = null;
      numberArray4[1] = null;
      numberArray4[2] = null;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[6];
      assertFalse(numberArray5.equals((Object)numberArray3));
      assertFalse(numberArray5.equals((Object)numberArray1));
      assertFalse(numberArray5.equals((Object)numberArray4));
      assertFalse(numberArray5.equals((Object)numberArray2));
      
      numberArray5[0] = null;
      numberArray5[1] = null;
      numberArray5[2] = null;
      numberArray5[3] = null;
      numberArray5[4] = null;
      numberArray5[5] = null;
      numberArray0[4] = numberArray5;
      Number[] numberArray6 = new Number[1];
      assertFalse(numberArray6.equals((Object)numberArray5));
      assertFalse(numberArray6.equals((Object)numberArray3));
      assertFalse(numberArray6.equals((Object)numberArray1));
      assertFalse(numberArray6.equals((Object)numberArray4));
      assertFalse(numberArray6.equals((Object)numberArray2));
      
      numberArray6[0] = null;
      numberArray0[5] = numberArray6;
      Number[] numberArray7 = new Number[4];
      assertFalse(numberArray7.equals((Object)numberArray3));
      assertFalse(numberArray7.equals((Object)numberArray2));
      assertFalse(numberArray7.equals((Object)numberArray6));
      assertFalse(numberArray7.equals((Object)numberArray1));
      assertFalse(numberArray7.equals((Object)numberArray4));
      assertFalse(numberArray7.equals((Object)numberArray5));
      
      numberArray7[0] = null;
      numberArray7[1] = null;
      numberArray7[2] = null;
      numberArray7[3] = null;
      numberArray0[6] = numberArray7;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, numberArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("9rN-nx", "org.jfree.data.category.SlidingCategoryDataset", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("org.jfree.data.category.SlidingCategoryDataset", "b<A=F\"03_fu-qg", doubleArray0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotNull(categoryDataset1);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      Float float0 = Float.valueOf((-923.88F));
      assertNotNull(float0);
      assertEquals((-923.88F), (float)float0, 0.01F);
      
      defaultKeyedValues0.setValue((Comparable) "org.jfree.data.category.SlidingCategoryDataset", (Number) float0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      CategoryDataset categoryDataset2 = DatasetUtilities.createCategoryDataset((Comparable) "b<A=F\"03_fu-qg", (KeyedValues) defaultKeyedValues0);
      assertFalse(categoryDataset2.equals((Object)categoryDataset0));
      assertFalse(categoryDataset2.equals((Object)categoryDataset1));
      assertNotNull(categoryDataset2);
      assertNotSame(categoryDataset2, categoryDataset0);
      assertNotSame(categoryDataset2, categoryDataset1);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset2);
      assertFalse(categoryDataset2.equals((Object)categoryDataset0));
      assertFalse(categoryDataset2.equals((Object)categoryDataset1));
      assertNotNull(range0);
      assertNotSame(categoryDataset2, categoryDataset0);
      assertNotSame(categoryDataset2, categoryDataset1);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertEquals((-923.8800048828125), range0.getLowerBound(), 0.01);
      assertEquals(923.8800048828125, range0.getLength(), 0.01);
      assertEquals((-461.94000244140625), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 90.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1650.31968;
      doubleArray2[1] = 90.0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("P|>&9,.HXhWI", "P|>&9,.HXhWI", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(2, doubleArray0.length);
      assertEquals(90.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(45.0, range0.getCentralValue(), 0.01);
      assertEquals(90.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      Date date0 = second0.getEnd();
      assertNotNull(date0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals("Fri Feb 14 20:21:22 GMT 2014", date0.toString());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      TimeSeries timeSeries0 = new TimeSeries(second0);
      assertNotNull(timeSeries0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      Range range0 = jDBCXYDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      System.setCurrentTimeMillis((-2L));
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) second0);
      assertNotNull(pieDataset0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(jDBCXYDataset0);
      assertNull(number0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      HistogramType histogramType0 = HistogramType.FREQUENCY;
      assertNotNull(histogramType0);
      assertEquals("FREQUENCY", histogramType0.toString());
      
      histogramDataset0.setType(histogramType0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertEquals("FREQUENCY", histogramType0.toString());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(histogramDataset0, stack0, false);
      assertNull(range0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(histogramDataset0);
      assertNull(number0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        taskSeriesCollection0.getSeries(1738);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.gantt.TaskSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      assertNotNull(thaiBuddhistDate0);
      
      boolean boolean0 = arrayList0.add((ChronoLocalDate) thaiBuddhistDate0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("9rN-nx");
      assertNotNull(timeSeries0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      TimeSeries timeSeries1 = new TimeSeries("9rN-nx");
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertNotNull(timeSeries1);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertTrue(timeSeries1.getNotify());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(0, timeSeries1.getItemCount());
      
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      assertNotNull(thaiBuddhistDate0);
      
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add((ChronoLocalDate) thaiBuddhistDate0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      DomainOrder domainOrder0 = jDBCXYDataset0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      assertNull(range0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte)5);
      assertNotNull(byte0);
      assertEquals((byte)5, (byte)byte0);
      
      boolean boolean0 = linkedList0.offerFirst(byte0);
      assertTrue(linkedList0.contains((byte)5));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      XYSeries xYSeries0 = new XYSeries(byte0, true, true);
      assertNotNull(xYSeries0);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = BigInteger.valueOf(1L);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      
      xYSeries0.add((Number) bigInteger0, (Number) byte0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertNotSame(bigInteger0, bigInteger1);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = xYSeriesCollection0.getRangeBounds(true);
      assertNotNull(range0);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(5.0, range0.getCentralValue(), 0.01);
      assertEquals(5.0, range0.getLowerBound(), 0.01);
      assertEquals(5.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      xYSeries0.setMaximumItemCount((byte)5);
      assertEquals(5, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, true);
      assertTrue(linkedList0.contains((byte)5));
      assertNull(range1);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      KeyToGroupMap keyToGroupMap1 = new KeyToGroupMap();
      assertTrue(keyToGroupMap1.equals((Object)keyToGroupMap0));
      assertNotNull(keyToGroupMap1);
      assertEquals(1, keyToGroupMap1.getGroupCount());
      
      XYDataItem xYDataItem0 = new XYDataItem(63.4595636904601, Double.NEGATIVE_INFINITY);
      assertNotNull(xYDataItem0);
      assertEquals(63.4595636904601, xYDataItem0.getXValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, xYDataItem0.getYValue(), 0.01);
      
      int int0 = keyToGroupMap1.getKeyCount(xYDataItem0);
      assertTrue(keyToGroupMap1.equals((Object)keyToGroupMap0));
      assertNotSame(keyToGroupMap1, keyToGroupMap0);
      assertEquals(1, keyToGroupMap1.getGroupCount());
      assertEquals(63.4595636904601, xYDataItem0.getXValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, xYDataItem0.getYValue(), 0.01);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, keyToGroupMap1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      TimeSeries timeSeries0 = new TimeSeries(second0);
      assertNotNull(timeSeries0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      boolean boolean0 = timeSeriesCollection0.equals(timeSeries0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertFalse(boolean0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number1);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      double[][] doubleArray0 = new double[4][4];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 59;
      doubleArray1[1] = (-903.283631);
      doubleArray1[2] = (double) 59;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 59;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 59;
      doubleArray2[1] = (-903.283631);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 59;
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = (-903.283631);
      doubleArray3[4] = (double) 0;
      doubleArray3[5] = (double) 0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (double) 0;
      doubleArray4[1] = (double) 0;
      doubleArray4[2] = (double) 0;
      doubleArray4[3] = (double) 0;
      doubleArray4[4] = (-903.283631);
      doubleArray4[5] = (double) 0;
      doubleArray4[6] = (double) 59;
      doubleArray4[7] = (double) 59;
      doubleArray4[8] = (-903.283631);
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Duplicate items in 'rowKeys'.", "Null 'type' argument", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) 59.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(", but the TimeSeries is expecting an instance of ", ", but the TimeSeries is expecting an instance of ", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 1650.31968);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1650.31968, range0.getCentralValue(), 0.01);
      assertEquals(1650.31968, range0.getUpperBound(), 0.01);
      assertEquals(1650.31968, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      PieDataset pieDataset0 = null;
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      TimeSeries timeSeries0 = new TimeSeries(", but the TimeSeries is expecting an instance of ", "x:1J.;g|7rWk0,b", ", but the TimeSeries is expecting an instance of ");
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(", but the TimeSeries is expecting an instance of ", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("x:1J.;g|7rWk0,b", timeSeries0.getDomainDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(", but the TimeSeries is expecting an instance of ", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("x:1J.;g|7rWk0,b", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(", but the TimeSeries is expecting an instance of ", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("x:1J.;g|7rWk0,b", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number1);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(", but the TimeSeries is expecting an instance of ", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("x:1J.;g|7rWk0,b", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Number[][] numberArray0 = new Number[2][4];
      Number[] numberArray1 = new Number[3];
      numberArray1[0] = null;
      numberArray1[1] = null;
      numberArray1[2] = null;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[0];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, numberArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultTableXYDataset0);
      assertNull(number0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.0;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(", but the TimeSeries isex.ectingan instance of ", ", but the TimeSeries isex.ectingan instance of ", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (-1730));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<TimeTableXYDataset> arrayList0 = new ArrayList<TimeTableXYDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      TimeTableXYDataset timeTableXYDataset0 = null;
      boolean boolean0 = arrayList0.add((TimeTableXYDataset) null);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      boolean boolean1 = arrayList0.add((TimeTableXYDataset) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("apgtax.BETh:O&");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      TimeSeries timeSeries0 = new TimeSeries("apgtax.BETh:O&");
      assertNotNull(timeSeries0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      DomainOrder domainOrder0 = jDBCXYDataset0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      LinkedList<DefaultTableModel> linkedList0 = new LinkedList<DefaultTableModel>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) linkedList0, true);
      assertNull(range0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1100.149284137793, 1100.149284137793);
      assertNotNull(powerFunction2D0);
      assertEquals(1100.149284137793, powerFunction2D0.getB(), 0.01);
      assertEquals(1100.149284137793, powerFunction2D0.getA(), 0.01);
      
      Double double0 = new Double(1100.149284137793);
      assertNotNull(double0);
      assertEquals(1100.149284137793, (double)double0, 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, 3915.649);
      assertNull(range0);
      
      TimeSeries timeSeries0 = new TimeSeries(double0, "J0>up2", "0kzW:(&$'F");
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("0kzW:(&$'F", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("J0>up2", timeSeries0.getDomainDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("0kzW:(&$'F", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("J0>up2", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) linkedList0, true);
      assertNull(range1);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 4912.82654041889;
      doubleArray1[1] = (-1754.9373279);
      doubleArray1[2] = 6.283185307179586;
      doubleArray1[3] = 2.0;
      doubleArray1[4] = 696.58643;
      doubleArray1[5] = (-44.7996119706);
      doubleArray1[6] = 2305.1424468589066;
      doubleArray1[7] = (-1295.498685);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("gPIJF0)zR>@Qw?0T", "'|", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getRowKeys();
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertNotNull(list0);
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      boolean boolean0 = linkedList0.add(long0);
      assertTrue(linkedList0.contains(long0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) list0, true);
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertNull(range0);
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      String string0 = "9rNx";
      Comparable<JDBCXYDataset>[] comparableArray0 = (Comparable<JDBCXYDataset>[]) Array.newInstance(Comparable.class, 0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      
      TimeZone timeZone0 = TimeZone.getTimeZone("QxKWwz7Qq.");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Stack<TimeTableXYDataset> stack0 = new Stack<TimeTableXYDataset>();
      assertFalse(stack0.contains(timeTableXYDataset0));
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-2087.5834), (-2087.5834));
      assertNotNull(powerFunction2D0);
      assertEquals((-2087.5834), powerFunction2D0.getA(), 0.01);
      assertEquals((-2087.5834), powerFunction2D0.getB(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, (-1462.6694958), (-10.0), 13, "QxKWwz7Qq.");
      assertNotNull(xYSeriesCollection0);
      assertEquals((-2087.5834), powerFunction2D0.getA(), 0.01);
      assertEquals((-2087.5834), powerFunction2D0.getB(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      assertFalse(stack0.contains(timeTableXYDataset0));
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      XYSeriesCollection xYSeriesCollection1 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, (-2606.1877405401), (-10.0), 2, "QxKWwz7Qq.");
      assertFalse(xYSeriesCollection1.equals((Object)xYSeriesCollection0));
      assertNotNull(xYSeriesCollection1);
      assertNotSame(xYSeriesCollection1, xYSeriesCollection0);
      assertEquals((-2087.5834), powerFunction2D0.getA(), 0.01);
      assertEquals((-2087.5834), powerFunction2D0.getB(), 0.01);
      assertEquals(1, xYSeriesCollection1.getSeriesCount());
      assertFalse(xYSeriesCollection1.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection1.getIntervalWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-3257.2);
      doubleArray1[2] = 130.635;
      doubleArray1[3] = (-1563.5);
      doubleArray1[4] = 174.7588437885;
      doubleArray1[5] = 829.0;
      doubleArray1[6] = (-781.506764785);
      doubleArray1[7] = (-1995.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte) (-54));
      assertNotNull(byte0);
      assertEquals((byte) (-54), (byte)byte0);
      
      boolean boolean0 = linkedList0.offerFirst(byte0);
      assertTrue(linkedList0.contains(byte0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      XYSeries xYSeries0 = new XYSeries(byte0, true, true);
      assertNotNull(xYSeries0);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      xYSeries0.add((Number) bigInteger0, (Number) byte0);
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals((-54.0), xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-54.0), xYSeries0.getMinY(), 0.01);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals((-54.0), xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-54.0), xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, true);
      assertTrue(linkedList0.contains(byte0));
      assertNotNull(range0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals((-54.0), xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-54.0), xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.5, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      
      Number[][] numberArray0 = new Number[1][5];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultKeyedValues2DDataset0, (byte) (-54), (byte) (-54));
      assertNotNull(slidingCategoryDataset0);
      assertEquals((-54), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-54), slidingCategoryDataset0.getMaximumCategoryCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, 2549);
      assertNotNull(pieDataset0);
      assertEquals((-54), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-54), slidingCategoryDataset0.getMaximumCategoryCount());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "", (KeyedValues) pieDataset0);
      assertNotNull(categoryDataset0);
      assertEquals((-54), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-54), slidingCategoryDataset0.getMaximumCategoryCount());
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((byte) (-54), 2549);
      assertNotNull(powerFunction2D0);
      assertEquals((-54.0), powerFunction2D0.getA(), 0.01);
      assertEquals(2549.0, powerFunction2D0.getB(), 0.01);
      
      Double double0 = new Double(1286.2608576);
      assertNotNull(double0);
      assertEquals(1286.2608576, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      TimeSeries timeSeries0 = new TimeSeries("9rN-nx");
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      
      TimeSeries timeSeries1 = new TimeSeries("9rN-nx");
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertNotNull(timeSeries1);
      assertNull(timeSeries1.getDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertTrue(timeSeries1.getNotify());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(xYTaskDataset0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries1);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertNotNull(timeSeriesCollection0);
      assertNull(timeSeries1.getDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertTrue(timeSeries1.getNotify());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      KeyListener keyListener0 = AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      assertNull(keyListener0);
      
      KeyListener keyListener1 = AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      assertNull(keyListener1);
      
      UndoManager undoManager0 = new UndoManager();
      assertNotNull(undoManager0);
      
      boolean boolean0 = timeSeriesCollection0.hasListener(undoManager0);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertNotSame(timeSeries1, timeSeries0);
      assertNull(timeSeries1.getDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertTrue(timeSeries1.getNotify());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertFalse(boolean0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, false);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertNull(range0);
      assertNotSame(timeSeries1, timeSeries0);
      assertNull(timeSeries1.getDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertTrue(timeSeries1.getNotify());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, true);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertNull(range1);
      assertNotSame(timeSeries1, timeSeries0);
      assertNull(timeSeries1.getDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertTrue(timeSeries1.getNotify());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      XYDataset xYDataset0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultTableXYDataset0);
      assertNull(number0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      double[][] doubleArray0 = new double[1][7];
      Number number1 = DatasetUtilities.findMaximumDomainValue(defaultTableXYDataset0);
      assertNotNull(number1);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(Double.NaN, number1);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, 1347.00764457);
      assertNotNull(range0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1347.00764457, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1347.00764457, range0.getCentralValue(), 0.01);
      assertEquals(1347.00764457, range0.getUpperBound(), 0.01);
      
      Number number2 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertFalse(number2.equals((Object)number1));
      assertNotNull(number2);
      assertEquals(1, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, number2);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      boolean boolean0 = arrayList0.add(integer0);
      assertTrue(arrayList0.contains(integer0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone(" to ");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      boolean boolean1 = arrayList0.remove((Object) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(arrayList0.contains(integer0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(boolean1);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, false);
      assertTrue(arrayList0.contains(integer0));
      assertNull(range0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0, true);
      assertNull(range1);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0);
      assertNull(range2);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      assertNotNull(thaiBuddhistDate0);
      
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add((ChronoLocalDate) thaiBuddhistDate0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset1 = new JDBCXYDataset(connection1);
      assertFalse(jDBCXYDataset1.equals((Object)jDBCXYDataset0));
      assertNotNull(jDBCXYDataset1);
      assertEquals(0, jDBCXYDataset1.getItemCount());
      assertFalse(jDBCXYDataset1.isTimeSeries());
      assertEquals(0, jDBCXYDataset1.getSeriesCount());
      
      DomainOrder domainOrder0 = jDBCXYDataset0.getDomainOrder();
      assertFalse(jDBCXYDataset0.equals((Object)jDBCXYDataset1));
      assertNotNull(domainOrder0);
      assertNotSame(jDBCXYDataset0, jDBCXYDataset1);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, (List) arrayList0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      double[][] doubleArray0 = new double[19][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(19, doubleArray0.length);
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      Minute minute0 = new Minute();
      assertNotNull(minute0);
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      assertNotNull(timeSeries0);
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      CategoryDataset categoryDataset0 = null;
      Vector<Double> vector0 = new Vector<Double>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, (List) vector0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("apgtax.BETh:O&");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, Double.NEGATIVE_INFINITY);
      assertNotNull(range0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      
      LinkedList<XYIntervalSeriesCollection> linkedList0 = new LinkedList<XYIntervalSeriesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = linkedList0.add(xYIntervalSeriesCollection0);
      assertTrue(linkedList0.contains(xYIntervalSeriesCollection0));
      assertEquals(1, linkedList0.size());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) linkedList0, range0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYIntervalSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) month0);
      assertNotNull(pieDataset0);
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      
      TimeSeries timeSeries0 = new TimeSeries(month0);
      assertNotNull(timeSeries0);
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      TimeSeries timeSeries1 = new TimeSeries(month0);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertNotNull(timeSeries1);
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertTrue(timeSeries1.getNotify());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertNull(timeSeries1.getDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertNotNull(timeSeriesCollection0);
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      KeyListener keyListener0 = AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      assertNull(keyListener0);
      
      KeyListener keyListener1 = AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      assertNull(keyListener1);
      
      KeyListener keyListener2 = AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      assertNull(keyListener2);
      
      UndoManager undoManager0 = new UndoManager();
      assertNotNull(undoManager0);
      
      boolean boolean0 = timeSeriesCollection0.hasListener((EventListener) null);
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertNotSame(timeSeries0, timeSeries1);
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertFalse(boolean0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(number1);
      assertEquals(Double.NaN, number1);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, true);
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertNull(range0);
      assertNotSame(timeSeries0, timeSeries1);
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) arrayList0, true);
      assertNull(range1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte) (-54));
      assertNotNull(byte0);
      assertEquals((byte) (-54), (byte)byte0);
      
      boolean boolean0 = linkedList0.offerFirst(byte0);
      assertTrue(linkedList0.contains((byte) (-54)));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      XYSeries xYSeries0 = new XYSeries(byte0, true, true);
      assertNotNull(xYSeries0);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, true);
      assertTrue(linkedList0.contains((byte) (-54)));
      assertNull(range0);
      assertEquals(1, linkedList0.size());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Number[][] numberArray0 = new Number[2][5];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[5];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) byte0;
      numberArray2[2] = (Number) byte0;
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      numberArray2[3] = (Number) integer0;
      numberArray0[1] = numberArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, numberArray0.length);
      
      Range range1 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertNotNull(range1);
      assertEquals(2, numberArray0.length);
      assertEquals(54.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals((-54.0), range1.getLowerBound(), 0.01);
      assertEquals((-27.0), range1.getCentralValue(), 0.01);
      
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      TimeSeries timeSeries0 = new TimeSeries(byte0);
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds(categoryDataset0, (List) linkedList0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      assertNotNull(fixedMillisecond0);
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      
      MockDate mockDate0 = new MockDate(608, 608, 2091, 2091, 608);
      assertNotNull(mockDate0);
      
      FixedMillisecond fixedMillisecond1 = new FixedMillisecond(mockDate0);
      assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
      assertNotNull(fixedMillisecond1);
      assertEquals("Fri Aug 17 13:08:00 GMT 2564", mockDate0.toString());
      assertEquals(18764658480000L, fixedMillisecond1.getFirstMillisecond());
      assertEquals(18764658480000L, fixedMillisecond1.getLastMillisecond());
      assertEquals(18764658480000L, fixedMillisecond1.getSerialIndex());
      assertEquals(18764658480000L, fixedMillisecond1.getMiddleMillisecond());
      
      Date date0 = fixedMillisecond1.getTime();
      assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
      assertTrue(date0.equals((Object)mockDate0));
      assertNotNull(date0);
      assertNotSame(mockDate0, date0);
      assertNotSame(fixedMillisecond1, fixedMillisecond0);
      assertNotSame(date0, mockDate0);
      assertEquals("Fri Aug 17 13:08:00 GMT 2564", mockDate0.toString());
      assertEquals(18764658480000L, fixedMillisecond1.getFirstMillisecond());
      assertEquals(18764658480000L, fixedMillisecond1.getLastMillisecond());
      assertEquals(18764658480000L, fixedMillisecond1.getSerialIndex());
      assertEquals(18764658480000L, fixedMillisecond1.getMiddleMillisecond());
      assertEquals("Fri Aug 17 13:08:00 GMT 2564", date0.toString());
      
      TimeSeries timeSeries0 = new TimeSeries(date0);
      assertTrue(mockDate0.equals((Object)date0));
      assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
      assertTrue(date0.equals((Object)mockDate0));
      assertNotNull(timeSeries0);
      assertEquals("Fri Aug 17 13:08:00 GMT 2564", mockDate0.toString());
      assertEquals(18764658480000L, fixedMillisecond1.getFirstMillisecond());
      assertEquals(18764658480000L, fixedMillisecond1.getLastMillisecond());
      assertEquals(18764658480000L, fixedMillisecond1.getSerialIndex());
      assertEquals(18764658480000L, fixedMillisecond1.getMiddleMillisecond());
      assertEquals("Fri Aug 17 13:08:00 GMT 2564", date0.toString());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, 801.537454795);
      assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
      assertTrue(mockDate0.equals((Object)date0));
      assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
      assertTrue(date0.equals((Object)mockDate0));
      assertNull(timeSeriesDataItem0);
      assertNotSame(fixedMillisecond0, fixedMillisecond1);
      assertNotSame(mockDate0, date0);
      assertNotSame(fixedMillisecond1, fixedMillisecond0);
      assertNotSame(date0, mockDate0);
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals("Fri Aug 17 13:08:00 GMT 2564", mockDate0.toString());
      assertEquals(18764658480000L, fixedMillisecond1.getFirstMillisecond());
      assertEquals(18764658480000L, fixedMillisecond1.getLastMillisecond());
      assertEquals(18764658480000L, fixedMillisecond1.getSerialIndex());
      assertEquals(18764658480000L, fixedMillisecond1.getMiddleMillisecond());
      assertEquals("Fri Aug 17 13:08:00 GMT 2564", date0.toString());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(801.537454795, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(801.537454795, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertTrue(mockDate0.equals((Object)date0));
      assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
      assertTrue(date0.equals((Object)mockDate0));
      assertNotNull(timeSeriesCollection0);
      assertEquals("Fri Aug 17 13:08:00 GMT 2564", mockDate0.toString());
      assertEquals(18764658480000L, fixedMillisecond1.getFirstMillisecond());
      assertEquals(18764658480000L, fixedMillisecond1.getLastMillisecond());
      assertEquals(18764658480000L, fixedMillisecond1.getSerialIndex());
      assertEquals(18764658480000L, fixedMillisecond1.getMiddleMillisecond());
      assertEquals("Fri Aug 17 13:08:00 GMT 2564", date0.toString());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(801.537454795, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(801.537454795, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, true);
      assertTrue(mockDate0.equals((Object)date0));
      assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
      assertTrue(date0.equals((Object)mockDate0));
      assertNotNull(range0);
      assertNotSame(mockDate0, date0);
      assertNotSame(fixedMillisecond1, fixedMillisecond0);
      assertNotSame(date0, mockDate0);
      assertEquals("Fri Aug 17 13:08:00 GMT 2564", mockDate0.toString());
      assertEquals(18764658480000L, fixedMillisecond1.getFirstMillisecond());
      assertEquals(18764658480000L, fixedMillisecond1.getLastMillisecond());
      assertEquals(18764658480000L, fixedMillisecond1.getSerialIndex());
      assertEquals(18764658480000L, fixedMillisecond1.getMiddleMillisecond());
      assertEquals("Fri Aug 17 13:08:00 GMT 2564", date0.toString());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(801.537454795, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(801.537454795, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultTableXYDataset0);
      assertNull(number0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      
      String string0 = locale0.getDisplayLanguage(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(string0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("\u4E2D\u6587", string0);
      
      String string1 = locale1.toLanguageTag();
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(locale1, locale0);
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zh-CN", string1);
      
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      Long long0 = Long.valueOf(1669L);
      assertNotNull(long0);
      assertEquals(1669L, (long)long0);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Stack<Object> stack0 = new Stack<Object>();
      assertFalse(stack0.contains(1669L));
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, 768.379228);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      Integer integer1 = JLayeredPane.DEFAULT_LAYER;
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertFalse(arrayList1.contains(integer1));
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      Integer integer2 = JLayeredPane.DRAG_LAYER;
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(400, (int)integer2);
      
      boolean boolean0 = arrayList1.add(integer2);
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(arrayList1.contains(integer1));
      assertTrue(arrayList1.contains(integer2));
      assertNotSame(arrayList1, arrayList0);
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertTrue(boolean0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("xo5Y<6%Z8{]]H");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2154, 2154, timeZone0);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(2153, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      
      boolean boolean1 = arrayList1.remove((Object) arrayList0);
      assertFalse(arrayList0.equals((Object)arrayList1));
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertFalse(boolean1 == boolean0);
      assertFalse(arrayList0.contains(2154));
      assertFalse(arrayList1.contains(2154));
      assertTrue(arrayList1.contains(integer2));
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(arrayList1, arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertFalse(boolean1);
      
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 2;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 3319.6337702064;
      doubleArray2[1] = (double) 2154;
      doubleArray2[2] = (double) 1;
      doubleArray2[3] = (double) 1;
      doubleArray2[4] = (double) 2154;
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = (double) (byte)5;
      doubleArray2[7] = (double) 2154;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) (byte)5;
      doubleArray3[1] = (double) 0;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.xy.IntervalXYDelegate", "xo5Y<6%Z8{]]H", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds(categoryDataset0, (List) arrayList1, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      double[][] doubleArray0 = new double[9][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("d^`D2VBma", "d^`D2VBma", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(9, doubleArray0.length);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Long long0 = new Long(5582L);
      assertNotNull(long0);
      assertEquals(5582L, (long)long0);
      
      List list0 = ((DefaultCategoryDataset) categoryDataset0).getRowKeys();
      assertNotNull(list0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, list0.size());
      assertFalse(list0.isEmpty());
      
      Long long1 = new Long(0L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      boolean boolean0 = linkedList0.add(long1);
      assertFalse(long1.equals((Object)long0));
      assertTrue(linkedList0.contains(long1));
      assertFalse(linkedList0.contains(long0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, list0, true);
      assertNotNull(range0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Duplicate items in 'rowKeys'.", "Duplicate items in 'rowKeys'.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("Duplicate items in 'rowKeys'.", "Duplicate items in 'rowKeys'.", doubleArray0);
      assertTrue(categoryDataset1.equals((Object)categoryDataset0));
      assertNotNull(categoryDataset1);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Long long0 = new Long(5582L);
      assertNotNull(long0);
      assertEquals(5582L, (long)long0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset1));
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getRowKeys();
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset1));
      assertNotNull(list0);
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertNotSame(defaultCategoryDataset0, categoryDataset1);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      defaultCategoryDataset0.setValue((-1.0), (Comparable) long0, (Comparable) long0);
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset1));
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertNotSame(defaultCategoryDataset0, categoryDataset1);
      
      Long long1 = new Long(5582L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(5582L, (long)long1);
      
      boolean boolean0 = linkedList0.add(long1);
      assertTrue(long1.equals((Object)long0));
      assertTrue(linkedList0.contains(long1));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, list0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte) (-54));
      assertNotNull(byte0);
      assertEquals((byte) (-54), (byte)byte0);
      
      boolean boolean0 = linkedList0.offerFirst(byte0);
      assertTrue(linkedList0.contains(byte0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      XYSeries xYSeries0 = new XYSeries(byte0, true, true);
      assertNotNull(xYSeries0);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, true);
      assertTrue(linkedList0.contains(byte0));
      assertNull(range0);
      assertEquals(1, linkedList0.size());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Number[][] numberArray0 = new Number[2][5];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[5];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) byte0;
      numberArray2[1] = (Number) byte0;
      numberArray2[2] = (Number) byte0;
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      numberArray2[3] = (Number) integer0;
      numberArray2[4] = (Number) byte0;
      numberArray0[1] = numberArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, numberArray0.length);
      
      Range range1 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertNotNull(range1);
      assertEquals(2, numberArray0.length);
      assertEquals(54.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals((-54.0), range1.getLowerBound(), 0.01);
      assertEquals((-27.0), range1.getCentralValue(), 0.01);
      
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      TimeSeries timeSeries0 = new TimeSeries(byte0);
      assertNotNull(timeSeries0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds(categoryDataset0, (List) linkedList0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("", (OHLCDataItem[]) null);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      int int0 = defaultOHLCDataset0.indexOf("");
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, int0);
      
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Number[][] numberArray0 = new Number[5][9];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = (Number) integer0;
      numberArray1[1] = (Number) integer0;
      numberArray1[2] = (Number) integer0;
      numberArray1[3] = (Number) integer0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[6];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) integer0;
      numberArray2[1] = (Number) integer0;
      numberArray2[2] = (Number) integer0;
      numberArray1[0] = (Number) integer0;
      numberArray2[4] = (Number) integer0;
      numberArray2[5] = (Number) integer0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[0];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[1];
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray2));
      
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[1];
      assertFalse(numberArray5.equals((Object)numberArray3));
      assertFalse(numberArray5.equals((Object)numberArray1));
      assertFalse(numberArray5.equals((Object)numberArray2));
      assertFalse(numberArray5.equals((Object)numberArray4));
      
      numberArray5[0] = (Number) integer0;
      numberArray0[4] = numberArray5;
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, 0);
      assertNotNull(pieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, (Comparable) week0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("", "", "#^sx4xU_ = v z");
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("#^sx4xU_ = v z", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("#^sx4xU_ = v z", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, false);
      assertNull(range0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("#^sx4xU_ = v z", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, false);
      assertNull(range1);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("#^sx4xU_ = v z", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      MatrixSeries matrixSeries0 = new MatrixSeries("M<)*P1k/J;", 46, 46);
      assertNotNull(matrixSeries0);
      assertEquals(46, matrixSeries0.getRowCount());
      assertEquals(46, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2116, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(46, matrixSeries0.getRowCount());
      assertEquals(46, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2116, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(46, matrixSeries0.getRowCount());
      assertEquals(46, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2116, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("apgtax.BETh:O&");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, Double.NEGATIVE_INFINITY);
      assertNotNull(range0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
      
      LinkedList<XYIntervalSeriesCollection> linkedList0 = new LinkedList<XYIntervalSeriesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TimeTableXYDataset timeTableXYDataset1 = new TimeTableXYDataset();
      assertTrue(timeTableXYDataset1.equals((Object)timeTableXYDataset0));
      assertNotNull(timeTableXYDataset1);
      assertFalse(timeTableXYDataset1.getDomainIsPointsInTime());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(timeTableXYDataset0);
      assertTrue(timeTableXYDataset0.equals((Object)timeTableXYDataset1));
      assertNotNull(number0);
      assertNotSame(timeTableXYDataset0, timeTableXYDataset1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(Double.NaN, number0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      TimeSeries timeSeries0 = new TimeSeries(second0);
      assertNotNull(timeSeries0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertTrue(boolean0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      assertNotNull(number0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (double) (byte) (-54);
      doubleArray1[2] = (double) (byte) (-54);
      doubleArray1[3] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-1995);
      doubleArray2[1] = (double) (-1995);
      doubleArray2[3] = 1.0;
      doubleArray2[5] = (double) (byte) (-54);
      doubleArray2[5] = (double) (-1995);
      doubleArray2[6] = (double) (-1995);
      doubleArray2[7] = 1.0;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(";?", "\"f1$D&OD|to^", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      
      TimeSeries timeSeries0 = new TimeSeries(1.0);
      assertNotNull(timeSeries0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0);
      assertNull(range0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range1);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals((-2049.0), range1.getLowerBound(), 0.01);
      assertEquals(2051.0, range1.getLength(), 0.01);
      assertEquals((-1023.5), range1.getCentralValue(), 0.01);
      assertEquals(2.0, range1.getUpperBound(), 0.01);
      
      Range range2 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertFalse(range2.equals((Object)range1));
      assertNotNull(range2);
      assertNotSame(range2, range1);
      assertEquals(2, doubleArray0.length);
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(1996.0, range2.getLength(), 0.01);
      assertEquals((-1995.0), range2.getLowerBound(), 0.01);
      assertEquals((-997.0), range2.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("org.jfree.data.category.SlidingCategoryDataset", "org.jfree.data.category.SlidingCategoryDataset", doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      defaultCategoryDataset0.setValue(Double.POSITIVE_INFINITY, (Comparable) "org.jfree.data.category.SlidingCategoryDataset", (Comparable) "org.jfree.data.category.SlidingCategoryDataset");
      assertEquals(3, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap1 = new KeyToGroupMap("org.jfree.data.category.SlidingCategoryDataset");
      assertFalse(keyToGroupMap1.equals((Object)keyToGroupMap0));
      assertNotNull(keyToGroupMap1);
      assertEquals(1, keyToGroupMap1.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap1);
      assertFalse(keyToGroupMap1.equals((Object)keyToGroupMap0));
      assertNotNull(range0);
      assertNotSame(keyToGroupMap1, keyToGroupMap0);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, keyToGroupMap1.getGroupCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 2.0;
      doubleArray1[1] = (-1213.74);
      doubleArray1[2] = (-1213.74);
      doubleArray1[3] = (-1213.74);
      doubleArray1[4] = Double.NEGATIVE_INFINITY;
      doubleArray1[5] = Double.NEGATIVE_INFINITY;
      doubleArray1[6] = Double.NEGATIVE_INFINITY;
      doubleArray1[7] = (-1383.1867);
      doubleArray1[8] = (-1213.74);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("W*A4Hb", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Long long0 = new Long(5582L);
      assertNotNull(long0);
      assertEquals(5582L, (long)long0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getRowKeys();
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertNotNull(list0);
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Long long1 = new Long(5582L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(5582L, (long)long1);
      
      Long long2 = new Long(1L);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(1L, (long)long2);
      
      boolean boolean0 = linkedList0.add(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertFalse(linkedList0.contains(5582L));
      assertTrue(linkedList0.contains(long2));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList0, true);
      assertFalse(linkedList0.contains(5582L));
      assertTrue(linkedList0.contains(long2));
      assertNull(range0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("apgtax.BETh:O&");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, (-13));
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, double0, 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, Double.NEGATIVE_INFINITY);
      assertNotNull(range0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      
      LinkedList<XYIntervalSeriesCollection> linkedList0 = new LinkedList<XYIntervalSeriesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) linkedList0, range0, false);
      assertNull(range1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, false);
      assertNull(range0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("N1~4(");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultKeyedValues2DDataset0, tableOrder0, (-2294));
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-2294), categoryToPieDataset0.getExtractIndex());
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "N1~4(", 1.0, (-2294));
      assertNotNull(pieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-2294), categoryToPieDataset0.getExtractIndex());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultTableXYDataset0);
      assertNull(number0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = defaultTableXYDataset0.getDomainBounds(true);
      assertNull(range0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      Locale locale1 = Locale.forLanguageTag("7)Za>3Yae&V0O!F8");
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
      assertNotNull(range2);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertFalse(arrayList0.contains(defaultMultiValueCategoryDataset0));
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultTableXYDataset0, (List) arrayList0, range2, true);
      assertFalse(arrayList0.contains(defaultMultiValueCategoryDataset0));
      assertNull(range3);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      double double0 = xYTaskDataset0.getStartXValue((-648), 0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals((-648.4), double0, 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) xYTaskDataset0, (List) arrayList0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte)5);
      assertNotNull(byte0);
      assertEquals((byte)5, (byte)byte0);
      
      boolean boolean0 = linkedList0.offerFirst(byte0);
      assertTrue(linkedList0.contains((byte)5));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      XYSeries xYSeries0 = new XYSeries(byte0, true, true);
      assertNotNull(xYSeries0);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = BigInteger.valueOf(1L);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      TableXYDataset tableXYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      Range range0 = jDBCXYDataset0.getRangeBounds(false);
      assertNotNull(range0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, false);
      assertNull(range1);
      
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      TimeSeries timeSeries0 = new TimeSeries(second0);
      assertNotNull(timeSeries0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(jDBCXYDataset0);
      assertNull(number0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, false);
      assertTrue(range2.equals((Object)range0));
      assertNotNull(range2);
      assertNotSame(range2, range0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      assertNotNull(thaiBuddhistDate0);
      
      boolean boolean0 = arrayList0.add((ChronoLocalDate) thaiBuddhistDate0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-10.0), (-10.0));
      assertNotNull(lineFunction2D0);
      assertEquals((-10.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-10.0), lineFunction2D0.getIntercept(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, (-10.0), 1.0040875747127036, 270, thaiBuddhistDate0);
      assertNotNull(xYSeriesCollection0);
      assertEquals((-10.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-10.0), lineFunction2D0.getIntercept(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
      assertFalse(boolean1 == boolean0);
      assertEquals((-10.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-10.0), lineFunction2D0.getIntercept(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(boolean1);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) arrayList0, true);
      assertNotNull(range0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-10.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-10.0), lineFunction2D0.getIntercept(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals((-4.497956212643648), range0.getCentralValue(), 0.01);
      assertEquals(12.004087574712704, range0.getLength(), 0.01);
      assertEquals((-10.5), range0.getLowerBound(), 0.01);
      assertEquals(1.5040875747127043, range0.getUpperBound(), 0.01);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, 270);
      assertNotNull(defaultPieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) thaiBuddhistDate0, 0.5);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertNotNull(defaultPieDataset1);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset1);
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Byte byte0 = new Byte((byte)34);
      assertNotNull(byte0);
      assertEquals((byte)34, (byte)byte0);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertFalse(linkedList0.contains((byte)34));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.offerFirst(byte0);
      assertTrue(linkedList0.contains((byte)34));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-394.0775817), (-394.0775817));
      assertNotNull(lineFunction2D0);
      assertEquals((-394.0775817), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-394.0775817), lineFunction2D0.getIntercept(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, (-26.596532190408013), Double.POSITIVE_INFINITY, (byte)34, byte0);
      assertNotNull(xYSeriesCollection0);
      assertEquals((-394.0775817), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-394.0775817), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, true);
      assertTrue(linkedList0.contains(byte0));
      assertNull(range0);
      assertEquals(1, linkedList0.size());
      assertEquals((-394.0775817), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-394.0775817), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1284, 4396, timeZone0);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(4395, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertFalse(arrayList0.contains(4396));
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.remove((Object) dynamicTimeSeriesCollection0);
      assertFalse(arrayList0.contains(4396));
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(4395, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertFalse(boolean0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, (-4427), 2);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(2, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-4427), slidingCategoryDataset0.getFirstCategoryIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0, (List) arrayList0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultTableXYDataset0);
      assertNull(number0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      double[][] doubleArray0 = new double[1][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("G-B]7=K-o|", "org.jfree.data.xy.DefaultXYDataset", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 2, 2);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2, slidingCategoryDataset0.getMaximumCategoryCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 2);
      assertNotNull(pieDataset0);
      assertEquals(1, doubleArray0.length);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset((Comparable) "org.jfree.data.xy.DefaultXYDataset", (KeyedValues) pieDataset0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotNull(categoryDataset1);
      assertNotSame(categoryDataset0, categoryDataset1);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(Double.NEGATIVE_INFINITY, 2);
      assertNotNull(powerFunction2D0);
      assertEquals(2.0, powerFunction2D0.getB(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, powerFunction2D0.getA(), 0.01);
      
      Double double0 = new Double(2);
      assertNotNull(double0);
      assertEquals(2.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultTableXYDataset0);
      assertNull(number0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = defaultTableXYDataset0.getDomainBounds(true);
      assertNull(range0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      
      Locale locale1 = Locale.forLanguageTag("7)Za>3Yae&V0O!F8");
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      
      String string0 = locale0.getDisplayLanguage(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(string0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("Japanese", string0);
      
      Vector<TimeSeriesCollection> vector0 = new Vector<TimeSeriesCollection>(174, 174);
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(174, vector0.capacity());
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) vector0, true);
      assertNull(range1);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(174, vector0.capacity());
      
      XYSeries xYSeries0 = new XYSeries("7)Za>3Yae&V0O!F8", true, false);
      assertNotNull(xYSeries0);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0);
      assertNull(range2);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((XYDataset) xYTaskDataset0, true);
      assertNull(range3);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double double0 = DatasetUtilities.calculateStackTotal(jDBCXYDataset0, (-13));
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0.0, double0, 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0, 0.0);
      assertNotNull(range0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(fixedMillisecond0, (Number) null);
      assertNotNull(timeSeriesDataItem0);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertFalse(timeSeriesDataItem0.isSelected());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (Comparable) timeSeriesDataItem0);
      assertNotNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertFalse(timeSeriesDataItem0.isSelected());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(timeSeriesDataItem0);
      assertNotNull(keyToGroupMap0);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertFalse(timeSeriesDataItem0.isSelected());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, keyToGroupMap0);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertFalse(timeSeriesDataItem0.isSelected());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      TimeZone timeZone0 = TimeZone.getTimeZone("apgtax.BETh:O&");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "apgtax.BETh:O&", 1.0, 1);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertFalse(timeSeriesDataItem0.isSelected());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, (List) null, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultTableXYDataset0);
      assertNull(number0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      assertNotNull(thaiBuddhistDate0);
      
      boolean boolean0 = arrayList0.add((ChronoLocalDate) thaiBuddhistDate0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      assertNotNull(arrayList1);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      TimeZone timeZone0 = TimeZone.getTimeZone("Null 'f' argument.");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2160, 2160, timeZone0);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(2159, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(thaiBuddhistDate0);
      assertNotNull(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) dynamicTimeSeriesCollection0);
      assertNotNull(number1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(2159, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(Double.NaN, number1);
      
      Number number2 = DatasetUtilities.findMinimumRangeValue((XYDataset) timePeriodValuesCollection0);
      assertNull(number2);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("org.jfree.data.category.SlidingCategoryDataset");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertNotNull(number0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(Double.NaN, number0);
      
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(12);
      assertNotNull(spreadsheetDate0);
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(11, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(5, spreadsheetDate0.getDayOfWeek());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(12, spreadsheetDate0.toSerial());
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0);
      assertNotNull(timeSeries0);
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(11, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(5, spreadsheetDate0.getDayOfWeek());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(12, spreadsheetDate0.toSerial());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      
      TimeSeries timeSeries1 = new TimeSeries("org.jfree.data.category.SlidingCategoryDataset");
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertNotNull(timeSeries1);
      assertNull(timeSeries1.getDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertTrue(timeSeries1.getNotify());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries1);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertNotNull(timeSeriesCollection0);
      assertNull(timeSeries1.getDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertTrue(timeSeries1.getNotify());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      KeyListener keyListener0 = AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      assertNull(keyListener0);
      
      KeyListener keyListener1 = AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      assertNull(keyListener1);
      
      UndoManager undoManager0 = new UndoManager();
      assertNotNull(undoManager0);
      
      boolean boolean0 = timeSeriesCollection0.hasListener((EventListener) null);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertNotSame(timeSeries1, timeSeries0);
      assertNull(timeSeries1.getDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertTrue(timeSeries1.getNotify());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertFalse(boolean0);
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYIntervalSeriesCollection0, false);
      assertNull(range0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      
      byte byte0 = (byte)40;
      Byte byte1 = new Byte((byte)40);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)40, (byte)byte1);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertFalse(linkedList0.contains(byte1));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      byte byte2 = (byte)0;
      Byte byte3 = new Byte((byte)0);
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      assertEquals((byte)0, (byte)byte3);
      
      boolean boolean0 = linkedList0.offerFirst(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(linkedList0.contains(byte1));
      assertTrue(linkedList0.contains((byte)0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      XYSeries xYSeries0 = new XYSeries(byte1, false, true);
      assertFalse(byte1.equals((Object)byte3));
      assertFalse(byte1.equals((Object)byte2));
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(xYSeries0);
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      
      xYSeries0.add((Number) byte1, (Number) byte3, true);
      assertFalse(byte1.equals((Object)byte3));
      assertFalse(byte1.equals((Object)byte2));
      assertTrue(byte1.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(40.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(40.0, xYSeries0.getMinX(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      xYSeries0.add((Number) bigInteger0, (Number) byte3);
      assertFalse(byte1.equals((Object)byte3));
      assertFalse(byte1.equals((Object)byte2));
      assertTrue(byte1.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(40.0, xYSeries0.getMaxX(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertFalse(byte1.equals((Object)byte3));
      assertFalse(byte1.equals((Object)byte2));
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(xYSeriesCollection0);
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(40.0, xYSeries0.getMaxX(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, (List) linkedList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.DefaultTableXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 539.9161478869194;
      doubleArray1[1] = (-570.6278147749);
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = (-1.0);
      doubleArray0[1] = doubleArray1;
      TimeSeries timeSeries0 = new TimeSeries((-570.6278147749));
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      KeyListener keyListener0 = mock(KeyListener.class, new ViolatedAssumptionAnswer());
      KeyListener keyListener1 = AWTEventMulticaster.remove(keyListener0, keyListener0);
      assertNull(keyListener1);
      
      KeyListener keyListener2 = AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      assertNull(keyListener2);
      
      boolean boolean0 = timeSeriesCollection0.hasListener((EventListener) null);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertFalse(boolean0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, false);
      assertNull(range0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) vector0, false);
      assertNull(range1);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Range range2 = DatasetUtilities.iterateXYRangeBounds(timeSeriesCollection0);
      assertNull(range2);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultTableXYDataset0);
      assertNull(number0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1.0;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(", but the TimeSeries is expecting an instance of ", "?KAW_):v,", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNotNull(number1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, number1);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.5, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultTableXYDataset0);
      assertNull(number0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      Double double0 = (Double)DatasetUtilities.findMaximumDomainValue(defaultTableXYDataset0);
      assertNotNull(double0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      
      Locale locale1 = Locale.forLanguageTag("7)Za>3KYae&V0O!F8");
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      
      String string0 = locale0.getDisplayLanguage(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(string0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("Japanese", string0);
      
      String string1 = locale1.toLanguageTag();
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("und", string1);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
      assertNotNull(range2);
      assertSame(range2, range0);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, (Comparable) double0);
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, (Comparable) double0);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertNotNull(defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset1);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Unknown data");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 13.0;
      doubleArray1[3] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-75.0102850846);
      doubleArray3[1] = 13.0;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", (String) null, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(3, doubleArray0.length);
      assertEquals((-75.0102850846), number0);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(3, doubleArray0.length);
      assertEquals((-75.0102850846), range0.getLowerBound(), 0.01);
      assertEquals(88.0102850846, range0.getLength(), 0.01);
      assertEquals(13.0, range0.getUpperBound(), 0.01);
      assertEquals((-31.0051425423), range0.getCentralValue(), 0.01);
      
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      JDBCXYDataset jDBCXYDataset1 = null;
      try {
        jDBCXYDataset1 = new JDBCXYDataset((Connection) null, "Unknown data");
        fail("Expecting exception: SQLException");
      
      } catch(Throwable e) {
         //
         // There is no database to execute the query.
         //
         verifyException("org.jfree.data.jdbc.JDBCXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Vector<Double> vector0 = new Vector<Double>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(histogramDataset0, vector0, false);
      assertNull(range0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      boolean boolean0 = linkedList1.offerFirst((Byte) null);
      assertEquals(1, linkedList1.size());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) histogramDataset0, (List) linkedList1, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      String string0 = "9rN-nx";
      Comparable<JDBCXYDataset>[] comparableArray0 = (Comparable<JDBCXYDataset>[]) Array.newInstance(Comparable.class, 0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      TimeSeries timeSeries0 = new TimeSeries(second0);
      assertNotNull(timeSeries0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      double[][] doubleArray0 = new double[3][1];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 59;
      doubleArray1[1] = (double) 59;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 59;
      doubleArray1[4] = (-1.0);
      doubleArray1[5] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = (double) 59;
      doubleArray2[2] = (double) 59;
      doubleArray2[3] = (double) 59;
      doubleArray2[4] = (double) 59;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 59;
      doubleArray3[1] = (-1.0);
      doubleArray3[2] = (double) 59;
      doubleArray3[3] = (-1.0);
      doubleArray3[4] = (double) 0;
      doubleArray0[2] = doubleArray3;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) null, (Comparable[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 539.9161478869194;
      doubleArray1[1] = 591.0;
      doubleArray1[2] = 5115.901;
      doubleArray1[3] = (-857.26948360919);
      doubleArray1[4] = (-2.147483648E9);
      doubleArray1[5] = (-1.0);
      doubleArray1[6] = 611.9;
      doubleArray1[7] = (-1462.6694958);
      doubleArray1[8] = (-570.6278147749);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 539.9161478869194;
      doubleArray2[1] = (-570.6278147749);
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = (-1.0);
      doubleArray0[1] = doubleArray2;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) null, (Comparable[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      double[][] doubleArray0 = new double[0][3];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(")q", ")q", doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(0, doubleArray0.length);
      
      defaultCategoryDataset0.validateObject();
      assertEquals(0, doubleArray0.length);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Long long0 = new Long(5582L);
      assertNotNull(long0);
      assertEquals(5582L, (long)long0);
      
      boolean boolean0 = linkedList0.add(long0);
      assertTrue(linkedList0.contains(long0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) linkedList0, true);
      assertTrue(linkedList0.contains(long0));
      assertNull(range0);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, linkedList0.size());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(1220.64778175, 63.4595636904601);
      assertNotNull(lineFunction2D0);
      assertEquals(1220.64778175, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(63.4595636904601, lineFunction2D0.getSlope(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-1563.5), 63.4595636904601, 181, ")q");
      assertNotNull(xYSeries0);
      assertEquals(1220.64778175, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(63.4595636904601, lineFunction2D0.getSlope(), 0.01);
      assertEquals(5247.76400553356, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(63.45956369046007, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals((-1563.5), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-97998.38004828437), xYSeries0.getMinY(), 0.01);
      assertEquals(181, xYSeries0.getItemCount());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      assertNull(range1);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(fixedMillisecond0, (Number) null);
      assertNotNull(timeSeriesDataItem0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertFalse(timeSeriesDataItem0.isSelected());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (Comparable) timeSeriesDataItem0);
      assertNotNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertFalse(timeSeriesDataItem0.isSelected());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(timeSeriesDataItem0);
      assertNotNull(keyToGroupMap0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertFalse(timeSeriesDataItem0.isSelected());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      int int0 = keyToGroupMap0.getGroupIndex(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertFalse(timeSeriesDataItem0.isSelected());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals((-1), int0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, keyToGroupMap0);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertFalse(timeSeriesDataItem0.isSelected());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      TimeZone timeZone0 = TimeZone.getTimeZone("apgtax.BETh:O&");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "apgtax.BETh:O&", 1.0, 1);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertFalse(timeSeriesDataItem0.isSelected());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null, (double) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 539.9161478869194;
      doubleArray1[1] = (-570.6278147749);
      doubleArray1[2] = (-1.0);
      doubleArray1[0] = (-1.0);
      doubleArray0[1] = doubleArray1;
      TimeSeries timeSeries0 = new TimeSeries((-570.6278147749));
      assertNotNull(timeSeries0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, false);
      assertNull(range0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) vector0, false);
      assertNull(range1);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      Range range2 = DatasetUtilities.iterateXYRangeBounds(timeSeriesCollection0);
      assertNull(range2);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("");
      assertNotNull(timeSeries0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(categoryTableXYDataset0);
      assertNotNull(number0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(Double.NaN, number0);
      
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-1145.24);
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray1[2] = 2.0;
      doubleArray1[3] = Double.POSITIVE_INFINITY;
      doubleArray1[4] = 0.8;
      doubleArray1[5] = (-1.7976931348623157E308);
      doubleArray1[6] = (-2581.0186424731064);
      doubleArray1[7] = (-1736.147936446805);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.8;
      doubleArray2[1] = Double.POSITIVE_INFINITY;
      doubleArray2[2] = 2.0;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      KeyToGroupMap keyToGroupMap1 = new KeyToGroupMap();
      assertTrue(keyToGroupMap1.equals((Object)keyToGroupMap0));
      assertNotNull(keyToGroupMap1);
      assertEquals(1, keyToGroupMap1.getGroupCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) histogramDataset0);
      assertNull(number0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMaximumDomainValue(histogramDataset0);
      assertNull(number1);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = (-3482.362387084296);
      doubleArray1[2] = (-3319.08679304586);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[1] = Double.NaN;
      doubleArray2[2] = (-3482.362387084296);
      doubleArray2[3] = (-3482.362387084296);
      doubleArray2[4] = Double.NaN;
      doubleArray2[5] = (-3319.08679304586);
      doubleArray2[6] = Double.NaN;
      doubleArray2[7] = Double.NaN;
      doubleArray2[8] = (-844.0);
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap((-3482.362387084296));
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-6801.449180130156), range0.getLowerBound(), 0.01);
      assertEquals((-3400.724590065078), range0.getCentralValue(), 0.01);
      assertEquals(6801.449180130156, range0.getLength(), 0.01);
      
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) histogramDataset0, (List) stack0, range0, false);
      assertNull(range1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-6801.449180130156), range0.getLowerBound(), 0.01);
      assertEquals((-3400.724590065078), range0.getCentralValue(), 0.01);
      assertEquals(6801.449180130156, range0.getLength(), 0.01);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) vectorSeriesCollection0);
      assertNull(number0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMaximumDomainValue(vectorSeriesCollection0);
      assertNull(number1);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 3392.9545;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(3392.9545);
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(3392.9545, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1696.47725, range0.getCentralValue(), 0.01);
      assertEquals(3392.9545, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.0;
      doubleArray2[1] = (-1213.74);
      doubleArray2[2] = Double.NEGATIVE_INFINITY;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = 1.0;
      doubleArray2[5] = 1.0;
      doubleArray2[6] = 1.0;
      doubleArray2[7] = 1.0;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of row keys does not match the number of rows in the data array.", "w/wvlU", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Long long0 = new Long(5582L);
      assertNotNull(long0);
      assertEquals(5582L, (long)long0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getRowKeys();
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertNotNull(list0);
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Long long1 = new Long(5582L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(5582L, (long)long1);
      
      boolean boolean0 = linkedList0.add(long1);
      assertTrue(long1.equals((Object)long0));
      assertTrue(linkedList0.contains(long0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) linkedList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      double[][] doubleArray0 = new double[19][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(19, doubleArray0.length);
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultTableXYDataset0, true);
      assertNotNull(intervalXYDelegate0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      
      defaultIntervalCategoryDataset0.addChangeListener(intervalXYDelegate0);
      assertEquals(19, doubleArray0.length);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(19, doubleArray0.length);
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, number0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(19, doubleArray0.length);
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 266, 266);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(19, doubleArray0.length);
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(266, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(266, slidingCategoryDataset0.getFirstCategoryIndex());
      
      List list0 = slidingCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(19, doubleArray0.length);
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(266, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(266, slidingCategoryDataset0.getFirstCategoryIndex());
      assertFalse(list0.isEmpty());
      assertEquals(19, list0.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, true);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals(19, doubleArray0.length);
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(266, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(266, slidingCategoryDataset0.getFirstCategoryIndex());
      assertFalse(list0.isEmpty());
      assertEquals(19, list0.size());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      
      Number number1 = DatasetUtilities.findMaximumDomainValue(defaultTableXYDataset0);
      assertFalse(number1.equals((Object)number0));
      assertNotNull(number1);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(Double.NaN, number1);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0, true);
      assertNull(range2);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultIntervalXYDataset0, false);
      assertNull(range0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultTableXYDataset0);
      assertNull(number0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      double[][] doubleArray0 = new double[15][7];
      Number number1 = DatasetUtilities.findMaximumDomainValue(defaultTableXYDataset0);
      assertNotNull(number1);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(Double.NaN, number1);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(15, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(15, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(15, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      
      Number number2 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultTableXYDataset0);
      assertNull(number2);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, true);
      assertNull(range0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Unknown data");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, (-1));
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, double0, 0.01);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      timeTableXYDataset0.removeChangeListener(xYTaskDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      String string0 = locale0.toLanguageTag();
      assertNotNull(string0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", string0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      assertNull(range1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertFalse(arrayList0.contains(defaultMultiValueCategoryDataset0));
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, (Comparable) "it");
      assertNotNull(pieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYTaskDataset0, (List) arrayList0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      assertNotNull(date0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      MockSimpleDateFormat mockSimpleDateFormat1 = new MockSimpleDateFormat("");
      assertFalse(mockSimpleDateFormat1.equals((Object)mockSimpleDateFormat0));
      assertNotNull(mockSimpleDateFormat1);
      
      TimeZone timeZone0 = mockSimpleDateFormat1.getTimeZone();
      assertFalse(mockSimpleDateFormat1.equals((Object)mockSimpleDateFormat0));
      assertNotNull(timeZone0);
      assertNotSame(mockSimpleDateFormat1, mockSimpleDateFormat0);
      assertTrue(mockSimpleDateFormat1.isLenient());
      assertEquals("", mockSimpleDateFormat1.toPattern());
      assertEquals("", mockSimpleDateFormat1.toLocalizedPattern());
      assertEquals("GMT", timeZone0.getID());
      
      Second second0 = new Second(date0, timeZone0);
      assertFalse(mockSimpleDateFormat0.equals((Object)mockSimpleDateFormat1));
      assertFalse(mockSimpleDateFormat1.equals((Object)mockSimpleDateFormat0));
      assertNotNull(second0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertTrue(mockSimpleDateFormat1.isLenient());
      assertEquals("", mockSimpleDateFormat1.toPattern());
      assertEquals("", mockSimpleDateFormat1.toLocalizedPattern());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(second0);
      assertFalse(mockSimpleDateFormat0.equals((Object)mockSimpleDateFormat1));
      assertFalse(mockSimpleDateFormat1.equals((Object)mockSimpleDateFormat0));
      assertNotNull(keyToGroupMap0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertTrue(mockSimpleDateFormat1.isLenient());
      assertEquals("", mockSimpleDateFormat1.toPattern());
      assertEquals("", mockSimpleDateFormat1.toLocalizedPattern());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, keyToGroupMap0);
      assertFalse(mockSimpleDateFormat0.equals((Object)mockSimpleDateFormat1));
      assertFalse(mockSimpleDateFormat1.equals((Object)mockSimpleDateFormat0));
      assertNull(range0);
      assertNotSame(mockSimpleDateFormat0, mockSimpleDateFormat1);
      assertNotSame(mockSimpleDateFormat1, mockSimpleDateFormat0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertTrue(mockSimpleDateFormat1.isLenient());
      assertEquals("", mockSimpleDateFormat1.toPattern());
      assertEquals("", mockSimpleDateFormat1.toLocalizedPattern());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      TimeZone timeZone1 = TimeZone.getTimeZone("apgtax.BETh:O&");
      assertTrue(timeZone1.equals((Object)timeZone0));
      assertNotNull(timeZone1);
      assertNotSame(timeZone1, timeZone0);
      assertEquals("GMT", timeZone1.getID());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) "", 928.689652718);
      assertNotNull(pieDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "Mu", 1.0, 6511);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      SynthTreeUI synthTreeUI0 = new SynthTreeUI();
      assertNotNull(synthTreeUI0);
      
      BasicTreeUI.TreeModelHandler basicTreeUI_TreeModelHandler0 = synthTreeUI0.new TreeModelHandler();
      assertNotNull(basicTreeUI_TreeModelHandler0);
      
      boolean boolean0 = xYSeriesCollection0.hasListener(basicTreeUI_TreeModelHandler0);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(boolean0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1100.149284137793, 1100.149284137793);
      assertNotNull(powerFunction2D0);
      assertEquals(1100.149284137793, powerFunction2D0.getA(), 0.01);
      assertEquals(1100.149284137793, powerFunction2D0.getB(), 0.01);
      
      Double double0 = new Double(1100.149284137793);
      assertNotNull(double0);
      assertEquals(1100.149284137793, (double)double0, 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Object object0 = defaultStatisticalCategoryDataset0.clone();
      assertTrue(object0.equals((Object)defaultStatisticalCategoryDataset0));
      assertNotNull(object0);
      assertNotSame(defaultStatisticalCategoryDataset0, object0);
      assertNotSame(object0, defaultStatisticalCategoryDataset0);
      
      ArrayList<TimeTableXYDataset> arrayList0 = new ArrayList<TimeTableXYDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)object0));
      assertFalse(number0.equals((Object)double0));
      assertNotNull(number0);
      assertNotSame(defaultStatisticalCategoryDataset0, object0);
      assertEquals(Double.NaN, number0);
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(xYSeriesCollection0);
      assertTrue(number1.equals((Object)number0));
      assertFalse(number1.equals((Object)double0));
      assertNotNull(number1);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(Double.NaN, number1);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      double[][] doubleArray0 = new double[5][6];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2547.6);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2547.6);
      doubleArray2[1] = (-2547.6);
      doubleArray2[2] = (-2547.6);
      doubleArray2[3] = (-2547.6);
      doubleArray2[4] = (-2547.6);
      doubleArray2[5] = 2451.9;
      doubleArray2[6] = (-2547.6);
      doubleArray2[7] = (-2547.6);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 2451.9;
      doubleArray3[1] = (-2547.6);
      doubleArray3[2] = (-2547.6);
      doubleArray3[3] = (-2547.6);
      doubleArray3[4] = 2451.9;
      doubleArray3[5] = (-2547.6);
      doubleArray3[6] = 2451.9;
      doubleArray3[7] = (-2547.6);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 2451.9;
      doubleArray4[1] = (-2547.6);
      doubleArray4[2] = 2451.9;
      doubleArray4[3] = (-2547.6);
      doubleArray4[4] = (-2547.6);
      doubleArray4[5] = (-2547.6);
      doubleArray4[6] = 2451.9;
      doubleArray4[7] = 2451.9;
      doubleArray4[8] = (-2547.6);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = 2451.9;
      doubleArray5[1] = (-2547.6);
      doubleArray0[4] = doubleArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("hnX&fKpOqOq'o", "hnX&fKpOqOq'o", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(5, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 1246.4423204592);
      assertNotNull(range0);
      assertEquals(5, doubleArray0.length);
      assertEquals(8602.1423204592, range0.getUpperBound(), 0.01);
      assertEquals((-8943.9576795408), range0.getLowerBound(), 0.01);
      assertEquals(17546.1, range0.getLength(), 0.01);
      assertEquals((-170.90767954080002), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = "Unknown data";
      TimeZone timeZone0 = TimeZone.getTimeZone("Unknown data");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, (-1));
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, double0, 0.01);
      
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries((Function2D) null, (-1), (-1293.32171421193), (-1), "Unknown data");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      Range range0 = jDBCXYDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range1 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      Locale locale1 = Locale.CANADA_FRENCH;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("fr_CA", locale1.toString());
      assertEquals("CA", locale1.getCountry());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      
      String string0 = locale0.getDisplayLanguage(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(string0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("CA", locale1.getCountry());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("japonais", string0);
      
      Range range2 = Range.expand(range0, Double.NEGATIVE_INFINITY, 539.9161478869194);
      assertTrue(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotNull(range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range2.getLength(), 0.01);
      assertEquals(Double.NaN, range2.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range2.getCentralValue(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, (List) null, range1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte)5);
      assertNotNull(byte0);
      assertEquals((byte)5, (byte)byte0);
      
      boolean boolean0 = linkedList0.offerFirst(byte0);
      assertTrue(linkedList0.contains(byte0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      XYSeries xYSeries0 = new XYSeries(byte0, true, true);
      assertNotNull(xYSeries0);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = BigInteger.valueOf(1L);
      assertNotNull(bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      
      xYSeries0.add((Number) bigInteger0, (Number) byte0);
      assertSame(bigInteger0, bigInteger1);
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      xYSeries0.setMaximumItemCount((byte)5);
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(5, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean1 = xYSeriesCollection0.hasListener(xIntervalSeriesCollection0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(5, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertFalse(boolean1);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, true);
      assertTrue(linkedList0.contains(byte0));
      assertNotNull(range0);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertEquals(5.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(5, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(5.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.5, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.5, range0.getUpperBound(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) null, range0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(fixedMillisecond0, (Number) null);
      assertNotNull(timeSeriesDataItem0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertFalse(timeSeriesDataItem0.isSelected());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (Comparable) timeSeriesDataItem0);
      assertNotNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertFalse(timeSeriesDataItem0.isSelected());
      
      TimeZone timeZone0 = TimeZone.getTimeZone("QxKWwz7Qq.");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Stack<TimeTableXYDataset> stack0 = new Stack<TimeTableXYDataset>();
      assertFalse(stack0.contains(timeTableXYDataset0));
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-2087.5834), (-2087.5834));
      assertNotNull(powerFunction2D0);
      assertEquals((-2087.5834), powerFunction2D0.getB(), 0.01);
      assertEquals((-2087.5834), powerFunction2D0.getA(), 0.01);
      
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo((SeriesChangeType) null, 13, 3005);
      assertNotNull(seriesChangeInfo0);
      assertEquals(13, seriesChangeInfo0.getIndex1());
      assertEquals(3005, seriesChangeInfo0.getIndex2());
      
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(timeZone0, seriesChangeInfo0);
      assertNotNull(seriesChangeEvent0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(13, seriesChangeInfo0.getIndex1());
      assertEquals(3005, seriesChangeInfo0.getIndex2());
      
      timeTableXYDataset0.seriesChanged(seriesChangeEvent0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(13, seriesChangeInfo0.getIndex1());
      assertEquals(3005, seriesChangeInfo0.getIndex2());
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, (-1462.6694958), (-10.0), 13, "QxKWwz7Qq.");
      assertNotNull(xYSeriesCollection0);
      assertEquals((-2087.5834), powerFunction2D0.getB(), 0.01);
      assertEquals((-2087.5834), powerFunction2D0.getA(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultTableXYDataset0);
      assertNull(number0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.0;
      doubleArray0[0] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("C=R=+P`HMu`2b0bu?X", "?KAW_):v,", doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = defaultCategoryDataset0.hasListener(defaultTableXYDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(boolean0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean1);
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertNotNull(double0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1.0, (double)double0, 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0);
      assertNull(range1);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, false);
      assertFalse(range2.equals((Object)range0));
      assertNotNull(range2);
      assertNotSame(range2, range0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1.0, range2.getCentralValue(), 0.01);
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(1.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultMultiValueCategoryDataset0, 5, 5);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(5, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(5, slidingCategoryDataset0.getMaximumCategoryCount());
      
      List list0 = slidingCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(5, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(5, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) slidingCategoryDataset0, true);
      assertNull(range0);
      assertEquals(5, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(5, slidingCategoryDataset0.getMaximumCategoryCount());
      
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      String string0 = "-m{-RP`x";
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "-m{-RP`x", "-m{-RP`x");
      assertNotNull(timeSeries0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("-m{-RP`x", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("-m{-RP`x", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null);
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) list0, true);
      assertNull(range1);
      assertEquals(5, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(5, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0);
      assertNull(range2);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset(connection0, "-m{-RP`x");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultTableXYDataset0);
      assertNull(number0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = defaultTableXYDataset0.getDomainBounds(true);
      assertNull(range0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      Locale locale1 = Locale.forLanguageTag("7)Za>3Yae&V0O!F8");
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      
      String string0 = locale0.getDisplayLanguage(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(string0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("Japanese", string0);
      
      Vector<TimeSeriesCollection> vector0 = new Vector<TimeSeriesCollection>(174, 174);
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(174, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) vector0, true);
      assertNull(range1);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(174, vector0.capacity());
      assertEquals(0, vector0.size());
      
      XYSeries xYSeries0 = new XYSeries("7)Za>3Yae&V0O!F8", true, false);
      assertNotNull(xYSeries0);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      
      // Undeclared exception!
      try { 
        xYSeries0.getY(174);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 174, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      double[][] doubleArray0 = new double[0][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, doubleArray0.length);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Long long0 = new Long(5582L);
      assertNotNull(long0);
      assertEquals(5582L, (long)long0);
      
      List list0 = ((DefaultCategoryDataset) categoryDataset0).getRowKeys();
      assertNotNull(list0);
      assertEquals(0, doubleArray0.length);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      boolean boolean0 = linkedList0.add(long0);
      assertTrue(linkedList0.contains(5582L));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) linkedList0, true);
      assertTrue(linkedList0.contains(5582L));
      assertNull(range0);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultTableXYDataset0);
      assertNull(number0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.0;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(", but the TimeSeries is expecting an instance of ", "?KAW_):v,", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNotNull(number1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1.0, number1);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultTableXYDataset0);
      assertNull(number0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      double[][] doubleArray1 = new double[5][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("RM>Z*P", "ZuB]}50qF2<L.8+\"K", doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(5, doubleArray1.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, (-1.7976931348623157E308));
      assertNotNull(range0);
      assertEquals(5, doubleArray1.length);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.7976931348623157E308), range0.getLowerBound(), 0.01);
      assertEquals((-1.7976931348623157E308), range0.getCentralValue(), 0.01);
      assertEquals((-1.7976931348623157E308), range0.getUpperBound(), 0.01);
      
      DefaultTableXYDataset defaultTableXYDataset1 = new DefaultTableXYDataset();
      assertTrue(defaultTableXYDataset1.equals((Object)defaultTableXYDataset0));
      assertNotNull(defaultTableXYDataset1);
      assertEquals(0.5, defaultTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset1.isAutoPrune());
      assertEquals(0, defaultTableXYDataset1.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset1.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset1.isAutoWidth());
      assertEquals(0, defaultTableXYDataset1.getItemCount());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset1, false);
      assertTrue(defaultTableXYDataset1.equals((Object)defaultTableXYDataset0));
      assertNull(range1);
      assertNotSame(defaultTableXYDataset1, defaultTableXYDataset0);
      assertEquals(0.5, defaultTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset1.isAutoPrune());
      assertEquals(0, defaultTableXYDataset1.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset1.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset1.isAutoWidth());
      assertEquals(0, defaultTableXYDataset1.getItemCount());
      
      Range range2 = DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      assertFalse(range2.equals((Object)range0));
      assertNotNull(range2);
      assertNotSame(range2, range0);
      assertEquals(5, doubleArray1.length);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Vector<Double> vector0 = new Vector<Double>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      Double double0 = new Double(1.5);
      assertNotNull(double0);
      assertEquals(1.5, (double)double0, 0.01);
      
      boolean boolean0 = vector0.add(double0);
      assertTrue(vector0.contains(1.5));
      assertFalse(vector0.isEmpty());
      assertEquals("[1.5]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(histogramDataset0, vector0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      TableXYDataset tableXYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal((TableXYDataset) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("", (OHLCDataItem[]) null);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      Number[][] numberArray0 = new Number[5][9];
      Number[] numberArray1 = new Number[4];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[6];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray0[1] = numberArray2;
      numberArray0[2] = numberArray1;
      DatasetGroup datasetGroup0 = new DatasetGroup("Wnfwv:zO<h% FE]TYCw");
      assertNotNull(datasetGroup0);
      assertEquals("Wnfwv:zO<h% FE]TYCw", datasetGroup0.getID());
      
      defaultOHLCDataset0.setGroup(datasetGroup0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Wnfwv:zO<h% FE]TYCw", datasetGroup0.getID());
      
      Number[] numberArray3 = new Number[0];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray0[3] = numberArray3;
      Stack<Long> stack0 = new Stack<Long>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Number[][] numberArray0 = new Number[0][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNull(number0);
      assertEquals(0, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 5, 5);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(0, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(5, slidingCategoryDataset0.getFirstCategoryIndex());
      
      List list0 = slidingCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(0, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(5, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) slidingCategoryDataset0, false);
      assertNull(range0);
      assertEquals(0, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(5, slidingCategoryDataset0.getFirstCategoryIndex());
      
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      TimeSeries timeSeries0 = new TimeSeries(second0);
      assertNotNull(timeSeries0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(0, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      
      Number number1 = DatasetUtilities.findMaximumDomainValue(timeSeriesCollection0);
      assertNotNull(number1);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(Double.NaN, number1);
      
      Number number2 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNull(number2);
      assertEquals(0, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, false);
      assertNull(range1);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertTrue(boolean0);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, true);
      assertNull(range2);
      assertEquals(0, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(5, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("apgtax.BETh:O&");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      TimeSeries timeSeries0 = new TimeSeries(second0);
      assertNotNull(timeSeries0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      Date date0 = second0.getEnd();
      assertNotNull(date0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals("Fri Feb 14 20:21:22 GMT 2014", date0.toString());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection();
      assertFalse(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      assertNotNull(timeSeriesCollection1);
      assertEquals(0, timeSeriesCollection1.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertFalse(timeSeriesCollection0.equals((Object)timeSeriesCollection1));
      assertNotSame(timeSeriesCollection0, timeSeriesCollection1);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertTrue(boolean0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, 0);
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultTableXYDataset0);
      assertNull(number0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      
      double[][] doubleArray0 = new double[1][7];
      Number number1 = DatasetUtilities.findMaximumDomainValue(defaultTableXYDataset0);
      assertNotNull(number1);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(Double.NaN, number1);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(", but the TimeSeries is expecting an instance of ");
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      Number number2 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultTableXYDataset0);
      assertNull(number2);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-381L));
      assertNotNull(fixedMillisecond0);
      assertEquals((-381L), fixedMillisecond0.getSerialIndex());
      assertEquals((-381L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-381L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-381L), fixedMillisecond0.getMiddleMillisecond());
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotNull(regularTimePeriod0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertEquals((-381L), fixedMillisecond0.getSerialIndex());
      assertEquals((-381L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-381L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-381L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-382L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-382L), regularTimePeriod0.getSerialIndex());
      assertEquals((-382L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-382L), regularTimePeriod0.getMiddleMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "Value", "Value");
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotNull(timeSeries0);
      assertEquals((-381L), fixedMillisecond0.getSerialIndex());
      assertEquals((-381L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-381L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-381L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-382L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-382L), regularTimePeriod0.getSerialIndex());
      assertEquals((-382L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-382L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals("Value", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, 462.58713636);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNull(timeSeriesDataItem0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertEquals((-381L), fixedMillisecond0.getSerialIndex());
      assertEquals((-381L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-381L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-381L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-382L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-382L), regularTimePeriod0.getSerialIndex());
      assertEquals((-382L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-382L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals("Value", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(462.58713636, timeSeries0.getMaxY(), 0.01);
      assertEquals(462.58713636, timeSeries0.getMinY(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotNull(timeSeriesCollection0);
      assertEquals((-381L), fixedMillisecond0.getSerialIndex());
      assertEquals((-381L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-381L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-381L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-382L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-382L), regularTimePeriod0.getSerialIndex());
      assertEquals((-382L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-382L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals("Value", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(462.58713636, timeSeries0.getMaxY(), 0.01);
      assertEquals(462.58713636, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, true);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotNull(range0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertEquals((-381L), fixedMillisecond0.getSerialIndex());
      assertEquals((-381L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-381L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-381L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-382L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-382L), regularTimePeriod0.getSerialIndex());
      assertEquals((-382L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-382L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals("Value", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(462.58713636, timeSeries0.getMaxY(), 0.01);
      assertEquals(462.58713636, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-381.0), range0.getLowerBound(), 0.01);
      assertEquals((-381.0), range0.getCentralValue(), 0.01);
      assertEquals((-381.0), range0.getUpperBound(), 0.01);
      
      RegularTimePeriod regularTimePeriod1 = fixedMillisecond0.next();
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod1.equals((Object)fixedMillisecond0));
      assertFalse(regularTimePeriod1.equals((Object)regularTimePeriod0));
      assertNotNull(regularTimePeriod1);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(fixedMillisecond0, regularTimePeriod1);
      assertNotSame(regularTimePeriod1, fixedMillisecond0);
      assertNotSame(regularTimePeriod1, regularTimePeriod0);
      assertEquals((-381L), fixedMillisecond0.getSerialIndex());
      assertEquals((-381L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-381L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-381L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-380L), regularTimePeriod1.getLastMillisecond());
      assertEquals((-380L), regularTimePeriod1.getMiddleMillisecond());
      assertEquals((-380L), regularTimePeriod1.getSerialIndex());
      assertEquals((-380L), regularTimePeriod1.getFirstMillisecond());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, true);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod1));
      assertFalse(regularTimePeriod0.equals((Object)regularTimePeriod1));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(fixedMillisecond0, regularTimePeriod1);
      assertNotSame(regularTimePeriod0, regularTimePeriod1);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertNotSame(range1, range0);
      assertEquals((-381L), fixedMillisecond0.getSerialIndex());
      assertEquals((-381L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-381L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-381L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-382L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-382L), regularTimePeriod0.getSerialIndex());
      assertEquals((-382L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-382L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals("Value", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(462.58713636, timeSeries0.getMaxY(), 0.01);
      assertEquals(462.58713636, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(462.58713636, range1.getLowerBound(), 0.01);
      assertEquals(462.58713636, range1.getCentralValue(), 0.01);
      assertEquals(462.58713636, range1.getUpperBound(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNull(number0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod1));
      assertFalse(regularTimePeriod0.equals((Object)regularTimePeriod1));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(fixedMillisecond0, regularTimePeriod1);
      assertNotSame(regularTimePeriod0, regularTimePeriod1);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertEquals((-381L), fixedMillisecond0.getSerialIndex());
      assertEquals((-381L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-381L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-381L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-382L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-382L), regularTimePeriod0.getSerialIndex());
      assertEquals((-382L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-382L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals("Value", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(462.58713636, timeSeries0.getMaxY(), 0.01);
      assertEquals(462.58713636, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertFalse(boolean0);
      
      Range range2 = Range.combine(range0, range0);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod1));
      assertFalse(regularTimePeriod0.equals((Object)regularTimePeriod1));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertNotNull(range2);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(fixedMillisecond0, regularTimePeriod1);
      assertNotSame(regularTimePeriod0, regularTimePeriod1);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals((-381L), fixedMillisecond0.getSerialIndex());
      assertEquals((-381L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-381L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-381L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-382L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-382L), regularTimePeriod0.getSerialIndex());
      assertEquals((-382L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-382L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals("Value", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(462.58713636, timeSeries0.getMaxY(), 0.01);
      assertEquals(462.58713636, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-381.0), range0.getLowerBound(), 0.01);
      assertEquals((-381.0), range0.getCentralValue(), 0.01);
      assertEquals((-381.0), range0.getUpperBound(), 0.01);
      assertEquals((-381.0), range2.getCentralValue(), 0.01);
      assertEquals((-381.0), range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-381.0), range2.getLowerBound(), 0.01);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod1));
      assertFalse(regularTimePeriod0.equals((Object)regularTimePeriod1));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotNull(number1);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(fixedMillisecond0, regularTimePeriod1);
      assertNotSame(regularTimePeriod0, regularTimePeriod1);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertEquals((-381L), fixedMillisecond0.getSerialIndex());
      assertEquals((-381L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-381L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-381L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-382L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-382L), regularTimePeriod0.getSerialIndex());
      assertEquals((-382L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-382L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals("Value", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(462.58713636, timeSeries0.getMaxY(), 0.01);
      assertEquals(462.58713636, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(462.58713636, number1);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) "Value", (-1.0), (-1482));
      assertFalse(pieDataset0.equals((Object)defaultPieDataset0));
      assertNotNull(pieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      double[][] doubleArray0 = new double[0][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, doubleArray0.length);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 1291);
      assertNotNull(pieDataset0);
      assertEquals(0, doubleArray0.length);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("");
      assertNotNull(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timePeriodValuesCollection0);
      assertNull(number0);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) timePeriodValuesCollection0);
      assertNull(number1);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.category.SlidingCategoryDataset", "org.jfree.data.category.SlidingCategoryDataset", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      TimeSeries timeSeries0 = new TimeSeries("org.jfree.data.category.SlidingCategoryDataset");
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      assertNotNull(fixedMillisecond0);
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotNull(regularTimePeriod0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals((-1L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-1L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-1L), regularTimePeriod0.getSerialIndex());
      assertEquals((-1L), regularTimePeriod0.getMiddleMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate(regularTimePeriod0, (double) 0L);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNull(timeSeriesDataItem0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals((-1L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-1L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-1L), regularTimePeriod0.getSerialIndex());
      assertEquals((-1L), regularTimePeriod0.getMiddleMillisecond());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, true);
      assertNotNull(range0);
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, true);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, number0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertTrue(number1.equals((Object)number0));
      assertNotNull(number1);
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, number1);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Unknown data");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, (-1));
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, double0, 0.01);
      
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      timeTableXYDataset0.removeChangeListener(xYTaskDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      assertNull(range1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList1 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertFalse(arrayList1.contains(defaultMultiValueCategoryDataset0));
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYTaskDataset0, (List) arrayList1, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNull(number0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-492.0), (-492.0));
      assertNotNull(powerFunction2D0);
      assertEquals((-492.0), powerFunction2D0.getB(), 0.01);
      assertEquals((-492.0), powerFunction2D0.getA(), 0.01);
      
      Quarter quarter0 = new Quarter();
      assertNotNull(quarter0);
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      
      long long0 = quarter0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=0,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=1,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1392409281320L, long0);
      
      // Undeclared exception!
      DatasetUtilities.sampleFunction2D(powerFunction2D0, (-492.0), 13, 2145130990, quarter0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Unknown data");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, (-1));
      assertEquals("GMT", timeZone0.getID());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, double0, 0.01);
      
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      timeTableXYDataset0.removeChangeListener(xYTaskDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      Locale locale1 = Locale.JAPANESE;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getCountry());
      
      String string0 = locale0.getDisplayLanguage(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(string0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("\u30A4\u30BF\u30EA\u30A2\u8A9E", string0);
      
      Range range1 = Range.expand(range0, 2922.944061, 0.0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, (List) arrayList0, range0, true);
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(range0.equals((Object)range1));
      assertNull(range2);
      assertNotSame(locale0, locale1);
      assertNotSame(range0, range1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultTableXYDataset0);
      assertNull(number0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      
      double[][] doubleArray0 = new double[0][5];
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultTableXYDataset0);
      assertNull(number1);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      
      Number[][] numberArray0 = new Number[8][1];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = null;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[9];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      Float float0 = new Float(49.92F);
      assertNotNull(float0);
      assertEquals(49.92F, (float)float0, 0.01F);
      
      numberArray2[0] = (Number) float0;
      numberArray2[1] = null;
      numberArray2[2] = null;
      numberArray2[3] = null;
      numberArray2[4] = null;
      numberArray2[5] = null;
      numberArray2[6] = null;
      numberArray2[7] = null;
      numberArray2[8] = null;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[0];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[4];
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray2));
      
      numberArray4[0] = (Number) float0;
      numberArray4[1] = null;
      numberArray4[2] = (Number) float0;
      numberArray4[3] = (Number) float0;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[6];
      assertFalse(numberArray5.equals((Object)numberArray2));
      assertFalse(numberArray5.equals((Object)numberArray3));
      assertFalse(numberArray5.equals((Object)numberArray4));
      assertFalse(numberArray5.equals((Object)numberArray1));
      
      numberArray5[0] = null;
      numberArray5[1] = null;
      numberArray5[2] = null;
      numberArray5[3] = null;
      numberArray5[4] = null;
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      numberArray5[5] = (Number) integer0;
      numberArray0[4] = numberArray5;
      Number[] numberArray6 = new Number[0];
      assertFalse(numberArray6.equals((Object)numberArray1));
      assertFalse(numberArray6.equals((Object)numberArray5));
      assertFalse(numberArray6.equals((Object)numberArray4));
      assertFalse(numberArray6.equals((Object)numberArray2));
      assertFalse(numberArray6.equals((Object)numberArray3));
      
      numberArray0[5] = numberArray6;
      Number[] numberArray7 = new Number[2];
      assertFalse(numberArray7.equals((Object)numberArray5));
      assertFalse(numberArray7.equals((Object)numberArray4));
      assertFalse(numberArray7.equals((Object)numberArray3));
      assertFalse(numberArray7.equals((Object)numberArray1));
      assertFalse(numberArray7.equals((Object)numberArray2));
      assertFalse(numberArray7.equals((Object)numberArray6));
      
      numberArray7[0] = (Number) integer0;
      numberArray7[1] = null;
      numberArray0[6] = numberArray7;
      Number[] numberArray8 = new Number[2];
      assertFalse(numberArray8.equals((Object)numberArray5));
      assertFalse(numberArray8.equals((Object)numberArray1));
      assertFalse(numberArray8.equals((Object)numberArray4));
      assertFalse(numberArray8.equals((Object)numberArray2));
      assertFalse(numberArray8.equals((Object)numberArray7));
      assertFalse(numberArray8.equals((Object)numberArray6));
      assertFalse(numberArray8.equals((Object)numberArray3));
      
      numberArray8[0] = null;
      numberArray8[1] = null;
      numberArray0[7] = numberArray8;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 2146654910);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2451.9;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 829.0;
      doubleArray1[4] = (-660.690634242876);
      doubleArray1[5] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-660.690634242876);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-492.0), (-492.0));
      assertNotNull(powerFunction2D0);
      assertEquals((-492.0), powerFunction2D0.getB(), 0.01);
      assertEquals((-492.0), powerFunction2D0.getA(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, (-660.690634242876), 0.0, 13, "org.jfree.data.category.SlidingCategoryDataset");
      assertNotNull(xYSeriesCollection0);
      assertEquals((-492.0), powerFunction2D0.getB(), 0.01);
      assertEquals((-492.0), powerFunction2D0.getA(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
      assertEquals((-492.0), powerFunction2D0.getB(), 0.01);
      assertEquals((-492.0), powerFunction2D0.getA(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(boolean0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      
      TimeZone timeZone0 = TimeZone.getTimeZone("QxKWwz7Qq.");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, (-1));
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, double0, 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      TimeSeries timeSeries0 = new TimeSeries("Q5", "$p--", "$p--");
      assertNotNull(timeSeries0);
      assertEquals("$p--", timeSeries0.getRangeDescription());
      assertEquals("$p--", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      TimeZone timeZone1 = TimeZone.getTimeZone("$p--");
      assertTrue(timeZone1.equals((Object)timeZone0));
      assertNotNull(timeZone1);
      assertNotSame(timeZone1, timeZone0);
      assertEquals("GMT", timeZone1.getID());
      
      TimeZone timeZone2 = TimeZone.getDefault();
      assertTrue(timeZone2.equals((Object)timeZone0));
      assertTrue(timeZone2.equals((Object)timeZone1));
      assertNotNull(timeZone2);
      assertNotSame(timeZone2, timeZone1);
      assertNotSame(timeZone2, timeZone0);
      assertEquals("GMT", timeZone2.getID());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone1);
      assertTrue(timeZone1.equals((Object)timeZone2));
      assertTrue(timeZone1.equals((Object)timeZone0));
      assertNotNull(timeSeriesCollection0);
      assertEquals("$p--", timeSeries0.getRangeDescription());
      assertEquals("$p--", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("GMT", timeZone1.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0);
      assertTrue(timeZone0.equals((Object)timeZone1));
      assertTrue(timeZone0.equals((Object)timeZone2));
      assertNull(range0);
      assertNotSame(timeZone0, timeZone2);
      assertNotSame(timeZone0, timeZone1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      double[][] doubleArray0 = new double[4][1];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1563.5);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (-1563.5);
      doubleArray4[1] = (-1563.5);
      doubleArray4[2] = (-1098.2713);
      doubleArray4[3] = (-1646.92383);
      doubleArray4[4] = (-1646.92383);
      doubleArray4[5] = (-1563.5);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Z{q!M2|Pv", "ERROR : Relative To String", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(4, doubleArray0.length);
      assertEquals((-781.75), range0.getCentralValue(), 0.01);
      assertEquals((-1563.5), range0.getLowerBound(), 0.01);
      assertEquals(1563.5, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds(categoryDataset0, false);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals((-781.75), range1.getCentralValue(), 0.01);
      assertEquals((-1563.5), range1.getLowerBound(), 0.01);
      assertEquals(1563.5, range1.getLength(), 0.01);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0);
      assertNull(range2);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(fixedMillisecond0, (Number) null);
      assertNotNull(timeSeriesDataItem0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertFalse(timeSeriesDataItem0.isSelected());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (Comparable) timeSeriesDataItem0);
      assertNotNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertFalse(timeSeriesDataItem0.isSelected());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(timeSeriesDataItem0);
      assertNotNull(keyToGroupMap0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertFalse(timeSeriesDataItem0.isSelected());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, keyToGroupMap0);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertFalse(timeSeriesDataItem0.isSelected());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      TimeZone timeZone0 = TimeZone.getTimeZone("apgtax.BETh:O&");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "apgtax.BETh:O&", 1.0, 1);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertFalse(timeSeriesDataItem0.isSelected());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D((Function2D) null, (-2469.151043657298), 2.0, 5, timeSeriesDataItem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Vector<Double> vector0 = new Vector<Double>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(histogramDataset0, vector0, true);
      assertNull(range0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      double[][] doubleArray0 = new double[6][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 0.0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(6, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotNull(range1);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      
      Range range2 = DatasetUtilities.findRangeBounds(categoryDataset0, true);
      assertTrue(range2.equals((Object)range1));
      assertNotNull(range2);
      assertNotSame(range2, range1);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Vector<Double> vector0 = new Vector<Double>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(histogramDataset0, vector0, true);
      assertNull(range0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      double[][] doubleArray0 = new double[6][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 0.0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(6, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(histogramDataset0);
      assertNull(number0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(number1);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, number1);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) histogramDataset0, false);
      assertNull(range1);
      assertEquals(0, histogramDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2451.9;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 829.0;
      doubleArray1[4] = (-660.690634242876);
      doubleArray1[5] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-660.690634242876);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-492.0), (-492.0));
      assertNotNull(powerFunction2D0);
      assertEquals((-492.0), powerFunction2D0.getA(), 0.01);
      assertEquals((-492.0), powerFunction2D0.getB(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, (-660.690634242876), 0.0, 13, "org.jfree.data.category.SlidingCategoryDataset");
      assertNotNull(xYSeriesCollection0);
      assertEquals((-492.0), powerFunction2D0.getA(), 0.01);
      assertEquals((-492.0), powerFunction2D0.getB(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection();
      assertTrue(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      assertNotNull(timeSeriesCollection1);
      assertEquals(0, timeSeriesCollection1.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "org.jfree.data.category.SlidingCategoryDataset", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, number0);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      JDBCXYDataset jDBCXYDataset1 = null;
      try {
        jDBCXYDataset1 = new JDBCXYDataset((Connection) null, "org.jfree.data.category.SlidingCategoryDataset");
        fail("Expecting exception: SQLException");
      
      } catch(Throwable e) {
         //
         // There is no database to execute the query.
         //
         verifyException("org.jfree.data.jdbc.JDBCXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2451.9;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 829.0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.category.SlidingCategoryDataset", (String) null, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal((PieDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(taskSeriesCollection0, 5, 5);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(5, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(5, slidingCategoryDataset0.getFirstCategoryIndex());
      
      List list0 = slidingCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(5, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(5, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      assertNotNull(timeSeries0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) list0, false);
      assertNull(range1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(5, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(5, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0);
      assertNull(range2);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Vector<Double> vector0 = new Vector<Double>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(histogramDataset0, vector0, false);
      assertNull(range0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      double[][] doubleArray0 = new double[6][5];
      double[] doubleArray1 = new double[20];
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 0.0;
      doubleArray0[3] = doubleArray4;
      Number number0 = DatasetUtilities.findMaximumDomainValue(histogramDataset0);
      assertNull(number0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, doubleArray0.length);
      assertEquals(20, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(20, defaultIntervalCategoryDataset0.getCategoryCount());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(0.0);
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      Range range0 = jDBCXYDataset0.getRangeBounds(false);
      assertNotNull(range0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      double[][] doubleArray0 = new double[4][1];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 829.0;
      doubleArray2[1] = 829.0;
      doubleArray2[2] = 829.0;
      doubleArray2[3] = 829.0;
      doubleArray2[4] = (-1.7976931348623157E308);
      doubleArray2[5] = 829.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-1.7976931348623157E308);
      doubleArray3[1] = 829.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = (-1.7976931348623157E308);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (-1.7976931348623157E308);
      doubleArray4[2] = 2425.8103706744732;
      doubleArray4[3] = 829.0;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = 829.0;
      doubleArray4[6] = 0.0;
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1.7976931348623157E308), number0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      LinkedList<DefaultIntervalXYDataset> linkedList0 = new LinkedList<DefaultIntervalXYDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2451.9;
      doubleArray2[1] = 2451.9;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 2451.9;
      doubleArray2[5] = 829.0;
      doubleArray2[6] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 2451.9;
      doubleArray3[1] = 2451.9;
      doubleArray3[2] = 2451.9;
      doubleArray3[3] = 829.0;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("\u0000h|4ed'+XBkUR2c67", "[_rM^6o7", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-1.0);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {1.0, 1.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      
      int int0 = (-207);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 1.0, 539.9161478869194, (-207), (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((String) null, "h-9", (Number[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1119.2202;
      doubleArray1[1] = 1119.2202;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("TimePeriodAnchor.END", "TimePeriodAnchor.END", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNull(number0);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1119.2202, range0.getLowerBound(), 0.01);
      assertEquals(1119.2202, range0.getCentralValue(), 0.01);
      assertEquals(1119.2202, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      JDBCXYDataset jDBCXYDataset0 = null;
      try {
        jDBCXYDataset0 = new JDBCXYDataset((Connection) null, (String) null);
        fail("Expecting exception: SQLException");
      
      } catch(Throwable e) {
         //
         // There is no database to execute the query.
         //
         verifyException("org.jfree.data.jdbc.JDBCXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) "", (-1.0), 60);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Comparable<JDBCXYDataset>[] comparableArray0 = (Comparable<JDBCXYDataset>[]) Array.newInstance(Comparable.class, 0);
      TimeSeries timeSeries0 = new TimeSeries("9rN-nx");
      assertNotNull(timeSeries0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      TimeSeries timeSeries1 = new TimeSeries("9rN-nx");
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertNotNull(timeSeries1);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertTrue(timeSeries1.getNotify());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertNull(timeSeries1.getDescription());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries1);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertNotNull(timeSeriesCollection0);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertTrue(timeSeries1.getNotify());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertNull(timeSeries1.getDescription());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      KeyListener keyListener0 = AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      assertNull(keyListener0);
      
      KeyListener keyListener1 = AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      assertNull(keyListener1);
      
      UndoManager undoManager0 = new UndoManager();
      assertNotNull(undoManager0);
      
      boolean boolean0 = timeSeriesCollection0.hasListener(undoManager0);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertTrue(timeSeries1.getNotify());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertNull(timeSeries1.getDescription());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertFalse(boolean0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, false);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertNull(range0);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertTrue(timeSeries1.getNotify());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertNull(timeSeries1.getDescription());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1.0), (-1.0));
      assertNotNull(lineFunction2D0);
      assertEquals((-1.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-1.0), lineFunction2D0.getIntercept(), 0.01);
      
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1966.7;
      doubleArray1[1] = (double) 60;
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = (double) 60;
      doubleArray1[4] = (-1.0);
      doubleArray1[5] = (-1.0);
      doubleArray1[6] = (-1.0);
      doubleArray1[7] = (-1.0);
      doubleArray1[8] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1966.7;
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = (-718.1170735);
      doubleArray2[3] = (double) 60;
      doubleArray2[4] = (double) 60;
      doubleArray2[5] = 1966.7;
      doubleArray2[6] = 1966.7;
      doubleArray2[7] = 2995.1619489955992;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-718.1170735);
      doubleArray3[1] = (-429.9853117780578);
      doubleArray3[2] = (double) 60;
      doubleArray3[3] = (-718.1170735);
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(3, doubleArray0.length);
      assertEquals(2995.1619489955992, number0);
      
      TimeSeries timeSeries0 = new TimeSeries(60.0, "", "");
      assertNotNull(timeSeries0);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("Y!_[{6%\"HBOxJL[");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      assertNotNull(timeSeriesCollection0);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      assertNull(range0);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultTableXYDataset0);
      assertNull(number0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1.0;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(", but the TimeSeries is expecting an instance of ", "?KAW_):v,", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNotNull(number1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, number1);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds(categoryDataset0, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      boolean boolean0 = true;
      Range range0 = jDBCXYDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0);
      assertNull(range1);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      DomainOrder domainOrder0 = jDBCXYDataset0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      
      int int0 = (-1485);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, (-1485), 846);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals((-1485), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(846, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultTableXYDataset0);
      assertNull(number0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, 7, 396);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(396, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(7, slidingCategoryDataset0.getFirstCategoryIndex());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, 2797);
      assertNotNull(pieDataset0);
      assertEquals(396, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(7, slidingCategoryDataset0.getFirstCategoryIndex());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "Value", (KeyedValues) pieDataset0);
      assertTrue(categoryDataset0.equals((Object)defaultCategoryDataset0));
      assertNotNull(categoryDataset0);
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      assertEquals(396, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(7, slidingCategoryDataset0.getFirstCategoryIndex());
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-3275.60657695), (-3275.60657695));
      assertNotNull(powerFunction2D0);
      assertEquals((-3275.60657695), powerFunction2D0.getA(), 0.01);
      assertEquals((-3275.60657695), powerFunction2D0.getB(), 0.01);
      
      Double double0 = new Double((-3275.60657695));
      assertNotNull(double0);
      assertEquals((-3275.60657695), (double)double0, 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      Range range0 = jDBCXYDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0);
      assertNull(range1);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertNull(range2);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertNull(range3);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      String string0 = "Ji>_:Z_Ui4(~^/eSZ@m";
      String string1 = "";
      Number[][] numberArray0 = new Number[1][1];
      Number[] numberArray1 = new Number[4];
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      numberArray1[0] = (Number) bigInteger0;
      byte byte0 = (byte)11;
      Byte byte1 = new Byte((byte)11);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)11, (byte)byte1);
      
      numberArray1[1] = (Number) byte1;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Minute minute0 = new Minute();
      assertNotNull(minute0);
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      // Undeclared exception!
      try { 
        taskSeriesCollection0.getEndValue((Comparable) "Null 'rowKeys' argument.", (Comparable) minute0, 59);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("", (OHLCDataItem[]) null);
      defaultOHLCDataset0.indexOf("");
      Integer integer0 = new Integer(0);
      Number[][] numberArray0 = new Number[5][9];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = (Number) integer0;
      numberArray1[1] = (Number) integer0;
      numberArray1[2] = (Number) integer0;
      numberArray1[3] = (Number) integer0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[6];
      numberArray2[0] = (Number) integer0;
      numberArray2[1] = (Number) integer0;
      numberArray2[2] = (Number) integer0;
      numberArray2[3] = (Number) integer0;
      numberArray2[4] = (Number) integer0;
      numberArray2[5] = (Number) integer0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[0];
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[0];
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[1];
      numberArray5[0] = (Number) integer0;
      numberArray0[4] = numberArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("TI5Vs6e}'bQmb^*", "TI5Vs6e}'bQmb^*", numberArray0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 0);
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "TI5Vs6e}'bQmb^*", 1.5);
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      arrayList0.add((ChronoLocalDate) thaiBuddhistDate0);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(0, 0);
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal((PieDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset(defaultPieDataset0);
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      arrayList0.add((ChronoLocalDate) thaiBuddhistDate0);
      jDBCXYDataset0.getDomainOrder();
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) arrayList0, true);
      int int0 = 1800;
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, 1800);
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset("Lq", "v_-6v::UnmV#|]", "Lq", "F 5IBZ");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultTableXYDataset0);
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      arrayList0.add((ChronoLocalDate) thaiBuddhistDate0);
      jDBCXYDataset0.getDomainOrder();
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) arrayList0, true);
      DatasetUtilities.iterateDomainBounds((XYDataset) jDBCXYDataset0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("", (OHLCDataItem[]) null);
      defaultOHLCDataset0.indexOf("");
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      String[] stringArray0 = new String[24];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 421, 0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) slidingCategoryDataset0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Number[][] numberArray0 = new Number[19][8];
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-1694.0);
      doubleArray1[1] = 1475.542803218;
      doubleArray1[2] = 2230.0;
      doubleArray1[3] = Double.NaN;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (-1694.0);
      doubleArray2[1] = Double.NaN;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 1475.542803218;
      doubleArray3[1] = Double.NaN;
      doubleArray3[2] = 792.2408;
      doubleArray3[3] = Double.NaN;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertEquals(268.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][8];
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[2];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) 60;
      doubleArray2[1] = (double) 60;
      doubleArray2[2] = (double) 60;
      doubleArray2[3] = (double) 60;
      doubleArray2[4] = (double) 60;
      doubleArray2[7] = (double) 60;
      doubleArray2[8] = (double) 60;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[1] = (double) 60;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "Null 'columnKeys' argument.", doubleArray0);
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotNull(range0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, 60.0);
      assertNotNull(range1);
      assertEquals(60.0, range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, (-999));
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, 0, 87);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 978.243652921;
      doubleArray0[1] = (double) 0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      double[][] doubleArray2 = new double[8][9];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray1;
      doubleArray2[4] = doubleArray0;
      defaultCategoryDataset0.addValue(Double.POSITIVE_INFINITY, (Comparable) "", (Comparable) "");
      doubleArray2[5] = doubleArray1;
      DatasetUtilities.iterateCategoryRangeBounds(slidingCategoryDataset0, true);
      ArrayList<DefaultIntervalXYDataset> arrayList0 = new ArrayList<DefaultIntervalXYDataset>();
      Object[][][] objectArray0 = new Object[7][1][4];
      Object[][] objectArray1 = new Object[5][0];
      objectArray1[0] = (Object[]) doubleArray2;
      objectArray1[1] = (Object[]) doubleArray2;
      objectArray1[2] = (Object[]) doubleArray2;
      objectArray1[3] = (Object[]) doubleArray2;
      objectArray1[4] = (Object[]) doubleArray2;
      objectArray0[0] = objectArray1;
      Object[][] objectArray2 = new Object[1][1];
      objectArray2[0] = (Object[]) doubleArray2;
      objectArray0[1] = objectArray2;
      Object[][] objectArray3 = new Object[4][2];
      Object[] objectArray4 = new Object[9];
      objectArray4[0] = (Object) defaultCategoryDataset0;
      objectArray4[1] = (Object) doubleArray0;
      objectArray4[2] = (Object) polynomialFunction2D0;
      objectArray4[3] = (Object) 0.0;
      objectArray4[4] = (Object) doubleArray1;
      objectArray4[5] = (Object) doubleArray0;
      objectArray4[6] = (Object) pieDataset0;
      objectArray4[7] = (Object) arrayList0;
      objectArray4[8] = (Object) defaultCategoryDataset0;
      objectArray3[0] = objectArray4;
      objectArray3[1] = (Object[]) doubleArray2;
      objectArray3[2] = (Object[]) doubleArray2;
      objectArray3[3] = (Object[]) doubleArray2;
      objectArray0[2] = objectArray3;
      Object[][] objectArray5 = new Object[3][9];
      objectArray5[0] = objectArray4;
      objectArray5[1] = objectArray4;
      objectArray5[2] = (Object[]) doubleArray2;
      objectArray0[3] = objectArray5;
      Object[][] objectArray6 = new Object[1][3];
      objectArray6[0] = (Object[]) doubleArray2;
      objectArray0[4] = objectArray6;
      Object[][] objectArray7 = new Object[4][2];
      objectArray7[0] = (Object[]) doubleArray2;
      objectArray7[1] = (Object[]) doubleArray2;
      objectArray7[2] = (Object[]) doubleArray2;
      objectArray7[3] = (Object[]) doubleArray2;
      objectArray0[5] = objectArray7;
      Object[][] objectArray8 = new Object[0][1];
      objectArray0[6] = objectArray8;
      DefaultWindDataset defaultWindDataset0 = null;
      try {
        defaultWindDataset0 = new DefaultWindDataset(arrayList0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of series keys does not match the number of series in the data array.
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1119.2202;
      doubleArray1[1] = 1.5;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("TimePeriodAnchor.END", "TimePeriodAnchor.END", doubleArray0);
      DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      DatasetUtilities.findRangeBounds(categoryDataset0);
      JDBCXYDataset jDBCXYDataset1 = new JDBCXYDataset((Connection) null);
      JDBCXYDataset jDBCXYDataset2 = null;
      try {
        jDBCXYDataset2 = new JDBCXYDataset((Connection) null, (String) null);
        fail("Expecting exception: SQLException");
      
      } catch(Throwable e) {
         //
         // There is no database to execute the query.
         //
         verifyException("org.jfree.data.jdbc.JDBCXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Number[][] numberArray0 = new Number[0][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 5, 5);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) slidingCategoryDataset0, false);
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      defaultIntervalCategoryDataset0.validateObject();
      DatasetUtilities.findMaximumDomainValue(timeSeriesCollection0);
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2451.9;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 829.0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.category.SlidingCategoryDataset", (String) null, doubleArray0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertFalse(boolean0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeZone timeZone0 = TimeZone.getTimeZone("QxKWwz7Qq.");
      Locale locale0 = Locale.ITALIAN;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, (-1));
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, (List) arrayList0, range0, false);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) taskSeriesCollection0);
      Number number0 = DatasetUtilities.findMaximumDomainValue(timeTableXYDataset0);
      assertFalse(number0.equals((Object)double0));
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      arrayList0.add(integer0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      defaultBoxAndWhiskerCategoryDataset0.add((List) arrayList0, (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultTableXYDataset0);
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      arrayList0.add((ChronoLocalDate) thaiBuddhistDate0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      jDBCXYDataset0.getDomainOrder();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList1, true);
      String string0 = "F 5IBZ";
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 1800);
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset("F 5IBZ", "v*/7t>", "(#@Mf;`lfeH<@84", "v*/7t>");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      MockThaiBuddhistDate.now();
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      arrayList0.add((ChronoLocalDate) null);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2160, (-2728), timeZone0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset1 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList1, true);
      XYSeries xYSeries0 = new XYSeries(2, false, true);
      // Undeclared exception!
      try { 
        xYSeries0.getY(2160);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2160, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      arrayList0.add((ChronoLocalDate) thaiBuddhistDate0);
      jDBCXYDataset0.getDomainOrder();
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) arrayList0, true);
      String string0 = "v_-6v::UnmV#|]";
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, 1800);
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset("v*/7t>", "v_-6v::UnmV#|]", "v_-6v::UnmV#|]", "F 5IBZ");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      DatasetUtilities.createCategoryDataset("org.jfree.data.category.SlidingCategoryDataset", "org.jfree.data.category.SlidingCategoryDataset", doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      KeyToGroupMap keyToGroupMap1 = new KeyToGroupMap("org.jfree.data.category.SlidingCategoryDataset");
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      linkedList0.add((Long) null);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) linkedList0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      arrayList0.add((ChronoLocalDate) thaiBuddhistDate0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) arrayList0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      LineFunction2D lineFunction2D0 = new LineFunction2D((-10.0), (-10.0));
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(lineFunction2D0, (-10.0), 1.0040875747127036, 270, thaiBuddhistDate0);
      DatasetUtilities.isEmptyOrNull(xYDataset0);
      DatasetUtilities.findDomainBounds(xYDataset0, (List) arrayList0, false);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, (Comparable) thaiBuddhistDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      boolean boolean0 = false;
      Range.shift(range0, (-2361.1244083309), false);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(categoryTableXYDataset0);
      String string0 = "(sSM3:@A2KYiDi(Q9FO";
      String string1 = ":W/)`";
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("(sSM3:@A2KYiDi(Q9FO", ":W/)`", (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      jDBCXYDataset0.getRangeBounds(true);
      DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      Vector<Double> vector0 = new Vector<Double>();
      DatasetUtilities.iterateToFindDomainBounds(histogramDataset0, vector0, false);
      double[][] doubleArray0 = new double[6][5];
      double[] doubleArray1 = new double[20];
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      double[][] doubleArray3 = new double[1][4];
      doubleArray3[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray3);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      jDBCXYDataset0.getRangeBounds(false);
      DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0, (List) linkedList0, false);
      DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0, true);
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(jDBCXYDataset0, linkedList0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      OHLCDataItem[] oHLCDataItemArray0 = null;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("", (OHLCDataItem[]) null);
      TimeSeries timeSeries0 = new TimeSeries("");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      defaultIntervalCategoryDataset0.validateObject();
      DatasetUtilities.findMaximumDomainValue(timeSeriesCollection0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2451.9;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 829.0;
      doubleArray1[4] = (-660.690634242876);
      doubleArray1[5] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (-660.690634242876);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-492.0), (-492.0));
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(powerFunction2D0, (-660.690634242876), 0.0, 13, "org.jfree.data.category.SlidingCategoryDataset");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(xYDataset0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-27.5);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      double[][] doubleArray2 = new double[3][5];
      doubleArray2[0] = doubleArray1;
      doubleArray2[2] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("}1KbC+", "", doubleArray2);
      DatasetUtilities.isEmptyOrNull(categoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 335);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 335, Size: 5
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      jDBCXYDataset0.getRangeBounds(true);
      DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      double[][] doubleArray0 = new double[3][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'rowKeys' argument.", "Requires 'ySamples' > 0", doubleArray0);
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1261.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[1] = (-1261.0);
      doubleArray2[2] = 2.0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-630.5), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertNotNull(categoryDataset0);
      
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Comparable<DefaultTableXYDataset>[] comparableArray0 = (Comparable<DefaultTableXYDataset>[]) Array.newInstance(Comparable.class, 0);
      Number[][] numberArray0 = new Number[0][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(comparableArray0, comparableArray0, numberArray0, numberArray0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 0.0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      DatasetUtilities.findMaximumDomainValue(categoryTableXYDataset0);
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[0][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'seriesKey' argument.", "Null 'seriesKey' argument.", doubleArray0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 2146356927, (-2197));
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultTableXYDataset0);
      assertNull(number0);
      
      double[][] doubleArray0 = new double[0][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Value", "Value", doubleArray0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertTrue(boolean0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultTableXYDataset0);
      assertNull(number1);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      double[][] doubleArray0 = new double[19][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 266, 266);
      slidingCategoryDataset0.getRowKeys();
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      DatasetUtilities.findMaximumDomainValue(categoryTableXYDataset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0, ">@[atylKKq");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, (-999));
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, 0, 87);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      Number number0 = DatasetUtilities.findMaximumDomainValue(timeSeriesCollection0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultTableXYDataset0);
      assertNull(number0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 5319.43;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = 2533.6785211456;
      doubleArray0[3] = (-1.7976931348623157E308);
      doubleArray0[4] = (-1462.6694958);
      doubleArray0[5] = (-1299.486238814);
      doubleArray0[6] = (-3159.1525819);
      doubleArray0[7] = Double.POSITIVE_INFINITY;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYTaskDataset0, 3.0);
      DatasetUtilities.findMaximumDomainValue(defaultTableXYDataset0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) xYBarDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(fixedMillisecond0, (Number) null);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (Comparable) timeSeriesDataItem0);
      Stack<TimeTableXYDataset> stack0 = new Stack<TimeTableXYDataset>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds((CategoryDataset) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      double double0 = Double.NaN;
      categoryTableXYDataset0.setIntervalWidth(Double.NaN);
      String string0 = "org.jfree.data.xy.YIntervalSeries";
      categoryTableXYDataset0.add(Double.NaN, Double.NaN, "org.jfree.data.xy.YIntervalSeries");
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      categoryTableXYDataset0.setIntervalPositionFactor(Double.NaN);
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, false);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-381L));
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "Value", "Value");
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, 462.58713636);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, true);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, true);
      assertNotNull(range0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultCategoryDataset0);
      assertNull(number0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertFalse(boolean0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, false);
      assertTrue(range1.equals((Object)range0));
      
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, true);
      assertNotNull(range2);
      assertEquals(0.0, range2.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      Stack<TimeTableXYDataset> stack0 = new Stack<TimeTableXYDataset>();
      Stack<Long> stack1 = new Stack<Long>();
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYIntervalSeriesCollection0);
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) xYIntervalSeriesCollection0, (List) stack1, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findCumulativeRangeBounds(taskSeriesCollection0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      Stack<Integer> stack0 = new Stack<Integer>();
      HashSet<DefaultTableXYDataset> hashSet0 = new HashSet<DefaultTableXYDataset>();
      stack0.trimToSize();
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, false);
      DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      DatasetUtilities.findDomainBounds((XYDataset) histogramDataset0, true);
      LinkedList<DefaultMultiValueCategoryDataset> linkedList0 = new LinkedList<DefaultMultiValueCategoryDataset>();
      linkedList0.pollLast();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) linkedList0, false);
      DatasetUtilities.findDomainBounds((XYDataset) histogramDataset0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.iterateDomainBounds((XYDataset) histogramDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds((CategoryDataset) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2451.9;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 829.0;
      doubleArray1[4] = (-660.690634242876);
      doubleArray1[5] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (-660.690634242876);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-492.0), (-492.0));
      DatasetUtilities.sampleFunction2D(powerFunction2D0, (-660.690634242876), 0.0, 13, "org.jfree.data.category.SlidingCategoryDataset");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-27.5);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYTaskDataset0, (-27.5));
      DatasetUtilities.findMaximumDomainValue(xYBarDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-27.5), (-1.0), (-1364), (-27.5));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      String string0 = "F 5IBZ";
      int int0 = 1800;
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, 60);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 60, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      String string0 = "";
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 2563);
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset("", "", "", "");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      jDBCXYDataset0.getDomainOrder();
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) arrayList0, true);
      String string0 = "v_-6v::UnmV#|]";
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, 1800);
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset("v*/7t>", "v_-6v::UnmV#|]", "v_-6v::UnmV#|]", "F 5IBZ");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      double[][] doubleArray0 = new double[19][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      DatasetUtilities.findMinimumRangeValue((XYDataset) xIntervalSeriesCollection0);
      Comparable<Float>[] comparableArray0 = (Comparable<Float>[]) Array.newInstance(Comparable.class, 9);
      Minute minute0 = new Minute();
      Second second0 = new Second((-1637), minute0);
      comparableArray0[0] = (Comparable<Float>) second0;
      XYSeries xYSeries0 = new XYSeries(second0, true);
      xYSeries0.addOrUpdate((Number) 0, (Number) 59);
      comparableArray0[1] = (Comparable<Float>) null;
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(comparableArray0[0]);
      // Undeclared exception!
      try { 
        timePeriodValues0.getTimePeriod(59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 59, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Number[][] numberArray0 = new Number[0][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      JDBCXYDataset jDBCXYDataset1 = null;
      try {
        jDBCXYDataset1 = new JDBCXYDataset((Connection) null, (String) null);
        fail("Expecting exception: SQLException");
      
      } catch(Throwable e) {
         //
         // There is no database to execute the query.
         //
         verifyException("org.jfree.data.jdbc.JDBCXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, (-999));
      int int0 = 0;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, 0, 87);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      // Undeclared exception!
      try { 
        Range.shift((Range) null, (-4086.191967656976), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findCumulativeRangeBounds(taskSeriesCollection0);
      String string0 = "f_%j4:/#nugCp1gbLS";
      Second.parseSecond("f_%j4:/#nugCp1gbLS");
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) null, (KeyedValues) jDBCPieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findCumulativeRangeBounds(taskSeriesCollection0);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, 377);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(taskSeriesCollection0, (-2935), 0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries("f_%j4:/#nugCp1gbLS");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      Number number0 = DatasetUtilities.findMaximumDomainValue(timeSeriesCollection0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      String string0 = "/X_*}dc=@|CSV<s#3>";
      String string1 = "org.jfree.data.category.SlidingCategoryDataset";
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2451.9;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 829.0;
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(Double.NaN, 60);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, Double.POSITIVE_INFINITY, 0.0, 60, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      Month month0 = new Month();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(158, "");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
      month0.peg(calendar0);
      RegularTimePeriod regularTimePeriod0 = month0.previous();
      month0.getStart();
      month0.toString();
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) regularTimePeriod0, (KeyedValues) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowData' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("Mu", "Mu", doubleArray0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      defaultCategoryDataset0.validateObject();
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) "Mu", (KeyedValues) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowData' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      LinkedList<DefaultIntervalXYDataset> linkedList0 = new LinkedList<DefaultIntervalXYDataset>();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      DatasetUtilities.findRangeBounds((XYDataset) xYIntervalSeriesCollection0);
      JDBCXYDataset jDBCXYDataset0 = null;
      try {
        jDBCXYDataset0 = new JDBCXYDataset(connection0, "N");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[6];
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (-1995.0);
      doubleArray1[3] = (-781.506764785);
      doubleArray1[4] = (-781.506764785);
      doubleArray1[5] = (double) 1;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      // Undeclared exception!
      try { 
        taskSeriesCollection1.getSeries(3088);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.gantt.TaskSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) arrayList0, true);
      String string0 = "v_-6v::UnmV#|]";
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset("v*/7t>", "v_-6v::UnmV#|]", "v_-6v::UnmV#|]", "F 5IBZ");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) arrayList0, true);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, 1800);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      int int0 = 12;
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      TimeZone timeZone0 = TimeZone.getTimeZone("apgtax.BETh:O&");
      Locale locale0 = Locale.ITALIAN;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, (-13));
      assertEquals(0.0, double0, 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (double) (-13));
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      XYDataset xYDataset0 = null;
      LinkedList<TimeSeriesCollection> linkedList0 = new LinkedList<TimeSeriesCollection>();
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, (List) linkedList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2451.9;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 829.0;
      doubleArray1[4] = (-660.690634242876);
      doubleArray1[5] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (-660.690634242876);
      doubleArray2[1] = 2451.9;
      doubleArray2[2] = 2451.9;
      doubleArray2[3] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 2451.9;
      doubleArray3[2] = 0.0;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("/X_*}dc=@|CSV<s#3>", "org.jfree.data.category.SlidingCategoryDataset", doubleArray0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      double[][] doubleArray0 = new double[0][3];
      DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      TimeSeries timeSeries0 = new TimeSeries("");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, false);
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      Stack<Object> stack0 = new Stack<Object>();
      DatasetUtilities.findDomainBounds((XYDataset) histogramDataset0, (List) stack0, false);
      double[][] doubleArray0 = new double[8][1];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1056.486661423;
      doubleArray1[1] = (-660.690634242876);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (-660.690634242876);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = (-660.690634242876);
      doubleArray4[1] = 1056.486661423;
      doubleArray4[2] = 1056.486661423;
      doubleArray4[3] = 1056.486661423;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = 1056.486661423;
      doubleArray5[1] = 1056.486661423;
      doubleArray5[2] = (-660.690634242876);
      doubleArray5[3] = (-660.690634242876);
      doubleArray5[4] = (-660.690634242876);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      doubleArray6[0] = 2590.27;
      doubleArray6[1] = (-660.690634242876);
      doubleArray6[2] = 1056.486661423;
      doubleArray6[3] = 1.5;
      doubleArray6[4] = 1056.486661423;
      doubleArray6[5] = 1056.486661423;
      doubleArray6[6] = (-660.690634242876);
      doubleArray6[7] = (-660.690634242876);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      doubleArray7[0] = 2590.27;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[9];
      doubleArray8[0] = (-1462.6694958);
      doubleArray8[1] = 1056.486661423;
      doubleArray8[2] = 1056.486661423;
      doubleArray8[3] = (-660.690634242876);
      doubleArray8[4] = 1966.7;
      doubleArray8[5] = (-660.690634242876);
      doubleArray8[6] = 1056.486661423;
      doubleArray8[7] = 2590.27;
      doubleArray8[8] = (-2171.7592703253686);
      doubleArray0[7] = doubleArray8;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(";mApc%o1Z", "f4p[nBopi", doubleArray0);
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertEquals((-2784.050764285752), number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findMaximumStackedRangeValue(defaultStatisticalCategoryDataset0);
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      arrayList0.add((ChronoLocalDate) thaiBuddhistDate0);
      LineFunction2D lineFunction2D0 = new LineFunction2D((-10.0), 2090.652548690687);
      arrayList0.add((ChronoLocalDate) thaiBuddhistDate0);
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultWindDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultWindDataset0, (List) arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid series index: -1
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      Byte byte0 = new Byte((byte) (-106));
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      linkedList0.offerFirst(byte0);
      XYSeries xYSeries0 = new XYSeries(byte0, false, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      xYSeries0.add((Number) byte0, (Number) byte0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, false);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultKeyedValues2DDataset0, (byte) (-106), 2441);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, 2549);
      DatasetUtilities.createCategoryDataset((Comparable) "", (KeyedValues) pieDataset0);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1993.46424573, 386.3166517864);
      Double double0 = new Double(386.3166517864);
      assertEquals(386.3166517864, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      jDBCXYDataset0.getRangeBounds(true);
      DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0, (List) linkedList0, true);
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) jDBCXYDataset0);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      String string0 = "";
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1.0), 1816.295732702);
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      DatasetUtilities.iterateXYRangeBounds(xYIntervalSeriesCollection0);
      // Undeclared exception!
      try { 
        Range.shift((Range) null, (-565.851776758), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      double double0 = (-1.0);
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1.0), 1816.295732702);
      XYDataset xYDataset0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      jDBCXYDataset0.getRangeBounds(true);
      DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      xYSeriesCollection0.getRangeUpperBound(false);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = (-27.5);
      doubleArray0[0] = (-27.5);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      String string0 = "}1KbC+";
      String string1 = "v*/7t>";
      String string2 = "F 5IBZ";
      int int0 = 1800;
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, 1800);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      int int0 = 91;
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, 91);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      String string0 = "";
      Number[][] numberArray0 = new Number[1][8];
      Number[] numberArray1 = new Number[1];
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1.0), 1816.295732702);
      int int0 = 60;
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-1.0), (-1.0), 60, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3299.86709173544);
      doubleArray0[1] = 0.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 1056.486661423, 0.0, (-2993), (-3299.86709173544));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(fixedMillisecond0, (Number) null);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (Comparable) timeSeriesDataItem0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(timeSeriesDataItem0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, keyToGroupMap0);
      assertNull(range0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("apgtax.BETh:O&");
      Locale locale0 = Locale.ITALIAN;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, (-1));
      assertEquals(0.0, double0, 0.01);
      
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) stack0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      String string0 = "p{Q|0]";
      String string1 = "Null 'locale' argument.";
      Number[][] numberArray0 = new Number[2][7];
      Number[] numberArray1 = new Number[6];
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      numberArray1[0] = (Number) integer0;
      Float float0 = new Float(0.0);
      numberArray1[1] = (Number) float0;
      Comparable<DefaultHighLowDataset>[] comparableArray0 = (Comparable<DefaultHighLowDataset>[]) Array.newInstance(Comparable.class, 1);
      int int0 = 0;
      Millisecond millisecond0 = null;
      try {
        millisecond0 = new Millisecond(12, 2027, 1, 1743, (-609), 0, 1743);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      Number number0 = DatasetUtilities.findMaximumDomainValue(xIntervalSeriesCollection0);
      assertNull(number0);
      
      double[][] doubleArray0 = new double[9][4];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1.5;
      doubleArray1[4] = (-2171.7592703253686);
      doubleArray1[5] = (-818.12);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 2708.91811128;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 1.5;
      doubleArray2[3] = 1528.626924;
      doubleArray2[4] = (-818.12);
      doubleArray2[5] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (-818.12);
      doubleArray3[1] = Double.POSITIVE_INFINITY;
      doubleArray3[2] = 1528.626924;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 2708.91811128;
      doubleArray3[5] = (-818.12);
      doubleArray3[6] = 1528.626924;
      doubleArray3[7] = 2708.91811128;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 216.130585;
      doubleArray4[1] = 2708.91811128;
      doubleArray4[2] = Double.POSITIVE_INFINITY;
      doubleArray4[3] = (-2171.7592703253686);
      doubleArray4[4] = (-1.0);
      doubleArray4[5] = 1.0;
      doubleArray4[6] = (-660.690634242876);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = Double.POSITIVE_INFINITY;
      doubleArray5[1] = Double.POSITIVE_INFINITY;
      doubleArray5[2] = (-818.12);
      doubleArray5[3] = (-818.12);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = 216.130585;
      doubleArray6[1] = 216.130585;
      doubleArray6[2] = (-2171.7592703253686);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      doubleArray7[0] = (-2171.7592703253686);
      doubleArray7[1] = (-2171.7592703253686);
      doubleArray7[2] = 1528.626924;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[4];
      doubleArray8[0] = 2708.91811128;
      doubleArray8[1] = 1.5;
      doubleArray8[2] = 1.5;
      doubleArray8[3] = 0.0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[9];
      doubleArray9[0] = (-818.12);
      doubleArray9[1] = 1.5;
      doubleArray9[2] = 1.5;
      doubleArray9[3] = (-2171.7592703253686);
      doubleArray9[4] = (-2171.7592703253686);
      doubleArray9[5] = 1528.626924;
      doubleArray9[6] = (-818.12);
      doubleArray9[7] = 216.130585;
      doubleArray9[8] = 1528.626924;
      doubleArray0[8] = doubleArray9;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("*ci", "", doubleArray0);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertEquals((-5158.638540650737), range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(1.0, 1.0, "");
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultTableXYDataset0);
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset("", "Bm>/VQ[.K~xO|t:Em", "", "Bm>/VQ[.K~xO|t:Em");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(fixedMillisecond0, (Number) null);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (Comparable) timeSeriesDataItem0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(timeSeriesDataItem0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, (-1));
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, range0, false);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(fixedMillisecond0, (Number) null);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (Comparable) timeSeriesDataItem0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(timeSeriesDataItem0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, keyToGroupMap0);
      TimeZone timeZone0 = TimeZone.getTimeZone("QxKWwz7Qq.");
      Locale locale0 = Locale.ITALIAN;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      DatasetUtilities.calculateStackTotal(timeTableXYDataset0, (-1));
      DatasetUtilities.createCategoryDataset((Comparable) timeSeriesDataItem0, (KeyedValues) pieDataset0);
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      Range.expandToInclude((Range) null, (-1));
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, (List) arrayList0, range0, false);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      LinkedList<DefaultIntervalXYDataset> linkedList0 = new LinkedList<DefaultIntervalXYDataset>();
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) xYIntervalSeriesCollection0, (List) linkedList0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, (-999));
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, 0, 87);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 978.243652921;
      doubleArray0[1] = (double) 0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      double[][] doubleArray2 = new double[8][9];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray1;
      doubleArray2[4] = doubleArray0;
      defaultCategoryDataset0.addValue(Double.POSITIVE_INFINITY, (Comparable) "", (Comparable) "");
      doubleArray2[5] = doubleArray1;
      doubleArray2[6] = doubleArray0;
      doubleArray2[7] = doubleArray1;
      DatasetUtilities.createCategoryDataset("", "}1KbC+", doubleArray2);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) vectorSeriesCollection0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, (-999));
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, 0, 87);
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-797.361749386);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.0;
      double[] doubleArray1 = new double[1];
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-1261.0);
      doubleArray2[1] = (-1261.0);
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = 1.0;
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      xYSeriesCollection0.getRangeUpperBound(true);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      XYSeriesCollection xYSeriesCollection1 = new XYSeriesCollection();
      xYSeriesCollection1.getRangeUpperBound(false);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection1, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      jDBCXYDataset0.getRangeBounds(true);
      DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) null, (KeyedValues) defaultKeyedValues0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      defaultStatisticalCategoryDataset0.setGroup(datasetGroup0);
      defaultStatisticalCategoryDataset0.validateObject();
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeZone timeZone0 = TimeZone.getTimeZone("QxKWwz7Qq.");
      Locale locale0 = Locale.ITALIAN;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      Stack<TimeTableXYDataset> stack0 = new Stack<TimeTableXYDataset>();
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-2087.5834), (-2087.5834));
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(powerFunction2D0, (-1462.6694958), (-10.0), 13, "QxKWwz7Qq.");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      Range range0 = new Range((-1462.6694958), (-1462.6694958));
      DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, false);
      Range range1 = DatasetUtilities.findRangeBounds(xYDataset0);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      Stack<TimeTableXYDataset> stack0 = new Stack<TimeTableXYDataset>();
      TimePeriodAnchor timePeriodAnchor0 = TimePeriodAnchor.END;
      timeTableXYDataset0.setXPosition(timePeriodAnchor0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, false);
      DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0);
      DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, true);
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultTableXYDataset0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, 7, 396);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, 2797);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "Value", (KeyedValues) pieDataset0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries("Value");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultTableXYDataset0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = 1083.7751058204;
      doubleArray1[2] = 1083.7751058204;
      doubleArray1[3] = Double.POSITIVE_INFINITY;
      doubleArray1[4] = Double.NaN;
      doubleArray1[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = Double.POSITIVE_INFINITY;
      doubleArray2[1] = Double.POSITIVE_INFINITY;
      doubleArray2[2] = Double.POSITIVE_INFINITY;
      doubleArray2[3] = Double.NEGATIVE_INFINITY;
      doubleArray2[4] = Double.NaN;
      doubleArray2[5] = 201.84758831694745;
      doubleArray2[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      doubleArray0[2] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      Second second0 = new Second();
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 120);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0);
      Number[][] numberArray0 = new Number[0][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      boolean boolean0 = false;
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      // Undeclared exception!
      try { 
        defaultIntervalCategoryDataset0.getValue((Comparable) regularTimePeriod0, (Comparable) fixedMillisecond0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown 'series' key.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-27.5);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-27.5), (-1.0), (-1364), (-27.5));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      double[][] doubleArray0 = new double[9][9];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-797.361749386);
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-1299.710453);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (-1261.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = (-1261.0);
      doubleArray3[1] = (-1261.0);
      doubleArray3[2] = 1.0;
      doubleArray3[3] = 1.0;
      doubleArray3[4] = (-1.7976931348623157E308);
      doubleArray3[5] = (-1261.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = (-1299.710453);
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 1.0;
      doubleArray4[5] = 0.0;
      doubleArray4[6] = (-1.7976931348623157E308);
      doubleArray4[7] = (-1261.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = (-797.361749386);
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 1.0;
      doubleArray5[4] = 0.0;
      doubleArray5[5] = (-1299.710453);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = (-1299.710453);
      doubleArray6[1] = 0.0;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = 0.0;
      doubleArray6[4] = (-1.7976931348623157E308);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      doubleArray7[0] = (-1.7976931348623157E308);
      doubleArray7[1] = 0.0;
      doubleArray7[2] = (-797.361749386);
      doubleArray7[3] = (-1261.0);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[7];
      doubleArray8[0] = (-1299.710453);
      doubleArray8[1] = 0.0;
      doubleArray8[2] = (-797.361749386);
      doubleArray8[3] = 0.0;
      doubleArray8[4] = 0.0;
      doubleArray8[5] = (-1261.0);
      doubleArray8[6] = (-797.361749386);
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[8];
      doubleArray9[0] = 0.0;
      doubleArray9[1] = (-1098.2713);
      doubleArray9[2] = 0.0;
      doubleArray9[3] = (-1299.710453);
      doubleArray9[4] = (-797.361749386);
      doubleArray9[5] = (-797.361749386);
      doubleArray9[6] = 1.0;
      doubleArray9[7] = (-1.7976931348623157E308);
      doubleArray0[8] = doubleArray9;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'visibleSeriesKeys' argument.", "Null 'visibleSeriesKeys' argument.", doubleArray0);
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertEquals(3.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(fixedMillisecond0, (Number) null);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (Comparable) timeSeriesDataItem0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(timeSeriesDataItem0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, keyToGroupMap0);
      TimeZone timeZone0 = TimeZone.getTimeZone("QxKWwz7Qq.");
      Locale locale0 = Locale.ITALIAN;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      DatasetUtilities.calculateStackTotal(timeTableXYDataset0, (-1));
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) timeSeriesDataItem0, (KeyedValues) pieDataset0);
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      Range range0 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) arrayList0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      Vector<Double> vector0 = new Vector<Double>();
      DatasetUtilities.iterateToFindDomainBounds(histogramDataset0, vector0, true);
      double[][] doubleArray0 = new double[6][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 0.0;
      doubleArray5[4] = 0.0;
      doubleArray5[5] = 0.0;
      doubleArray5[6] = 0.0;
      doubleArray5[7] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = 0.0;
      doubleArray6[4] = 0.0;
      doubleArray6[5] = 0.0;
      doubleArray6[6] = 0.0;
      doubleArray6[7] = 0.0;
      doubleArray6[8] = 0.0;
      doubleArray0[5] = doubleArray6;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("s|*", "s|*", doubleArray0);
      Range range0 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) vector0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      Vector<Long> vector0 = new Vector<Long>();
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) vector0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(fixedMillisecond0, (Number) null);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (Comparable) timeSeriesDataItem0);
      TimeZone timeZone0 = TimeZone.getTimeZone("QxKWwz7Qq.");
      Locale locale0 = Locale.ITALIAN;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      Stack<TimeTableXYDataset> stack0 = new Stack<TimeTableXYDataset>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(taskSeriesCollection0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, (-999));
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, 0, 87);
      DatasetUtilities.findMinimumStackedRangeValue(slidingCategoryDataset0);
      DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0);
      Object[][][] objectArray0 = new Object[1][3][2];
      Object[][] objectArray1 = new Object[5][6];
      Object[] objectArray2 = new Object[9];
      objectArray2[0] = (Object) defaultCategoryDataset0;
      objectArray2[1] = (Object) slidingCategoryDataset0;
      objectArray2[2] = (Object) slidingCategoryDataset0;
      objectArray2[3] = (Object) pieDataset0;
      objectArray2[4] = (Object) null;
      objectArray2[5] = (Object) null;
      objectArray2[6] = (Object) pieDataset0;
      objectArray2[7] = (Object) null;
      objectArray2[8] = (Object) pieDataset0;
      objectArray1[0] = objectArray2;
      Object[] objectArray3 = new Object[5];
      objectArray3[0] = (Object) defaultCategoryDataset0;
      objectArray3[1] = (Object) null;
      objectArray3[2] = (Object) slidingCategoryDataset0;
      objectArray3[3] = (Object) null;
      objectArray3[4] = (Object) pieDataset0;
      objectArray1[1] = objectArray3;
      Object[] objectArray4 = new Object[5];
      objectArray4[0] = (Object) null;
      objectArray4[1] = (Object) pieDataset0;
      objectArray4[2] = (Object) pieDataset0;
      objectArray4[3] = (Object) slidingCategoryDataset0;
      objectArray4[4] = (Object) null;
      objectArray1[2] = objectArray4;
      Object[] objectArray5 = new Object[4];
      objectArray5[0] = (Object) null;
      objectArray5[1] = (Object) slidingCategoryDataset0;
      objectArray5[2] = (Object) null;
      objectArray5[3] = (Object) null;
      objectArray1[3] = objectArray5;
      Object[] objectArray6 = new Object[5];
      Object object0 = new Object();
      objectArray6[0] = object0;
      objectArray6[1] = (Object) null;
      objectArray6[2] = (Object) null;
      objectArray6[3] = (Object) slidingCategoryDataset0;
      Object object1 = new Object();
      objectArray6[4] = object1;
      objectArray1[4] = objectArray6;
      objectArray0[0] = objectArray1;
      DefaultWindDataset defaultWindDataset0 = null;
      try {
        defaultWindDataset0 = new DefaultWindDataset(objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.category.SlidingCategoryDataset cannot be cast to java.lang.Number
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      DatasetUtilities.iterateCategoryRangeBounds(jDBCCategoryDataset0, true);
      TimeTableXYDataset timeTableXYDataset0 = null;
      try {
        timeTableXYDataset0 = new TimeTableXYDataset((TimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'zone' argument.
         //
         verifyException("org.jfree.data.time.TimeTableXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, (-1814), (-1814));
      slidingCategoryDataset0.getRowKeys();
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(slidingCategoryDataset0);
      assertNull(number0);
  }
}
