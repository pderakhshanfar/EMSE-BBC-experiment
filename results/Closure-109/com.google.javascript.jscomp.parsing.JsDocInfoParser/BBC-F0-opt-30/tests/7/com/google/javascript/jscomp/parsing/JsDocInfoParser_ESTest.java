/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 12 09:04:29 GMT 2021
 */

package com.google.javascript.jscomp.parsing;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.JsDocInfoParser;
import com.google.javascript.jscomp.parsing.JsDocToken;
import com.google.javascript.jscomp.parsing.JsDocTokenStream;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.JSTypeExpression;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ErrorReporter;
import com.google.javascript.rhino.head.Token;
import com.google.javascript.rhino.head.ast.Comment;
import com.google.javascript.rhino.head.ast.ErrorCollector;
import com.google.javascript.rhino.head.tools.ToolErrorReporter;
import java.nio.charset.Charset;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsDocInfoParser_ESTest extends JsDocInfoParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("/U_bR8xX{We714G#w]");
      Node node0 = Node.newString("/U_bR8xX{We714G#w]", 1565, 25);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertNotNull(jSDocInfo0);
      
      JsDocToken jsDocToken0 = JsDocToken.EOL;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      JsDocToken jsDocToken1 = JsDocToken.STRING;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken1);
      assertEquals(8, node1.getLength());
      assertEquals(8, node1.getSourcePosition());
      assertNotNull(node1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(46, 46, token_CommentType0, "[JavaPackage ");
      Node node0 = Node.newString("R", 1565, 25);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("[JavaPackage ");
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Locale locale0 = Locale.US;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("S39*/<", 63);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (Node) null, config0, toolErrorReporter0);
      boolean boolean0 = jsDocInfoParser0.parse();
      assertTrue(boolean0);
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.retrieveAndResetParsedJSDocInfo();
      assertEquals("S39", jSDocInfo0.getBlockDescription());
      assertNotNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("3");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      Node node0 = JsDocInfoParser.parseTypeString("error reporter");
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      jsDocInfoParser0.parse();
      JsDocToken jsDocToken0 = JsDocToken.PIPE;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      JsDocToken jsDocToken1 = JsDocToken.QMARK;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken1);
      assertEquals(304, node1.getType());
      assertNotNull(node1);
      assertFalse(node1.hasChildren());
      assertEquals(0, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      Node node0 = JsDocInfoParser.parseTypeString("language version");
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(" ? ", 170);
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment((-3237), 6, token_CommentType0, "");
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.STAR;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertEquals(0, node0.getSourcePosition());
      assertEquals(304, node1.getType());
      assertNotNull(node1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale locale0 = Locale.US;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("S39*/<", 63);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (Node) null, config0, toolErrorReporter0);
      JSTypeExpression jSTypeExpression0 = jsDocInfoParser0.createJSTypeExpression((Node) null);
      assertNull(jSTypeExpression0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("");
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment((-928), (-2941), token_CommentType0, "");
      Node node0 = Node.newString("", 54, 0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JSTypeExpression jSTypeExpression0 = jsDocInfoParser0.createJSTypeExpression(node0);
      assertFalse(jSTypeExpression0.isOptionalArg());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsDocInfoParser.parseTypeString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("/U_bR8xX{We714G#w]");
      Node node0 = Node.newString("/U_bR8xX{We714G#w]", 1565, 25);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      jsDocTokenStream0.sourceCursor = 877;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseInlineTypeDoc();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("-");
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("-");
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(30, 47, token_CommentType0, "+lh5p");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, (ErrorReporter) null);
      jsDocInfoParser0.parseInlineTypeDoc();
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseInlineTypeDoc();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser$ErrorReporterParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Set<String> set0 = jSDocInfo0.getSuppressions();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      Context context0 = Context.enter();
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser((JsDocTokenStream) null, (Comment) null, (Node) null, config0, errorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.COMMA;
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("-");
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("-");
      jsDocTokenStream0.sourceCursor = (-128);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("-");
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(56, 1323, token_CommentType0, "[JavaPackage ");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser((JsDocTokenStream) null, comment0, node0, config0, toolErrorReporter0);
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("msg.jsdoc.versionmissing", 245, (-3553));
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(245, 1006, token_CommentType0, "0L<W");
      Node node0 = new Node(305, 122, 4);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocInfoParser jsDocInfoParser0 = null;
      try {
        jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, (Config) null, toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("*-");
      assertEquals(302, node0.getType());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Set<String> set0 = jSDocInfo0.getSuppressions();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      Context context0 = Context.enter();
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser((JsDocTokenStream) null, (Comment) null, (Node) null, config0, errorReporter0);
      jsDocInfoParser0.setFileOverviewJSDocInfo(jSDocInfo0);
      JSDocInfo jSDocInfo1 = jsDocInfoParser0.getFileOverviewJSDocInfo();
      assertFalse(jSDocInfo1.isJaggerProvide());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, true);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("00/U*/y]a%", 189);
      Node node0 = new Node(26);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      boolean boolean0 = jsDocInfoParser0.parse();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("{Yp::5aVt", (-1791834798));
      Node node0 = JsDocInfoParser.parseTypeString("B?N");
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Set<String> set0 = jSDocInfo0.getSuppressions();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      JSDocInfo jSDocInfo1 = jsDocInfoParser0.parseInlineTypeDoc();
      assertEquals(304, node0.getType());
      assertNull(jSDocInfo1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("{YrR}.k^G9uK=*1rat");
      assertTrue(node0.hasChildren());
      assertNotNull(node0);
      assertEquals(309, node0.getType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("{+,");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("[iz8hu8%mIe+]}m]9");
      assertNotNull(node0);
      assertTrue(node0.hasOneChild());
      assertEquals(308, node0.getType());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("...", 8);
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(8, 8, token_CommentType0, "...");
      Node node0 = new Node(2);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Set<String> set0 = jSDocInfo0.getSuppressions();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, treeSet0, true, config_LanguageMode0, true);
      Context context0 = Context.enter();
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.LB;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("[lHzs2x3,pXDXL<,;/<");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("K~jjs(1");
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(1664, (-1277), token_CommentType0, "K~jjs(1");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, false);
      ErrorCollector errorCollector0 = new ErrorCollector();
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (Node) null, config0, errorCollector0);
      jsDocInfoParser0.parseInlineTypeDoc();
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseInlineTypeDoc();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("0^|U|t+t)eX");
      assertEquals(3, node0.getChildCount());
      assertEquals(301, node0.getType());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("/U_bR8xX{We714G#w]");
      Node node0 = Node.newString(1, "[JavaPackage ", 20, 2);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.LT;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      JsDocToken jsDocToken1 = JsDocToken.STRING;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken1);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment((-1720713514), (-1720713514), token_CommentType0, "");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("Bj y.", 21, 2);
      Node node0 = Node.newNumber((double) 1, 70, 15);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertNotNull(jSDocInfo0);
      
      jsDocTokenStream0.ungetChar((-1114378703));
      JsDocToken jsDocToken0 = JsDocToken.EOL;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      JsDocToken jsDocToken1 = JsDocToken.STRING;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken1);
      assertNotNull(node1);
      assertEquals(3, node1.getLength());
      assertEquals(86021, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment((-1720713514), (-1720713514), token_CommentType0, "");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("Bj y.", 21, 2);
      Node node0 = Node.newNumber((double) 1, 70, 15);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertNotNull(jSDocInfo0);
      
      JsDocToken jsDocToken0 = JsDocToken.EOL;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      JsDocToken jsDocToken1 = JsDocToken.STRING;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken1);
      assertNotNull(node1);
      assertEquals(86021, node1.getSourcePosition());
      assertEquals(2, node1.getLength());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(6, 6, token_CommentType0, "Too complex regexp");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("-", 325, 23);
      Node node0 = Node.newNumber((double) 0, 1, 8);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertNotNull(jSDocInfo0);
      
      JsDocToken jsDocToken0 = JsDocToken.EOL;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      JsDocToken jsDocToken1 = JsDocToken.STRING;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken1);
      assertNotNull(node1);
      assertEquals(1331223, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment((-1720713514), (-1720713514), token_CommentType0, "");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("Bj y.", 21, 2);
      Node node0 = Node.newNumber((double) 1, 70, 15);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.EOL;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      JsDocToken jsDocToken1 = JsDocToken.STRING;
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("undefined");
      assertEquals(0, node0.getSourcePosition());
      assertNotNull(node0);
      assertEquals(9, node0.getLength());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("null");
      assertNotNull(node0);
      assertEquals(0, node0.getSourcePosition());
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("n!ullwL/[a$#");
      assertEquals(306, node0.getType());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Node node0 = JsDocInfoParser.parseTypeString("!rzej=&^+TysU=");
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("!rzej=&^+TysU=", 1);
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(15, 37, token_CommentType0, "!rzej=&^+TysU=");
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Set<String> set0 = jSDocInfo0.getSuppressions();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.EOC;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      JsDocToken jsDocToken1 = JsDocToken.QMARK;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken1);
      assertEquals(306, node0.getType());
      assertNotNull(node1);
      assertEquals(304, node1.getType());
      assertEquals(0, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("?)#E6NEUc");
      assertEquals(304, node0.getType());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Node node0 = Node.newString("NNB<M3wcBf8");
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("}J4f", (-1690), 49);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.QMARK;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNotNull(node1);
      assertEquals(304, node1.getType());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(35, 35, token_CommentType0, "@hQ8Y5j}");
      Node node0 = new Node(2, 22, 12);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("language version");
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.RB;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      JsDocToken jsDocToken1 = JsDocToken.QMARK;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken1);
      assertNotNull(node1);
      assertEquals(304, node1.getType());
      assertFalse(node1.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      Node node0 = JsDocInfoParser.parseTypeString("argume4{nts");
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("argume4{nts", 1);
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(15, 37, token_CommentType0, "argume4{nts");
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Set<String> set0 = jSDocInfo0.getSuppressions();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.EQUALS;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      JsDocToken jsDocToken1 = JsDocToken.QMARK;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken1);
      assertNotNull(node1);
      assertFalse(node1.hasOneChild());
      assertEquals(304, node1.getType());
      assertEquals(0, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("?,");
      assertNotNull(node0);
      assertEquals(304, node0.getType());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment((-16), (-16), token_CommentType0, "?j*\"zk");
      Node node0 = new Node(1, 4, 26);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, true);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("(", 23);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.LT;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      JsDocToken jsDocToken1 = JsDocToken.STRING;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken1);
      assertNotNull(node1);
      assertEquals((-1), node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(49, 49, token_CommentType0, "./j@cfQ^t");
      Node node0 = new Node(2, 22, 12);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
      JsDocToken jsDocToken0 = JsDocToken.LT;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("Ixi>s7s],$q", (-1613459100));
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      JsDocToken jsDocToken1 = JsDocToken.STRING;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken1);
      assertNotNull(node1);
      assertTrue(node1.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      ErrorCollector errorCollector0 = new ErrorCollector();
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("k$}XnD>nxI=BnCyQ}", 6, 9);
      Node node0 = Node.newNumber((double) 0);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, errorCollector0);
      JsDocToken jsDocToken0 = JsDocToken.LC;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertEquals(24585, node1.getSourcePosition());
      assertEquals(40, node1.getType());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("R");
      Node node0 = Node.newString("R", 1565, 25);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      jsDocInfoParser0.parseInlineTypeDoc();
      JsDocToken jsDocToken0 = JsDocToken.LC;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment((-16), (-16), token_CommentType0, "?j*\"zk");
      Node node0 = new Node(28);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("?j*\"zk", 12, 4);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertNotNull(jSDocInfo0);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("");
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(13, (-675), token_CommentType0, "@9ex<k~q=/fDn");
      Node node0 = Node.newString("[JavaPackage ", 20, 18);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.ANNOTATION;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node1);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("/U_bR8xX{We714G#w]");
      Node node0 = Node.newString("/U_bR8xX{We714G#w]", 1565, 25);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.EQUALS;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node1);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("R");
      Node node0 = Node.newString("R", 1565, 25);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.ELLIPSIS;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node1);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      Node node0 = JsDocInfoParser.parseTypeString("ERqAqJ\"G");
      assertNotNull(node0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.RP;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
      assertEquals(0, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment((-1084572878), 53, token_CommentType0, "-`!q_>Kit.@Du5\"");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("fKZnUR;bN2^x[}j#V]|");
      MockPrintStream mockPrintStream0 = new MockPrintStream("-`!q_>Kit.@Du5\"");
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false, mockPrintStream0);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (Node) null, config0, toolErrorReporter0);
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertNotNull(jSDocInfo0);
      
      JSDocInfo jSDocInfo1 = jsDocInfoParser0.parseInlineTypeDoc();
      assertNull(jSDocInfo1);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("-");
      assertNotNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("-");
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(30, 47, token_CommentType0, "+lh5p");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.PIPE;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      Node node0 = JsDocInfoParser.parseTypeString("language version");
      assertNotNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(" ? ", 170);
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment((-3237), 6, token_CommentType0, "");
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
      assertEquals(0, node0.getSourcePosition());
      assertEquals(8, node0.getLength());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment((-1084572878), 53, token_CommentType0, "-`!q_>Kit.@Du5\"");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("fKZnUR;bN2^x[}j#V]|");
      MockPrintStream mockPrintStream0 = new MockPrintStream("-`!q_>Kit.@Du5\"");
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false, mockPrintStream0);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (Node) null, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.LT;
      Node node0 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node0);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("/U_bR8xX{We714G#w]");
      Node node0 = Node.newString("/U_bR8xX{We714G#w]", 1565, 25);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertNotNull(jSDocInfo0);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("3# \"", (-1756), 33);
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(114, 4, token_CommentType0, "3# \"");
      Node node0 = Node.newString(6, "3# \"");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.GT;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node1);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("");
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment((-2941), (-1084572878), token_CommentType0, "");
      Node node0 = Node.newString("Y'}h<iY@Fa84DR", 23, 310);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.COLON;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node1);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("R");
      Node node0 = Node.newString("R", 1565, 25);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.COMMA;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node1);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Node node0 = JsDocInfoParser.parseTypeString("!rzej=&^+TysU=");
      assertNotNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("!rzej=&^+TysU=", 1);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Set<String> set0 = jSDocInfo0.getSuppressions();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      boolean boolean0 = jsDocInfoParser0.parse();
      assertEquals(306, node0.getType());
      assertEquals(5, node0.getSourcePosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(1, 1, token_CommentType0, "?j*\"zk");
      Node node0 = new Node(28);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("?j*\"zk", 12, 4);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertNotNull(jSDocInfo0);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment((-17), 9, token_CommentType0, "[JavaPackage ");
      Node node0 = Node.newString("/U_bR8xX{We714G#w]", 6, 23);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("[\n", (-1879626576));
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Node node0 = JsDocInfoParser.parseTypeString("!rzej=&^+TysU=");
      assertNotNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("!rzej=&^+TysU=", 1);
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(15, 37, token_CommentType0, "!rzej=&^+TysU=");
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Set<String> set0 = jSDocInfo0.getSuppressions();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.EOC;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      boolean boolean0 = jsDocInfoParser0.parse();
      assertTrue(boolean0);
      assertEquals(306, node0.getType());
      assertEquals(5, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      Node node0 = JsDocInfoParser.parseTypeString("msg.jsdoc.suppress");
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("8W|tp7m", (-1922), (-1070));
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.LC;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNotNull(node1);
      assertEquals(301, node1.getType());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertEquals(0, node0.getSourcePosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("/U_bR8xX{We714G#w]");
      Node node0 = Node.newString("/U_bR8xX{We714G#w]", 1565, 25);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      jsDocInfoParser0.parseInlineTypeDoc();
      jsDocInfoParser0.parseInlineTypeDoc();
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("K~jjs(1");
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(1664, (-1277), token_CommentType0, "msg.jsdoc.lends.incompatible");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      ErrorCollector errorCollector0 = new ErrorCollector();
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (Node) null, config0, errorCollector0);
      jsDocInfoParser0.parseInlineTypeDoc();
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("/U_bR8xX{We714G#w]");
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment((-17), 9, token_CommentType0, "[JavaPackage ");
      Node node0 = Node.newString("/U_bR8xX{We714G#w]", 6, 23);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
      node0.setSourceFileForTesting("[JavaPackage ");
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("R");
      Node node0 = Node.newString("R", 1565, 25);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.ANNOTATION;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node1);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Locale locale0 = Locale.US;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("S39*/<", 63);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (Node) null, config0, toolErrorReporter0);
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.retrieveAndResetParsedJSDocInfo();
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("{/:\"[");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("(I)Z");
      assertEquals(301, node0.getType());
      assertNotNull(node0);
      assertTrue(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("$[y\"$^k'|82j", 2, 2);
      Node node0 = new Node((-1614), 7, 4096);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      Context context0 = new Context();
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, errorReporter0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      jsDocInfoParser0.setFileLevelJsDocBuilder(node_FileLevelJsDocBuilder0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("$[y\"$^k'|82j", 2, 2);
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(2, 2, token_CommentType0, "$[y\"$^k'|82j");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, true);
      Context context0 = Context.enter();
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (Node) null, config0, errorReporter0);
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.getFileOverviewJSDocInfo();
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("D|N+F,jT*B)fd[#aaM9");
      assertEquals(301, node0.getType());
      assertEquals(3, node0.getChildCount());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Locale locale0 = Locale.US;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("S39*/<", 63);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (Node) null, config0, toolErrorReporter0);
      boolean boolean0 = jsDocInfoParser0.hasParsedJSDocInfo();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("function");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Locale locale0 = Locale.US;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("S39*/<", 63);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (Node) null, config0, toolErrorReporter0);
      boolean boolean0 = jsDocInfoParser0.parse();
      boolean boolean1 = jsDocInfoParser0.hasParsedJSDocInfo();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }
}
