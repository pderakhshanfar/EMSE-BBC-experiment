/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 16:22:30 GMT 2021
 */

package com.google.javascript.jscomp.parsing;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.JsDocInfoParser;
import com.google.javascript.jscomp.parsing.JsDocToken;
import com.google.javascript.jscomp.parsing.JsDocTokenStream;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.JSTypeExpression;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ErrorReporter;
import com.google.javascript.rhino.head.Token;
import com.google.javascript.rhino.head.ast.Comment;
import com.google.javascript.rhino.head.ast.ErrorCollector;
import com.google.javascript.rhino.head.tools.ToolErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.nio.charset.Charset;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsDocInfoParser_ESTest extends JsDocInfoParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("U;\n");
      assertNotNull(node0);
      assertEquals(0, node0.getSourcePosition());
      assertEquals(2, node0.getLength());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("fu}ctiHn");
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(" due to lack of privileges, ", 4, (-2301));
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment((-1105949985), 32, token_CommentType0, "fu}ctiHn");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      boolean boolean0 = jsDocInfoParser0.parse();
      assertEquals(0, node0.getSourcePosition());
      assertFalse(boolean0);
      assertEquals(2, node0.getLength());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("*YJ~NI^jR{");
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment((-1719562841), (-1644872263), token_CommentType0, "Q+@M%Cc+Fmt");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Node node0 = JsDocInfoParser.parseTypeString("'qg#Suygn|Cz@dir\"Mk");
      assertNotNull(node0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      jsDocInfoParser0.retrieveAndResetParsedJSDocInfo();
      assertEquals(301, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("{9pj*/Ai");
      assertNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("{9pj*/Ai", 175);
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(16, 57, token_CommentType0, "{9pj*/Ai");
      HashSet<String> hashSet0 = new HashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(hashSet0, hashSet0, true, config_LanguageMode0, true);
      ErrorCollector errorCollector0 = new ErrorCollector();
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      boolean boolean0 = jsDocInfoParser0.parse();
      assertTrue(boolean0);
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.retrieveAndResetParsedJSDocInfo();
      assertNotNull(jSDocInfo0);
      assertEquals("{9pj", jSDocInfo0.getBlockDescription());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("{pj*/Ai", 175);
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      Comment comment0 = new Comment((-1879758547), 873, token_CommentType0, "{pj*/Ai");
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (Node) null, config0, toolErrorReporter0);
      boolean boolean0 = jsDocInfoParser0.parse();
      assertTrue(boolean0);
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.retrieveAndResetParsedJSDocInfo();
      assertEquals("{pj", jSDocInfo0.getBlockDescription());
      assertNotNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment((-1719562841), (-1644872263), token_CommentType0, "Q+@M%Cc+Fmt");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Node node0 = JsDocInfoParser.parseTypeString("'qg#Suygn|Cz@dir\"Mk");
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("'qg#Suygn|Cz@dir\"Mk");
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.LC;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertEquals(301, node1.getType());
      assertNotNull(node1);
      assertFalse(node1.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("zip", 62);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, false);
      ErrorCollector errorCollector0 = new ErrorCollector();
      Node node0 = new Node(1, 1, 98);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, errorCollector0);
      JsDocToken jsDocToken0 = JsDocToken.QMARK;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertEquals(2, node1.getCharno());
      assertEquals(304, node1.getType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("7+");
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(1413, 2061, token_CommentType0, "7+");
      Node node0 = Node.newString("7+");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, false);
      ErrorCollector errorCollector0 = new ErrorCollector();
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      jsDocInfoParser0.setFileOverviewJSDocInfo(jSDocInfo0);
      JSDocInfo jSDocInfo1 = jsDocInfoParser0.getFileOverviewJSDocInfo();
      assertFalse(jSDocInfo1.isHidden());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("7+");
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(1413, 2061, token_CommentType0, "7+");
      Node node0 = Node.newString("7+");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, false);
      ErrorCollector errorCollector0 = new ErrorCollector();
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      Comment comment1 = new Comment((-3923), 55, token_CommentType0, "eval");
      JsDocInfoParser jsDocInfoParser1 = new JsDocInfoParser(jsDocTokenStream0, comment1, node0, config0, errorCollector0);
      JSDocInfo jSDocInfo0 = jsDocInfoParser1.parseInlineTypeDoc();
      jsDocInfoParser0.setFileOverviewJSDocInfo(jSDocInfo0);
      JSDocInfo jSDocInfo1 = jsDocInfoParser0.getFileOverviewJSDocInfo();
      assertFalse(jSDocInfo1.isWizaction());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("arguments", (-46), 1365);
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment((-1146574634), 263, token_CommentType0, "*_J~NI^j?{");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      Node node0 = new Node(1374);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jsDocInfoParser0.setFileOverviewJSDocInfo(jSDocInfo0);
      JSDocInfo jSDocInfo1 = jsDocInfoParser0.getFileOverviewJSDocInfo();
      assertFalse(jSDocInfo1.isImplicitCast());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("{9pj/Ai", 12, 10);
      Locale locale0 = Locale.ENGLISH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      HashSet<String> hashSet0 = new HashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, hashSet0, false, config_LanguageMode0, false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (Node) null, config0, (ErrorReporter) null);
      JSTypeExpression jSTypeExpression0 = jsDocInfoParser0.createJSTypeExpression((Node) null);
      assertNull(jSTypeExpression0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("*YJ~NI^jR{");
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment((-1170684521), (-1170684521), token_CommentType0, "*YJ~NI^jR{");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Node node0 = JsDocInfoParser.parseTypeString("*YJ~NI^jR{");
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JSTypeExpression jSTypeExpression0 = jsDocInfoParser0.createJSTypeExpression(node0);
      assertEquals(302, node0.getType());
      assertNotNull(jSTypeExpression0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsDocInfoParser.parseTypeString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("=Y", 53);
      Locale locale0 = new Locale("undefined");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, true);
      ErrorCollector errorCollector0 = new ErrorCollector();
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (Node) null, config0, errorCollector0);
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseInlineTypeDoc();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("Namespace");
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Node node0 = Node.newString((-325630446), "Namespace");
      jsDocTokenStream0.sourceCursor = 2788;
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseInlineTypeDoc();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(0, 0, token_CommentType0, "'s*lhU(gJ$![");
      Node node0 = new Node((-401));
      Locale locale0 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser((JsDocTokenStream) null, comment0, node0, config0, (ErrorReporter) null);
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseInlineTypeDoc();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("?}");
      Node node0 = JsDocInfoParser.parseTypeString("?}");
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Set<String> set0 = jSDocInfo0.getSuppressions();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      jsDocTokenStream0.sourceCursor = 12;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      ErrorCollector errorCollector0 = new ErrorCollector();
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, errorCollector0);
      JsDocToken jsDocToken0 = JsDocToken.BANG;
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("Oq/^'cV!Ucrh=");
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("Oq/^'cV!Ucrh=");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(11, 31, token_CommentType0, "language version");
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, (ErrorReporter) null);
      JsDocToken jsDocToken0 = JsDocToken.QMARK;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser$ErrorReporterParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("*_J~NI^j?{", 52, (-857));
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(52, (-857), token_CommentType0, "*_J~NI^j?{");
      jsDocTokenStream0.sourceCursor = (-966);
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Node node0 = new Node(0);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(")");
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment((-1611522464), 1, token_CommentType0, "new");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (Node) null, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.LT;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      JsDocToken jsDocToken1 = JsDocToken.STRING;
      Node node0 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken1);
      assertNotNull(node0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      Node node0 = new Node((-48), (-48), (-548));
      ErrorCollector errorCollector0 = new ErrorCollector();
      JsDocToken jsDocToken0 = JsDocToken.LC;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("\n");
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, errorCollector0);
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("*YJ~NI^jR{");
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment((-1170684521), (-1170684521), token_CommentType0, "*YJ~NI^jR{");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Node node0 = JsDocInfoParser.parseTypeString("*YJ~NI^jR{");
      assertNotNull(node0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.EOL;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      boolean boolean0 = jsDocInfoParser0.parse();
      assertEquals(302, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("{j:UrbED9*c)x-y");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("{r`,");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("{Sf$y}+iVLvyS)i");
      assertNotNull(node0);
      assertEquals(309, node0.getType());
      assertTrue(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("gR`wUZW&G");
      assertNotNull(node0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("n-Yv}7ykL( ca");
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(10, (-633), token_CommentType0, "language");
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertNotNull(jSDocInfo0);
      
      JsDocToken jsDocToken0 = JsDocToken.LB;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertEquals(0, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("[ _GE,~.");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("fu}ctiHn");
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("(I)Ljava/lang/Integer;", 46);
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(40, 29, token_CommentType0, "(I)Ljava/lang/Integer;");
      Locale locale0 = new Locale("fu}ctiHn");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      ErrorCollector errorCollector0 = new ErrorCollector();
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertNotNull(jSDocInfo0);
      assertEquals(0, node0.getSourcePosition());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("llkO");
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("u*\n", 8, 1);
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(51, 54, token_CommentType0, "llkO");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.LT;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      JsDocToken jsDocToken1 = JsDocToken.STRING;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken1);
      assertEquals(0, node0.getSourcePosition());
      assertNull(node1);
      assertEquals(0, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("undefined");
      assertNotNull(node0);
      assertEquals(0, node0.getSourcePosition());
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("null");
      assertEquals(0, node0.getSourcePosition());
      assertNotNull(node0);
      assertEquals(4, node0.getLength());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("function");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("[k_&]-}|2");
      assertNotNull(node0);
      assertEquals(308, node0.getType());
      assertTrue(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("`#|aq\"-!,Y1pBbF}K");
      assertEquals(3, node0.getChildCount());
      assertNotNull(node0);
      assertEquals(301, node0.getType());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("llkO");
      assertNotNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("u:=Z\n", 1);
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(51, 54, token_CommentType0, "llkO");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(47);
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.GT;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      JsDocToken jsDocToken1 = JsDocToken.QMARK;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken1);
      assertEquals(304, node1.getType());
      assertEquals(0, node0.getSourcePosition());
      assertNotNull(node1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(")");
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (Node) null, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.PIPE;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      JsDocToken jsDocToken1 = JsDocToken.QMARK;
      Node node0 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken1);
      assertEquals((-1), node0.getLineno());
      assertEquals(304, node0.getType());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Node node0 = Node.newString("*YJ~NI^jR{");
      ErrorCollector errorCollector0 = new ErrorCollector();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Locale locale0 = Locale.KOREA;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("]5|sgj S$u[CaO'(>");
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, errorCollector0);
      JsDocToken jsDocToken0 = JsDocToken.QMARK;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertEquals(304, node1.getType());
      assertEquals(1, node1.getSourcePosition());
      
      Node node2 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertEquals(304, node2.getType());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("vyQ=@b", (-32));
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment((-32), (-1), token_CommentType0, "vyQ=@b");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      jsDocTokenStream0.getJsDocToken();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (Node) null, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.QMARK;
      Node node0 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertEquals(304, node0.getType());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("llkO");
      assertNotNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("u*\n", 1);
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(51, 54, token_CommentType0, "llkO");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      jsDocInfoParser0.parse();
      JsDocToken jsDocToken0 = JsDocToken.LT;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      JsDocToken jsDocToken1 = JsDocToken.STRING;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken1);
      assertNotNull(node1);
      assertEquals(4098, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("nX+nDXv>O<7Et=G");
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("nX+nDXv>O<7Et=G");
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(51, 54, token_CommentType0, "nX+nDXv>O<7Et=G");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.LT;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      JsDocToken jsDocToken1 = JsDocToken.STRING;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken1);
      assertNotNull(node1);
      assertEquals(1, node1.getChildCount());
      assertEquals(0, node0.getSourcePosition());
      assertEquals((-1), node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("fu}ctiHn");
      assertNotNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("fu}ctiHn");
      Locale locale0 = new Locale("fu}ctiHn");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      ErrorCollector errorCollector0 = new ErrorCollector();
      JsDocToken jsDocToken0 = JsDocToken.LC;
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, errorCollector0);
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertEquals(40, node1.getType());
      assertEquals(0, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("*YJ~NI^jR{");
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment((-1719562841), (-1644872263), token_CommentType0, "Q+@M%Cc+Fmt");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Node node0 = JsDocInfoParser.parseTypeString("'qg#Suygn|Cz@dir\"Mk");
      assertNotNull(node0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.LC;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNotNull(node1);
      assertEquals(301, node0.getType());
      assertFalse(node0.hasOneChild());
      assertEquals(302, node1.getType());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("fu}ctiHn");
      assertNotNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(" ? ", 52, (-1884744333));
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment((-1842170945), 1, token_CommentType0, "fu}ctiHn");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      boolean boolean0 = jsDocInfoParser0.parse();
      assertEquals(0, node0.getSourcePosition());
      assertFalse(boolean0);
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("*_J~NI^j?{", 52, 26);
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(2763, 83, token_CommentType0, "msg.bad.var");
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Node node0 = new Node(18);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("fu}ctiHn");
      assertNotNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("/*\n", 20, 31);
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(40, 218, token_CommentType0, "fu}ctiHn");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      jsDocInfoParser0.parse();
      assertEquals(0, node0.getSourcePosition());
      assertEquals(2, node0.getLength());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("=)", (-1884744333), (-1360));
      Comment comment0 = new Comment(5020, 5020, token_CommentType0, "=)");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      Node node0 = Node.newNumber(10.959757766094578);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(")", (-1884744333), (-1373));
      Comment comment0 = new Comment(5020, 5020, token_CommentType0, "com.google.javascript.rhino.head.EcmaError");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      Node node0 = Node.newString(")");
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("gR`wUZW&G");
      assertNotNull(node0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("n-Yv}7ykL( ca");
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(10, (-633), token_CommentType0, "language");
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertNotNull(jSDocInfo0);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
      assertEquals(0, node0.getSourcePosition());
      assertEquals(9, node0.getLength());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("?a53vn6zk]gB");
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(1780, 2, token_CommentType0, "?a53vn6zk]gB");
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((com.google.javascript.rhino.ErrorReporter) null, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertNotNull(jSDocInfo0);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(52, (-857), token_CommentType0, "");
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Node node0 = new Node(8);
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, false);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("|", 34, 6);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Node node0 = Node.newString("{pj*/Ai");
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("{pj*/Ai", 43);
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(1036, (-14), token_CommentType0, (String) null);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.LT;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node1);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("fu}ctiHn");
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("(I)Ljava/lang/Integer;", 46);
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(40, 29, token_CommentType0, "(I)Ljava/lang/Integer;");
      Locale locale0 = new Locale("fu}ctiHn");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      ErrorCollector errorCollector0 = new ErrorCollector();
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("{9pj*/Ai");
      assertNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("{9pj*/Ai", 175);
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(16, 57, token_CommentType0, "{9pj*/Ai");
      HashSet<String> hashSet0 = new HashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(hashSet0, hashSet0, true, config_LanguageMode0, true);
      ErrorCollector errorCollector0 = new ErrorCollector();
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      boolean boolean0 = jsDocInfoParser0.parse();
      boolean boolean1 = jsDocInfoParser0.hasParsedJSDocInfo();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      Node node0 = new Node(12);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("[+L", 50, 977);
      Comment comment0 = new Comment(44, 37, token_CommentType0, (String) null);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, (ErrorReporter) null);
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser$ErrorReporterParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(813, 813, token_CommentType0, ":`D$Dbq");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(":`D$Dbq", 1, 825);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (Node) null, config0, (ErrorReporter) null);
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser$ErrorReporterParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment((-2527), (-2527), token_CommentType0, ":`D$Dbq");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Node node0 = new Node(303);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("!", 150, 124);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("*_J~NI^j?{", 52, 26);
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(2763, 83, token_CommentType0, "msg.bad.var");
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Node node0 = new Node(18);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.ANNOTATION;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node1);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("U#\n");
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("U#\n", 36);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
      ErrorCollector errorCollector0 = new ErrorCollector();
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, errorCollector0);
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Node node0 = Node.newString("{pj*/Ai");
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("{pj*/Ai", 12, 1);
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(31, 2, token_CommentType0, "{pj*/Ai");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.LC;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node1);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment((-1146574634), 263, token_CommentType0, "*_J~NI^j?{");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      Node node0 = new Node(1374);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("@b(E", (-907), 15);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("{9pj*/Ai", 175);
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(31, 57, token_CommentType0, "{9pj*/Ai");
      HashSet<String> hashSet0 = new HashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(hashSet0, (Set<String>) null, true, config_LanguageMode0, true);
      Context context0 = Context.enter();
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (Node) null, config0, errorReporter0);
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("*_J~NI^j?{", 52, (-857));
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(52, (-857), token_CommentType0, "*_J~NI^j?{");
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Node node0 = new Node(11);
      node0.setSourceFileForTesting("com.google.javascript.jscomp.parsing.JsDocInfoParser$1");
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("?,\"m]?3C?6cm");
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("?,\"m]?3C?6cm", 29, 50);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      ErrorCollector errorCollector0 = new ErrorCollector();
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, errorCollector0);
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("I&fu?ctiHn");
      assertNotNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("/*\n", 1);
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(51, 54, token_CommentType0, "I&fu?ctiHn");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      jsDocInfoParser0.setFileOverviewJSDocInfo(jSDocInfo0);
      JSDocInfo jSDocInfo1 = jsDocInfoParser0.getFileOverviewJSDocInfo();
      assertEquals(304, node0.getType());
      assertNotNull(jSDocInfo1);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      Node node0 = new Node((-48), (-48), (-548));
      ErrorCollector errorCollector0 = new ErrorCollector();
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("\n");
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, errorCollector0);
      jsDocInfoParser0.setFileLevelJsDocBuilder((Node.FileLevelJsDocBuilder) null);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("I&fu?ctiHn");
      assertNotNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("/*\n", 1);
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(51, 54, token_CommentType0, "I&fu?ctiHn");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      jsDocInfoParser0.getFileOverviewJSDocInfo();
      assertEquals(304, node0.getType());
      assertEquals(1, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("{9pj*/Ai");
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("{9pj*/Ai", 175);
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(16, 57, token_CommentType0, "{9pj*/Ai");
      HashSet<String> hashSet0 = new HashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(hashSet0, hashSet0, true, config_LanguageMode0, true);
      ErrorCollector errorCollector0 = new ErrorCollector();
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      boolean boolean0 = jsDocInfoParser0.hasParsedJSDocInfo();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("?{r:");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("{pj*/Ai");
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(31, 2, token_CommentType0, "{pj*/Ai");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (Node) null, config0, toolErrorReporter0);
      jsDocInfoParser0.parse();
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.retrieveAndResetParsedJSDocInfo();
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
  }
}
